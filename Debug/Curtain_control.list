
Curtain_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bd0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000037c  08007ce0  08007ce0  00017ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800805c  0800805c  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  0800805c  0800805c  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800805c  0800805c  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800805c  0800805c  0001805c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008060  08008060  00018060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08008064  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d34  20000088  080080ec  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001dbc  080080ec  00021dbc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bdd6  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003cad  00000000  00000000  0003be87  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001630  00000000  00000000  0003fb38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001458  00000000  00000000  00041168  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018765  00000000  00000000  000425c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001344b  00000000  00000000  0005ad25  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00081ef4  00000000  00000000  0006e170  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f0064  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006250  00000000  00000000  000f00e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000088 	.word	0x20000088
 800012c:	00000000 	.word	0x00000000
 8000130:	08007cc8 	.word	0x08007cc8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000008c 	.word	0x2000008c
 800014c:	08007cc8 	.word	0x08007cc8

08000150 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b084      	sub	sp, #16
 8000154:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000156:	1d3b      	adds	r3, r7, #4
 8000158:	2200      	movs	r2, #0
 800015a:	601a      	str	r2, [r3, #0]
 800015c:	605a      	str	r2, [r3, #4]
 800015e:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000160:	4b20      	ldr	r3, [pc, #128]	; (80001e4 <MX_ADC1_Init+0x94>)
 8000162:	4a21      	ldr	r2, [pc, #132]	; (80001e8 <MX_ADC1_Init+0x98>)
 8000164:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000166:	4b1f      	ldr	r3, [pc, #124]	; (80001e4 <MX_ADC1_Init+0x94>)
 8000168:	f44f 7280 	mov.w	r2, #256	; 0x100
 800016c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800016e:	4b1d      	ldr	r3, [pc, #116]	; (80001e4 <MX_ADC1_Init+0x94>)
 8000170:	2201      	movs	r2, #1
 8000172:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000174:	4b1b      	ldr	r3, [pc, #108]	; (80001e4 <MX_ADC1_Init+0x94>)
 8000176:	2200      	movs	r2, #0
 8000178:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800017a:	4b1a      	ldr	r3, [pc, #104]	; (80001e4 <MX_ADC1_Init+0x94>)
 800017c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000180:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000182:	4b18      	ldr	r3, [pc, #96]	; (80001e4 <MX_ADC1_Init+0x94>)
 8000184:	2200      	movs	r2, #0
 8000186:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000188:	4b16      	ldr	r3, [pc, #88]	; (80001e4 <MX_ADC1_Init+0x94>)
 800018a:	2202      	movs	r2, #2
 800018c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800018e:	4815      	ldr	r0, [pc, #84]	; (80001e4 <MX_ADC1_Init+0x94>)
 8000190:	f001 faac 	bl	80016ec <HAL_ADC_Init>
 8000194:	4603      	mov	r3, r0
 8000196:	2b00      	cmp	r3, #0
 8000198:	d001      	beq.n	800019e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800019a:	f000 fef6 	bl	8000f8a <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800019e:	2307      	movs	r3, #7
 80001a0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80001a2:	2301      	movs	r3, #1
 80001a4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80001a6:	2300      	movs	r3, #0
 80001a8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001aa:	1d3b      	adds	r3, r7, #4
 80001ac:	4619      	mov	r1, r3
 80001ae:	480d      	ldr	r0, [pc, #52]	; (80001e4 <MX_ADC1_Init+0x94>)
 80001b0:	f001 fc6e 	bl	8001a90 <HAL_ADC_ConfigChannel>
 80001b4:	4603      	mov	r3, r0
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d001      	beq.n	80001be <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80001ba:	f000 fee6 	bl	8000f8a <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80001be:	2308      	movs	r3, #8
 80001c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80001c2:	2302      	movs	r3, #2
 80001c4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001c6:	1d3b      	adds	r3, r7, #4
 80001c8:	4619      	mov	r1, r3
 80001ca:	4806      	ldr	r0, [pc, #24]	; (80001e4 <MX_ADC1_Init+0x94>)
 80001cc:	f001 fc60 	bl	8001a90 <HAL_ADC_ConfigChannel>
 80001d0:	4603      	mov	r3, r0
 80001d2:	2b00      	cmp	r3, #0
 80001d4:	d001      	beq.n	80001da <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80001d6:	f000 fed8 	bl	8000f8a <Error_Handler>
  }

}
 80001da:	bf00      	nop
 80001dc:	3710      	adds	r7, #16
 80001de:	46bd      	mov	sp, r7
 80001e0:	bd80      	pop	{r7, pc}
 80001e2:	bf00      	nop
 80001e4:	200019e8 	.word	0x200019e8
 80001e8:	40012400 	.word	0x40012400

080001ec <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b08a      	sub	sp, #40	; 0x28
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001f4:	f107 0318 	add.w	r3, r7, #24
 80001f8:	2200      	movs	r2, #0
 80001fa:	601a      	str	r2, [r3, #0]
 80001fc:	605a      	str	r2, [r3, #4]
 80001fe:	609a      	str	r2, [r3, #8]
 8000200:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	4a33      	ldr	r2, [pc, #204]	; (80002d4 <HAL_ADC_MspInit+0xe8>)
 8000208:	4293      	cmp	r3, r2
 800020a:	d15f      	bne.n	80002cc <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800020c:	4b32      	ldr	r3, [pc, #200]	; (80002d8 <HAL_ADC_MspInit+0xec>)
 800020e:	699b      	ldr	r3, [r3, #24]
 8000210:	4a31      	ldr	r2, [pc, #196]	; (80002d8 <HAL_ADC_MspInit+0xec>)
 8000212:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000216:	6193      	str	r3, [r2, #24]
 8000218:	4b2f      	ldr	r3, [pc, #188]	; (80002d8 <HAL_ADC_MspInit+0xec>)
 800021a:	699b      	ldr	r3, [r3, #24]
 800021c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000220:	617b      	str	r3, [r7, #20]
 8000222:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000224:	4b2c      	ldr	r3, [pc, #176]	; (80002d8 <HAL_ADC_MspInit+0xec>)
 8000226:	699b      	ldr	r3, [r3, #24]
 8000228:	4a2b      	ldr	r2, [pc, #172]	; (80002d8 <HAL_ADC_MspInit+0xec>)
 800022a:	f043 0304 	orr.w	r3, r3, #4
 800022e:	6193      	str	r3, [r2, #24]
 8000230:	4b29      	ldr	r3, [pc, #164]	; (80002d8 <HAL_ADC_MspInit+0xec>)
 8000232:	699b      	ldr	r3, [r3, #24]
 8000234:	f003 0304 	and.w	r3, r3, #4
 8000238:	613b      	str	r3, [r7, #16]
 800023a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800023c:	4b26      	ldr	r3, [pc, #152]	; (80002d8 <HAL_ADC_MspInit+0xec>)
 800023e:	699b      	ldr	r3, [r3, #24]
 8000240:	4a25      	ldr	r2, [pc, #148]	; (80002d8 <HAL_ADC_MspInit+0xec>)
 8000242:	f043 0308 	orr.w	r3, r3, #8
 8000246:	6193      	str	r3, [r2, #24]
 8000248:	4b23      	ldr	r3, [pc, #140]	; (80002d8 <HAL_ADC_MspInit+0xec>)
 800024a:	699b      	ldr	r3, [r3, #24]
 800024c:	f003 0308 	and.w	r3, r3, #8
 8000250:	60fb      	str	r3, [r7, #12]
 8000252:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = ADC1_Pin;
 8000254:	2380      	movs	r3, #128	; 0x80
 8000256:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000258:	2303      	movs	r3, #3
 800025a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_GPIO_Port, &GPIO_InitStruct);
 800025c:	f107 0318 	add.w	r3, r7, #24
 8000260:	4619      	mov	r1, r3
 8000262:	481e      	ldr	r0, [pc, #120]	; (80002dc <HAL_ADC_MspInit+0xf0>)
 8000264:	f002 f970 	bl	8002548 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC2_Pin;
 8000268:	2301      	movs	r3, #1
 800026a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800026c:	2303      	movs	r3, #3
 800026e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC2_GPIO_Port, &GPIO_InitStruct);
 8000270:	f107 0318 	add.w	r3, r7, #24
 8000274:	4619      	mov	r1, r3
 8000276:	481a      	ldr	r0, [pc, #104]	; (80002e0 <HAL_ADC_MspInit+0xf4>)
 8000278:	f002 f966 	bl	8002548 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800027c:	4b19      	ldr	r3, [pc, #100]	; (80002e4 <HAL_ADC_MspInit+0xf8>)
 800027e:	4a1a      	ldr	r2, [pc, #104]	; (80002e8 <HAL_ADC_MspInit+0xfc>)
 8000280:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000282:	4b18      	ldr	r3, [pc, #96]	; (80002e4 <HAL_ADC_MspInit+0xf8>)
 8000284:	2200      	movs	r2, #0
 8000286:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000288:	4b16      	ldr	r3, [pc, #88]	; (80002e4 <HAL_ADC_MspInit+0xf8>)
 800028a:	2200      	movs	r2, #0
 800028c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800028e:	4b15      	ldr	r3, [pc, #84]	; (80002e4 <HAL_ADC_MspInit+0xf8>)
 8000290:	2280      	movs	r2, #128	; 0x80
 8000292:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000294:	4b13      	ldr	r3, [pc, #76]	; (80002e4 <HAL_ADC_MspInit+0xf8>)
 8000296:	f44f 7200 	mov.w	r2, #512	; 0x200
 800029a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800029c:	4b11      	ldr	r3, [pc, #68]	; (80002e4 <HAL_ADC_MspInit+0xf8>)
 800029e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80002a2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80002a4:	4b0f      	ldr	r3, [pc, #60]	; (80002e4 <HAL_ADC_MspInit+0xf8>)
 80002a6:	2220      	movs	r2, #32
 80002a8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80002aa:	4b0e      	ldr	r3, [pc, #56]	; (80002e4 <HAL_ADC_MspInit+0xf8>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80002b0:	480c      	ldr	r0, [pc, #48]	; (80002e4 <HAL_ADC_MspInit+0xf8>)
 80002b2:	f001 fee5 	bl	8002080 <HAL_DMA_Init>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d001      	beq.n	80002c0 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 80002bc:	f000 fe65 	bl	8000f8a <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	4a08      	ldr	r2, [pc, #32]	; (80002e4 <HAL_ADC_MspInit+0xf8>)
 80002c4:	621a      	str	r2, [r3, #32]
 80002c6:	4a07      	ldr	r2, [pc, #28]	; (80002e4 <HAL_ADC_MspInit+0xf8>)
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80002cc:	bf00      	nop
 80002ce:	3728      	adds	r7, #40	; 0x28
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	40012400 	.word	0x40012400
 80002d8:	40021000 	.word	0x40021000
 80002dc:	40010800 	.word	0x40010800
 80002e0:	40010c00 	.word	0x40010c00
 80002e4:	20001a18 	.word	0x20001a18
 80002e8:	40020008 	.word	0x40020008

080002ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b082      	sub	sp, #8
 80002f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002f2:	4b14      	ldr	r3, [pc, #80]	; (8000344 <MX_DMA_Init+0x58>)
 80002f4:	695b      	ldr	r3, [r3, #20]
 80002f6:	4a13      	ldr	r2, [pc, #76]	; (8000344 <MX_DMA_Init+0x58>)
 80002f8:	f043 0301 	orr.w	r3, r3, #1
 80002fc:	6153      	str	r3, [r2, #20]
 80002fe:	4b11      	ldr	r3, [pc, #68]	; (8000344 <MX_DMA_Init+0x58>)
 8000300:	695b      	ldr	r3, [r3, #20]
 8000302:	f003 0301 	and.w	r3, r3, #1
 8000306:	607b      	str	r3, [r7, #4]
 8000308:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800030a:	2200      	movs	r2, #0
 800030c:	2100      	movs	r1, #0
 800030e:	200b      	movs	r0, #11
 8000310:	f001 fe7f 	bl	8002012 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000314:	200b      	movs	r0, #11
 8000316:	f001 fe98 	bl	800204a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800031a:	2200      	movs	r2, #0
 800031c:	2100      	movs	r1, #0
 800031e:	2010      	movs	r0, #16
 8000320:	f001 fe77 	bl	8002012 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000324:	2010      	movs	r0, #16
 8000326:	f001 fe90 	bl	800204a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800032a:	2200      	movs	r2, #0
 800032c:	2100      	movs	r1, #0
 800032e:	2011      	movs	r0, #17
 8000330:	f001 fe6f 	bl	8002012 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000334:	2011      	movs	r0, #17
 8000336:	f001 fe88 	bl	800204a <HAL_NVIC_EnableIRQ>

}
 800033a:	bf00      	nop
 800033c:	3708      	adds	r7, #8
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	40021000 	.word	0x40021000

08000348 <Usart2DmaPrintf>:
	uint32_t temp = *(__IO uint32_t*) (addr);

	Usart2DmaPrintf("addr:0x%x, data:0x%x\r\n", addr, temp);
}

void Usart2DmaPrintf(const char *format, ...) {
 8000348:	b40f      	push	{r0, r1, r2, r3}
 800034a:	b580      	push	{r7, lr}
 800034c:	b082      	sub	sp, #8
 800034e:	af00      	add	r7, sp, #0
	uint16_t len;
	va_list args;
	va_start(args, format);
 8000350:	f107 0314 	add.w	r3, r7, #20
 8000354:	603b      	str	r3, [r7, #0]
	len = vsnprintf((char*) UartTxBuf, sizeof(UartTxBuf) + 1, (char*) format,
 8000356:	683b      	ldr	r3, [r7, #0]
 8000358:	693a      	ldr	r2, [r7, #16]
 800035a:	2165      	movs	r1, #101	; 0x65
 800035c:	480a      	ldr	r0, [pc, #40]	; (8000388 <Usart2DmaPrintf+0x40>)
 800035e:	f006 fd73 	bl	8006e48 <vsniprintf>
 8000362:	4603      	mov	r3, r0
 8000364:	80fb      	strh	r3, [r7, #6]
			args);
	va_end(args);
	HAL_UART_Transmit_DMA(&huart2, UartTxBuf, len);
 8000366:	88fb      	ldrh	r3, [r7, #6]
 8000368:	461a      	mov	r2, r3
 800036a:	4907      	ldr	r1, [pc, #28]	; (8000388 <Usart2DmaPrintf+0x40>)
 800036c:	4807      	ldr	r0, [pc, #28]	; (800038c <Usart2DmaPrintf+0x44>)
 800036e:	f003 fb23 	bl	80039b8 <HAL_UART_Transmit_DMA>
	osDelay(10); //避免資料穿插
 8000372:	200a      	movs	r0, #10
 8000374:	f004 f916 	bl	80045a4 <osDelay>

}
 8000378:	bf00      	nop
 800037a:	3708      	adds	r7, #8
 800037c:	46bd      	mov	sp, r7
 800037e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000382:	b004      	add	sp, #16
 8000384:	4770      	bx	lr
 8000386:	bf00      	nop
 8000388:	20001c08 	.word	0x20001c08
 800038c:	20001d34 	.word	0x20001d34

08000390 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 800039a:	88fb      	ldrh	r3, [r7, #6]
 800039c:	2b20      	cmp	r3, #32
 800039e:	d014      	beq.n	80003ca <HAL_GPIO_EXTI_Callback+0x3a>
 80003a0:	2b20      	cmp	r3, #32
 80003a2:	dc02      	bgt.n	80003aa <HAL_GPIO_EXTI_Callback+0x1a>
 80003a4:	2b10      	cmp	r3, #16
 80003a6:	d005      	beq.n	80003b4 <HAL_GPIO_EXTI_Callback+0x24>
	case GPIO_PIN_7:
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); //PC13 Led
		buttom_flag[4]++;
		break;
	}
}
 80003a8:	e030      	b.n	800040c <HAL_GPIO_EXTI_Callback+0x7c>
	switch (GPIO_Pin) {
 80003aa:	2b40      	cmp	r3, #64	; 0x40
 80003ac:	d018      	beq.n	80003e0 <HAL_GPIO_EXTI_Callback+0x50>
 80003ae:	2b80      	cmp	r3, #128	; 0x80
 80003b0:	d021      	beq.n	80003f6 <HAL_GPIO_EXTI_Callback+0x66>
}
 80003b2:	e02b      	b.n	800040c <HAL_GPIO_EXTI_Callback+0x7c>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); //PC13 Led
 80003b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003b8:	4816      	ldr	r0, [pc, #88]	; (8000414 <HAL_GPIO_EXTI_Callback+0x84>)
 80003ba:	f002 fa37 	bl	800282c <HAL_GPIO_TogglePin>
		buttom_flag[1]++;
 80003be:	4b16      	ldr	r3, [pc, #88]	; (8000418 <HAL_GPIO_EXTI_Callback+0x88>)
 80003c0:	685b      	ldr	r3, [r3, #4]
 80003c2:	3301      	adds	r3, #1
 80003c4:	4a14      	ldr	r2, [pc, #80]	; (8000418 <HAL_GPIO_EXTI_Callback+0x88>)
 80003c6:	6053      	str	r3, [r2, #4]
		break;
 80003c8:	e020      	b.n	800040c <HAL_GPIO_EXTI_Callback+0x7c>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); //PC13 Led
 80003ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003ce:	4811      	ldr	r0, [pc, #68]	; (8000414 <HAL_GPIO_EXTI_Callback+0x84>)
 80003d0:	f002 fa2c 	bl	800282c <HAL_GPIO_TogglePin>
		buttom_flag[2]++;
 80003d4:	4b10      	ldr	r3, [pc, #64]	; (8000418 <HAL_GPIO_EXTI_Callback+0x88>)
 80003d6:	689b      	ldr	r3, [r3, #8]
 80003d8:	3301      	adds	r3, #1
 80003da:	4a0f      	ldr	r2, [pc, #60]	; (8000418 <HAL_GPIO_EXTI_Callback+0x88>)
 80003dc:	6093      	str	r3, [r2, #8]
		break;
 80003de:	e015      	b.n	800040c <HAL_GPIO_EXTI_Callback+0x7c>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); //PC13 Led
 80003e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003e4:	480b      	ldr	r0, [pc, #44]	; (8000414 <HAL_GPIO_EXTI_Callback+0x84>)
 80003e6:	f002 fa21 	bl	800282c <HAL_GPIO_TogglePin>
		buttom_flag[3]++;
 80003ea:	4b0b      	ldr	r3, [pc, #44]	; (8000418 <HAL_GPIO_EXTI_Callback+0x88>)
 80003ec:	68db      	ldr	r3, [r3, #12]
 80003ee:	3301      	adds	r3, #1
 80003f0:	4a09      	ldr	r2, [pc, #36]	; (8000418 <HAL_GPIO_EXTI_Callback+0x88>)
 80003f2:	60d3      	str	r3, [r2, #12]
		break;
 80003f4:	e00a      	b.n	800040c <HAL_GPIO_EXTI_Callback+0x7c>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); //PC13 Led
 80003f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003fa:	4806      	ldr	r0, [pc, #24]	; (8000414 <HAL_GPIO_EXTI_Callback+0x84>)
 80003fc:	f002 fa16 	bl	800282c <HAL_GPIO_TogglePin>
		buttom_flag[4]++;
 8000400:	4b05      	ldr	r3, [pc, #20]	; (8000418 <HAL_GPIO_EXTI_Callback+0x88>)
 8000402:	691b      	ldr	r3, [r3, #16]
 8000404:	3301      	adds	r3, #1
 8000406:	4a04      	ldr	r2, [pc, #16]	; (8000418 <HAL_GPIO_EXTI_Callback+0x88>)
 8000408:	6113      	str	r3, [r2, #16]
		break;
 800040a:	bf00      	nop
}
 800040c:	bf00      	nop
 800040e:	3708      	adds	r7, #8
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	40011000 	.word	0x40011000
 8000418:	200000b0 	.word	0x200000b0

0800041c <clean_buttom_flag>:

void clean_buttom_flag(void) {
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
	//Usart2DmaPrintf("clena\n");
	for (i = 0; i <= 5; i++) { //clean flag
 8000420:	4b0b      	ldr	r3, [pc, #44]	; (8000450 <clean_buttom_flag+0x34>)
 8000422:	2200      	movs	r2, #0
 8000424:	601a      	str	r2, [r3, #0]
 8000426:	e00d      	b.n	8000444 <clean_buttom_flag+0x28>
		buttom_flag[i] = 0;
 8000428:	4b09      	ldr	r3, [pc, #36]	; (8000450 <clean_buttom_flag+0x34>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4a09      	ldr	r2, [pc, #36]	; (8000454 <clean_buttom_flag+0x38>)
 800042e:	2100      	movs	r1, #0
 8000430:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		osDelay(1);
 8000434:	2001      	movs	r0, #1
 8000436:	f004 f8b5 	bl	80045a4 <osDelay>
	for (i = 0; i <= 5; i++) { //clean flag
 800043a:	4b05      	ldr	r3, [pc, #20]	; (8000450 <clean_buttom_flag+0x34>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	3301      	adds	r3, #1
 8000440:	4a03      	ldr	r2, [pc, #12]	; (8000450 <clean_buttom_flag+0x34>)
 8000442:	6013      	str	r3, [r2, #0]
 8000444:	4b02      	ldr	r3, [pc, #8]	; (8000450 <clean_buttom_flag+0x34>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	2b05      	cmp	r3, #5
 800044a:	dded      	ble.n	8000428 <clean_buttom_flag+0xc>
	}
}
 800044c:	bf00      	nop
 800044e:	bd80      	pop	{r7, pc}
 8000450:	200000ac 	.word	0x200000ac
 8000454:	200000b0 	.word	0x200000b0

08000458 <zheng_zhuan>:

void zheng_zhuan(int pwm) {
 8000458:	b580      	push	{r7, lr}
 800045a:	b082      	sub	sp, #8
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
	//HAL_UART_Transmit_DMA(&huart2, "zheng_zhuan\n",sizeof("zheng_zhuan\n") - 1);
	Usart2DmaPrintf("zheng_zhuan\n");
 8000460:	480b      	ldr	r0, [pc, #44]	; (8000490 <zheng_zhuan+0x38>)
 8000462:	f7ff ff71 	bl	8000348 <Usart2DmaPrintf>
	HAL_GPIO_WritePin(MC_1_GPIO_Port, MC_1_Pin, GPIO_PIN_RESET);
 8000466:	2200      	movs	r2, #0
 8000468:	f44f 7100 	mov.w	r1, #512	; 0x200
 800046c:	4809      	ldr	r0, [pc, #36]	; (8000494 <zheng_zhuan+0x3c>)
 800046e:	f002 f9c5 	bl	80027fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MC_2_GPIO_Port, MC_2_Pin, GPIO_PIN_SET);
 8000472:	2201      	movs	r2, #1
 8000474:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000478:	4806      	ldr	r0, [pc, #24]	; (8000494 <zheng_zhuan+0x3c>)
 800047a:	f002 f9bf 	bl	80027fc <HAL_GPIO_WritePin>
	user_pwm_setvalue_1(pwm);
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	b29b      	uxth	r3, r3
 8000482:	4618      	mov	r0, r3
 8000484:	f000 ff9a 	bl	80013bc <user_pwm_setvalue_1>
}
 8000488:	bf00      	nop
 800048a:	3708      	adds	r7, #8
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	08007d24 	.word	0x08007d24
 8000494:	40010800 	.word	0x40010800

08000498 <fan_zhuan>:
void fan_zhuan(int pwm) {
 8000498:	b580      	push	{r7, lr}
 800049a:	b082      	sub	sp, #8
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
	//HAL_UART_Transmit_DMA(&huart2, "fan_zhuan\n", sizeof("fan_zhuan\n") - 1);
	Usart2DmaPrintf("fan_zhuan\n");
 80004a0:	480b      	ldr	r0, [pc, #44]	; (80004d0 <fan_zhuan+0x38>)
 80004a2:	f7ff ff51 	bl	8000348 <Usart2DmaPrintf>
	HAL_GPIO_WritePin(MC_1_GPIO_Port, MC_1_Pin, GPIO_PIN_SET);
 80004a6:	2201      	movs	r2, #1
 80004a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004ac:	4809      	ldr	r0, [pc, #36]	; (80004d4 <fan_zhuan+0x3c>)
 80004ae:	f002 f9a5 	bl	80027fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MC_2_GPIO_Port, MC_2_Pin, GPIO_PIN_RESET);
 80004b2:	2200      	movs	r2, #0
 80004b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004b8:	4806      	ldr	r0, [pc, #24]	; (80004d4 <fan_zhuan+0x3c>)
 80004ba:	f002 f99f 	bl	80027fc <HAL_GPIO_WritePin>
	user_pwm_setvalue_2(pwm);
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	b29b      	uxth	r3, r3
 80004c2:	4618      	mov	r0, r3
 80004c4:	f000 ff98 	bl	80013f8 <user_pwm_setvalue_2>
}
 80004c8:	bf00      	nop
 80004ca:	3708      	adds	r7, #8
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	08007d34 	.word	0x08007d34
 80004d4:	40010800 	.word	0x40010800

080004d8 <stop_motor>:
void stop_motor(void) {
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	//HAL_UART_Transmit_DMA(&huart2, "stop_motor\n", sizeof("stop_motor\n") - 1);
	Usart2DmaPrintf("stop_motor\n");
 80004dc:	480c      	ldr	r0, [pc, #48]	; (8000510 <stop_motor+0x38>)
 80004de:	f7ff ff33 	bl	8000348 <Usart2DmaPrintf>
	HAL_GPIO_WritePin(MC_1_GPIO_Port, MC_1_Pin, GPIO_PIN_RESET);
 80004e2:	2200      	movs	r2, #0
 80004e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004e8:	480a      	ldr	r0, [pc, #40]	; (8000514 <stop_motor+0x3c>)
 80004ea:	f002 f987 	bl	80027fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MC_2_GPIO_Port, MC_2_Pin, GPIO_PIN_RESET);
 80004ee:	2200      	movs	r2, #0
 80004f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004f4:	4807      	ldr	r0, [pc, #28]	; (8000514 <stop_motor+0x3c>)
 80004f6:	f002 f981 	bl	80027fc <HAL_GPIO_WritePin>
	user_pwm_setvalue_1(0);
 80004fa:	2000      	movs	r0, #0
 80004fc:	f000 ff5e 	bl	80013bc <user_pwm_setvalue_1>
	user_pwm_setvalue_2(0);
 8000500:	2000      	movs	r0, #0
 8000502:	f000 ff79 	bl	80013f8 <user_pwm_setvalue_2>
	osDelay(100);
 8000506:	2064      	movs	r0, #100	; 0x64
 8000508:	f004 f84c 	bl	80045a4 <osDelay>
}
 800050c:	bf00      	nop
 800050e:	bd80      	pop	{r7, pc}
 8000510:	08007d40 	.word	0x08007d40
 8000514:	40010800 	.word	0x40010800

08000518 <run_motor>:
void run_motor(int dir, int action, int slow_flag) {
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
 800051e:	60f8      	str	r0, [r7, #12]
 8000520:	60b9      	str	r1, [r7, #8]
 8000522:	607a      	str	r2, [r7, #4]
	//HAL_UART_Transmit_DMA(&huart2, "run_motor\n", sizeof("run_motor\n") - 1);
	Usart2DmaPrintf("run_motor\n");
 8000524:	4829      	ldr	r0, [pc, #164]	; (80005cc <run_motor+0xb4>)
 8000526:	f7ff ff0f 	bl	8000348 <Usart2DmaPrintf>
	if (action == 0) { //關門
 800052a:	68bb      	ldr	r3, [r7, #8]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d123      	bne.n	8000578 <run_motor+0x60>
		if (dir == 0) {
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d10e      	bne.n	8000554 <run_motor+0x3c>
			if (slow_flag == 1) {
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	2b01      	cmp	r3, #1
 800053a:	d105      	bne.n	8000548 <run_motor+0x30>
				zheng_zhuan(run_pwm_s);
 800053c:	4b24      	ldr	r3, [pc, #144]	; (80005d0 <run_motor+0xb8>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4618      	mov	r0, r3
 8000542:	f7ff ff89 	bl	8000458 <zheng_zhuan>
			}
		}
	}
	//fan_zhuan(run_pwm_n);

}
 8000546:	e03d      	b.n	80005c4 <run_motor+0xac>
				zheng_zhuan(run_pwm_n);
 8000548:	4b22      	ldr	r3, [pc, #136]	; (80005d4 <run_motor+0xbc>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4618      	mov	r0, r3
 800054e:	f7ff ff83 	bl	8000458 <zheng_zhuan>
}
 8000552:	e037      	b.n	80005c4 <run_motor+0xac>
		} else if (dir == 1) {
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	2b01      	cmp	r3, #1
 8000558:	d134      	bne.n	80005c4 <run_motor+0xac>
			if (slow_flag == 1) {
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	2b01      	cmp	r3, #1
 800055e:	d105      	bne.n	800056c <run_motor+0x54>
				fan_zhuan(run_pwm_s);
 8000560:	4b1b      	ldr	r3, [pc, #108]	; (80005d0 <run_motor+0xb8>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4618      	mov	r0, r3
 8000566:	f7ff ff97 	bl	8000498 <fan_zhuan>
}
 800056a:	e02b      	b.n	80005c4 <run_motor+0xac>
				fan_zhuan(run_pwm_n);
 800056c:	4b19      	ldr	r3, [pc, #100]	; (80005d4 <run_motor+0xbc>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4618      	mov	r0, r3
 8000572:	f7ff ff91 	bl	8000498 <fan_zhuan>
}
 8000576:	e025      	b.n	80005c4 <run_motor+0xac>
	} else if (action == 1) { //開門
 8000578:	68bb      	ldr	r3, [r7, #8]
 800057a:	2b01      	cmp	r3, #1
 800057c:	d122      	bne.n	80005c4 <run_motor+0xac>
		if (dir == 0) {
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d10e      	bne.n	80005a2 <run_motor+0x8a>
			if (slow_flag == 1) {
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	2b01      	cmp	r3, #1
 8000588:	d105      	bne.n	8000596 <run_motor+0x7e>
				fan_zhuan(run_pwm_s);
 800058a:	4b11      	ldr	r3, [pc, #68]	; (80005d0 <run_motor+0xb8>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4618      	mov	r0, r3
 8000590:	f7ff ff82 	bl	8000498 <fan_zhuan>
}
 8000594:	e016      	b.n	80005c4 <run_motor+0xac>
				fan_zhuan(run_pwm_n);
 8000596:	4b0f      	ldr	r3, [pc, #60]	; (80005d4 <run_motor+0xbc>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4618      	mov	r0, r3
 800059c:	f7ff ff7c 	bl	8000498 <fan_zhuan>
}
 80005a0:	e010      	b.n	80005c4 <run_motor+0xac>
		} else if (dir == 1) {
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	2b01      	cmp	r3, #1
 80005a6:	d10d      	bne.n	80005c4 <run_motor+0xac>
			if (slow_flag == 1) {
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	d105      	bne.n	80005ba <run_motor+0xa2>
				zheng_zhuan(run_pwm_s);
 80005ae:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <run_motor+0xb8>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4618      	mov	r0, r3
 80005b4:	f7ff ff50 	bl	8000458 <zheng_zhuan>
}
 80005b8:	e004      	b.n	80005c4 <run_motor+0xac>
				zheng_zhuan(run_pwm_n);
 80005ba:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <run_motor+0xbc>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4618      	mov	r0, r3
 80005c0:	f7ff ff4a 	bl	8000458 <zheng_zhuan>
}
 80005c4:	bf00      	nop
 80005c6:	3710      	adds	r7, #16
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	08007d4c 	.word	0x08007d4c
 80005d0:	2000000c 	.word	0x2000000c
 80005d4:	20000008 	.word	0x20000008

080005d8 <point_motor>:
void point_motor(void) { //上下點動
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
	//HAL_UART_Transmit_DMA(&huart2, "point_motor\n",sizeof("point_motor\n") - 1);
	Usart2DmaPrintf("point_motor\n");
 80005dc:	480a      	ldr	r0, [pc, #40]	; (8000608 <point_motor+0x30>)
 80005de:	f7ff feb3 	bl	8000348 <Usart2DmaPrintf>
	fan_zhuan(run_pwm_n);
 80005e2:	4b0a      	ldr	r3, [pc, #40]	; (800060c <point_motor+0x34>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4618      	mov	r0, r3
 80005e8:	f7ff ff56 	bl	8000498 <fan_zhuan>
	stop_motor();
 80005ec:	f7ff ff74 	bl	80004d8 <stop_motor>
	zheng_zhuan(run_pwm_n);
 80005f0:	4b06      	ldr	r3, [pc, #24]	; (800060c <point_motor+0x34>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4618      	mov	r0, r3
 80005f6:	f7ff ff2f 	bl	8000458 <zheng_zhuan>
	stop_motor();
 80005fa:	f7ff ff6d 	bl	80004d8 <stop_motor>
	clean_buttom_flag();
 80005fe:	f7ff ff0d 	bl	800041c <clean_buttom_flag>
}
 8000602:	bf00      	nop
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	08007d58 	.word	0x08007d58
 800060c:	20000008 	.word	0x20000008

08000610 <auto_limits>:
	default:
		break;
	}
}

void auto_limits(int setting_mode) {
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
	Usart2DmaPrintf("auto_limits\n");
 8000618:	480b      	ldr	r0, [pc, #44]	; (8000648 <auto_limits+0x38>)
 800061a:	f7ff fe95 	bl	8000348 <Usart2DmaPrintf>
	switch (setting_mode) {
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	2b02      	cmp	r3, #2
 8000622:	d007      	beq.n	8000634 <auto_limits+0x24>
 8000624:	2b03      	cmp	r3, #3
 8000626:	d007      	beq.n	8000638 <auto_limits+0x28>
 8000628:	2b01      	cmp	r3, #1
 800062a:	d007      	beq.n	800063c <auto_limits+0x2c>
	case 2:
		break;
	case 3:
		break;
	default:
		printf("auto limits error\n");
 800062c:	4807      	ldr	r0, [pc, #28]	; (800064c <auto_limits+0x3c>)
 800062e:	f006 fbd7 	bl	8006de0 <puts>
	}
}
 8000632:	e004      	b.n	800063e <auto_limits+0x2e>
		break;
 8000634:	bf00      	nop
 8000636:	e002      	b.n	800063e <auto_limits+0x2e>
		break;
 8000638:	bf00      	nop
 800063a:	e000      	b.n	800063e <auto_limits+0x2e>
		break;
 800063c:	bf00      	nop
}
 800063e:	bf00      	nop
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	08007d74 	.word	0x08007d74
 800064c:	08007d84 	.word	0x08007d84

08000650 <save_limits_set>:
void save_limits_set(int save_data) {
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
	Usart2DmaPrintf("save_limits_set\n");
 8000658:	480b      	ldr	r0, [pc, #44]	; (8000688 <save_limits_set+0x38>)
 800065a:	f7ff fe75 	bl	8000348 <Usart2DmaPrintf>
	switch (save_data) {
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	2b01      	cmp	r3, #1
 8000662:	d007      	beq.n	8000674 <save_limits_set+0x24>
 8000664:	2b02      	cmp	r3, #2
 8000666:	d007      	beq.n	8000678 <save_limits_set+0x28>
 8000668:	2b00      	cmp	r3, #0
 800066a:	d007      	beq.n	800067c <save_limits_set+0x2c>
	case 1:
		break;
	case 2:
		break;
	default:
		printf("save data mode error\n");
 800066c:	4807      	ldr	r0, [pc, #28]	; (800068c <save_limits_set+0x3c>)
 800066e:	f006 fbb7 	bl	8006de0 <puts>
	}
}
 8000672:	e004      	b.n	800067e <save_limits_set+0x2e>
		break;
 8000674:	bf00      	nop
 8000676:	e002      	b.n	800067e <save_limits_set+0x2e>
		break;
 8000678:	bf00      	nop
 800067a:	e000      	b.n	800067e <save_limits_set+0x2e>
		break;
 800067c:	bf00      	nop
}
 800067e:	bf00      	nop
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	08007d98 	.word	0x08007d98
 800068c:	08007dac 	.word	0x08007dac

08000690 <print_sysinfo>:

void print_sysinfo(int mode) {
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af02      	add	r7, sp, #8
 8000696:	6078      	str	r0, [r7, #4]

	switch (mode) {
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	2b01      	cmp	r3, #1
 800069c:	d052      	beq.n	8000744 <print_sysinfo+0xb4>
 800069e:	2b02      	cmp	r3, #2
 80006a0:	d052      	beq.n	8000748 <print_sysinfo+0xb8>
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d14a      	bne.n	800073c <print_sysinfo+0xac>
	case 0: //All
		Usart2DmaPrintf("\n==============================\n");
 80006a6:	482b      	ldr	r0, [pc, #172]	; (8000754 <print_sysinfo+0xc4>)
 80006a8:	f7ff fe4e 	bl	8000348 <Usart2DmaPrintf>
		Usart2DmaPrintf("| Sys time : %d\n", xTaskGetTickCount());
 80006ac:	f005 f834 	bl	8005718 <xTaskGetTickCount>
 80006b0:	4603      	mov	r3, r0
 80006b2:	4619      	mov	r1, r3
 80006b4:	4828      	ldr	r0, [pc, #160]	; (8000758 <print_sysinfo+0xc8>)
 80006b6:	f7ff fe47 	bl	8000348 <Usart2DmaPrintf>
		Usart2DmaPrintf("| Mode:\t%d  \t\tSetMode:\t\t%d  \t|\n", sys_mode,
 80006ba:	4b28      	ldr	r3, [pc, #160]	; (800075c <print_sysinfo+0xcc>)
 80006bc:	6819      	ldr	r1, [r3, #0]
 80006be:	4b28      	ldr	r3, [pc, #160]	; (8000760 <print_sysinfo+0xd0>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	461a      	mov	r2, r3
 80006c4:	4827      	ldr	r0, [pc, #156]	; (8000764 <print_sysinfo+0xd4>)
 80006c6:	f7ff fe3f 	bl	8000348 <Usart2DmaPrintf>
				sys_setting);
		Usart2DmaPrintf("| m_dir:\t%d  \t\tSmoothMode:\t%d  \t|\n", motor_dir,
 80006ca:	4b27      	ldr	r3, [pc, #156]	; (8000768 <print_sysinfo+0xd8>)
 80006cc:	6819      	ldr	r1, [r3, #0]
 80006ce:	4b27      	ldr	r3, [pc, #156]	; (800076c <print_sysinfo+0xdc>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	461a      	mov	r2, r3
 80006d4:	4826      	ldr	r0, [pc, #152]	; (8000770 <print_sysinfo+0xe0>)
 80006d6:	f7ff fe37 	bl	8000348 <Usart2DmaPrintf>
				smooth_mode);
		Usart2DmaPrintf("| m_res:\t%d  \t\tSmoothMode:\t%d  \t|\n", motor_res,
 80006da:	4b26      	ldr	r3, [pc, #152]	; (8000774 <print_sysinfo+0xe4>)
 80006dc:	6819      	ldr	r1, [r3, #0]
 80006de:	4b23      	ldr	r3, [pc, #140]	; (800076c <print_sysinfo+0xdc>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	461a      	mov	r2, r3
 80006e4:	4824      	ldr	r0, [pc, #144]	; (8000778 <print_sysinfo+0xe8>)
 80006e6:	f7ff fe2f 	bl	8000348 <Usart2DmaPrintf>
				smooth_mode);
		Usart2DmaPrintf("| TimeN:\t%dms\tTimeSlow:\t%dms\t|\n", run_time_n,
 80006ea:	4b24      	ldr	r3, [pc, #144]	; (800077c <print_sysinfo+0xec>)
 80006ec:	6819      	ldr	r1, [r3, #0]
 80006ee:	4b24      	ldr	r3, [pc, #144]	; (8000780 <print_sysinfo+0xf0>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	461a      	mov	r2, r3
 80006f4:	4823      	ldr	r0, [pc, #140]	; (8000784 <print_sysinfo+0xf4>)
 80006f6:	f7ff fe27 	bl	8000348 <Usart2DmaPrintf>
				run_time_s);
		Usart2DmaPrintf("| pwmN:\t%d  \tPWNSlow:\t%d  \t|\n", run_pwm_n,
 80006fa:	4b23      	ldr	r3, [pc, #140]	; (8000788 <print_sysinfo+0xf8>)
 80006fc:	6819      	ldr	r1, [r3, #0]
 80006fe:	4b23      	ldr	r3, [pc, #140]	; (800078c <print_sysinfo+0xfc>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	461a      	mov	r2, r3
 8000704:	4822      	ldr	r0, [pc, #136]	; (8000790 <print_sysinfo+0x100>)
 8000706:	f7ff fe1f 	bl	8000348 <Usart2DmaPrintf>
				run_pwm_s);
		Usart2DmaPrintf("| Buttom Flag:[%d] [%d] [%d] [%d] \t\t\t|\n",
 800070a:	4b22      	ldr	r3, [pc, #136]	; (8000794 <print_sysinfo+0x104>)
 800070c:	6859      	ldr	r1, [r3, #4]
 800070e:	4b21      	ldr	r3, [pc, #132]	; (8000794 <print_sysinfo+0x104>)
 8000710:	689a      	ldr	r2, [r3, #8]
 8000712:	4b20      	ldr	r3, [pc, #128]	; (8000794 <print_sysinfo+0x104>)
 8000714:	68d8      	ldr	r0, [r3, #12]
 8000716:	4b1f      	ldr	r3, [pc, #124]	; (8000794 <print_sysinfo+0x104>)
 8000718:	691b      	ldr	r3, [r3, #16]
 800071a:	9300      	str	r3, [sp, #0]
 800071c:	4603      	mov	r3, r0
 800071e:	481e      	ldr	r0, [pc, #120]	; (8000798 <print_sysinfo+0x108>)
 8000720:	f7ff fe12 	bl	8000348 <Usart2DmaPrintf>
				buttom_flag[1], buttom_flag[2], buttom_flag[3], buttom_flag[4]);
		Usart2DmaPrintf("| ADC1:\t%d  \tADC2:\t%d \t\t|\n", real_adc1,
 8000724:	4b1d      	ldr	r3, [pc, #116]	; (800079c <print_sysinfo+0x10c>)
 8000726:	6819      	ldr	r1, [r3, #0]
 8000728:	4b1d      	ldr	r3, [pc, #116]	; (80007a0 <print_sysinfo+0x110>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	461a      	mov	r2, r3
 800072e:	481d      	ldr	r0, [pc, #116]	; (80007a4 <print_sysinfo+0x114>)
 8000730:	f7ff fe0a 	bl	8000348 <Usart2DmaPrintf>
				real_adc2);
		Usart2DmaPrintf("==============================\n");
 8000734:	481c      	ldr	r0, [pc, #112]	; (80007a8 <print_sysinfo+0x118>)
 8000736:	f7ff fe07 	bl	8000348 <Usart2DmaPrintf>
		break;
 800073a:	e006      	b.n	800074a <print_sysinfo+0xba>
	case 1:
		break;
	case 2:
		break;
	default:
		printf("save data mode error\n");
 800073c:	481b      	ldr	r0, [pc, #108]	; (80007ac <print_sysinfo+0x11c>)
 800073e:	f006 fb4f 	bl	8006de0 <puts>
	}
}
 8000742:	e002      	b.n	800074a <print_sysinfo+0xba>
		break;
 8000744:	bf00      	nop
 8000746:	e000      	b.n	800074a <print_sysinfo+0xba>
		break;
 8000748:	bf00      	nop
}
 800074a:	bf00      	nop
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	08007dc4 	.word	0x08007dc4
 8000758:	08007de8 	.word	0x08007de8
 800075c:	200000c4 	.word	0x200000c4
 8000760:	200000c8 	.word	0x200000c8
 8000764:	08007dfc 	.word	0x08007dfc
 8000768:	200000cc 	.word	0x200000cc
 800076c:	20000010 	.word	0x20000010
 8000770:	08007e1c 	.word	0x08007e1c
 8000774:	200000a8 	.word	0x200000a8
 8000778:	08007e40 	.word	0x08007e40
 800077c:	20000000 	.word	0x20000000
 8000780:	20000004 	.word	0x20000004
 8000784:	08007e64 	.word	0x08007e64
 8000788:	20000008 	.word	0x20000008
 800078c:	2000000c 	.word	0x2000000c
 8000790:	08007e84 	.word	0x08007e84
 8000794:	200000b0 	.word	0x200000b0
 8000798:	08007ea4 	.word	0x08007ea4
 800079c:	20001c04 	.word	0x20001c04
 80007a0:	20001a68 	.word	0x20001a68
 80007a4:	08007ecc 	.word	0x08007ecc
 80007a8:	08007ee8 	.word	0x08007ee8
 80007ac:	08007dac 	.word	0x08007dac

080007b0 <MX_FREERTOS_Init>:
/**
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Init */
	//stop_motor();
	//printf("Helloworld!\n");
	HAL_GPIO_WritePin(MC_1_GPIO_Port, MC_1_Pin, GPIO_PIN_RESET);
 80007b4:	2200      	movs	r2, #0
 80007b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007ba:	481c      	ldr	r0, [pc, #112]	; (800082c <MX_FREERTOS_Init+0x7c>)
 80007bc:	f002 f81e 	bl	80027fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MC_2_GPIO_Port, MC_2_Pin, GPIO_PIN_RESET);
 80007c0:	2200      	movs	r2, #0
 80007c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007c6:	4819      	ldr	r0, [pc, #100]	; (800082c <MX_FREERTOS_Init+0x7c>)
 80007c8:	f002 f818 	bl	80027fc <HAL_GPIO_WritePin>
	user_pwm_setvalue_1(0);
 80007cc:	2000      	movs	r0, #0
 80007ce:	f000 fdf5 	bl	80013bc <user_pwm_setvalue_1>
	user_pwm_setvalue_2(0);
 80007d2:	2000      	movs	r0, #0
 80007d4:	f000 fe10 	bl	80013f8 <user_pwm_setvalue_2>
	if (HAL_UART_Receive_DMA(&huart2, (uint8_t*) rxData, sizeof(rxData) - 1)
 80007d8:	2200      	movs	r2, #0
 80007da:	4915      	ldr	r1, [pc, #84]	; (8000830 <MX_FREERTOS_Init+0x80>)
 80007dc:	4815      	ldr	r0, [pc, #84]	; (8000834 <MX_FREERTOS_Init+0x84>)
 80007de:	f003 f957 	bl	8003a90 <HAL_UART_Receive_DMA>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_FREERTOS_Init+0x3c>
			!= HAL_OK)	//main函数while(1)前，启动一次DMA接收
			{
		Error_Handler();
 80007e8:	f000 fbcf 	bl	8000f8a <Error_Handler>
	}
	HAL_UART_Transmit_DMA(&huart2, "Sys Run\n", sizeof("Sys Run\n") - 1);//可以通过DMA把数据发出去
 80007ec:	2208      	movs	r2, #8
 80007ee:	4912      	ldr	r1, [pc, #72]	; (8000838 <MX_FREERTOS_Init+0x88>)
 80007f0:	4810      	ldr	r0, [pc, #64]	; (8000834 <MX_FREERTOS_Init+0x84>)
 80007f2:	f003 f8e1 	bl	80039b8 <HAL_UART_Transmit_DMA>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 80007f6:	4a11      	ldr	r2, [pc, #68]	; (800083c <MX_FREERTOS_Init+0x8c>)
 80007f8:	2100      	movs	r1, #0
 80007fa:	4811      	ldr	r0, [pc, #68]	; (8000840 <MX_FREERTOS_Init+0x90>)
 80007fc:	f003 fe28 	bl	8004450 <osThreadNew>
 8000800:	4602      	mov	r2, r0
 8000802:	4b10      	ldr	r3, [pc, #64]	; (8000844 <MX_FREERTOS_Init+0x94>)
 8000804:	601a      	str	r2, [r3, #0]
			&defaultTask_attributes);

	/* creation of myTaskoutput */
	myTaskoutputHandle = osThreadNew(StartTask02, NULL,
 8000806:	4a10      	ldr	r2, [pc, #64]	; (8000848 <MX_FREERTOS_Init+0x98>)
 8000808:	2100      	movs	r1, #0
 800080a:	4810      	ldr	r0, [pc, #64]	; (800084c <MX_FREERTOS_Init+0x9c>)
 800080c:	f003 fe20 	bl	8004450 <osThreadNew>
 8000810:	4602      	mov	r2, r0
 8000812:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <MX_FREERTOS_Init+0xa0>)
 8000814:	601a      	str	r2, [r3, #0]
			&myTaskoutput_attributes);

	/* creation of myTask_BUTTON */
	myTask_BUTTONHandle = osThreadNew(StartTask03, NULL,
 8000816:	4a0f      	ldr	r2, [pc, #60]	; (8000854 <MX_FREERTOS_Init+0xa4>)
 8000818:	2100      	movs	r1, #0
 800081a:	480f      	ldr	r0, [pc, #60]	; (8000858 <MX_FREERTOS_Init+0xa8>)
 800081c:	f003 fe18 	bl	8004450 <osThreadNew>
 8000820:	4602      	mov	r2, r0
 8000822:	4b0e      	ldr	r3, [pc, #56]	; (800085c <MX_FREERTOS_Init+0xac>)
 8000824:	601a      	str	r2, [r3, #0]

	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40010800 	.word	0x40010800
 8000830:	200000d0 	.word	0x200000d0
 8000834:	20001d34 	.word	0x20001d34
 8000838:	08007f08 	.word	0x08007f08
 800083c:	08007f40 	.word	0x08007f40
 8000840:	08000861 	.word	0x08000861
 8000844:	20001a5c 	.word	0x20001a5c
 8000848:	08007f64 	.word	0x08007f64
 800084c:	08000a69 	.word	0x08000a69
 8000850:	20001a60 	.word	0x20001a60
 8000854:	08007f88 	.word	0x08007f88
 8000858:	08000b55 	.word	0x08000b55
 800085c:	20001a64 	.word	0x20001a64

08000860 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartDefaultTask */
	//int time_count=0;
	/* Infinite loop */
	for (;;) {
		osDelay(1000);
 8000868:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800086c:	f003 fe9a 	bl	80045a4 <osDelay>
		while (sys_setting == 1) {
 8000870:	e002      	b.n	8000878 <StartDefaultTask+0x18>
			osDelay(10);
 8000872:	200a      	movs	r0, #10
 8000874:	f003 fe96 	bl	80045a4 <osDelay>
		while (sys_setting == 1) {
 8000878:	4b72      	ldr	r3, [pc, #456]	; (8000a44 <StartDefaultTask+0x1e4>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	2b01      	cmp	r3, #1
 800087e:	d0f8      	beq.n	8000872 <StartDefaultTask+0x12>
		}
		if (sys_mode == 1) {
 8000880:	4b71      	ldr	r3, [pc, #452]	; (8000a48 <StartDefaultTask+0x1e8>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2b01      	cmp	r3, #1
 8000886:	d167      	bne.n	8000958 <StartDefaultTask+0xf8>
			//clean_buttom_flag();
			timer_conut = 0;
 8000888:	4b70      	ldr	r3, [pc, #448]	; (8000a4c <StartDefaultTask+0x1ec>)
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
			run_motor(motor_dir, 0, smooth_mode);
 800088e:	4b70      	ldr	r3, [pc, #448]	; (8000a50 <StartDefaultTask+0x1f0>)
 8000890:	6818      	ldr	r0, [r3, #0]
 8000892:	4b70      	ldr	r3, [pc, #448]	; (8000a54 <StartDefaultTask+0x1f4>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	461a      	mov	r2, r3
 8000898:	2100      	movs	r1, #0
 800089a:	f7ff fe3d 	bl	8000518 <run_motor>
			while (timer_conut < run_time_s) {
 800089e:	e00f      	b.n	80008c0 <StartDefaultTask+0x60>
				timer_conut++;
 80008a0:	4b6a      	ldr	r3, [pc, #424]	; (8000a4c <StartDefaultTask+0x1ec>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	3301      	adds	r3, #1
 80008a6:	4a69      	ldr	r2, [pc, #420]	; (8000a4c <StartDefaultTask+0x1ec>)
 80008a8:	6013      	str	r3, [r2, #0]
				if (buttom_flag[2] > 0||motor_res==1)
 80008aa:	4b6b      	ldr	r3, [pc, #428]	; (8000a58 <StartDefaultTask+0x1f8>)
 80008ac:	689b      	ldr	r3, [r3, #8]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	dc0c      	bgt.n	80008cc <StartDefaultTask+0x6c>
 80008b2:	4b6a      	ldr	r3, [pc, #424]	; (8000a5c <StartDefaultTask+0x1fc>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d008      	beq.n	80008cc <StartDefaultTask+0x6c>
					break;
				osDelay(1);
 80008ba:	2001      	movs	r0, #1
 80008bc:	f003 fe72 	bl	80045a4 <osDelay>
			while (timer_conut < run_time_s) {
 80008c0:	4b62      	ldr	r3, [pc, #392]	; (8000a4c <StartDefaultTask+0x1ec>)
 80008c2:	681a      	ldr	r2, [r3, #0]
 80008c4:	4b66      	ldr	r3, [pc, #408]	; (8000a60 <StartDefaultTask+0x200>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	dbe9      	blt.n	80008a0 <StartDefaultTask+0x40>
			}
			timer_conut = 0;
 80008cc:	4b5f      	ldr	r3, [pc, #380]	; (8000a4c <StartDefaultTask+0x1ec>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
			run_motor(motor_dir, 0, 0);
 80008d2:	4b5f      	ldr	r3, [pc, #380]	; (8000a50 <StartDefaultTask+0x1f0>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	2200      	movs	r2, #0
 80008d8:	2100      	movs	r1, #0
 80008da:	4618      	mov	r0, r3
 80008dc:	f7ff fe1c 	bl	8000518 <run_motor>
			while (timer_conut < run_time_n) {
 80008e0:	e00f      	b.n	8000902 <StartDefaultTask+0xa2>
				timer_conut++;
 80008e2:	4b5a      	ldr	r3, [pc, #360]	; (8000a4c <StartDefaultTask+0x1ec>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	3301      	adds	r3, #1
 80008e8:	4a58      	ldr	r2, [pc, #352]	; (8000a4c <StartDefaultTask+0x1ec>)
 80008ea:	6013      	str	r3, [r2, #0]
				if (buttom_flag[2] > 0||motor_res==1)
 80008ec:	4b5a      	ldr	r3, [pc, #360]	; (8000a58 <StartDefaultTask+0x1f8>)
 80008ee:	689b      	ldr	r3, [r3, #8]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	dc0c      	bgt.n	800090e <StartDefaultTask+0xae>
 80008f4:	4b59      	ldr	r3, [pc, #356]	; (8000a5c <StartDefaultTask+0x1fc>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d008      	beq.n	800090e <StartDefaultTask+0xae>
					break;
				osDelay(1);
 80008fc:	2001      	movs	r0, #1
 80008fe:	f003 fe51 	bl	80045a4 <osDelay>
			while (timer_conut < run_time_n) {
 8000902:	4b52      	ldr	r3, [pc, #328]	; (8000a4c <StartDefaultTask+0x1ec>)
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	4b57      	ldr	r3, [pc, #348]	; (8000a64 <StartDefaultTask+0x204>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	429a      	cmp	r2, r3
 800090c:	dbe9      	blt.n	80008e2 <StartDefaultTask+0x82>
			}
			timer_conut = 0;
 800090e:	4b4f      	ldr	r3, [pc, #316]	; (8000a4c <StartDefaultTask+0x1ec>)
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
			run_motor(motor_dir, 0, smooth_mode);
 8000914:	4b4e      	ldr	r3, [pc, #312]	; (8000a50 <StartDefaultTask+0x1f0>)
 8000916:	6818      	ldr	r0, [r3, #0]
 8000918:	4b4e      	ldr	r3, [pc, #312]	; (8000a54 <StartDefaultTask+0x1f4>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	461a      	mov	r2, r3
 800091e:	2100      	movs	r1, #0
 8000920:	f7ff fdfa 	bl	8000518 <run_motor>
			while (timer_conut < run_time_s) {
 8000924:	e00f      	b.n	8000946 <StartDefaultTask+0xe6>
				timer_conut++;
 8000926:	4b49      	ldr	r3, [pc, #292]	; (8000a4c <StartDefaultTask+0x1ec>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	3301      	adds	r3, #1
 800092c:	4a47      	ldr	r2, [pc, #284]	; (8000a4c <StartDefaultTask+0x1ec>)
 800092e:	6013      	str	r3, [r2, #0]
				if (buttom_flag[2] > 0||motor_res==1)
 8000930:	4b49      	ldr	r3, [pc, #292]	; (8000a58 <StartDefaultTask+0x1f8>)
 8000932:	689b      	ldr	r3, [r3, #8]
 8000934:	2b00      	cmp	r3, #0
 8000936:	dc0c      	bgt.n	8000952 <StartDefaultTask+0xf2>
 8000938:	4b48      	ldr	r3, [pc, #288]	; (8000a5c <StartDefaultTask+0x1fc>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	2b01      	cmp	r3, #1
 800093e:	d008      	beq.n	8000952 <StartDefaultTask+0xf2>
					break;
				osDelay(1);
 8000940:	2001      	movs	r0, #1
 8000942:	f003 fe2f 	bl	80045a4 <osDelay>
			while (timer_conut < run_time_s) {
 8000946:	4b41      	ldr	r3, [pc, #260]	; (8000a4c <StartDefaultTask+0x1ec>)
 8000948:	681a      	ldr	r2, [r3, #0]
 800094a:	4b45      	ldr	r3, [pc, #276]	; (8000a60 <StartDefaultTask+0x200>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	429a      	cmp	r2, r3
 8000950:	dbe9      	blt.n	8000926 <StartDefaultTask+0xc6>
			}
			stop_motor();
 8000952:	f7ff fdc1 	bl	80004d8 <stop_motor>
 8000956:	e071      	b.n	8000a3c <StartDefaultTask+0x1dc>
		} else if (sys_mode == 2) {
 8000958:	4b3b      	ldr	r3, [pc, #236]	; (8000a48 <StartDefaultTask+0x1e8>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	2b02      	cmp	r3, #2
 800095e:	d102      	bne.n	8000966 <StartDefaultTask+0x106>
			//clean_buttom_flag();
			stop_motor();
 8000960:	f7ff fdba 	bl	80004d8 <stop_motor>
 8000964:	e06a      	b.n	8000a3c <StartDefaultTask+0x1dc>
		} else if (sys_mode == 3) {
 8000966:	4b38      	ldr	r3, [pc, #224]	; (8000a48 <StartDefaultTask+0x1e8>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	2b03      	cmp	r3, #3
 800096c:	d166      	bne.n	8000a3c <StartDefaultTask+0x1dc>
			//clean_buttom_flag();
			timer_conut = 0;
 800096e:	4b37      	ldr	r3, [pc, #220]	; (8000a4c <StartDefaultTask+0x1ec>)
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
			run_motor(motor_dir, 1, smooth_mode);
 8000974:	4b36      	ldr	r3, [pc, #216]	; (8000a50 <StartDefaultTask+0x1f0>)
 8000976:	6818      	ldr	r0, [r3, #0]
 8000978:	4b36      	ldr	r3, [pc, #216]	; (8000a54 <StartDefaultTask+0x1f4>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	461a      	mov	r2, r3
 800097e:	2101      	movs	r1, #1
 8000980:	f7ff fdca 	bl	8000518 <run_motor>
			while (timer_conut < run_time_s) {
 8000984:	e00f      	b.n	80009a6 <StartDefaultTask+0x146>
				timer_conut++;
 8000986:	4b31      	ldr	r3, [pc, #196]	; (8000a4c <StartDefaultTask+0x1ec>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	3301      	adds	r3, #1
 800098c:	4a2f      	ldr	r2, [pc, #188]	; (8000a4c <StartDefaultTask+0x1ec>)
 800098e:	6013      	str	r3, [r2, #0]
				if (buttom_flag[2] > 0||motor_res==1)
 8000990:	4b31      	ldr	r3, [pc, #196]	; (8000a58 <StartDefaultTask+0x1f8>)
 8000992:	689b      	ldr	r3, [r3, #8]
 8000994:	2b00      	cmp	r3, #0
 8000996:	dc0c      	bgt.n	80009b2 <StartDefaultTask+0x152>
 8000998:	4b30      	ldr	r3, [pc, #192]	; (8000a5c <StartDefaultTask+0x1fc>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2b01      	cmp	r3, #1
 800099e:	d008      	beq.n	80009b2 <StartDefaultTask+0x152>
					break;
				osDelay(1);
 80009a0:	2001      	movs	r0, #1
 80009a2:	f003 fdff 	bl	80045a4 <osDelay>
			while (timer_conut < run_time_s) {
 80009a6:	4b29      	ldr	r3, [pc, #164]	; (8000a4c <StartDefaultTask+0x1ec>)
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	4b2d      	ldr	r3, [pc, #180]	; (8000a60 <StartDefaultTask+0x200>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	429a      	cmp	r2, r3
 80009b0:	dbe9      	blt.n	8000986 <StartDefaultTask+0x126>
			}
			timer_conut = 0;
 80009b2:	4b26      	ldr	r3, [pc, #152]	; (8000a4c <StartDefaultTask+0x1ec>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
			run_motor(motor_dir, 1, 0);
 80009b8:	4b25      	ldr	r3, [pc, #148]	; (8000a50 <StartDefaultTask+0x1f0>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2200      	movs	r2, #0
 80009be:	2101      	movs	r1, #1
 80009c0:	4618      	mov	r0, r3
 80009c2:	f7ff fda9 	bl	8000518 <run_motor>
			while (timer_conut < run_time_n) {
 80009c6:	e00f      	b.n	80009e8 <StartDefaultTask+0x188>
				timer_conut++;
 80009c8:	4b20      	ldr	r3, [pc, #128]	; (8000a4c <StartDefaultTask+0x1ec>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	3301      	adds	r3, #1
 80009ce:	4a1f      	ldr	r2, [pc, #124]	; (8000a4c <StartDefaultTask+0x1ec>)
 80009d0:	6013      	str	r3, [r2, #0]
				if (buttom_flag[2] > 0||motor_res==1)
 80009d2:	4b21      	ldr	r3, [pc, #132]	; (8000a58 <StartDefaultTask+0x1f8>)
 80009d4:	689b      	ldr	r3, [r3, #8]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	dc0c      	bgt.n	80009f4 <StartDefaultTask+0x194>
 80009da:	4b20      	ldr	r3, [pc, #128]	; (8000a5c <StartDefaultTask+0x1fc>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d008      	beq.n	80009f4 <StartDefaultTask+0x194>
					break;
				osDelay(1);
 80009e2:	2001      	movs	r0, #1
 80009e4:	f003 fdde 	bl	80045a4 <osDelay>
			while (timer_conut < run_time_n) {
 80009e8:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <StartDefaultTask+0x1ec>)
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	4b1d      	ldr	r3, [pc, #116]	; (8000a64 <StartDefaultTask+0x204>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	429a      	cmp	r2, r3
 80009f2:	dbe9      	blt.n	80009c8 <StartDefaultTask+0x168>
			}
			timer_conut = 0;
 80009f4:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <StartDefaultTask+0x1ec>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
			run_motor(motor_dir, 1, smooth_mode);
 80009fa:	4b15      	ldr	r3, [pc, #84]	; (8000a50 <StartDefaultTask+0x1f0>)
 80009fc:	6818      	ldr	r0, [r3, #0]
 80009fe:	4b15      	ldr	r3, [pc, #84]	; (8000a54 <StartDefaultTask+0x1f4>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	461a      	mov	r2, r3
 8000a04:	2101      	movs	r1, #1
 8000a06:	f7ff fd87 	bl	8000518 <run_motor>
			while (timer_conut < run_time_s) {
 8000a0a:	e00f      	b.n	8000a2c <StartDefaultTask+0x1cc>
				timer_conut++;
 8000a0c:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <StartDefaultTask+0x1ec>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	3301      	adds	r3, #1
 8000a12:	4a0e      	ldr	r2, [pc, #56]	; (8000a4c <StartDefaultTask+0x1ec>)
 8000a14:	6013      	str	r3, [r2, #0]
				if (buttom_flag[2] > 0||motor_res==1)
 8000a16:	4b10      	ldr	r3, [pc, #64]	; (8000a58 <StartDefaultTask+0x1f8>)
 8000a18:	689b      	ldr	r3, [r3, #8]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	dc0c      	bgt.n	8000a38 <StartDefaultTask+0x1d8>
 8000a1e:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <StartDefaultTask+0x1fc>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	d008      	beq.n	8000a38 <StartDefaultTask+0x1d8>
					break;
				osDelay(1);
 8000a26:	2001      	movs	r0, #1
 8000a28:	f003 fdbc 	bl	80045a4 <osDelay>
			while (timer_conut < run_time_s) {
 8000a2c:	4b07      	ldr	r3, [pc, #28]	; (8000a4c <StartDefaultTask+0x1ec>)
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <StartDefaultTask+0x200>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	429a      	cmp	r2, r3
 8000a36:	dbe9      	blt.n	8000a0c <StartDefaultTask+0x1ac>
			}
			stop_motor();
 8000a38:	f7ff fd4e 	bl	80004d8 <stop_motor>
		}
		clean_buttom_flag();
 8000a3c:	f7ff fcee 	bl	800041c <clean_buttom_flag>
		osDelay(1000);
 8000a40:	e712      	b.n	8000868 <StartDefaultTask+0x8>
 8000a42:	bf00      	nop
 8000a44:	200000c8 	.word	0x200000c8
 8000a48:	200000c4 	.word	0x200000c4
 8000a4c:	200000a4 	.word	0x200000a4
 8000a50:	200000cc 	.word	0x200000cc
 8000a54:	20000010 	.word	0x20000010
 8000a58:	200000b0 	.word	0x200000b0
 8000a5c:	200000a8 	.word	0x200000a8
 8000a60:	20000004 	.word	0x20000004
 8000a64:	20000000 	.word	0x20000000

08000a68 <StartTask02>:
 * @brief Function implementing the myTaskoutput thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument) {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask02 */
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &ADC_Value, 100);
 8000a70:	2264      	movs	r2, #100	; 0x64
 8000a72:	492e      	ldr	r1, [pc, #184]	; (8000b2c <StartTask02+0xc4>)
 8000a74:	482e      	ldr	r0, [pc, #184]	; (8000b30 <StartTask02+0xc8>)
 8000a76:	f000 ff11 	bl	800189c <HAL_ADC_Start_DMA>
	/* Infinite loop */
	for (;;) {
		for (i = 0, ad1 = 0, ad2 = 0; i < 100;) {
 8000a7a:	4b2e      	ldr	r3, [pc, #184]	; (8000b34 <StartTask02+0xcc>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	4b2d      	ldr	r3, [pc, #180]	; (8000b38 <StartTask02+0xd0>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	4b2d      	ldr	r3, [pc, #180]	; (8000b3c <StartTask02+0xd4>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	e01c      	b.n	8000ac8 <StartTask02+0x60>
			ad1 += ADC_Value[i++];
 8000a8e:	4b29      	ldr	r3, [pc, #164]	; (8000b34 <StartTask02+0xcc>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	1c5a      	adds	r2, r3, #1
 8000a94:	4927      	ldr	r1, [pc, #156]	; (8000b34 <StartTask02+0xcc>)
 8000a96:	600a      	str	r2, [r1, #0]
 8000a98:	4a24      	ldr	r2, [pc, #144]	; (8000b2c <StartTask02+0xc4>)
 8000a9a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a9e:	4b26      	ldr	r3, [pc, #152]	; (8000b38 <StartTask02+0xd0>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4413      	add	r3, r2
 8000aa4:	4a24      	ldr	r2, [pc, #144]	; (8000b38 <StartTask02+0xd0>)
 8000aa6:	6013      	str	r3, [r2, #0]
			ad2 += ADC_Value[i++];
 8000aa8:	4b22      	ldr	r3, [pc, #136]	; (8000b34 <StartTask02+0xcc>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	1c5a      	adds	r2, r3, #1
 8000aae:	4921      	ldr	r1, [pc, #132]	; (8000b34 <StartTask02+0xcc>)
 8000ab0:	600a      	str	r2, [r1, #0]
 8000ab2:	4a1e      	ldr	r2, [pc, #120]	; (8000b2c <StartTask02+0xc4>)
 8000ab4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ab8:	4b20      	ldr	r3, [pc, #128]	; (8000b3c <StartTask02+0xd4>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4413      	add	r3, r2
 8000abe:	4a1f      	ldr	r2, [pc, #124]	; (8000b3c <StartTask02+0xd4>)
 8000ac0:	6013      	str	r3, [r2, #0]
			osDelay(1);
 8000ac2:	2001      	movs	r0, #1
 8000ac4:	f003 fd6e 	bl	80045a4 <osDelay>
		for (i = 0, ad1 = 0, ad2 = 0; i < 100;) {
 8000ac8:	4b1a      	ldr	r3, [pc, #104]	; (8000b34 <StartTask02+0xcc>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2b63      	cmp	r3, #99	; 0x63
 8000ace:	ddde      	ble.n	8000a8e <StartTask02+0x26>
		}
		real_adc1 = ad1 / 50;
 8000ad0:	4b19      	ldr	r3, [pc, #100]	; (8000b38 <StartTask02+0xd0>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a1a      	ldr	r2, [pc, #104]	; (8000b40 <StartTask02+0xd8>)
 8000ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8000ada:	091b      	lsrs	r3, r3, #4
 8000adc:	4a19      	ldr	r2, [pc, #100]	; (8000b44 <StartTask02+0xdc>)
 8000ade:	6013      	str	r3, [r2, #0]
		real_adc2 = ad2 / 50;
 8000ae0:	4b16      	ldr	r3, [pc, #88]	; (8000b3c <StartTask02+0xd4>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a16      	ldr	r2, [pc, #88]	; (8000b40 <StartTask02+0xd8>)
 8000ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8000aea:	091b      	lsrs	r3, r3, #4
 8000aec:	4a16      	ldr	r2, [pc, #88]	; (8000b48 <StartTask02+0xe0>)
 8000aee:	6013      	str	r3, [r2, #0]
		if(real_adc1>real_adc2){
 8000af0:	4b14      	ldr	r3, [pc, #80]	; (8000b44 <StartTask02+0xdc>)
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	4b14      	ldr	r3, [pc, #80]	; (8000b48 <StartTask02+0xe0>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	d909      	bls.n	8000b10 <StartTask02+0xa8>
			motor_res=1;
 8000afc:	4b13      	ldr	r3, [pc, #76]	; (8000b4c <StartTask02+0xe4>)
 8000afe:	2201      	movs	r2, #1
 8000b00:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000b02:	2200      	movs	r2, #0
 8000b04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b08:	4811      	ldr	r0, [pc, #68]	; (8000b50 <StartTask02+0xe8>)
 8000b0a:	f001 fe77 	bl	80027fc <HAL_GPIO_WritePin>
 8000b0e:	e008      	b.n	8000b22 <StartTask02+0xba>
		}else{
			motor_res=0;
 8000b10:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <StartTask02+0xe4>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000b16:	2201      	movs	r2, #1
 8000b18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b1c:	480c      	ldr	r0, [pc, #48]	; (8000b50 <StartTask02+0xe8>)
 8000b1e:	f001 fe6d 	bl	80027fc <HAL_GPIO_WritePin>
		}
		//HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
		print_sysinfo(0);
 8000b22:	2000      	movs	r0, #0
 8000b24:	f7ff fdb4 	bl	8000690 <print_sysinfo>
		for (i = 0, ad1 = 0, ad2 = 0; i < 100;) {
 8000b28:	e7a7      	b.n	8000a7a <StartTask02+0x12>
 8000b2a:	bf00      	nop
 8000b2c:	20001a6c 	.word	0x20001a6c
 8000b30:	200019e8 	.word	0x200019e8
 8000b34:	200000ac 	.word	0x200000ac
 8000b38:	20001bfc 	.word	0x20001bfc
 8000b3c:	20001c00 	.word	0x20001c00
 8000b40:	51eb851f 	.word	0x51eb851f
 8000b44:	20001c04 	.word	0x20001c04
 8000b48:	20001a68 	.word	0x20001a68
 8000b4c:	200000a8 	.word	0x200000a8
 8000b50:	40011000 	.word	0x40011000

08000b54 <StartTask03>:
 * @brief Function implementing the myTask_BUTTON thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask03 */
	/* Infinite loop */
	for (;;) {
		if (buttom_flag[1] > 0) {                        //up
 8000b5c:	4b65      	ldr	r3, [pc, #404]	; (8000cf4 <StartTask03+0x1a0>)
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	dd02      	ble.n	8000b6a <StartTask03+0x16>
			sys_mode = 1;
 8000b64:	4b64      	ldr	r3, [pc, #400]	; (8000cf8 <StartTask03+0x1a4>)
 8000b66:	2201      	movs	r2, #1
 8000b68:	601a      	str	r2, [r3, #0]
			//run_motor(motor_dir, 1);
		}
		if (buttom_flag[2] > 0) {                        //mind
 8000b6a:	4b62      	ldr	r3, [pc, #392]	; (8000cf4 <StartTask03+0x1a0>)
 8000b6c:	689b      	ldr	r3, [r3, #8]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	dd02      	ble.n	8000b78 <StartTask03+0x24>
			sys_mode = 2;
 8000b72:	4b61      	ldr	r3, [pc, #388]	; (8000cf8 <StartTask03+0x1a4>)
 8000b74:	2202      	movs	r2, #2
 8000b76:	601a      	str	r2, [r3, #0]
			//stop_motor();
		}
		if (buttom_flag[3] > 0) {                        //down
 8000b78:	4b5e      	ldr	r3, [pc, #376]	; (8000cf4 <StartTask03+0x1a0>)
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	dd02      	ble.n	8000b86 <StartTask03+0x32>
			sys_mode = 3;
 8000b80:	4b5d      	ldr	r3, [pc, #372]	; (8000cf8 <StartTask03+0x1a4>)
 8000b82:	2203      	movs	r2, #3
 8000b84:	601a      	str	r2, [r3, #0]
			//run_motor(motor_dir, 1);
		}
		if (buttom_flag[4] > 0&&sys_setting==1) {                        //jump setting
 8000b86:	4b5b      	ldr	r3, [pc, #364]	; (8000cf4 <StartTask03+0x1a0>)
 8000b88:	691b      	ldr	r3, [r3, #16]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	dd08      	ble.n	8000ba0 <StartTask03+0x4c>
 8000b8e:	4b5b      	ldr	r3, [pc, #364]	; (8000cfc <StartTask03+0x1a8>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d104      	bne.n	8000ba0 <StartTask03+0x4c>
			sys_setting = 0;
 8000b96:	4b59      	ldr	r3, [pc, #356]	; (8000cfc <StartTask03+0x1a8>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
			point_motor();
 8000b9c:	f7ff fd1c 	bl	80005d8 <point_motor>
		}

		if (buttom_flag[1] > 0 && buttom_flag[3] > 0) {      //into setting mode
 8000ba0:	4b54      	ldr	r3, [pc, #336]	; (8000cf4 <StartTask03+0x1a0>)
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	f340 80a1 	ble.w	8000cec <StartTask03+0x198>
 8000baa:	4b52      	ldr	r3, [pc, #328]	; (8000cf4 <StartTask03+0x1a0>)
 8000bac:	68db      	ldr	r3, [r3, #12]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	f340 809c 	ble.w	8000cec <StartTask03+0x198>
			sys_setting = 1;
 8000bb4:	4b51      	ldr	r3, [pc, #324]	; (8000cfc <StartTask03+0x1a8>)
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	601a      	str	r2, [r3, #0]
			clean_buttom_flag();
 8000bba:	f7ff fc2f 	bl	800041c <clean_buttom_flag>
			point_motor();
 8000bbe:	f7ff fd0b 	bl	80005d8 <point_motor>
			while (sys_setting > 0) {
 8000bc2:	e08e      	b.n	8000ce2 <StartTask03+0x18e>

				if (buttom_flag[1] > 0 && buttom_flag[3] > 0) { //Auto set Both limits
 8000bc4:	4b4b      	ldr	r3, [pc, #300]	; (8000cf4 <StartTask03+0x1a0>)
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	dd0c      	ble.n	8000be6 <StartTask03+0x92>
 8000bcc:	4b49      	ldr	r3, [pc, #292]	; (8000cf4 <StartTask03+0x1a0>)
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	dd08      	ble.n	8000be6 <StartTask03+0x92>
					clean_buttom_flag();
 8000bd4:	f7ff fc22 	bl	800041c <clean_buttom_flag>
					sys_setting = 2;
 8000bd8:	4b48      	ldr	r3, [pc, #288]	; (8000cfc <StartTask03+0x1a8>)
 8000bda:	2202      	movs	r2, #2
 8000bdc:	601a      	str	r2, [r3, #0]
					auto_limits(1);
 8000bde:	2001      	movs	r0, #1
 8000be0:	f7ff fd16 	bl	8000610 <auto_limits>
 8000be4:	e052      	b.n	8000c8c <StartTask03+0x138>
					//sys_setting = 1;
				} else if (buttom_flag[2] > 0 && buttom_flag[3] > 0) { //Top limit Set by user
 8000be6:	4b43      	ldr	r3, [pc, #268]	; (8000cf4 <StartTask03+0x1a0>)
 8000be8:	689b      	ldr	r3, [r3, #8]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	dd23      	ble.n	8000c36 <StartTask03+0xe2>
 8000bee:	4b41      	ldr	r3, [pc, #260]	; (8000cf4 <StartTask03+0x1a0>)
 8000bf0:	68db      	ldr	r3, [r3, #12]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	dd1f      	ble.n	8000c36 <StartTask03+0xe2>
					clean_buttom_flag();
 8000bf6:	f7ff fc11 	bl	800041c <clean_buttom_flag>
					sys_setting = 3;
 8000bfa:	4b40      	ldr	r3, [pc, #256]	; (8000cfc <StartTask03+0x1a8>)
 8000bfc:	2203      	movs	r2, #3
 8000bfe:	601a      	str	r2, [r3, #0]
					run_motor(motor_dir, 1, 0);
 8000c00:	4b3f      	ldr	r3, [pc, #252]	; (8000d00 <StartTask03+0x1ac>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	2200      	movs	r2, #0
 8000c06:	2101      	movs	r1, #1
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff fc85 	bl	8000518 <run_motor>
					while (1) {                        //keep run
						clean_buttom_flag();
 8000c0e:	f7ff fc05 	bl	800041c <clean_buttom_flag>
						if (buttom_flag[2] > 0) {
 8000c12:	4b38      	ldr	r3, [pc, #224]	; (8000cf4 <StartTask03+0x1a0>)
 8000c14:	689b      	ldr	r3, [r3, #8]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	dd09      	ble.n	8000c2e <StartTask03+0xda>
							stop_motor();
 8000c1a:	f7ff fc5d 	bl	80004d8 <stop_motor>
							save_limits_set(2);
 8000c1e:	2002      	movs	r0, #2
 8000c20:	f7ff fd16 	bl	8000650 <save_limits_set>
							sys_setting = 1;
 8000c24:	4b35      	ldr	r3, [pc, #212]	; (8000cfc <StartTask03+0x1a8>)
 8000c26:	2201      	movs	r2, #1
 8000c28:	601a      	str	r2, [r3, #0]
							break;
 8000c2a:	bf00      	nop
				} else if (buttom_flag[2] > 0 && buttom_flag[3] > 0) { //Top limit Set by user
 8000c2c:	e02e      	b.n	8000c8c <StartTask03+0x138>
						}
						osDelay(1);
 8000c2e:	2001      	movs	r0, #1
 8000c30:	f003 fcb8 	bl	80045a4 <osDelay>
						clean_buttom_flag();
 8000c34:	e7eb      	b.n	8000c0e <StartTask03+0xba>
					}
				} else if (buttom_flag[1] > 0 && buttom_flag[2] > 0) { //Bottom limit Set by user
 8000c36:	4b2f      	ldr	r3, [pc, #188]	; (8000cf4 <StartTask03+0x1a0>)
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	dd26      	ble.n	8000c8c <StartTask03+0x138>
 8000c3e:	4b2d      	ldr	r3, [pc, #180]	; (8000cf4 <StartTask03+0x1a0>)
 8000c40:	689b      	ldr	r3, [r3, #8]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	dd22      	ble.n	8000c8c <StartTask03+0x138>
					clean_buttom_flag();
 8000c46:	f7ff fbe9 	bl	800041c <clean_buttom_flag>
					sys_setting = 4;
 8000c4a:	4b2c      	ldr	r3, [pc, #176]	; (8000cfc <StartTask03+0x1a8>)
 8000c4c:	2204      	movs	r2, #4
 8000c4e:	601a      	str	r2, [r3, #0]
					run_motor(abs(motor_dir - 1), 0, 0);
 8000c50:	4b2b      	ldr	r3, [pc, #172]	; (8000d00 <StartTask03+0x1ac>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	3b01      	subs	r3, #1
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	bfb8      	it	lt
 8000c5a:	425b      	neglt	r3, r3
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	2100      	movs	r1, #0
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff fc59 	bl	8000518 <run_motor>
					while (1) {                        //keep run
						clean_buttom_flag();
 8000c66:	f7ff fbd9 	bl	800041c <clean_buttom_flag>
						if (buttom_flag[2] > 0) {
 8000c6a:	4b22      	ldr	r3, [pc, #136]	; (8000cf4 <StartTask03+0x1a0>)
 8000c6c:	689b      	ldr	r3, [r3, #8]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	dd08      	ble.n	8000c84 <StartTask03+0x130>
							stop_motor();
 8000c72:	f7ff fc31 	bl	80004d8 <stop_motor>
							save_limits_set(3);
 8000c76:	2003      	movs	r0, #3
 8000c78:	f7ff fcea 	bl	8000650 <save_limits_set>
							sys_setting = 1;
 8000c7c:	4b1f      	ldr	r3, [pc, #124]	; (8000cfc <StartTask03+0x1a8>)
 8000c7e:	2201      	movs	r2, #1
 8000c80:	601a      	str	r2, [r3, #0]
							break;
 8000c82:	e003      	b.n	8000c8c <StartTask03+0x138>
						}
						osDelay(1);
 8000c84:	2001      	movs	r0, #1
 8000c86:	f003 fc8d 	bl	80045a4 <osDelay>
						clean_buttom_flag();
 8000c8a:	e7ec      	b.n	8000c66 <StartTask03+0x112>
					}
				}
				if (buttom_flag[2] > 0 && sys_setting == 1) {           //改變旋轉方向
 8000c8c:	4b19      	ldr	r3, [pc, #100]	; (8000cf4 <StartTask03+0x1a0>)
 8000c8e:	689b      	ldr	r3, [r3, #8]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	dd10      	ble.n	8000cb6 <StartTask03+0x162>
 8000c94:	4b19      	ldr	r3, [pc, #100]	; (8000cfc <StartTask03+0x1a8>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d10c      	bne.n	8000cb6 <StartTask03+0x162>
					point_motor();
 8000c9c:	f7ff fc9c 	bl	80005d8 <point_motor>
					if (motor_dir == 1) {
 8000ca0:	4b17      	ldr	r3, [pc, #92]	; (8000d00 <StartTask03+0x1ac>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d103      	bne.n	8000cb0 <StartTask03+0x15c>
						motor_dir = 0;
 8000ca8:	4b15      	ldr	r3, [pc, #84]	; (8000d00 <StartTask03+0x1ac>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	e002      	b.n	8000cb6 <StartTask03+0x162>
					} else {
						motor_dir = 1;
 8000cb0:	4b13      	ldr	r3, [pc, #76]	; (8000d00 <StartTask03+0x1ac>)
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	601a      	str	r2, [r3, #0]
					}
				}
				if (buttom_flag[2]) {
 8000cb6:	4b0f      	ldr	r3, [pc, #60]	; (8000cf4 <StartTask03+0x1a0>)
 8000cb8:	689b      	ldr	r3, [r3, #8]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d004      	beq.n	8000cc8 <StartTask03+0x174>
					save_limits_set(0);
 8000cbe:	2000      	movs	r0, #0
 8000cc0:	f7ff fcc6 	bl	8000650 <save_limits_set>
					point_motor();
 8000cc4:	f7ff fc88 	bl	80005d8 <point_motor>
				}
				if (buttom_flag[4] > 0) {                        //exit setting
 8000cc8:	4b0a      	ldr	r3, [pc, #40]	; (8000cf4 <StartTask03+0x1a0>)
 8000cca:	691b      	ldr	r3, [r3, #16]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	dd05      	ble.n	8000cdc <StartTask03+0x188>
					point_motor();
 8000cd0:	f7ff fc82 	bl	80005d8 <point_motor>
					sys_setting = 0;
 8000cd4:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <StartTask03+0x1a8>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
					break;
 8000cda:	e007      	b.n	8000cec <StartTask03+0x198>
				}
				osDelay(250);
 8000cdc:	20fa      	movs	r0, #250	; 0xfa
 8000cde:	f003 fc61 	bl	80045a4 <osDelay>
			while (sys_setting > 0) {
 8000ce2:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <StartTask03+0x1a8>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	f73f af6c 	bgt.w	8000bc4 <StartTask03+0x70>
			}
		}
		osDelay(100);
 8000cec:	2064      	movs	r0, #100	; 0x64
 8000cee:	f003 fc59 	bl	80045a4 <osDelay>
		if (buttom_flag[1] > 0) {                        //up
 8000cf2:	e733      	b.n	8000b5c <StartTask03+0x8>
 8000cf4:	200000b0 	.word	0x200000b0
 8000cf8:	200000c4 	.word	0x200000c4
 8000cfc:	200000c8 	.word	0x200000c8
 8000d00:	200000cc 	.word	0x200000cc

08000d04 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b088      	sub	sp, #32
 8000d08:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0a:	f107 0310 	add.w	r3, r7, #16
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	605a      	str	r2, [r3, #4]
 8000d14:	609a      	str	r2, [r3, #8]
 8000d16:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d18:	4b41      	ldr	r3, [pc, #260]	; (8000e20 <MX_GPIO_Init+0x11c>)
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	4a40      	ldr	r2, [pc, #256]	; (8000e20 <MX_GPIO_Init+0x11c>)
 8000d1e:	f043 0310 	orr.w	r3, r3, #16
 8000d22:	6193      	str	r3, [r2, #24]
 8000d24:	4b3e      	ldr	r3, [pc, #248]	; (8000e20 <MX_GPIO_Init+0x11c>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	f003 0310 	and.w	r3, r3, #16
 8000d2c:	60fb      	str	r3, [r7, #12]
 8000d2e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d30:	4b3b      	ldr	r3, [pc, #236]	; (8000e20 <MX_GPIO_Init+0x11c>)
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	4a3a      	ldr	r2, [pc, #232]	; (8000e20 <MX_GPIO_Init+0x11c>)
 8000d36:	f043 0304 	orr.w	r3, r3, #4
 8000d3a:	6193      	str	r3, [r2, #24]
 8000d3c:	4b38      	ldr	r3, [pc, #224]	; (8000e20 <MX_GPIO_Init+0x11c>)
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	f003 0304 	and.w	r3, r3, #4
 8000d44:	60bb      	str	r3, [r7, #8]
 8000d46:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d48:	4b35      	ldr	r3, [pc, #212]	; (8000e20 <MX_GPIO_Init+0x11c>)
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	4a34      	ldr	r2, [pc, #208]	; (8000e20 <MX_GPIO_Init+0x11c>)
 8000d4e:	f043 0308 	orr.w	r3, r3, #8
 8000d52:	6193      	str	r3, [r2, #24]
 8000d54:	4b32      	ldr	r3, [pc, #200]	; (8000e20 <MX_GPIO_Init+0x11c>)
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	f003 0308 	and.w	r3, r3, #8
 8000d5c:	607b      	str	r3, [r7, #4]
 8000d5e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000d60:	2200      	movs	r2, #0
 8000d62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d66:	482f      	ldr	r0, [pc, #188]	; (8000e24 <MX_GPIO_Init+0x120>)
 8000d68:	f001 fd48 	bl	80027fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MC_4_Pin|MC_3_Pin, GPIO_PIN_RESET);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000d72:	482d      	ldr	r0, [pc, #180]	; (8000e28 <MX_GPIO_Init+0x124>)
 8000d74:	f001 fd42 	bl	80027fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MC_2_Pin|MC_1_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	f44f 51d8 	mov.w	r1, #6912	; 0x1b00
 8000d7e:	482b      	ldr	r0, [pc, #172]	; (8000e2c <MX_GPIO_Init+0x128>)
 8000d80:	f001 fd3c 	bl	80027fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000d84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d92:	2302      	movs	r3, #2
 8000d94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000d96:	f107 0310 	add.w	r3, r7, #16
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4821      	ldr	r0, [pc, #132]	; (8000e24 <MX_GPIO_Init+0x120>)
 8000d9e:	f001 fbd3 	bl	8002548 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = MC_4_Pin|MC_3_Pin;
 8000da2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000da6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da8:	2301      	movs	r3, #1
 8000daa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db0:	2302      	movs	r3, #2
 8000db2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db4:	f107 0310 	add.w	r3, r7, #16
 8000db8:	4619      	mov	r1, r3
 8000dba:	481b      	ldr	r0, [pc, #108]	; (8000e28 <MX_GPIO_Init+0x124>)
 8000dbc:	f001 fbc4 	bl	8002548 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = MC_2_Pin|MC_1_Pin|LED2_Pin|LED1_Pin;
 8000dc0:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8000dc4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd2:	f107 0310 	add.w	r3, r7, #16
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4814      	ldr	r0, [pc, #80]	; (8000e2c <MX_GPIO_Init+0x128>)
 8000dda:	f001 fbb5 	bl	8002548 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin|BUTTON4_Pin;
 8000dde:	23f0      	movs	r3, #240	; 0xf0
 8000de0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000de2:	4b13      	ldr	r3, [pc, #76]	; (8000e30 <MX_GPIO_Init+0x12c>)
 8000de4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000de6:	2302      	movs	r3, #2
 8000de8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dea:	f107 0310 	add.w	r3, r7, #16
 8000dee:	4619      	mov	r1, r3
 8000df0:	480d      	ldr	r0, [pc, #52]	; (8000e28 <MX_GPIO_Init+0x124>)
 8000df2:	f001 fba9 	bl	8002548 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000df6:	2200      	movs	r2, #0
 8000df8:	2100      	movs	r1, #0
 8000dfa:	200a      	movs	r0, #10
 8000dfc:	f001 f909 	bl	8002012 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000e00:	200a      	movs	r0, #10
 8000e02:	f001 f922 	bl	800204a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000e06:	2200      	movs	r2, #0
 8000e08:	2100      	movs	r1, #0
 8000e0a:	2017      	movs	r0, #23
 8000e0c:	f001 f901 	bl	8002012 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000e10:	2017      	movs	r0, #23
 8000e12:	f001 f91a 	bl	800204a <HAL_NVIC_EnableIRQ>

}
 8000e16:	bf00      	nop
 8000e18:	3720      	adds	r7, #32
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40021000 	.word	0x40021000
 8000e24:	40011000 	.word	0x40011000
 8000e28:	40010c00 	.word	0x40010c00
 8000e2c:	40010800 	.word	0x40010800
 8000e30:	10110000 	.word	0x10110000

08000e34 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000e3c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e40:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000e44:	f003 0301 	and.w	r3, r3, #1
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d013      	beq.n	8000e74 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000e4c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e50:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000e54:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d00b      	beq.n	8000e74 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000e5c:	e000      	b.n	8000e60 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000e5e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000e60:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d0f9      	beq.n	8000e5e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000e6a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e6e:	687a      	ldr	r2, [r7, #4]
 8000e70:	b2d2      	uxtb	r2, r2
 8000e72:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000e74:	687b      	ldr	r3, [r7, #4]
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bc80      	pop	{r7}
 8000e7e:	4770      	bx	lr

08000e80 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file , char *ptr,int len)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
    int i = 0;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	617b      	str	r3, [r7, #20]
    for(i = 0;i<len;i++)
 8000e90:	2300      	movs	r3, #0
 8000e92:	617b      	str	r3, [r7, #20]
 8000e94:	e009      	b.n	8000eaa <_write+0x2a>
        ITM_SendChar((*ptr++));
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	1c5a      	adds	r2, r3, #1
 8000e9a:	60ba      	str	r2, [r7, #8]
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff ffc8 	bl	8000e34 <ITM_SendChar>
    for(i = 0;i<len;i++)
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	617b      	str	r3, [r7, #20]
 8000eaa:	697a      	ldr	r2, [r7, #20]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	dbf1      	blt.n	8000e96 <_write+0x16>
    return len;
 8000eb2:	687b      	ldr	r3, [r7, #4]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3718      	adds	r7, #24
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ec0:	f000 fbb2 	bl	8001628 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ec4:	f000 f811 	bl	8000eea <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ec8:	f7ff ff1c 	bl	8000d04 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ecc:	f7ff fa0e 	bl	80002ec <MX_DMA_Init>
  MX_ADC1_Init();
 8000ed0:	f7ff f93e 	bl	8000150 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000ed4:	f000 f9ac 	bl	8001230 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000ed8:	f000 faac 	bl	8001434 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000edc:	f003 fa52 	bl	8004384 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000ee0:	f7ff fc66 	bl	80007b0 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000ee4:	f003 fa80 	bl	80043e8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <main+0x2c>

08000eea <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b094      	sub	sp, #80	; 0x50
 8000eee:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ef0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ef4:	2228      	movs	r2, #40	; 0x28
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f005 ff0c 	bl	8006d16 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000efe:	f107 0314 	add.w	r3, r7, #20
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	605a      	str	r2, [r3, #4]
 8000f08:	609a      	str	r2, [r3, #8]
 8000f0a:	60da      	str	r2, [r3, #12]
 8000f0c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f0e:	1d3b      	adds	r3, r7, #4
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f22:	2310      	movs	r3, #16
 8000f24:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f26:	2300      	movs	r3, #0
 8000f28:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f001 fcac 	bl	800288c <HAL_RCC_OscConfig>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000f3a:	f000 f826 	bl	8000f8a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f3e:	230f      	movs	r3, #15
 8000f40:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f46:	2300      	movs	r3, #0
 8000f48:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f52:	f107 0314 	add.w	r3, r7, #20
 8000f56:	2100      	movs	r1, #0
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f001 ff17 	bl	8002d8c <HAL_RCC_ClockConfig>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000f64:	f000 f811 	bl	8000f8a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f70:	1d3b      	adds	r3, r7, #4
 8000f72:	4618      	mov	r0, r3
 8000f74:	f002 f8a6 	bl	80030c4 <HAL_RCCEx_PeriphCLKConfig>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000f7e:	f000 f804 	bl	8000f8a <Error_Handler>
  }
}
 8000f82:	bf00      	nop
 8000f84:	3750      	adds	r7, #80	; 0x50
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f8e:	bf00      	nop
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bc80      	pop	{r7}
 8000f94:	4770      	bx	lr
	...

08000f98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f9e:	4b15      	ldr	r3, [pc, #84]	; (8000ff4 <HAL_MspInit+0x5c>)
 8000fa0:	699b      	ldr	r3, [r3, #24]
 8000fa2:	4a14      	ldr	r2, [pc, #80]	; (8000ff4 <HAL_MspInit+0x5c>)
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	6193      	str	r3, [r2, #24]
 8000faa:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <HAL_MspInit+0x5c>)
 8000fac:	699b      	ldr	r3, [r3, #24]
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	60bb      	str	r3, [r7, #8]
 8000fb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fb6:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <HAL_MspInit+0x5c>)
 8000fb8:	69db      	ldr	r3, [r3, #28]
 8000fba:	4a0e      	ldr	r2, [pc, #56]	; (8000ff4 <HAL_MspInit+0x5c>)
 8000fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fc0:	61d3      	str	r3, [r2, #28]
 8000fc2:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <HAL_MspInit+0x5c>)
 8000fc4:	69db      	ldr	r3, [r3, #28]
 8000fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fca:	607b      	str	r3, [r7, #4]
 8000fcc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000fce:	4b0a      	ldr	r3, [pc, #40]	; (8000ff8 <HAL_MspInit+0x60>)
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	4a04      	ldr	r2, [pc, #16]	; (8000ff8 <HAL_MspInit+0x60>)
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fea:	bf00      	nop
 8000fec:	3714      	adds	r7, #20
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	40010000 	.word	0x40010000

08000ffc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	bc80      	pop	{r7}
 8001006:	4770      	bx	lr

08001008 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800100c:	e7fe      	b.n	800100c <HardFault_Handler+0x4>

0800100e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001012:	e7fe      	b.n	8001012 <MemManage_Handler+0x4>

08001014 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001018:	e7fe      	b.n	8001018 <BusFault_Handler+0x4>

0800101a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800101a:	b480      	push	{r7}
 800101c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800101e:	e7fe      	b.n	800101e <UsageFault_Handler+0x4>

08001020 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	bc80      	pop	{r7}
 800102a:	4770      	bx	lr

0800102c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001030:	f000 fb40 	bl	80016b4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001034:	f004 fea0 	bl	8005d78 <xTaskGetSchedulerState>
 8001038:	4603      	mov	r3, r0
 800103a:	2b01      	cmp	r3, #1
 800103c:	d001      	beq.n	8001042 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800103e:	f005 fbe3 	bl	8006808 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}

08001046 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800104a:	2010      	movs	r0, #16
 800104c:	f001 fc06 	bl	800285c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}

08001054 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001058:	4802      	ldr	r0, [pc, #8]	; (8001064 <DMA1_Channel1_IRQHandler+0x10>)
 800105a:	f001 f941 	bl	80022e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20001a18 	.word	0x20001a18

08001068 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800106c:	4802      	ldr	r0, [pc, #8]	; (8001078 <DMA1_Channel6_IRQHandler+0x10>)
 800106e:	f001 f937 	bl	80022e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20001cac 	.word	0x20001cac

0800107c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001080:	4802      	ldr	r0, [pc, #8]	; (800108c <DMA1_Channel7_IRQHandler+0x10>)
 8001082:	f001 f92d 	bl	80022e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */
  //HAL_UART_Init(&huart2);

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20001cf0 	.word	0x20001cf0

08001090 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

	//speed_flag=speed_flag+100;
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001094:	2020      	movs	r0, #32
 8001096:	f001 fbe1 	bl	800285c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800109a:	2040      	movs	r0, #64	; 0x40
 800109c:	f001 fbde 	bl	800285c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80010a0:	2080      	movs	r0, #128	; 0x80
 80010a2:	f001 fbdb 	bl	800285c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
	...

080010ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80010b0:	4802      	ldr	r0, [pc, #8]	; (80010bc <USART2_IRQHandler+0x10>)
 80010b2:	f002 fd6d 	bl	8003b90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20001d34 	.word	0x20001d34

080010c0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010cc:	2300      	movs	r3, #0
 80010ce:	617b      	str	r3, [r7, #20]
 80010d0:	e00a      	b.n	80010e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80010d2:	f3af 8000 	nop.w
 80010d6:	4601      	mov	r1, r0
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	1c5a      	adds	r2, r3, #1
 80010dc:	60ba      	str	r2, [r7, #8]
 80010de:	b2ca      	uxtb	r2, r1
 80010e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	3301      	adds	r3, #1
 80010e6:	617b      	str	r3, [r7, #20]
 80010e8:	697a      	ldr	r2, [r7, #20]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	dbf0      	blt.n	80010d2 <_read+0x12>
	}

return len;
 80010f0:	687b      	ldr	r3, [r7, #4]
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3718      	adds	r7, #24
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <_close>:
	}
	return len;
}

int _close(int file)
{
 80010fa:	b480      	push	{r7}
 80010fc:	b083      	sub	sp, #12
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
	return -1;
 8001102:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001106:	4618      	mov	r0, r3
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	bc80      	pop	{r7}
 800110e:	4770      	bx	lr

08001110 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001120:	605a      	str	r2, [r3, #4]
	return 0;
 8001122:	2300      	movs	r3, #0
}
 8001124:	4618      	mov	r0, r3
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	bc80      	pop	{r7}
 800112c:	4770      	bx	lr

0800112e <_isatty>:

int _isatty(int file)
{
 800112e:	b480      	push	{r7}
 8001130:	b083      	sub	sp, #12
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
	return 1;
 8001136:	2301      	movs	r3, #1
}
 8001138:	4618      	mov	r0, r3
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	bc80      	pop	{r7}
 8001140:	4770      	bx	lr

08001142 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001142:	b480      	push	{r7}
 8001144:	b085      	sub	sp, #20
 8001146:	af00      	add	r7, sp, #0
 8001148:	60f8      	str	r0, [r7, #12]
 800114a:	60b9      	str	r1, [r7, #8]
 800114c:	607a      	str	r2, [r7, #4]
	return 0;
 800114e:	2300      	movs	r3, #0
}
 8001150:	4618      	mov	r0, r3
 8001152:	3714      	adds	r7, #20
 8001154:	46bd      	mov	sp, r7
 8001156:	bc80      	pop	{r7}
 8001158:	4770      	bx	lr
	...

0800115c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001164:	4a14      	ldr	r2, [pc, #80]	; (80011b8 <_sbrk+0x5c>)
 8001166:	4b15      	ldr	r3, [pc, #84]	; (80011bc <_sbrk+0x60>)
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001170:	4b13      	ldr	r3, [pc, #76]	; (80011c0 <_sbrk+0x64>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d102      	bne.n	800117e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001178:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <_sbrk+0x64>)
 800117a:	4a12      	ldr	r2, [pc, #72]	; (80011c4 <_sbrk+0x68>)
 800117c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800117e:	4b10      	ldr	r3, [pc, #64]	; (80011c0 <_sbrk+0x64>)
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4413      	add	r3, r2
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	429a      	cmp	r2, r3
 800118a:	d207      	bcs.n	800119c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800118c:	f005 fd8e 	bl	8006cac <__errno>
 8001190:	4602      	mov	r2, r0
 8001192:	230c      	movs	r3, #12
 8001194:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001196:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800119a:	e009      	b.n	80011b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800119c:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <_sbrk+0x64>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011a2:	4b07      	ldr	r3, [pc, #28]	; (80011c0 <_sbrk+0x64>)
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4413      	add	r3, r2
 80011aa:	4a05      	ldr	r2, [pc, #20]	; (80011c0 <_sbrk+0x64>)
 80011ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ae:	68fb      	ldr	r3, [r7, #12]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3718      	adds	r7, #24
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20005000 	.word	0x20005000
 80011bc:	00000400 	.word	0x00000400
 80011c0:	200000d4 	.word	0x200000d4
 80011c4:	20001dc0 	.word	0x20001dc0

080011c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80011cc:	4b15      	ldr	r3, [pc, #84]	; (8001224 <SystemInit+0x5c>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a14      	ldr	r2, [pc, #80]	; (8001224 <SystemInit+0x5c>)
 80011d2:	f043 0301 	orr.w	r3, r3, #1
 80011d6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80011d8:	4b12      	ldr	r3, [pc, #72]	; (8001224 <SystemInit+0x5c>)
 80011da:	685a      	ldr	r2, [r3, #4]
 80011dc:	4911      	ldr	r1, [pc, #68]	; (8001224 <SystemInit+0x5c>)
 80011de:	4b12      	ldr	r3, [pc, #72]	; (8001228 <SystemInit+0x60>)
 80011e0:	4013      	ands	r3, r2
 80011e2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80011e4:	4b0f      	ldr	r3, [pc, #60]	; (8001224 <SystemInit+0x5c>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a0e      	ldr	r2, [pc, #56]	; (8001224 <SystemInit+0x5c>)
 80011ea:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80011ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011f2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011f4:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <SystemInit+0x5c>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a0a      	ldr	r2, [pc, #40]	; (8001224 <SystemInit+0x5c>)
 80011fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011fe:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001200:	4b08      	ldr	r3, [pc, #32]	; (8001224 <SystemInit+0x5c>)
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	4a07      	ldr	r2, [pc, #28]	; (8001224 <SystemInit+0x5c>)
 8001206:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800120a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800120c:	4b05      	ldr	r3, [pc, #20]	; (8001224 <SystemInit+0x5c>)
 800120e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001212:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001214:	4b05      	ldr	r3, [pc, #20]	; (800122c <SystemInit+0x64>)
 8001216:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800121a:	609a      	str	r2, [r3, #8]
#endif 
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	bc80      	pop	{r7}
 8001222:	4770      	bx	lr
 8001224:	40021000 	.word	0x40021000
 8001228:	f8ff0000 	.word	0xf8ff0000
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b08a      	sub	sp, #40	; 0x28
 8001234:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001236:	f107 0320 	add.w	r3, r7, #32
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001240:	1d3b      	adds	r3, r7, #4
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]
 800124c:	611a      	str	r2, [r3, #16]
 800124e:	615a      	str	r2, [r3, #20]
 8001250:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8001252:	4b28      	ldr	r3, [pc, #160]	; (80012f4 <MX_TIM2_Init+0xc4>)
 8001254:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001258:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800125a:	4b26      	ldr	r3, [pc, #152]	; (80012f4 <MX_TIM2_Init+0xc4>)
 800125c:	2200      	movs	r2, #0
 800125e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001260:	4b24      	ldr	r3, [pc, #144]	; (80012f4 <MX_TIM2_Init+0xc4>)
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8001266:	4b23      	ldr	r3, [pc, #140]	; (80012f4 <MX_TIM2_Init+0xc4>)
 8001268:	f242 720f 	movw	r2, #9999	; 0x270f
 800126c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800126e:	4b21      	ldr	r3, [pc, #132]	; (80012f4 <MX_TIM2_Init+0xc4>)
 8001270:	2200      	movs	r2, #0
 8001272:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001274:	4b1f      	ldr	r3, [pc, #124]	; (80012f4 <MX_TIM2_Init+0xc4>)
 8001276:	2200      	movs	r2, #0
 8001278:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800127a:	481e      	ldr	r0, [pc, #120]	; (80012f4 <MX_TIM2_Init+0xc4>)
 800127c:	f001 ffd8 	bl	8003230 <HAL_TIM_PWM_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001286:	f7ff fe80 	bl	8000f8a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800128a:	2300      	movs	r3, #0
 800128c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800128e:	2300      	movs	r3, #0
 8001290:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001292:	f107 0320 	add.w	r3, r7, #32
 8001296:	4619      	mov	r1, r3
 8001298:	4816      	ldr	r0, [pc, #88]	; (80012f4 <MX_TIM2_Init+0xc4>)
 800129a:	f002 fafb 	bl	8003894 <HAL_TIMEx_MasterConfigSynchronization>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80012a4:	f7ff fe71 	bl	8000f8a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012a8:	2360      	movs	r3, #96	; 0x60
 80012aa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012b0:	2300      	movs	r3, #0
 80012b2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012b8:	1d3b      	adds	r3, r7, #4
 80012ba:	2208      	movs	r2, #8
 80012bc:	4619      	mov	r1, r3
 80012be:	480d      	ldr	r0, [pc, #52]	; (80012f4 <MX_TIM2_Init+0xc4>)
 80012c0:	f002 f814 	bl	80032ec <HAL_TIM_PWM_ConfigChannel>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80012ca:	f7ff fe5e 	bl	8000f8a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80012ce:	1d3b      	adds	r3, r7, #4
 80012d0:	220c      	movs	r2, #12
 80012d2:	4619      	mov	r1, r3
 80012d4:	4807      	ldr	r0, [pc, #28]	; (80012f4 <MX_TIM2_Init+0xc4>)
 80012d6:	f002 f809 	bl	80032ec <HAL_TIM_PWM_ConfigChannel>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80012e0:	f7ff fe53 	bl	8000f8a <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 80012e4:	4803      	ldr	r0, [pc, #12]	; (80012f4 <MX_TIM2_Init+0xc4>)
 80012e6:	f000 f823 	bl	8001330 <HAL_TIM_MspPostInit>

}
 80012ea:	bf00      	nop
 80012ec:	3728      	adds	r7, #40	; 0x28
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20001c6c 	.word	0x20001c6c

080012f8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001308:	d10b      	bne.n	8001322 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800130a:	4b08      	ldr	r3, [pc, #32]	; (800132c <HAL_TIM_PWM_MspInit+0x34>)
 800130c:	69db      	ldr	r3, [r3, #28]
 800130e:	4a07      	ldr	r2, [pc, #28]	; (800132c <HAL_TIM_PWM_MspInit+0x34>)
 8001310:	f043 0301 	orr.w	r3, r3, #1
 8001314:	61d3      	str	r3, [r2, #28]
 8001316:	4b05      	ldr	r3, [pc, #20]	; (800132c <HAL_TIM_PWM_MspInit+0x34>)
 8001318:	69db      	ldr	r3, [r3, #28]
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001322:	bf00      	nop
 8001324:	3714      	adds	r7, #20
 8001326:	46bd      	mov	sp, r7
 8001328:	bc80      	pop	{r7}
 800132a:	4770      	bx	lr
 800132c:	40021000 	.word	0x40021000

08001330 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b088      	sub	sp, #32
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001338:	f107 030c 	add.w	r3, r7, #12
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800134e:	d12a      	bne.n	80013a6 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001350:	4b17      	ldr	r3, [pc, #92]	; (80013b0 <HAL_TIM_MspPostInit+0x80>)
 8001352:	699b      	ldr	r3, [r3, #24]
 8001354:	4a16      	ldr	r2, [pc, #88]	; (80013b0 <HAL_TIM_MspPostInit+0x80>)
 8001356:	f043 0308 	orr.w	r3, r3, #8
 800135a:	6193      	str	r3, [r2, #24]
 800135c:	4b14      	ldr	r3, [pc, #80]	; (80013b0 <HAL_TIM_MspPostInit+0x80>)
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	f003 0308 	and.w	r3, r3, #8
 8001364:	60bb      	str	r3, [r7, #8]
 8001366:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = PWM1_Pin|PWM2_Pin;
 8001368:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800136c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136e:	2302      	movs	r3, #2
 8001370:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001372:	2302      	movs	r3, #2
 8001374:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001376:	f107 030c 	add.w	r3, r7, #12
 800137a:	4619      	mov	r1, r3
 800137c:	480d      	ldr	r0, [pc, #52]	; (80013b4 <HAL_TIM_MspPostInit+0x84>)
 800137e:	f001 f8e3 	bl	8002548 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8001382:	4b0d      	ldr	r3, [pc, #52]	; (80013b8 <HAL_TIM_MspPostInit+0x88>)
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	61fb      	str	r3, [r7, #28]
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800138e:	61fb      	str	r3, [r7, #28]
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001396:	61fb      	str	r3, [r7, #28]
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800139e:	61fb      	str	r3, [r7, #28]
 80013a0:	4a05      	ldr	r2, [pc, #20]	; (80013b8 <HAL_TIM_MspPostInit+0x88>)
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80013a6:	bf00      	nop
 80013a8:	3720      	adds	r7, #32
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	40021000 	.word	0x40021000
 80013b4:	40010c00 	.word	0x40010c00
 80013b8:	40010000 	.word	0x40010000

080013bc <user_pwm_setvalue_1>:

/* USER CODE BEGIN 1 */


void user_pwm_setvalue_1(uint16_t value)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08a      	sub	sp, #40	; 0x28
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	80fb      	strh	r3, [r7, #6]
    TIM_OC_InitTypeDef sConfigOC;

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013c6:	2360      	movs	r3, #96	; 0x60
 80013c8:	60fb      	str	r3, [r7, #12]
    sConfigOC.Pulse = value;
 80013ca:	88fb      	ldrh	r3, [r7, #6]
 80013cc:	613b      	str	r3, [r7, #16]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013ce:	2300      	movs	r3, #0
 80013d0:	617b      	str	r3, [r7, #20]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013d2:	2300      	movs	r3, #0
 80013d4:	61fb      	str	r3, [r7, #28]
    HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3);
 80013d6:	f107 030c 	add.w	r3, r7, #12
 80013da:	2208      	movs	r2, #8
 80013dc:	4619      	mov	r1, r3
 80013de:	4805      	ldr	r0, [pc, #20]	; (80013f4 <user_pwm_setvalue_1+0x38>)
 80013e0:	f001 ff84 	bl	80032ec <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80013e4:	2108      	movs	r1, #8
 80013e6:	4803      	ldr	r0, [pc, #12]	; (80013f4 <user_pwm_setvalue_1+0x38>)
 80013e8:	f001 ff4e 	bl	8003288 <HAL_TIM_PWM_Start>
    //HAL_TIM_MspPostInit(&htim2);
}
 80013ec:	bf00      	nop
 80013ee:	3728      	adds	r7, #40	; 0x28
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	20001c6c 	.word	0x20001c6c

080013f8 <user_pwm_setvalue_2>:
void user_pwm_setvalue_2(uint16_t value)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08a      	sub	sp, #40	; 0x28
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	80fb      	strh	r3, [r7, #6]
    TIM_OC_InitTypeDef sConfigOC;

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001402:	2360      	movs	r3, #96	; 0x60
 8001404:	60fb      	str	r3, [r7, #12]
    sConfigOC.Pulse = value;
 8001406:	88fb      	ldrh	r3, [r7, #6]
 8001408:	613b      	str	r3, [r7, #16]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800140a:	2300      	movs	r3, #0
 800140c:	617b      	str	r3, [r7, #20]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800140e:	2300      	movs	r3, #0
 8001410:	61fb      	str	r3, [r7, #28]
    HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4);
 8001412:	f107 030c 	add.w	r3, r7, #12
 8001416:	220c      	movs	r2, #12
 8001418:	4619      	mov	r1, r3
 800141a:	4805      	ldr	r0, [pc, #20]	; (8001430 <user_pwm_setvalue_2+0x38>)
 800141c:	f001 ff66 	bl	80032ec <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001420:	210c      	movs	r1, #12
 8001422:	4803      	ldr	r0, [pc, #12]	; (8001430 <user_pwm_setvalue_2+0x38>)
 8001424:	f001 ff30 	bl	8003288 <HAL_TIM_PWM_Start>
   // HAL_TIM_MspPostInit(&htim2);
}
 8001428:	bf00      	nop
 800142a:	3728      	adds	r7, #40	; 0x28
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20001c6c 	.word	0x20001c6c

08001434 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001438:	4b11      	ldr	r3, [pc, #68]	; (8001480 <MX_USART2_UART_Init+0x4c>)
 800143a:	4a12      	ldr	r2, [pc, #72]	; (8001484 <MX_USART2_UART_Init+0x50>)
 800143c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800143e:	4b10      	ldr	r3, [pc, #64]	; (8001480 <MX_USART2_UART_Init+0x4c>)
 8001440:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001444:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001446:	4b0e      	ldr	r3, [pc, #56]	; (8001480 <MX_USART2_UART_Init+0x4c>)
 8001448:	2200      	movs	r2, #0
 800144a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800144c:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <MX_USART2_UART_Init+0x4c>)
 800144e:	2200      	movs	r2, #0
 8001450:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001452:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <MX_USART2_UART_Init+0x4c>)
 8001454:	2200      	movs	r2, #0
 8001456:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001458:	4b09      	ldr	r3, [pc, #36]	; (8001480 <MX_USART2_UART_Init+0x4c>)
 800145a:	220c      	movs	r2, #12
 800145c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800145e:	4b08      	ldr	r3, [pc, #32]	; (8001480 <MX_USART2_UART_Init+0x4c>)
 8001460:	2200      	movs	r2, #0
 8001462:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001464:	4b06      	ldr	r3, [pc, #24]	; (8001480 <MX_USART2_UART_Init+0x4c>)
 8001466:	2200      	movs	r2, #0
 8001468:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800146a:	4805      	ldr	r0, [pc, #20]	; (8001480 <MX_USART2_UART_Init+0x4c>)
 800146c:	f002 fa56 	bl	800391c <HAL_UART_Init>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001476:	f7ff fd88 	bl	8000f8a <Error_Handler>
  }

}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	20001d34 	.word	0x20001d34
 8001484:	40004400 	.word	0x40004400

08001488 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b088      	sub	sp, #32
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001490:	f107 0310 	add.w	r3, r7, #16
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a47      	ldr	r2, [pc, #284]	; (80015c0 <HAL_UART_MspInit+0x138>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	f040 8086 	bne.w	80015b6 <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014aa:	4b46      	ldr	r3, [pc, #280]	; (80015c4 <HAL_UART_MspInit+0x13c>)
 80014ac:	69db      	ldr	r3, [r3, #28]
 80014ae:	4a45      	ldr	r2, [pc, #276]	; (80015c4 <HAL_UART_MspInit+0x13c>)
 80014b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014b4:	61d3      	str	r3, [r2, #28]
 80014b6:	4b43      	ldr	r3, [pc, #268]	; (80015c4 <HAL_UART_MspInit+0x13c>)
 80014b8:	69db      	ldr	r3, [r3, #28]
 80014ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c2:	4b40      	ldr	r3, [pc, #256]	; (80015c4 <HAL_UART_MspInit+0x13c>)
 80014c4:	699b      	ldr	r3, [r3, #24]
 80014c6:	4a3f      	ldr	r2, [pc, #252]	; (80015c4 <HAL_UART_MspInit+0x13c>)
 80014c8:	f043 0304 	orr.w	r3, r3, #4
 80014cc:	6193      	str	r3, [r2, #24]
 80014ce:	4b3d      	ldr	r3, [pc, #244]	; (80015c4 <HAL_UART_MspInit+0x13c>)
 80014d0:	699b      	ldr	r3, [r3, #24]
 80014d2:	f003 0304 	and.w	r3, r3, #4
 80014d6:	60bb      	str	r3, [r7, #8]
 80014d8:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014da:	2304      	movs	r3, #4
 80014dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014de:	2302      	movs	r3, #2
 80014e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014e2:	2303      	movs	r3, #3
 80014e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e6:	f107 0310 	add.w	r3, r7, #16
 80014ea:	4619      	mov	r1, r3
 80014ec:	4836      	ldr	r0, [pc, #216]	; (80015c8 <HAL_UART_MspInit+0x140>)
 80014ee:	f001 f82b 	bl	8002548 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014f2:	2308      	movs	r3, #8
 80014f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014f6:	2300      	movs	r3, #0
 80014f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fe:	f107 0310 	add.w	r3, r7, #16
 8001502:	4619      	mov	r1, r3
 8001504:	4830      	ldr	r0, [pc, #192]	; (80015c8 <HAL_UART_MspInit+0x140>)
 8001506:	f001 f81f 	bl	8002548 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 800150a:	4b30      	ldr	r3, [pc, #192]	; (80015cc <HAL_UART_MspInit+0x144>)
 800150c:	4a30      	ldr	r2, [pc, #192]	; (80015d0 <HAL_UART_MspInit+0x148>)
 800150e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001510:	4b2e      	ldr	r3, [pc, #184]	; (80015cc <HAL_UART_MspInit+0x144>)
 8001512:	2210      	movs	r2, #16
 8001514:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001516:	4b2d      	ldr	r3, [pc, #180]	; (80015cc <HAL_UART_MspInit+0x144>)
 8001518:	2200      	movs	r2, #0
 800151a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800151c:	4b2b      	ldr	r3, [pc, #172]	; (80015cc <HAL_UART_MspInit+0x144>)
 800151e:	2280      	movs	r2, #128	; 0x80
 8001520:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001522:	4b2a      	ldr	r3, [pc, #168]	; (80015cc <HAL_UART_MspInit+0x144>)
 8001524:	2200      	movs	r2, #0
 8001526:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001528:	4b28      	ldr	r3, [pc, #160]	; (80015cc <HAL_UART_MspInit+0x144>)
 800152a:	2200      	movs	r2, #0
 800152c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800152e:	4b27      	ldr	r3, [pc, #156]	; (80015cc <HAL_UART_MspInit+0x144>)
 8001530:	2200      	movs	r2, #0
 8001532:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001534:	4b25      	ldr	r3, [pc, #148]	; (80015cc <HAL_UART_MspInit+0x144>)
 8001536:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800153a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800153c:	4823      	ldr	r0, [pc, #140]	; (80015cc <HAL_UART_MspInit+0x144>)
 800153e:	f000 fd9f 	bl	8002080 <HAL_DMA_Init>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8001548:	f7ff fd1f 	bl	8000f8a <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	4a1f      	ldr	r2, [pc, #124]	; (80015cc <HAL_UART_MspInit+0x144>)
 8001550:	631a      	str	r2, [r3, #48]	; 0x30
 8001552:	4a1e      	ldr	r2, [pc, #120]	; (80015cc <HAL_UART_MspInit+0x144>)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001558:	4b1e      	ldr	r3, [pc, #120]	; (80015d4 <HAL_UART_MspInit+0x14c>)
 800155a:	4a1f      	ldr	r2, [pc, #124]	; (80015d8 <HAL_UART_MspInit+0x150>)
 800155c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800155e:	4b1d      	ldr	r3, [pc, #116]	; (80015d4 <HAL_UART_MspInit+0x14c>)
 8001560:	2200      	movs	r2, #0
 8001562:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001564:	4b1b      	ldr	r3, [pc, #108]	; (80015d4 <HAL_UART_MspInit+0x14c>)
 8001566:	2200      	movs	r2, #0
 8001568:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800156a:	4b1a      	ldr	r3, [pc, #104]	; (80015d4 <HAL_UART_MspInit+0x14c>)
 800156c:	2280      	movs	r2, #128	; 0x80
 800156e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001570:	4b18      	ldr	r3, [pc, #96]	; (80015d4 <HAL_UART_MspInit+0x14c>)
 8001572:	2200      	movs	r2, #0
 8001574:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001576:	4b17      	ldr	r3, [pc, #92]	; (80015d4 <HAL_UART_MspInit+0x14c>)
 8001578:	2200      	movs	r2, #0
 800157a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800157c:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <HAL_UART_MspInit+0x14c>)
 800157e:	2200      	movs	r2, #0
 8001580:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001582:	4b14      	ldr	r3, [pc, #80]	; (80015d4 <HAL_UART_MspInit+0x14c>)
 8001584:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001588:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800158a:	4812      	ldr	r0, [pc, #72]	; (80015d4 <HAL_UART_MspInit+0x14c>)
 800158c:	f000 fd78 	bl	8002080 <HAL_DMA_Init>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8001596:	f7ff fcf8 	bl	8000f8a <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a0d      	ldr	r2, [pc, #52]	; (80015d4 <HAL_UART_MspInit+0x14c>)
 800159e:	635a      	str	r2, [r3, #52]	; 0x34
 80015a0:	4a0c      	ldr	r2, [pc, #48]	; (80015d4 <HAL_UART_MspInit+0x14c>)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 80015a6:	2200      	movs	r2, #0
 80015a8:	2101      	movs	r1, #1
 80015aa:	2026      	movs	r0, #38	; 0x26
 80015ac:	f000 fd31 	bl	8002012 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015b0:	2026      	movs	r0, #38	; 0x26
 80015b2:	f000 fd4a 	bl	800204a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80015b6:	bf00      	nop
 80015b8:	3720      	adds	r7, #32
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40004400 	.word	0x40004400
 80015c4:	40021000 	.word	0x40021000
 80015c8:	40010800 	.word	0x40010800
 80015cc:	20001cf0 	.word	0x20001cf0
 80015d0:	40020080 	.word	0x40020080
 80015d4:	20001cac 	.word	0x20001cac
 80015d8:	4002006c 	.word	0x4002006c

080015dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80015dc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80015de:	e003      	b.n	80015e8 <LoopCopyDataInit>

080015e0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80015e0:	4b0b      	ldr	r3, [pc, #44]	; (8001610 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80015e2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80015e4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80015e6:	3104      	adds	r1, #4

080015e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80015e8:	480a      	ldr	r0, [pc, #40]	; (8001614 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80015ea:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80015ec:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80015ee:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80015f0:	d3f6      	bcc.n	80015e0 <CopyDataInit>
  ldr r2, =_sbss
 80015f2:	4a0a      	ldr	r2, [pc, #40]	; (800161c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80015f4:	e002      	b.n	80015fc <LoopFillZerobss>

080015f6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80015f6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80015f8:	f842 3b04 	str.w	r3, [r2], #4

080015fc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80015fc:	4b08      	ldr	r3, [pc, #32]	; (8001620 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80015fe:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001600:	d3f9      	bcc.n	80015f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001602:	f7ff fde1 	bl	80011c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001606:	f005 fb57 	bl	8006cb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800160a:	f7ff fc57 	bl	8000ebc <main>
  bx lr
 800160e:	4770      	bx	lr
  ldr r3, =_sidata
 8001610:	08008064 	.word	0x08008064
  ldr r0, =_sdata
 8001614:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001618:	20000088 	.word	0x20000088
  ldr r2, =_sbss
 800161c:	20000088 	.word	0x20000088
  ldr r3, = _ebss
 8001620:	20001dbc 	.word	0x20001dbc

08001624 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001624:	e7fe      	b.n	8001624 <ADC1_2_IRQHandler>
	...

08001628 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800162c:	4b08      	ldr	r3, [pc, #32]	; (8001650 <HAL_Init+0x28>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a07      	ldr	r2, [pc, #28]	; (8001650 <HAL_Init+0x28>)
 8001632:	f043 0310 	orr.w	r3, r3, #16
 8001636:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001638:	2003      	movs	r0, #3
 800163a:	f000 fcdf 	bl	8001ffc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800163e:	2000      	movs	r0, #0
 8001640:	f000 f808 	bl	8001654 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001644:	f7ff fca8 	bl	8000f98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40022000 	.word	0x40022000

08001654 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800165c:	4b12      	ldr	r3, [pc, #72]	; (80016a8 <HAL_InitTick+0x54>)
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	4b12      	ldr	r3, [pc, #72]	; (80016ac <HAL_InitTick+0x58>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	4619      	mov	r1, r3
 8001666:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800166a:	fbb3 f3f1 	udiv	r3, r3, r1
 800166e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001672:	4618      	mov	r0, r3
 8001674:	f000 fcf7 	bl	8002066 <HAL_SYSTICK_Config>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e00e      	b.n	80016a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2b0f      	cmp	r3, #15
 8001686:	d80a      	bhi.n	800169e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001688:	2200      	movs	r2, #0
 800168a:	6879      	ldr	r1, [r7, #4]
 800168c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001690:	f000 fcbf 	bl	8002012 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001694:	4a06      	ldr	r2, [pc, #24]	; (80016b0 <HAL_InitTick+0x5c>)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800169a:	2300      	movs	r3, #0
 800169c:	e000      	b.n	80016a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	20000014 	.word	0x20000014
 80016ac:	2000001c 	.word	0x2000001c
 80016b0:	20000018 	.word	0x20000018

080016b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016b8:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <HAL_IncTick+0x1c>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	461a      	mov	r2, r3
 80016be:	4b05      	ldr	r3, [pc, #20]	; (80016d4 <HAL_IncTick+0x20>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4413      	add	r3, r2
 80016c4:	4a03      	ldr	r2, [pc, #12]	; (80016d4 <HAL_IncTick+0x20>)
 80016c6:	6013      	str	r3, [r2, #0]
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bc80      	pop	{r7}
 80016ce:	4770      	bx	lr
 80016d0:	2000001c 	.word	0x2000001c
 80016d4:	20001d74 	.word	0x20001d74

080016d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  return uwTick;
 80016dc:	4b02      	ldr	r3, [pc, #8]	; (80016e8 <HAL_GetTick+0x10>)
 80016de:	681b      	ldr	r3, [r3, #0]
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bc80      	pop	{r7}
 80016e6:	4770      	bx	lr
 80016e8:	20001d74 	.word	0x20001d74

080016ec <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016f4:	2300      	movs	r3, #0
 80016f6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80016f8:	2300      	movs	r3, #0
 80016fa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80016fc:	2300      	movs	r3, #0
 80016fe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001700:	2300      	movs	r3, #0
 8001702:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d101      	bne.n	800170e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e0be      	b.n	800188c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001718:	2b00      	cmp	r3, #0
 800171a:	d109      	bne.n	8001730 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2200      	movs	r2, #0
 8001720:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f7fe fd5e 	bl	80001ec <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f000 faf7 	bl	8001d24 <ADC_ConversionStop_Disable>
 8001736:	4603      	mov	r3, r0
 8001738:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800173e:	f003 0310 	and.w	r3, r3, #16
 8001742:	2b00      	cmp	r3, #0
 8001744:	f040 8099 	bne.w	800187a <HAL_ADC_Init+0x18e>
 8001748:	7dfb      	ldrb	r3, [r7, #23]
 800174a:	2b00      	cmp	r3, #0
 800174c:	f040 8095 	bne.w	800187a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001754:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001758:	f023 0302 	bic.w	r3, r3, #2
 800175c:	f043 0202 	orr.w	r2, r3, #2
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800176c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	7b1b      	ldrb	r3, [r3, #12]
 8001772:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001774:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001776:	68ba      	ldr	r2, [r7, #8]
 8001778:	4313      	orrs	r3, r2
 800177a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001784:	d003      	beq.n	800178e <HAL_ADC_Init+0xa2>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d102      	bne.n	8001794 <HAL_ADC_Init+0xa8>
 800178e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001792:	e000      	b.n	8001796 <HAL_ADC_Init+0xaa>
 8001794:	2300      	movs	r3, #0
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	4313      	orrs	r3, r2
 800179a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	7d1b      	ldrb	r3, [r3, #20]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d119      	bne.n	80017d8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	7b1b      	ldrb	r3, [r3, #12]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d109      	bne.n	80017c0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	3b01      	subs	r3, #1
 80017b2:	035a      	lsls	r2, r3, #13
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017bc:	613b      	str	r3, [r7, #16]
 80017be:	e00b      	b.n	80017d8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c4:	f043 0220 	orr.w	r2, r3, #32
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d0:	f043 0201 	orr.w	r2, r3, #1
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	430a      	orrs	r2, r1
 80017ea:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	689a      	ldr	r2, [r3, #8]
 80017f2:	4b28      	ldr	r3, [pc, #160]	; (8001894 <HAL_ADC_Init+0x1a8>)
 80017f4:	4013      	ands	r3, r2
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	6812      	ldr	r2, [r2, #0]
 80017fa:	68b9      	ldr	r1, [r7, #8]
 80017fc:	430b      	orrs	r3, r1
 80017fe:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001808:	d003      	beq.n	8001812 <HAL_ADC_Init+0x126>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d104      	bne.n	800181c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	691b      	ldr	r3, [r3, #16]
 8001816:	3b01      	subs	r3, #1
 8001818:	051b      	lsls	r3, r3, #20
 800181a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001822:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	68fa      	ldr	r2, [r7, #12]
 800182c:	430a      	orrs	r2, r1
 800182e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	689a      	ldr	r2, [r3, #8]
 8001836:	4b18      	ldr	r3, [pc, #96]	; (8001898 <HAL_ADC_Init+0x1ac>)
 8001838:	4013      	ands	r3, r2
 800183a:	68ba      	ldr	r2, [r7, #8]
 800183c:	429a      	cmp	r2, r3
 800183e:	d10b      	bne.n	8001858 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2200      	movs	r2, #0
 8001844:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184a:	f023 0303 	bic.w	r3, r3, #3
 800184e:	f043 0201 	orr.w	r2, r3, #1
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001856:	e018      	b.n	800188a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185c:	f023 0312 	bic.w	r3, r3, #18
 8001860:	f043 0210 	orr.w	r2, r3, #16
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800186c:	f043 0201 	orr.w	r2, r3, #1
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001878:	e007      	b.n	800188a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800187e:	f043 0210 	orr.w	r2, r3, #16
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800188a:	7dfb      	ldrb	r3, [r7, #23]
}
 800188c:	4618      	mov	r0, r3
 800188e:	3718      	adds	r7, #24
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	ffe1f7fd 	.word	0xffe1f7fd
 8001898:	ff1f0efe 	.word	0xff1f0efe

0800189c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018a8:	2300      	movs	r3, #0
 80018aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a64      	ldr	r2, [pc, #400]	; (8001a44 <HAL_ADC_Start_DMA+0x1a8>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d004      	beq.n	80018c0 <HAL_ADC_Start_DMA+0x24>
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a63      	ldr	r2, [pc, #396]	; (8001a48 <HAL_ADC_Start_DMA+0x1ac>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d106      	bne.n	80018ce <HAL_ADC_Start_DMA+0x32>
 80018c0:	4b60      	ldr	r3, [pc, #384]	; (8001a44 <HAL_ADC_Start_DMA+0x1a8>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	f040 80b3 	bne.w	8001a34 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d101      	bne.n	80018dc <HAL_ADC_Start_DMA+0x40>
 80018d8:	2302      	movs	r3, #2
 80018da:	e0ae      	b.n	8001a3a <HAL_ADC_Start_DMA+0x19e>
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2201      	movs	r2, #1
 80018e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80018e4:	68f8      	ldr	r0, [r7, #12]
 80018e6:	f000 f9cb 	bl	8001c80 <ADC_Enable>
 80018ea:	4603      	mov	r3, r0
 80018ec:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80018ee:	7dfb      	ldrb	r3, [r7, #23]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	f040 809a 	bne.w	8001a2a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018fa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80018fe:	f023 0301 	bic.w	r3, r3, #1
 8001902:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a4e      	ldr	r2, [pc, #312]	; (8001a48 <HAL_ADC_Start_DMA+0x1ac>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d105      	bne.n	8001920 <HAL_ADC_Start_DMA+0x84>
 8001914:	4b4b      	ldr	r3, [pc, #300]	; (8001a44 <HAL_ADC_Start_DMA+0x1a8>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d115      	bne.n	800194c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001924:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001936:	2b00      	cmp	r3, #0
 8001938:	d026      	beq.n	8001988 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800193e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001942:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800194a:	e01d      	b.n	8001988 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001950:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a39      	ldr	r2, [pc, #228]	; (8001a44 <HAL_ADC_Start_DMA+0x1a8>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d004      	beq.n	800196c <HAL_ADC_Start_DMA+0xd0>
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a38      	ldr	r2, [pc, #224]	; (8001a48 <HAL_ADC_Start_DMA+0x1ac>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d10d      	bne.n	8001988 <HAL_ADC_Start_DMA+0xec>
 800196c:	4b35      	ldr	r3, [pc, #212]	; (8001a44 <HAL_ADC_Start_DMA+0x1a8>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001974:	2b00      	cmp	r3, #0
 8001976:	d007      	beq.n	8001988 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800197c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001980:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800198c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d006      	beq.n	80019a2 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001998:	f023 0206 	bic.w	r2, r3, #6
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	62da      	str	r2, [r3, #44]	; 0x2c
 80019a0:	e002      	b.n	80019a8 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2200      	movs	r2, #0
 80019a6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2200      	movs	r2, #0
 80019ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	6a1b      	ldr	r3, [r3, #32]
 80019b4:	4a25      	ldr	r2, [pc, #148]	; (8001a4c <HAL_ADC_Start_DMA+0x1b0>)
 80019b6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	6a1b      	ldr	r3, [r3, #32]
 80019bc:	4a24      	ldr	r2, [pc, #144]	; (8001a50 <HAL_ADC_Start_DMA+0x1b4>)
 80019be:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	6a1b      	ldr	r3, [r3, #32]
 80019c4:	4a23      	ldr	r2, [pc, #140]	; (8001a54 <HAL_ADC_Start_DMA+0x1b8>)
 80019c6:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f06f 0202 	mvn.w	r2, #2
 80019d0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	689a      	ldr	r2, [r3, #8]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80019e0:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	6a18      	ldr	r0, [r3, #32]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	334c      	adds	r3, #76	; 0x4c
 80019ec:	4619      	mov	r1, r3
 80019ee:	68ba      	ldr	r2, [r7, #8]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f000 fb9f 	bl	8002134 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001a00:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001a04:	d108      	bne.n	8001a18 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	689a      	ldr	r2, [r3, #8]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001a14:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001a16:	e00f      	b.n	8001a38 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	689a      	ldr	r2, [r3, #8]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001a26:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001a28:	e006      	b.n	8001a38 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001a32:	e001      	b.n	8001a38 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001a38:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3718      	adds	r7, #24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40012400 	.word	0x40012400
 8001a48:	40012800 	.word	0x40012800
 8001a4c:	08001d99 	.word	0x08001d99
 8001a50:	08001e15 	.word	0x08001e15
 8001a54:	08001e31 	.word	0x08001e31

08001a58 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bc80      	pop	{r7}
 8001a68:	4770      	bx	lr

08001a6a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	b083      	sub	sp, #12
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001a72:	bf00      	nop
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bc80      	pop	{r7}
 8001a7a:	4770      	bx	lr

08001a7c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bc80      	pop	{r7}
 8001a8c:	4770      	bx	lr
	...

08001a90 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d101      	bne.n	8001ab0 <HAL_ADC_ConfigChannel+0x20>
 8001aac:	2302      	movs	r3, #2
 8001aae:	e0dc      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x1da>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	2b06      	cmp	r3, #6
 8001abe:	d81c      	bhi.n	8001afa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685a      	ldr	r2, [r3, #4]
 8001aca:	4613      	mov	r3, r2
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	4413      	add	r3, r2
 8001ad0:	3b05      	subs	r3, #5
 8001ad2:	221f      	movs	r2, #31
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	4019      	ands	r1, r3
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	6818      	ldr	r0, [r3, #0]
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685a      	ldr	r2, [r3, #4]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	4413      	add	r3, r2
 8001aea:	3b05      	subs	r3, #5
 8001aec:	fa00 f203 	lsl.w	r2, r0, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	430a      	orrs	r2, r1
 8001af6:	635a      	str	r2, [r3, #52]	; 0x34
 8001af8:	e03c      	b.n	8001b74 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	2b0c      	cmp	r3, #12
 8001b00:	d81c      	bhi.n	8001b3c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685a      	ldr	r2, [r3, #4]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	4413      	add	r3, r2
 8001b12:	3b23      	subs	r3, #35	; 0x23
 8001b14:	221f      	movs	r2, #31
 8001b16:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1a:	43db      	mvns	r3, r3
 8001b1c:	4019      	ands	r1, r3
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	6818      	ldr	r0, [r3, #0]
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685a      	ldr	r2, [r3, #4]
 8001b26:	4613      	mov	r3, r2
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	4413      	add	r3, r2
 8001b2c:	3b23      	subs	r3, #35	; 0x23
 8001b2e:	fa00 f203 	lsl.w	r2, r0, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	430a      	orrs	r2, r1
 8001b38:	631a      	str	r2, [r3, #48]	; 0x30
 8001b3a:	e01b      	b.n	8001b74 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685a      	ldr	r2, [r3, #4]
 8001b46:	4613      	mov	r3, r2
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	4413      	add	r3, r2
 8001b4c:	3b41      	subs	r3, #65	; 0x41
 8001b4e:	221f      	movs	r2, #31
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	43db      	mvns	r3, r3
 8001b56:	4019      	ands	r1, r3
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	6818      	ldr	r0, [r3, #0]
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685a      	ldr	r2, [r3, #4]
 8001b60:	4613      	mov	r3, r2
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	4413      	add	r3, r2
 8001b66:	3b41      	subs	r3, #65	; 0x41
 8001b68:	fa00 f203 	lsl.w	r2, r0, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	430a      	orrs	r2, r1
 8001b72:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2b09      	cmp	r3, #9
 8001b7a:	d91c      	bls.n	8001bb6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	68d9      	ldr	r1, [r3, #12]
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	4613      	mov	r3, r2
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	4413      	add	r3, r2
 8001b8c:	3b1e      	subs	r3, #30
 8001b8e:	2207      	movs	r2, #7
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	43db      	mvns	r3, r3
 8001b96:	4019      	ands	r1, r3
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	6898      	ldr	r0, [r3, #8]
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	4413      	add	r3, r2
 8001ba6:	3b1e      	subs	r3, #30
 8001ba8:	fa00 f203 	lsl.w	r2, r0, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	60da      	str	r2, [r3, #12]
 8001bb4:	e019      	b.n	8001bea <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	6919      	ldr	r1, [r3, #16]
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	4413      	add	r3, r2
 8001bc6:	2207      	movs	r2, #7
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	4019      	ands	r1, r3
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	6898      	ldr	r0, [r3, #8]
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	4413      	add	r3, r2
 8001bde:	fa00 f203 	lsl.w	r2, r0, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	430a      	orrs	r2, r1
 8001be8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2b10      	cmp	r3, #16
 8001bf0:	d003      	beq.n	8001bfa <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001bf6:	2b11      	cmp	r3, #17
 8001bf8:	d132      	bne.n	8001c60 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a1d      	ldr	r2, [pc, #116]	; (8001c74 <HAL_ADC_ConfigChannel+0x1e4>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d125      	bne.n	8001c50 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d126      	bne.n	8001c60 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	689a      	ldr	r2, [r3, #8]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001c20:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2b10      	cmp	r3, #16
 8001c28:	d11a      	bne.n	8001c60 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c2a:	4b13      	ldr	r3, [pc, #76]	; (8001c78 <HAL_ADC_ConfigChannel+0x1e8>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a13      	ldr	r2, [pc, #76]	; (8001c7c <HAL_ADC_ConfigChannel+0x1ec>)
 8001c30:	fba2 2303 	umull	r2, r3, r2, r3
 8001c34:	0c9a      	lsrs	r2, r3, #18
 8001c36:	4613      	mov	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	4413      	add	r3, r2
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c40:	e002      	b.n	8001c48 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	3b01      	subs	r3, #1
 8001c46:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d1f9      	bne.n	8001c42 <HAL_ADC_ConfigChannel+0x1b2>
 8001c4e:	e007      	b.n	8001c60 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c54:	f043 0220 	orr.w	r2, r3, #32
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3714      	adds	r7, #20
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bc80      	pop	{r7}
 8001c72:	4770      	bx	lr
 8001c74:	40012400 	.word	0x40012400
 8001c78:	20000014 	.word	0x20000014
 8001c7c:	431bde83 	.word	0x431bde83

08001c80 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d039      	beq.n	8001d12 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	689a      	ldr	r2, [r3, #8]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f042 0201 	orr.w	r2, r2, #1
 8001cac:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001cae:	4b1b      	ldr	r3, [pc, #108]	; (8001d1c <ADC_Enable+0x9c>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a1b      	ldr	r2, [pc, #108]	; (8001d20 <ADC_Enable+0xa0>)
 8001cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb8:	0c9b      	lsrs	r3, r3, #18
 8001cba:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001cbc:	e002      	b.n	8001cc4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	3b01      	subs	r3, #1
 8001cc2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1f9      	bne.n	8001cbe <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001cca:	f7ff fd05 	bl	80016d8 <HAL_GetTick>
 8001cce:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001cd0:	e018      	b.n	8001d04 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001cd2:	f7ff fd01 	bl	80016d8 <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d911      	bls.n	8001d04 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce4:	f043 0210 	orr.w	r2, r3, #16
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf0:	f043 0201 	orr.w	r2, r3, #1
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e007      	b.n	8001d14 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d1df      	bne.n	8001cd2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001d12:	2300      	movs	r3, #0
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3710      	adds	r7, #16
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	20000014 	.word	0x20000014
 8001d20:	431bde83 	.word	0x431bde83

08001d24 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d127      	bne.n	8001d8e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	689a      	ldr	r2, [r3, #8]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f022 0201 	bic.w	r2, r2, #1
 8001d4c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d4e:	f7ff fcc3 	bl	80016d8 <HAL_GetTick>
 8001d52:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d54:	e014      	b.n	8001d80 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001d56:	f7ff fcbf 	bl	80016d8 <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d90d      	bls.n	8001d80 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d68:	f043 0210 	orr.w	r2, r3, #16
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d74:	f043 0201 	orr.w	r2, r3, #1
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e007      	b.n	8001d90 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d0e3      	beq.n	8001d56 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001d8e:	2300      	movs	r3, #0
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3710      	adds	r7, #16
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da4:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001daa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d127      	bne.n	8001e02 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001dc8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001dcc:	d115      	bne.n	8001dfa <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d111      	bne.n	8001dfa <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dda:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d105      	bne.n	8001dfa <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df2:	f043 0201 	orr.w	r2, r3, #1
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001dfa:	68f8      	ldr	r0, [r7, #12]
 8001dfc:	f7ff fe2c 	bl	8001a58 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001e00:	e004      	b.n	8001e0c <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	6a1b      	ldr	r3, [r3, #32]
 8001e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	4798      	blx	r3
}
 8001e0c:	bf00      	nop
 8001e0e:	3710      	adds	r7, #16
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e20:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001e22:	68f8      	ldr	r0, [r7, #12]
 8001e24:	f7ff fe21 	bl	8001a6a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e28:	bf00      	nop
 8001e2a:	3710      	adds	r7, #16
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3c:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e42:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e4e:	f043 0204 	orr.w	r2, r3, #4
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001e56:	68f8      	ldr	r0, [r7, #12]
 8001e58:	f7ff fe10 	bl	8001a7c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e5c:	bf00      	nop
 8001e5e:	3710      	adds	r7, #16
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <__NVIC_SetPriorityGrouping>:
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f003 0307 	and.w	r3, r3, #7
 8001e72:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e74:	4b0c      	ldr	r3, [pc, #48]	; (8001ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e7a:	68ba      	ldr	r2, [r7, #8]
 8001e7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e80:	4013      	ands	r3, r2
 8001e82:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e96:	4a04      	ldr	r2, [pc, #16]	; (8001ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	60d3      	str	r3, [r2, #12]
}
 8001e9c:	bf00      	nop
 8001e9e:	3714      	adds	r7, #20
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bc80      	pop	{r7}
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	e000ed00 	.word	0xe000ed00

08001eac <__NVIC_GetPriorityGrouping>:
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eb0:	4b04      	ldr	r3, [pc, #16]	; (8001ec4 <__NVIC_GetPriorityGrouping+0x18>)
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	0a1b      	lsrs	r3, r3, #8
 8001eb6:	f003 0307 	and.w	r3, r3, #7
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bc80      	pop	{r7}
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	e000ed00 	.word	0xe000ed00

08001ec8 <__NVIC_EnableIRQ>:
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	4603      	mov	r3, r0
 8001ed0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	db0b      	blt.n	8001ef2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eda:	79fb      	ldrb	r3, [r7, #7]
 8001edc:	f003 021f 	and.w	r2, r3, #31
 8001ee0:	4906      	ldr	r1, [pc, #24]	; (8001efc <__NVIC_EnableIRQ+0x34>)
 8001ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee6:	095b      	lsrs	r3, r3, #5
 8001ee8:	2001      	movs	r0, #1
 8001eea:	fa00 f202 	lsl.w	r2, r0, r2
 8001eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001ef2:	bf00      	nop
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bc80      	pop	{r7}
 8001efa:	4770      	bx	lr
 8001efc:	e000e100 	.word	0xe000e100

08001f00 <__NVIC_SetPriority>:
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	4603      	mov	r3, r0
 8001f08:	6039      	str	r1, [r7, #0]
 8001f0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	db0a      	blt.n	8001f2a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	b2da      	uxtb	r2, r3
 8001f18:	490c      	ldr	r1, [pc, #48]	; (8001f4c <__NVIC_SetPriority+0x4c>)
 8001f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1e:	0112      	lsls	r2, r2, #4
 8001f20:	b2d2      	uxtb	r2, r2
 8001f22:	440b      	add	r3, r1
 8001f24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001f28:	e00a      	b.n	8001f40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	b2da      	uxtb	r2, r3
 8001f2e:	4908      	ldr	r1, [pc, #32]	; (8001f50 <__NVIC_SetPriority+0x50>)
 8001f30:	79fb      	ldrb	r3, [r7, #7]
 8001f32:	f003 030f 	and.w	r3, r3, #15
 8001f36:	3b04      	subs	r3, #4
 8001f38:	0112      	lsls	r2, r2, #4
 8001f3a:	b2d2      	uxtb	r2, r2
 8001f3c:	440b      	add	r3, r1
 8001f3e:	761a      	strb	r2, [r3, #24]
}
 8001f40:	bf00      	nop
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bc80      	pop	{r7}
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	e000e100 	.word	0xe000e100
 8001f50:	e000ed00 	.word	0xe000ed00

08001f54 <NVIC_EncodePriority>:
{
 8001f54:	b480      	push	{r7}
 8001f56:	b089      	sub	sp, #36	; 0x24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f003 0307 	and.w	r3, r3, #7
 8001f66:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	f1c3 0307 	rsb	r3, r3, #7
 8001f6e:	2b04      	cmp	r3, #4
 8001f70:	bf28      	it	cs
 8001f72:	2304      	movcs	r3, #4
 8001f74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	3304      	adds	r3, #4
 8001f7a:	2b06      	cmp	r3, #6
 8001f7c:	d902      	bls.n	8001f84 <NVIC_EncodePriority+0x30>
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	3b03      	subs	r3, #3
 8001f82:	e000      	b.n	8001f86 <NVIC_EncodePriority+0x32>
 8001f84:	2300      	movs	r3, #0
 8001f86:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	43da      	mvns	r2, r3
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	401a      	ands	r2, r3
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f9c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa6:	43d9      	mvns	r1, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fac:	4313      	orrs	r3, r2
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3724      	adds	r7, #36	; 0x24
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bc80      	pop	{r7}
 8001fb6:	4770      	bx	lr

08001fb8 <SysTick_Config>:
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fc8:	d301      	bcc.n	8001fce <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e00f      	b.n	8001fee <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fce:	4a0a      	ldr	r2, [pc, #40]	; (8001ff8 <SysTick_Config+0x40>)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fd6:	210f      	movs	r1, #15
 8001fd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fdc:	f7ff ff90 	bl	8001f00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fe0:	4b05      	ldr	r3, [pc, #20]	; (8001ff8 <SysTick_Config+0x40>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fe6:	4b04      	ldr	r3, [pc, #16]	; (8001ff8 <SysTick_Config+0x40>)
 8001fe8:	2207      	movs	r2, #7
 8001fea:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	e000e010 	.word	0xe000e010

08001ffc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f7ff ff2d 	bl	8001e64 <__NVIC_SetPriorityGrouping>
}
 800200a:	bf00      	nop
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002012:	b580      	push	{r7, lr}
 8002014:	b086      	sub	sp, #24
 8002016:	af00      	add	r7, sp, #0
 8002018:	4603      	mov	r3, r0
 800201a:	60b9      	str	r1, [r7, #8]
 800201c:	607a      	str	r2, [r7, #4]
 800201e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002020:	2300      	movs	r3, #0
 8002022:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002024:	f7ff ff42 	bl	8001eac <__NVIC_GetPriorityGrouping>
 8002028:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	68b9      	ldr	r1, [r7, #8]
 800202e:	6978      	ldr	r0, [r7, #20]
 8002030:	f7ff ff90 	bl	8001f54 <NVIC_EncodePriority>
 8002034:	4602      	mov	r2, r0
 8002036:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800203a:	4611      	mov	r1, r2
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff ff5f 	bl	8001f00 <__NVIC_SetPriority>
}
 8002042:	bf00      	nop
 8002044:	3718      	adds	r7, #24
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b082      	sub	sp, #8
 800204e:	af00      	add	r7, sp, #0
 8002050:	4603      	mov	r3, r0
 8002052:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002058:	4618      	mov	r0, r3
 800205a:	f7ff ff35 	bl	8001ec8 <__NVIC_EnableIRQ>
}
 800205e:	bf00      	nop
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b082      	sub	sp, #8
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7ff ffa2 	bl	8001fb8 <SysTick_Config>
 8002074:	4603      	mov	r3, r0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
	...

08002080 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002088:	2300      	movs	r3, #0
 800208a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d101      	bne.n	8002096 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e043      	b.n	800211e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	461a      	mov	r2, r3
 800209c:	4b22      	ldr	r3, [pc, #136]	; (8002128 <HAL_DMA_Init+0xa8>)
 800209e:	4413      	add	r3, r2
 80020a0:	4a22      	ldr	r2, [pc, #136]	; (800212c <HAL_DMA_Init+0xac>)
 80020a2:	fba2 2303 	umull	r2, r3, r2, r3
 80020a6:	091b      	lsrs	r3, r3, #4
 80020a8:	009a      	lsls	r2, r3, #2
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a1f      	ldr	r2, [pc, #124]	; (8002130 <HAL_DMA_Init+0xb0>)
 80020b2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2202      	movs	r2, #2
 80020b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80020ca:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80020ce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80020d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	69db      	ldr	r3, [r3, #28]
 80020f6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3714      	adds	r7, #20
 8002122:	46bd      	mov	sp, r7
 8002124:	bc80      	pop	{r7}
 8002126:	4770      	bx	lr
 8002128:	bffdfff8 	.word	0xbffdfff8
 800212c:	cccccccd 	.word	0xcccccccd
 8002130:	40020000 	.word	0x40020000

08002134 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
 8002140:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002142:	2300      	movs	r3, #0
 8002144:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	f893 3020 	ldrb.w	r3, [r3, #32]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d101      	bne.n	8002154 <HAL_DMA_Start_IT+0x20>
 8002150:	2302      	movs	r3, #2
 8002152:	e04a      	b.n	80021ea <HAL_DMA_Start_IT+0xb6>
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002162:	2b01      	cmp	r3, #1
 8002164:	d13a      	bne.n	80021dc <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2202      	movs	r2, #2
 800216a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2200      	movs	r2, #0
 8002172:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f022 0201 	bic.w	r2, r2, #1
 8002182:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	68b9      	ldr	r1, [r7, #8]
 800218a:	68f8      	ldr	r0, [r7, #12]
 800218c:	f000 f9ae 	bl	80024ec <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002194:	2b00      	cmp	r3, #0
 8002196:	d008      	beq.n	80021aa <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f042 020e 	orr.w	r2, r2, #14
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	e00f      	b.n	80021ca <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f022 0204 	bic.w	r2, r2, #4
 80021b8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f042 020a 	orr.w	r2, r2, #10
 80021c8:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f042 0201 	orr.w	r2, r2, #1
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	e005      	b.n	80021e8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80021e4:	2302      	movs	r3, #2
 80021e6:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80021e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3718      	adds	r7, #24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
	...

080021f4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021fc:	2300      	movs	r3, #0
 80021fe:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002206:	2b02      	cmp	r3, #2
 8002208:	d005      	beq.n	8002216 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2204      	movs	r2, #4
 800220e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	73fb      	strb	r3, [r7, #15]
 8002214:	e051      	b.n	80022ba <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f022 020e 	bic.w	r2, r2, #14
 8002224:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f022 0201 	bic.w	r2, r2, #1
 8002234:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a22      	ldr	r2, [pc, #136]	; (80022c4 <HAL_DMA_Abort_IT+0xd0>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d029      	beq.n	8002294 <HAL_DMA_Abort_IT+0xa0>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a20      	ldr	r2, [pc, #128]	; (80022c8 <HAL_DMA_Abort_IT+0xd4>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d022      	beq.n	8002290 <HAL_DMA_Abort_IT+0x9c>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a1f      	ldr	r2, [pc, #124]	; (80022cc <HAL_DMA_Abort_IT+0xd8>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d01a      	beq.n	800228a <HAL_DMA_Abort_IT+0x96>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a1d      	ldr	r2, [pc, #116]	; (80022d0 <HAL_DMA_Abort_IT+0xdc>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d012      	beq.n	8002284 <HAL_DMA_Abort_IT+0x90>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a1c      	ldr	r2, [pc, #112]	; (80022d4 <HAL_DMA_Abort_IT+0xe0>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d00a      	beq.n	800227e <HAL_DMA_Abort_IT+0x8a>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a1a      	ldr	r2, [pc, #104]	; (80022d8 <HAL_DMA_Abort_IT+0xe4>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d102      	bne.n	8002278 <HAL_DMA_Abort_IT+0x84>
 8002272:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002276:	e00e      	b.n	8002296 <HAL_DMA_Abort_IT+0xa2>
 8002278:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800227c:	e00b      	b.n	8002296 <HAL_DMA_Abort_IT+0xa2>
 800227e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002282:	e008      	b.n	8002296 <HAL_DMA_Abort_IT+0xa2>
 8002284:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002288:	e005      	b.n	8002296 <HAL_DMA_Abort_IT+0xa2>
 800228a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800228e:	e002      	b.n	8002296 <HAL_DMA_Abort_IT+0xa2>
 8002290:	2310      	movs	r3, #16
 8002292:	e000      	b.n	8002296 <HAL_DMA_Abort_IT+0xa2>
 8002294:	2301      	movs	r3, #1
 8002296:	4a11      	ldr	r2, [pc, #68]	; (80022dc <HAL_DMA_Abort_IT+0xe8>)
 8002298:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2201      	movs	r2, #1
 800229e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d003      	beq.n	80022ba <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	4798      	blx	r3
    } 
  }
  return status;
 80022ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3710      	adds	r7, #16
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	40020008 	.word	0x40020008
 80022c8:	4002001c 	.word	0x4002001c
 80022cc:	40020030 	.word	0x40020030
 80022d0:	40020044 	.word	0x40020044
 80022d4:	40020058 	.word	0x40020058
 80022d8:	4002006c 	.word	0x4002006c
 80022dc:	40020000 	.word	0x40020000

080022e0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fc:	2204      	movs	r2, #4
 80022fe:	409a      	lsls	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	4013      	ands	r3, r2
 8002304:	2b00      	cmp	r3, #0
 8002306:	d04f      	beq.n	80023a8 <HAL_DMA_IRQHandler+0xc8>
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	f003 0304 	and.w	r3, r3, #4
 800230e:	2b00      	cmp	r3, #0
 8002310:	d04a      	beq.n	80023a8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0320 	and.w	r3, r3, #32
 800231c:	2b00      	cmp	r3, #0
 800231e:	d107      	bne.n	8002330 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f022 0204 	bic.w	r2, r2, #4
 800232e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a66      	ldr	r2, [pc, #408]	; (80024d0 <HAL_DMA_IRQHandler+0x1f0>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d029      	beq.n	800238e <HAL_DMA_IRQHandler+0xae>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a65      	ldr	r2, [pc, #404]	; (80024d4 <HAL_DMA_IRQHandler+0x1f4>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d022      	beq.n	800238a <HAL_DMA_IRQHandler+0xaa>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a63      	ldr	r2, [pc, #396]	; (80024d8 <HAL_DMA_IRQHandler+0x1f8>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d01a      	beq.n	8002384 <HAL_DMA_IRQHandler+0xa4>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a62      	ldr	r2, [pc, #392]	; (80024dc <HAL_DMA_IRQHandler+0x1fc>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d012      	beq.n	800237e <HAL_DMA_IRQHandler+0x9e>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a60      	ldr	r2, [pc, #384]	; (80024e0 <HAL_DMA_IRQHandler+0x200>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d00a      	beq.n	8002378 <HAL_DMA_IRQHandler+0x98>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a5f      	ldr	r2, [pc, #380]	; (80024e4 <HAL_DMA_IRQHandler+0x204>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d102      	bne.n	8002372 <HAL_DMA_IRQHandler+0x92>
 800236c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002370:	e00e      	b.n	8002390 <HAL_DMA_IRQHandler+0xb0>
 8002372:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002376:	e00b      	b.n	8002390 <HAL_DMA_IRQHandler+0xb0>
 8002378:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800237c:	e008      	b.n	8002390 <HAL_DMA_IRQHandler+0xb0>
 800237e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002382:	e005      	b.n	8002390 <HAL_DMA_IRQHandler+0xb0>
 8002384:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002388:	e002      	b.n	8002390 <HAL_DMA_IRQHandler+0xb0>
 800238a:	2340      	movs	r3, #64	; 0x40
 800238c:	e000      	b.n	8002390 <HAL_DMA_IRQHandler+0xb0>
 800238e:	2304      	movs	r3, #4
 8002390:	4a55      	ldr	r2, [pc, #340]	; (80024e8 <HAL_DMA_IRQHandler+0x208>)
 8002392:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002398:	2b00      	cmp	r3, #0
 800239a:	f000 8094 	beq.w	80024c6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80023a6:	e08e      	b.n	80024c6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ac:	2202      	movs	r2, #2
 80023ae:	409a      	lsls	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	4013      	ands	r3, r2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d056      	beq.n	8002466 <HAL_DMA_IRQHandler+0x186>
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d051      	beq.n	8002466 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0320 	and.w	r3, r3, #32
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d10b      	bne.n	80023e8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f022 020a 	bic.w	r2, r2, #10
 80023de:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a38      	ldr	r2, [pc, #224]	; (80024d0 <HAL_DMA_IRQHandler+0x1f0>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d029      	beq.n	8002446 <HAL_DMA_IRQHandler+0x166>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a37      	ldr	r2, [pc, #220]	; (80024d4 <HAL_DMA_IRQHandler+0x1f4>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d022      	beq.n	8002442 <HAL_DMA_IRQHandler+0x162>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a35      	ldr	r2, [pc, #212]	; (80024d8 <HAL_DMA_IRQHandler+0x1f8>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d01a      	beq.n	800243c <HAL_DMA_IRQHandler+0x15c>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a34      	ldr	r2, [pc, #208]	; (80024dc <HAL_DMA_IRQHandler+0x1fc>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d012      	beq.n	8002436 <HAL_DMA_IRQHandler+0x156>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a32      	ldr	r2, [pc, #200]	; (80024e0 <HAL_DMA_IRQHandler+0x200>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d00a      	beq.n	8002430 <HAL_DMA_IRQHandler+0x150>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a31      	ldr	r2, [pc, #196]	; (80024e4 <HAL_DMA_IRQHandler+0x204>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d102      	bne.n	800242a <HAL_DMA_IRQHandler+0x14a>
 8002424:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002428:	e00e      	b.n	8002448 <HAL_DMA_IRQHandler+0x168>
 800242a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800242e:	e00b      	b.n	8002448 <HAL_DMA_IRQHandler+0x168>
 8002430:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002434:	e008      	b.n	8002448 <HAL_DMA_IRQHandler+0x168>
 8002436:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800243a:	e005      	b.n	8002448 <HAL_DMA_IRQHandler+0x168>
 800243c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002440:	e002      	b.n	8002448 <HAL_DMA_IRQHandler+0x168>
 8002442:	2320      	movs	r3, #32
 8002444:	e000      	b.n	8002448 <HAL_DMA_IRQHandler+0x168>
 8002446:	2302      	movs	r3, #2
 8002448:	4a27      	ldr	r2, [pc, #156]	; (80024e8 <HAL_DMA_IRQHandler+0x208>)
 800244a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002458:	2b00      	cmp	r3, #0
 800245a:	d034      	beq.n	80024c6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002464:	e02f      	b.n	80024c6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246a:	2208      	movs	r2, #8
 800246c:	409a      	lsls	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	4013      	ands	r3, r2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d028      	beq.n	80024c8 <HAL_DMA_IRQHandler+0x1e8>
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	f003 0308 	and.w	r3, r3, #8
 800247c:	2b00      	cmp	r3, #0
 800247e:	d023      	beq.n	80024c8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f022 020e 	bic.w	r2, r2, #14
 800248e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002498:	2101      	movs	r1, #1
 800249a:	fa01 f202 	lsl.w	r2, r1, r2
 800249e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2201      	movs	r2, #1
 80024aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d004      	beq.n	80024c8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	4798      	blx	r3
    }
  }
  return;
 80024c6:	bf00      	nop
 80024c8:	bf00      	nop
}
 80024ca:	3710      	adds	r7, #16
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	40020008 	.word	0x40020008
 80024d4:	4002001c 	.word	0x4002001c
 80024d8:	40020030 	.word	0x40020030
 80024dc:	40020044 	.word	0x40020044
 80024e0:	40020058 	.word	0x40020058
 80024e4:	4002006c 	.word	0x4002006c
 80024e8:	40020000 	.word	0x40020000

080024ec <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	607a      	str	r2, [r7, #4]
 80024f8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002502:	2101      	movs	r1, #1
 8002504:	fa01 f202 	lsl.w	r2, r1, r2
 8002508:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	683a      	ldr	r2, [r7, #0]
 8002510:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	2b10      	cmp	r3, #16
 8002518:	d108      	bne.n	800252c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68ba      	ldr	r2, [r7, #8]
 8002528:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800252a:	e007      	b.n	800253c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	68ba      	ldr	r2, [r7, #8]
 8002532:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	60da      	str	r2, [r3, #12]
}
 800253c:	bf00      	nop
 800253e:	3714      	adds	r7, #20
 8002540:	46bd      	mov	sp, r7
 8002542:	bc80      	pop	{r7}
 8002544:	4770      	bx	lr
	...

08002548 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002548:	b480      	push	{r7}
 800254a:	b08b      	sub	sp, #44	; 0x2c
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002552:	2300      	movs	r3, #0
 8002554:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002556:	2300      	movs	r3, #0
 8002558:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800255a:	e127      	b.n	80027ac <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800255c:	2201      	movs	r2, #1
 800255e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	69fa      	ldr	r2, [r7, #28]
 800256c:	4013      	ands	r3, r2
 800256e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	429a      	cmp	r2, r3
 8002576:	f040 8116 	bne.w	80027a6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	2b12      	cmp	r3, #18
 8002580:	d034      	beq.n	80025ec <HAL_GPIO_Init+0xa4>
 8002582:	2b12      	cmp	r3, #18
 8002584:	d80d      	bhi.n	80025a2 <HAL_GPIO_Init+0x5a>
 8002586:	2b02      	cmp	r3, #2
 8002588:	d02b      	beq.n	80025e2 <HAL_GPIO_Init+0x9a>
 800258a:	2b02      	cmp	r3, #2
 800258c:	d804      	bhi.n	8002598 <HAL_GPIO_Init+0x50>
 800258e:	2b00      	cmp	r3, #0
 8002590:	d031      	beq.n	80025f6 <HAL_GPIO_Init+0xae>
 8002592:	2b01      	cmp	r3, #1
 8002594:	d01c      	beq.n	80025d0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002596:	e048      	b.n	800262a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002598:	2b03      	cmp	r3, #3
 800259a:	d043      	beq.n	8002624 <HAL_GPIO_Init+0xdc>
 800259c:	2b11      	cmp	r3, #17
 800259e:	d01b      	beq.n	80025d8 <HAL_GPIO_Init+0x90>
          break;
 80025a0:	e043      	b.n	800262a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80025a2:	4a89      	ldr	r2, [pc, #548]	; (80027c8 <HAL_GPIO_Init+0x280>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d026      	beq.n	80025f6 <HAL_GPIO_Init+0xae>
 80025a8:	4a87      	ldr	r2, [pc, #540]	; (80027c8 <HAL_GPIO_Init+0x280>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d806      	bhi.n	80025bc <HAL_GPIO_Init+0x74>
 80025ae:	4a87      	ldr	r2, [pc, #540]	; (80027cc <HAL_GPIO_Init+0x284>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d020      	beq.n	80025f6 <HAL_GPIO_Init+0xae>
 80025b4:	4a86      	ldr	r2, [pc, #536]	; (80027d0 <HAL_GPIO_Init+0x288>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d01d      	beq.n	80025f6 <HAL_GPIO_Init+0xae>
          break;
 80025ba:	e036      	b.n	800262a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80025bc:	4a85      	ldr	r2, [pc, #532]	; (80027d4 <HAL_GPIO_Init+0x28c>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d019      	beq.n	80025f6 <HAL_GPIO_Init+0xae>
 80025c2:	4a85      	ldr	r2, [pc, #532]	; (80027d8 <HAL_GPIO_Init+0x290>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d016      	beq.n	80025f6 <HAL_GPIO_Init+0xae>
 80025c8:	4a84      	ldr	r2, [pc, #528]	; (80027dc <HAL_GPIO_Init+0x294>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d013      	beq.n	80025f6 <HAL_GPIO_Init+0xae>
          break;
 80025ce:	e02c      	b.n	800262a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	623b      	str	r3, [r7, #32]
          break;
 80025d6:	e028      	b.n	800262a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	3304      	adds	r3, #4
 80025de:	623b      	str	r3, [r7, #32]
          break;
 80025e0:	e023      	b.n	800262a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	3308      	adds	r3, #8
 80025e8:	623b      	str	r3, [r7, #32]
          break;
 80025ea:	e01e      	b.n	800262a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	330c      	adds	r3, #12
 80025f2:	623b      	str	r3, [r7, #32]
          break;
 80025f4:	e019      	b.n	800262a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d102      	bne.n	8002604 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80025fe:	2304      	movs	r3, #4
 8002600:	623b      	str	r3, [r7, #32]
          break;
 8002602:	e012      	b.n	800262a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d105      	bne.n	8002618 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800260c:	2308      	movs	r3, #8
 800260e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	69fa      	ldr	r2, [r7, #28]
 8002614:	611a      	str	r2, [r3, #16]
          break;
 8002616:	e008      	b.n	800262a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002618:	2308      	movs	r3, #8
 800261a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	69fa      	ldr	r2, [r7, #28]
 8002620:	615a      	str	r2, [r3, #20]
          break;
 8002622:	e002      	b.n	800262a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002624:	2300      	movs	r3, #0
 8002626:	623b      	str	r3, [r7, #32]
          break;
 8002628:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	2bff      	cmp	r3, #255	; 0xff
 800262e:	d801      	bhi.n	8002634 <HAL_GPIO_Init+0xec>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	e001      	b.n	8002638 <HAL_GPIO_Init+0xf0>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	3304      	adds	r3, #4
 8002638:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	2bff      	cmp	r3, #255	; 0xff
 800263e:	d802      	bhi.n	8002646 <HAL_GPIO_Init+0xfe>
 8002640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	e002      	b.n	800264c <HAL_GPIO_Init+0x104>
 8002646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002648:	3b08      	subs	r3, #8
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	210f      	movs	r1, #15
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	fa01 f303 	lsl.w	r3, r1, r3
 800265a:	43db      	mvns	r3, r3
 800265c:	401a      	ands	r2, r3
 800265e:	6a39      	ldr	r1, [r7, #32]
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	fa01 f303 	lsl.w	r3, r1, r3
 8002666:	431a      	orrs	r2, r3
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002674:	2b00      	cmp	r3, #0
 8002676:	f000 8096 	beq.w	80027a6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800267a:	4b59      	ldr	r3, [pc, #356]	; (80027e0 <HAL_GPIO_Init+0x298>)
 800267c:	699b      	ldr	r3, [r3, #24]
 800267e:	4a58      	ldr	r2, [pc, #352]	; (80027e0 <HAL_GPIO_Init+0x298>)
 8002680:	f043 0301 	orr.w	r3, r3, #1
 8002684:	6193      	str	r3, [r2, #24]
 8002686:	4b56      	ldr	r3, [pc, #344]	; (80027e0 <HAL_GPIO_Init+0x298>)
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	60bb      	str	r3, [r7, #8]
 8002690:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002692:	4a54      	ldr	r2, [pc, #336]	; (80027e4 <HAL_GPIO_Init+0x29c>)
 8002694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002696:	089b      	lsrs	r3, r3, #2
 8002698:	3302      	adds	r3, #2
 800269a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800269e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80026a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a2:	f003 0303 	and.w	r3, r3, #3
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	220f      	movs	r2, #15
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	43db      	mvns	r3, r3
 80026b0:	68fa      	ldr	r2, [r7, #12]
 80026b2:	4013      	ands	r3, r2
 80026b4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a4b      	ldr	r2, [pc, #300]	; (80027e8 <HAL_GPIO_Init+0x2a0>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d013      	beq.n	80026e6 <HAL_GPIO_Init+0x19e>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a4a      	ldr	r2, [pc, #296]	; (80027ec <HAL_GPIO_Init+0x2a4>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d00d      	beq.n	80026e2 <HAL_GPIO_Init+0x19a>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a49      	ldr	r2, [pc, #292]	; (80027f0 <HAL_GPIO_Init+0x2a8>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d007      	beq.n	80026de <HAL_GPIO_Init+0x196>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a48      	ldr	r2, [pc, #288]	; (80027f4 <HAL_GPIO_Init+0x2ac>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d101      	bne.n	80026da <HAL_GPIO_Init+0x192>
 80026d6:	2303      	movs	r3, #3
 80026d8:	e006      	b.n	80026e8 <HAL_GPIO_Init+0x1a0>
 80026da:	2304      	movs	r3, #4
 80026dc:	e004      	b.n	80026e8 <HAL_GPIO_Init+0x1a0>
 80026de:	2302      	movs	r3, #2
 80026e0:	e002      	b.n	80026e8 <HAL_GPIO_Init+0x1a0>
 80026e2:	2301      	movs	r3, #1
 80026e4:	e000      	b.n	80026e8 <HAL_GPIO_Init+0x1a0>
 80026e6:	2300      	movs	r3, #0
 80026e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ea:	f002 0203 	and.w	r2, r2, #3
 80026ee:	0092      	lsls	r2, r2, #2
 80026f0:	4093      	lsls	r3, r2
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80026f8:	493a      	ldr	r1, [pc, #232]	; (80027e4 <HAL_GPIO_Init+0x29c>)
 80026fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fc:	089b      	lsrs	r3, r3, #2
 80026fe:	3302      	adds	r3, #2
 8002700:	68fa      	ldr	r2, [r7, #12]
 8002702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d006      	beq.n	8002720 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002712:	4b39      	ldr	r3, [pc, #228]	; (80027f8 <HAL_GPIO_Init+0x2b0>)
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	4938      	ldr	r1, [pc, #224]	; (80027f8 <HAL_GPIO_Init+0x2b0>)
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	4313      	orrs	r3, r2
 800271c:	600b      	str	r3, [r1, #0]
 800271e:	e006      	b.n	800272e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002720:	4b35      	ldr	r3, [pc, #212]	; (80027f8 <HAL_GPIO_Init+0x2b0>)
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	43db      	mvns	r3, r3
 8002728:	4933      	ldr	r1, [pc, #204]	; (80027f8 <HAL_GPIO_Init+0x2b0>)
 800272a:	4013      	ands	r3, r2
 800272c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d006      	beq.n	8002748 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800273a:	4b2f      	ldr	r3, [pc, #188]	; (80027f8 <HAL_GPIO_Init+0x2b0>)
 800273c:	685a      	ldr	r2, [r3, #4]
 800273e:	492e      	ldr	r1, [pc, #184]	; (80027f8 <HAL_GPIO_Init+0x2b0>)
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	4313      	orrs	r3, r2
 8002744:	604b      	str	r3, [r1, #4]
 8002746:	e006      	b.n	8002756 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002748:	4b2b      	ldr	r3, [pc, #172]	; (80027f8 <HAL_GPIO_Init+0x2b0>)
 800274a:	685a      	ldr	r2, [r3, #4]
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	43db      	mvns	r3, r3
 8002750:	4929      	ldr	r1, [pc, #164]	; (80027f8 <HAL_GPIO_Init+0x2b0>)
 8002752:	4013      	ands	r3, r2
 8002754:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d006      	beq.n	8002770 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002762:	4b25      	ldr	r3, [pc, #148]	; (80027f8 <HAL_GPIO_Init+0x2b0>)
 8002764:	689a      	ldr	r2, [r3, #8]
 8002766:	4924      	ldr	r1, [pc, #144]	; (80027f8 <HAL_GPIO_Init+0x2b0>)
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	4313      	orrs	r3, r2
 800276c:	608b      	str	r3, [r1, #8]
 800276e:	e006      	b.n	800277e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002770:	4b21      	ldr	r3, [pc, #132]	; (80027f8 <HAL_GPIO_Init+0x2b0>)
 8002772:	689a      	ldr	r2, [r3, #8]
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	43db      	mvns	r3, r3
 8002778:	491f      	ldr	r1, [pc, #124]	; (80027f8 <HAL_GPIO_Init+0x2b0>)
 800277a:	4013      	ands	r3, r2
 800277c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d006      	beq.n	8002798 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800278a:	4b1b      	ldr	r3, [pc, #108]	; (80027f8 <HAL_GPIO_Init+0x2b0>)
 800278c:	68da      	ldr	r2, [r3, #12]
 800278e:	491a      	ldr	r1, [pc, #104]	; (80027f8 <HAL_GPIO_Init+0x2b0>)
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	4313      	orrs	r3, r2
 8002794:	60cb      	str	r3, [r1, #12]
 8002796:	e006      	b.n	80027a6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002798:	4b17      	ldr	r3, [pc, #92]	; (80027f8 <HAL_GPIO_Init+0x2b0>)
 800279a:	68da      	ldr	r2, [r3, #12]
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	43db      	mvns	r3, r3
 80027a0:	4915      	ldr	r1, [pc, #84]	; (80027f8 <HAL_GPIO_Init+0x2b0>)
 80027a2:	4013      	ands	r3, r2
 80027a4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80027a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a8:	3301      	adds	r3, #1
 80027aa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b2:	fa22 f303 	lsr.w	r3, r2, r3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f47f aed0 	bne.w	800255c <HAL_GPIO_Init+0x14>
  }
}
 80027bc:	bf00      	nop
 80027be:	372c      	adds	r7, #44	; 0x2c
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bc80      	pop	{r7}
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	10210000 	.word	0x10210000
 80027cc:	10110000 	.word	0x10110000
 80027d0:	10120000 	.word	0x10120000
 80027d4:	10310000 	.word	0x10310000
 80027d8:	10320000 	.word	0x10320000
 80027dc:	10220000 	.word	0x10220000
 80027e0:	40021000 	.word	0x40021000
 80027e4:	40010000 	.word	0x40010000
 80027e8:	40010800 	.word	0x40010800
 80027ec:	40010c00 	.word	0x40010c00
 80027f0:	40011000 	.word	0x40011000
 80027f4:	40011400 	.word	0x40011400
 80027f8:	40010400 	.word	0x40010400

080027fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	460b      	mov	r3, r1
 8002806:	807b      	strh	r3, [r7, #2]
 8002808:	4613      	mov	r3, r2
 800280a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800280c:	787b      	ldrb	r3, [r7, #1]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d003      	beq.n	800281a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002812:	887a      	ldrh	r2, [r7, #2]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002818:	e003      	b.n	8002822 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800281a:	887b      	ldrh	r3, [r7, #2]
 800281c:	041a      	lsls	r2, r3, #16
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	611a      	str	r2, [r3, #16]
}
 8002822:	bf00      	nop
 8002824:	370c      	adds	r7, #12
 8002826:	46bd      	mov	sp, r7
 8002828:	bc80      	pop	{r7}
 800282a:	4770      	bx	lr

0800282c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	460b      	mov	r3, r1
 8002836:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	68da      	ldr	r2, [r3, #12]
 800283c:	887b      	ldrh	r3, [r7, #2]
 800283e:	4013      	ands	r3, r2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d003      	beq.n	800284c <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002844:	887a      	ldrh	r2, [r7, #2]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800284a:	e002      	b.n	8002852 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800284c:	887a      	ldrh	r2, [r7, #2]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	611a      	str	r2, [r3, #16]
}
 8002852:	bf00      	nop
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	bc80      	pop	{r7}
 800285a:	4770      	bx	lr

0800285c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	4603      	mov	r3, r0
 8002864:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002866:	4b08      	ldr	r3, [pc, #32]	; (8002888 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002868:	695a      	ldr	r2, [r3, #20]
 800286a:	88fb      	ldrh	r3, [r7, #6]
 800286c:	4013      	ands	r3, r2
 800286e:	2b00      	cmp	r3, #0
 8002870:	d006      	beq.n	8002880 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002872:	4a05      	ldr	r2, [pc, #20]	; (8002888 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002874:	88fb      	ldrh	r3, [r7, #6]
 8002876:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002878:	88fb      	ldrh	r3, [r7, #6]
 800287a:	4618      	mov	r0, r3
 800287c:	f7fd fd88 	bl	8000390 <HAL_GPIO_EXTI_Callback>
  }
}
 8002880:	bf00      	nop
 8002882:	3708      	adds	r7, #8
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	40010400 	.word	0x40010400

0800288c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e26c      	b.n	8002d78 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	f000 8087 	beq.w	80029ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028ac:	4b92      	ldr	r3, [pc, #584]	; (8002af8 <HAL_RCC_OscConfig+0x26c>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f003 030c 	and.w	r3, r3, #12
 80028b4:	2b04      	cmp	r3, #4
 80028b6:	d00c      	beq.n	80028d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028b8:	4b8f      	ldr	r3, [pc, #572]	; (8002af8 <HAL_RCC_OscConfig+0x26c>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f003 030c 	and.w	r3, r3, #12
 80028c0:	2b08      	cmp	r3, #8
 80028c2:	d112      	bne.n	80028ea <HAL_RCC_OscConfig+0x5e>
 80028c4:	4b8c      	ldr	r3, [pc, #560]	; (8002af8 <HAL_RCC_OscConfig+0x26c>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028d0:	d10b      	bne.n	80028ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028d2:	4b89      	ldr	r3, [pc, #548]	; (8002af8 <HAL_RCC_OscConfig+0x26c>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d06c      	beq.n	80029b8 <HAL_RCC_OscConfig+0x12c>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d168      	bne.n	80029b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e246      	b.n	8002d78 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028f2:	d106      	bne.n	8002902 <HAL_RCC_OscConfig+0x76>
 80028f4:	4b80      	ldr	r3, [pc, #512]	; (8002af8 <HAL_RCC_OscConfig+0x26c>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a7f      	ldr	r2, [pc, #508]	; (8002af8 <HAL_RCC_OscConfig+0x26c>)
 80028fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028fe:	6013      	str	r3, [r2, #0]
 8002900:	e02e      	b.n	8002960 <HAL_RCC_OscConfig+0xd4>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d10c      	bne.n	8002924 <HAL_RCC_OscConfig+0x98>
 800290a:	4b7b      	ldr	r3, [pc, #492]	; (8002af8 <HAL_RCC_OscConfig+0x26c>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a7a      	ldr	r2, [pc, #488]	; (8002af8 <HAL_RCC_OscConfig+0x26c>)
 8002910:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002914:	6013      	str	r3, [r2, #0]
 8002916:	4b78      	ldr	r3, [pc, #480]	; (8002af8 <HAL_RCC_OscConfig+0x26c>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a77      	ldr	r2, [pc, #476]	; (8002af8 <HAL_RCC_OscConfig+0x26c>)
 800291c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002920:	6013      	str	r3, [r2, #0]
 8002922:	e01d      	b.n	8002960 <HAL_RCC_OscConfig+0xd4>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800292c:	d10c      	bne.n	8002948 <HAL_RCC_OscConfig+0xbc>
 800292e:	4b72      	ldr	r3, [pc, #456]	; (8002af8 <HAL_RCC_OscConfig+0x26c>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a71      	ldr	r2, [pc, #452]	; (8002af8 <HAL_RCC_OscConfig+0x26c>)
 8002934:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002938:	6013      	str	r3, [r2, #0]
 800293a:	4b6f      	ldr	r3, [pc, #444]	; (8002af8 <HAL_RCC_OscConfig+0x26c>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a6e      	ldr	r2, [pc, #440]	; (8002af8 <HAL_RCC_OscConfig+0x26c>)
 8002940:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002944:	6013      	str	r3, [r2, #0]
 8002946:	e00b      	b.n	8002960 <HAL_RCC_OscConfig+0xd4>
 8002948:	4b6b      	ldr	r3, [pc, #428]	; (8002af8 <HAL_RCC_OscConfig+0x26c>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a6a      	ldr	r2, [pc, #424]	; (8002af8 <HAL_RCC_OscConfig+0x26c>)
 800294e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002952:	6013      	str	r3, [r2, #0]
 8002954:	4b68      	ldr	r3, [pc, #416]	; (8002af8 <HAL_RCC_OscConfig+0x26c>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a67      	ldr	r2, [pc, #412]	; (8002af8 <HAL_RCC_OscConfig+0x26c>)
 800295a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800295e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d013      	beq.n	8002990 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002968:	f7fe feb6 	bl	80016d8 <HAL_GetTick>
 800296c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800296e:	e008      	b.n	8002982 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002970:	f7fe feb2 	bl	80016d8 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b64      	cmp	r3, #100	; 0x64
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e1fa      	b.n	8002d78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002982:	4b5d      	ldr	r3, [pc, #372]	; (8002af8 <HAL_RCC_OscConfig+0x26c>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d0f0      	beq.n	8002970 <HAL_RCC_OscConfig+0xe4>
 800298e:	e014      	b.n	80029ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002990:	f7fe fea2 	bl	80016d8 <HAL_GetTick>
 8002994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002996:	e008      	b.n	80029aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002998:	f7fe fe9e 	bl	80016d8 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b64      	cmp	r3, #100	; 0x64
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e1e6      	b.n	8002d78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029aa:	4b53      	ldr	r3, [pc, #332]	; (8002af8 <HAL_RCC_OscConfig+0x26c>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d1f0      	bne.n	8002998 <HAL_RCC_OscConfig+0x10c>
 80029b6:	e000      	b.n	80029ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d063      	beq.n	8002a8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029c6:	4b4c      	ldr	r3, [pc, #304]	; (8002af8 <HAL_RCC_OscConfig+0x26c>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f003 030c 	and.w	r3, r3, #12
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d00b      	beq.n	80029ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80029d2:	4b49      	ldr	r3, [pc, #292]	; (8002af8 <HAL_RCC_OscConfig+0x26c>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f003 030c 	and.w	r3, r3, #12
 80029da:	2b08      	cmp	r3, #8
 80029dc:	d11c      	bne.n	8002a18 <HAL_RCC_OscConfig+0x18c>
 80029de:	4b46      	ldr	r3, [pc, #280]	; (8002af8 <HAL_RCC_OscConfig+0x26c>)
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d116      	bne.n	8002a18 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ea:	4b43      	ldr	r3, [pc, #268]	; (8002af8 <HAL_RCC_OscConfig+0x26c>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d005      	beq.n	8002a02 <HAL_RCC_OscConfig+0x176>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d001      	beq.n	8002a02 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e1ba      	b.n	8002d78 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a02:	4b3d      	ldr	r3, [pc, #244]	; (8002af8 <HAL_RCC_OscConfig+0x26c>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	00db      	lsls	r3, r3, #3
 8002a10:	4939      	ldr	r1, [pc, #228]	; (8002af8 <HAL_RCC_OscConfig+0x26c>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a16:	e03a      	b.n	8002a8e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d020      	beq.n	8002a62 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a20:	4b36      	ldr	r3, [pc, #216]	; (8002afc <HAL_RCC_OscConfig+0x270>)
 8002a22:	2201      	movs	r2, #1
 8002a24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a26:	f7fe fe57 	bl	80016d8 <HAL_GetTick>
 8002a2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a2c:	e008      	b.n	8002a40 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a2e:	f7fe fe53 	bl	80016d8 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d901      	bls.n	8002a40 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e19b      	b.n	8002d78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a40:	4b2d      	ldr	r3, [pc, #180]	; (8002af8 <HAL_RCC_OscConfig+0x26c>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0302 	and.w	r3, r3, #2
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d0f0      	beq.n	8002a2e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a4c:	4b2a      	ldr	r3, [pc, #168]	; (8002af8 <HAL_RCC_OscConfig+0x26c>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	695b      	ldr	r3, [r3, #20]
 8002a58:	00db      	lsls	r3, r3, #3
 8002a5a:	4927      	ldr	r1, [pc, #156]	; (8002af8 <HAL_RCC_OscConfig+0x26c>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	600b      	str	r3, [r1, #0]
 8002a60:	e015      	b.n	8002a8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a62:	4b26      	ldr	r3, [pc, #152]	; (8002afc <HAL_RCC_OscConfig+0x270>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a68:	f7fe fe36 	bl	80016d8 <HAL_GetTick>
 8002a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a6e:	e008      	b.n	8002a82 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a70:	f7fe fe32 	bl	80016d8 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e17a      	b.n	8002d78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a82:	4b1d      	ldr	r3, [pc, #116]	; (8002af8 <HAL_RCC_OscConfig+0x26c>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0302 	and.w	r3, r3, #2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d1f0      	bne.n	8002a70 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0308 	and.w	r3, r3, #8
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d03a      	beq.n	8002b10 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d019      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aa2:	4b17      	ldr	r3, [pc, #92]	; (8002b00 <HAL_RCC_OscConfig+0x274>)
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aa8:	f7fe fe16 	bl	80016d8 <HAL_GetTick>
 8002aac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ab0:	f7fe fe12 	bl	80016d8 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e15a      	b.n	8002d78 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ac2:	4b0d      	ldr	r3, [pc, #52]	; (8002af8 <HAL_RCC_OscConfig+0x26c>)
 8002ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d0f0      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002ace:	2001      	movs	r0, #1
 8002ad0:	f000 fada 	bl	8003088 <RCC_Delay>
 8002ad4:	e01c      	b.n	8002b10 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ad6:	4b0a      	ldr	r3, [pc, #40]	; (8002b00 <HAL_RCC_OscConfig+0x274>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002adc:	f7fe fdfc 	bl	80016d8 <HAL_GetTick>
 8002ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ae2:	e00f      	b.n	8002b04 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ae4:	f7fe fdf8 	bl	80016d8 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d908      	bls.n	8002b04 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e140      	b.n	8002d78 <HAL_RCC_OscConfig+0x4ec>
 8002af6:	bf00      	nop
 8002af8:	40021000 	.word	0x40021000
 8002afc:	42420000 	.word	0x42420000
 8002b00:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b04:	4b9e      	ldr	r3, [pc, #632]	; (8002d80 <HAL_RCC_OscConfig+0x4f4>)
 8002b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b08:	f003 0302 	and.w	r3, r3, #2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d1e9      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0304 	and.w	r3, r3, #4
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	f000 80a6 	beq.w	8002c6a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b22:	4b97      	ldr	r3, [pc, #604]	; (8002d80 <HAL_RCC_OscConfig+0x4f4>)
 8002b24:	69db      	ldr	r3, [r3, #28]
 8002b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d10d      	bne.n	8002b4a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b2e:	4b94      	ldr	r3, [pc, #592]	; (8002d80 <HAL_RCC_OscConfig+0x4f4>)
 8002b30:	69db      	ldr	r3, [r3, #28]
 8002b32:	4a93      	ldr	r2, [pc, #588]	; (8002d80 <HAL_RCC_OscConfig+0x4f4>)
 8002b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b38:	61d3      	str	r3, [r2, #28]
 8002b3a:	4b91      	ldr	r3, [pc, #580]	; (8002d80 <HAL_RCC_OscConfig+0x4f4>)
 8002b3c:	69db      	ldr	r3, [r3, #28]
 8002b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b42:	60bb      	str	r3, [r7, #8]
 8002b44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b46:	2301      	movs	r3, #1
 8002b48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b4a:	4b8e      	ldr	r3, [pc, #568]	; (8002d84 <HAL_RCC_OscConfig+0x4f8>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d118      	bne.n	8002b88 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b56:	4b8b      	ldr	r3, [pc, #556]	; (8002d84 <HAL_RCC_OscConfig+0x4f8>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a8a      	ldr	r2, [pc, #552]	; (8002d84 <HAL_RCC_OscConfig+0x4f8>)
 8002b5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b62:	f7fe fdb9 	bl	80016d8 <HAL_GetTick>
 8002b66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b68:	e008      	b.n	8002b7c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b6a:	f7fe fdb5 	bl	80016d8 <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	2b64      	cmp	r3, #100	; 0x64
 8002b76:	d901      	bls.n	8002b7c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e0fd      	b.n	8002d78 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b7c:	4b81      	ldr	r3, [pc, #516]	; (8002d84 <HAL_RCC_OscConfig+0x4f8>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d0f0      	beq.n	8002b6a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d106      	bne.n	8002b9e <HAL_RCC_OscConfig+0x312>
 8002b90:	4b7b      	ldr	r3, [pc, #492]	; (8002d80 <HAL_RCC_OscConfig+0x4f4>)
 8002b92:	6a1b      	ldr	r3, [r3, #32]
 8002b94:	4a7a      	ldr	r2, [pc, #488]	; (8002d80 <HAL_RCC_OscConfig+0x4f4>)
 8002b96:	f043 0301 	orr.w	r3, r3, #1
 8002b9a:	6213      	str	r3, [r2, #32]
 8002b9c:	e02d      	b.n	8002bfa <HAL_RCC_OscConfig+0x36e>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d10c      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x334>
 8002ba6:	4b76      	ldr	r3, [pc, #472]	; (8002d80 <HAL_RCC_OscConfig+0x4f4>)
 8002ba8:	6a1b      	ldr	r3, [r3, #32]
 8002baa:	4a75      	ldr	r2, [pc, #468]	; (8002d80 <HAL_RCC_OscConfig+0x4f4>)
 8002bac:	f023 0301 	bic.w	r3, r3, #1
 8002bb0:	6213      	str	r3, [r2, #32]
 8002bb2:	4b73      	ldr	r3, [pc, #460]	; (8002d80 <HAL_RCC_OscConfig+0x4f4>)
 8002bb4:	6a1b      	ldr	r3, [r3, #32]
 8002bb6:	4a72      	ldr	r2, [pc, #456]	; (8002d80 <HAL_RCC_OscConfig+0x4f4>)
 8002bb8:	f023 0304 	bic.w	r3, r3, #4
 8002bbc:	6213      	str	r3, [r2, #32]
 8002bbe:	e01c      	b.n	8002bfa <HAL_RCC_OscConfig+0x36e>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	2b05      	cmp	r3, #5
 8002bc6:	d10c      	bne.n	8002be2 <HAL_RCC_OscConfig+0x356>
 8002bc8:	4b6d      	ldr	r3, [pc, #436]	; (8002d80 <HAL_RCC_OscConfig+0x4f4>)
 8002bca:	6a1b      	ldr	r3, [r3, #32]
 8002bcc:	4a6c      	ldr	r2, [pc, #432]	; (8002d80 <HAL_RCC_OscConfig+0x4f4>)
 8002bce:	f043 0304 	orr.w	r3, r3, #4
 8002bd2:	6213      	str	r3, [r2, #32]
 8002bd4:	4b6a      	ldr	r3, [pc, #424]	; (8002d80 <HAL_RCC_OscConfig+0x4f4>)
 8002bd6:	6a1b      	ldr	r3, [r3, #32]
 8002bd8:	4a69      	ldr	r2, [pc, #420]	; (8002d80 <HAL_RCC_OscConfig+0x4f4>)
 8002bda:	f043 0301 	orr.w	r3, r3, #1
 8002bde:	6213      	str	r3, [r2, #32]
 8002be0:	e00b      	b.n	8002bfa <HAL_RCC_OscConfig+0x36e>
 8002be2:	4b67      	ldr	r3, [pc, #412]	; (8002d80 <HAL_RCC_OscConfig+0x4f4>)
 8002be4:	6a1b      	ldr	r3, [r3, #32]
 8002be6:	4a66      	ldr	r2, [pc, #408]	; (8002d80 <HAL_RCC_OscConfig+0x4f4>)
 8002be8:	f023 0301 	bic.w	r3, r3, #1
 8002bec:	6213      	str	r3, [r2, #32]
 8002bee:	4b64      	ldr	r3, [pc, #400]	; (8002d80 <HAL_RCC_OscConfig+0x4f4>)
 8002bf0:	6a1b      	ldr	r3, [r3, #32]
 8002bf2:	4a63      	ldr	r2, [pc, #396]	; (8002d80 <HAL_RCC_OscConfig+0x4f4>)
 8002bf4:	f023 0304 	bic.w	r3, r3, #4
 8002bf8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d015      	beq.n	8002c2e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c02:	f7fe fd69 	bl	80016d8 <HAL_GetTick>
 8002c06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c08:	e00a      	b.n	8002c20 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c0a:	f7fe fd65 	bl	80016d8 <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d901      	bls.n	8002c20 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e0ab      	b.n	8002d78 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c20:	4b57      	ldr	r3, [pc, #348]	; (8002d80 <HAL_RCC_OscConfig+0x4f4>)
 8002c22:	6a1b      	ldr	r3, [r3, #32]
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d0ee      	beq.n	8002c0a <HAL_RCC_OscConfig+0x37e>
 8002c2c:	e014      	b.n	8002c58 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c2e:	f7fe fd53 	bl	80016d8 <HAL_GetTick>
 8002c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c34:	e00a      	b.n	8002c4c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c36:	f7fe fd4f 	bl	80016d8 <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d901      	bls.n	8002c4c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e095      	b.n	8002d78 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c4c:	4b4c      	ldr	r3, [pc, #304]	; (8002d80 <HAL_RCC_OscConfig+0x4f4>)
 8002c4e:	6a1b      	ldr	r3, [r3, #32]
 8002c50:	f003 0302 	and.w	r3, r3, #2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d1ee      	bne.n	8002c36 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c58:	7dfb      	ldrb	r3, [r7, #23]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d105      	bne.n	8002c6a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c5e:	4b48      	ldr	r3, [pc, #288]	; (8002d80 <HAL_RCC_OscConfig+0x4f4>)
 8002c60:	69db      	ldr	r3, [r3, #28]
 8002c62:	4a47      	ldr	r2, [pc, #284]	; (8002d80 <HAL_RCC_OscConfig+0x4f4>)
 8002c64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c68:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	69db      	ldr	r3, [r3, #28]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	f000 8081 	beq.w	8002d76 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c74:	4b42      	ldr	r3, [pc, #264]	; (8002d80 <HAL_RCC_OscConfig+0x4f4>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f003 030c 	and.w	r3, r3, #12
 8002c7c:	2b08      	cmp	r3, #8
 8002c7e:	d061      	beq.n	8002d44 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	69db      	ldr	r3, [r3, #28]
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d146      	bne.n	8002d16 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c88:	4b3f      	ldr	r3, [pc, #252]	; (8002d88 <HAL_RCC_OscConfig+0x4fc>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c8e:	f7fe fd23 	bl	80016d8 <HAL_GetTick>
 8002c92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c94:	e008      	b.n	8002ca8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c96:	f7fe fd1f 	bl	80016d8 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d901      	bls.n	8002ca8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e067      	b.n	8002d78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ca8:	4b35      	ldr	r3, [pc, #212]	; (8002d80 <HAL_RCC_OscConfig+0x4f4>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d1f0      	bne.n	8002c96 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a1b      	ldr	r3, [r3, #32]
 8002cb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cbc:	d108      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002cbe:	4b30      	ldr	r3, [pc, #192]	; (8002d80 <HAL_RCC_OscConfig+0x4f4>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	492d      	ldr	r1, [pc, #180]	; (8002d80 <HAL_RCC_OscConfig+0x4f4>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cd0:	4b2b      	ldr	r3, [pc, #172]	; (8002d80 <HAL_RCC_OscConfig+0x4f4>)
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a19      	ldr	r1, [r3, #32]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce0:	430b      	orrs	r3, r1
 8002ce2:	4927      	ldr	r1, [pc, #156]	; (8002d80 <HAL_RCC_OscConfig+0x4f4>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ce8:	4b27      	ldr	r3, [pc, #156]	; (8002d88 <HAL_RCC_OscConfig+0x4fc>)
 8002cea:	2201      	movs	r2, #1
 8002cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cee:	f7fe fcf3 	bl	80016d8 <HAL_GetTick>
 8002cf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cf4:	e008      	b.n	8002d08 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cf6:	f7fe fcef 	bl	80016d8 <HAL_GetTick>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d901      	bls.n	8002d08 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e037      	b.n	8002d78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d08:	4b1d      	ldr	r3, [pc, #116]	; (8002d80 <HAL_RCC_OscConfig+0x4f4>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d0f0      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x46a>
 8002d14:	e02f      	b.n	8002d76 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d16:	4b1c      	ldr	r3, [pc, #112]	; (8002d88 <HAL_RCC_OscConfig+0x4fc>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d1c:	f7fe fcdc 	bl	80016d8 <HAL_GetTick>
 8002d20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d24:	f7fe fcd8 	bl	80016d8 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e020      	b.n	8002d78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d36:	4b12      	ldr	r3, [pc, #72]	; (8002d80 <HAL_RCC_OscConfig+0x4f4>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d1f0      	bne.n	8002d24 <HAL_RCC_OscConfig+0x498>
 8002d42:	e018      	b.n	8002d76 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	69db      	ldr	r3, [r3, #28]
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d101      	bne.n	8002d50 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e013      	b.n	8002d78 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d50:	4b0b      	ldr	r3, [pc, #44]	; (8002d80 <HAL_RCC_OscConfig+0x4f4>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a1b      	ldr	r3, [r3, #32]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d106      	bne.n	8002d72 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d001      	beq.n	8002d76 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e000      	b.n	8002d78 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002d76:	2300      	movs	r3, #0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3718      	adds	r7, #24
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	40021000 	.word	0x40021000
 8002d84:	40007000 	.word	0x40007000
 8002d88:	42420060 	.word	0x42420060

08002d8c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d101      	bne.n	8002da0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e0d0      	b.n	8002f42 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002da0:	4b6a      	ldr	r3, [pc, #424]	; (8002f4c <HAL_RCC_ClockConfig+0x1c0>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0307 	and.w	r3, r3, #7
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d910      	bls.n	8002dd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dae:	4b67      	ldr	r3, [pc, #412]	; (8002f4c <HAL_RCC_ClockConfig+0x1c0>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f023 0207 	bic.w	r2, r3, #7
 8002db6:	4965      	ldr	r1, [pc, #404]	; (8002f4c <HAL_RCC_ClockConfig+0x1c0>)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dbe:	4b63      	ldr	r3, [pc, #396]	; (8002f4c <HAL_RCC_ClockConfig+0x1c0>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0307 	and.w	r3, r3, #7
 8002dc6:	683a      	ldr	r2, [r7, #0]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d001      	beq.n	8002dd0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e0b8      	b.n	8002f42 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0302 	and.w	r3, r3, #2
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d020      	beq.n	8002e1e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0304 	and.w	r3, r3, #4
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d005      	beq.n	8002df4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002de8:	4b59      	ldr	r3, [pc, #356]	; (8002f50 <HAL_RCC_ClockConfig+0x1c4>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	4a58      	ldr	r2, [pc, #352]	; (8002f50 <HAL_RCC_ClockConfig+0x1c4>)
 8002dee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002df2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0308 	and.w	r3, r3, #8
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d005      	beq.n	8002e0c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e00:	4b53      	ldr	r3, [pc, #332]	; (8002f50 <HAL_RCC_ClockConfig+0x1c4>)
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	4a52      	ldr	r2, [pc, #328]	; (8002f50 <HAL_RCC_ClockConfig+0x1c4>)
 8002e06:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002e0a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e0c:	4b50      	ldr	r3, [pc, #320]	; (8002f50 <HAL_RCC_ClockConfig+0x1c4>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	494d      	ldr	r1, [pc, #308]	; (8002f50 <HAL_RCC_ClockConfig+0x1c4>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0301 	and.w	r3, r3, #1
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d040      	beq.n	8002eac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d107      	bne.n	8002e42 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e32:	4b47      	ldr	r3, [pc, #284]	; (8002f50 <HAL_RCC_ClockConfig+0x1c4>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d115      	bne.n	8002e6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e07f      	b.n	8002f42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d107      	bne.n	8002e5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e4a:	4b41      	ldr	r3, [pc, #260]	; (8002f50 <HAL_RCC_ClockConfig+0x1c4>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d109      	bne.n	8002e6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e073      	b.n	8002f42 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e5a:	4b3d      	ldr	r3, [pc, #244]	; (8002f50 <HAL_RCC_ClockConfig+0x1c4>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e06b      	b.n	8002f42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e6a:	4b39      	ldr	r3, [pc, #228]	; (8002f50 <HAL_RCC_ClockConfig+0x1c4>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f023 0203 	bic.w	r2, r3, #3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	4936      	ldr	r1, [pc, #216]	; (8002f50 <HAL_RCC_ClockConfig+0x1c4>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e7c:	f7fe fc2c 	bl	80016d8 <HAL_GetTick>
 8002e80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e82:	e00a      	b.n	8002e9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e84:	f7fe fc28 	bl	80016d8 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e053      	b.n	8002f42 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e9a:	4b2d      	ldr	r3, [pc, #180]	; (8002f50 <HAL_RCC_ClockConfig+0x1c4>)
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f003 020c 	and.w	r2, r3, #12
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d1eb      	bne.n	8002e84 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002eac:	4b27      	ldr	r3, [pc, #156]	; (8002f4c <HAL_RCC_ClockConfig+0x1c0>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0307 	and.w	r3, r3, #7
 8002eb4:	683a      	ldr	r2, [r7, #0]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d210      	bcs.n	8002edc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eba:	4b24      	ldr	r3, [pc, #144]	; (8002f4c <HAL_RCC_ClockConfig+0x1c0>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f023 0207 	bic.w	r2, r3, #7
 8002ec2:	4922      	ldr	r1, [pc, #136]	; (8002f4c <HAL_RCC_ClockConfig+0x1c0>)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eca:	4b20      	ldr	r3, [pc, #128]	; (8002f4c <HAL_RCC_ClockConfig+0x1c0>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0307 	and.w	r3, r3, #7
 8002ed2:	683a      	ldr	r2, [r7, #0]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d001      	beq.n	8002edc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e032      	b.n	8002f42 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0304 	and.w	r3, r3, #4
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d008      	beq.n	8002efa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ee8:	4b19      	ldr	r3, [pc, #100]	; (8002f50 <HAL_RCC_ClockConfig+0x1c4>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	4916      	ldr	r1, [pc, #88]	; (8002f50 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0308 	and.w	r3, r3, #8
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d009      	beq.n	8002f1a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f06:	4b12      	ldr	r3, [pc, #72]	; (8002f50 <HAL_RCC_ClockConfig+0x1c4>)
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	00db      	lsls	r3, r3, #3
 8002f14:	490e      	ldr	r1, [pc, #56]	; (8002f50 <HAL_RCC_ClockConfig+0x1c4>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f1a:	f000 f821 	bl	8002f60 <HAL_RCC_GetSysClockFreq>
 8002f1e:	4601      	mov	r1, r0
 8002f20:	4b0b      	ldr	r3, [pc, #44]	; (8002f50 <HAL_RCC_ClockConfig+0x1c4>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	091b      	lsrs	r3, r3, #4
 8002f26:	f003 030f 	and.w	r3, r3, #15
 8002f2a:	4a0a      	ldr	r2, [pc, #40]	; (8002f54 <HAL_RCC_ClockConfig+0x1c8>)
 8002f2c:	5cd3      	ldrb	r3, [r2, r3]
 8002f2e:	fa21 f303 	lsr.w	r3, r1, r3
 8002f32:	4a09      	ldr	r2, [pc, #36]	; (8002f58 <HAL_RCC_ClockConfig+0x1cc>)
 8002f34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f36:	4b09      	ldr	r3, [pc, #36]	; (8002f5c <HAL_RCC_ClockConfig+0x1d0>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7fe fb8a 	bl	8001654 <HAL_InitTick>

  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3710      	adds	r7, #16
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	40022000 	.word	0x40022000
 8002f50:	40021000 	.word	0x40021000
 8002f54:	08007fac 	.word	0x08007fac
 8002f58:	20000014 	.word	0x20000014
 8002f5c:	20000018 	.word	0x20000018

08002f60 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f60:	b490      	push	{r4, r7}
 8002f62:	b08a      	sub	sp, #40	; 0x28
 8002f64:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002f66:	4b2a      	ldr	r3, [pc, #168]	; (8003010 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002f68:	1d3c      	adds	r4, r7, #4
 8002f6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002f70:	4b28      	ldr	r3, [pc, #160]	; (8003014 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f72:	881b      	ldrh	r3, [r3, #0]
 8002f74:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f76:	2300      	movs	r3, #0
 8002f78:	61fb      	str	r3, [r7, #28]
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	61bb      	str	r3, [r7, #24]
 8002f7e:	2300      	movs	r3, #0
 8002f80:	627b      	str	r3, [r7, #36]	; 0x24
 8002f82:	2300      	movs	r3, #0
 8002f84:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002f86:	2300      	movs	r3, #0
 8002f88:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f8a:	4b23      	ldr	r3, [pc, #140]	; (8003018 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	f003 030c 	and.w	r3, r3, #12
 8002f96:	2b04      	cmp	r3, #4
 8002f98:	d002      	beq.n	8002fa0 <HAL_RCC_GetSysClockFreq+0x40>
 8002f9a:	2b08      	cmp	r3, #8
 8002f9c:	d003      	beq.n	8002fa6 <HAL_RCC_GetSysClockFreq+0x46>
 8002f9e:	e02d      	b.n	8002ffc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002fa0:	4b1e      	ldr	r3, [pc, #120]	; (800301c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002fa2:	623b      	str	r3, [r7, #32]
      break;
 8002fa4:	e02d      	b.n	8003002 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	0c9b      	lsrs	r3, r3, #18
 8002faa:	f003 030f 	and.w	r3, r3, #15
 8002fae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002fb2:	4413      	add	r3, r2
 8002fb4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002fb8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d013      	beq.n	8002fec <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002fc4:	4b14      	ldr	r3, [pc, #80]	; (8003018 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	0c5b      	lsrs	r3, r3, #17
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002fd2:	4413      	add	r3, r2
 8002fd4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002fd8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	4a0f      	ldr	r2, [pc, #60]	; (800301c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002fde:	fb02 f203 	mul.w	r2, r2, r3
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe8:	627b      	str	r3, [r7, #36]	; 0x24
 8002fea:	e004      	b.n	8002ff6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	4a0c      	ldr	r2, [pc, #48]	; (8003020 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ff0:	fb02 f303 	mul.w	r3, r2, r3
 8002ff4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff8:	623b      	str	r3, [r7, #32]
      break;
 8002ffa:	e002      	b.n	8003002 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ffc:	4b07      	ldr	r3, [pc, #28]	; (800301c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ffe:	623b      	str	r3, [r7, #32]
      break;
 8003000:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003002:	6a3b      	ldr	r3, [r7, #32]
}
 8003004:	4618      	mov	r0, r3
 8003006:	3728      	adds	r7, #40	; 0x28
 8003008:	46bd      	mov	sp, r7
 800300a:	bc90      	pop	{r4, r7}
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	08007f14 	.word	0x08007f14
 8003014:	08007f24 	.word	0x08007f24
 8003018:	40021000 	.word	0x40021000
 800301c:	007a1200 	.word	0x007a1200
 8003020:	003d0900 	.word	0x003d0900

08003024 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003028:	4b02      	ldr	r3, [pc, #8]	; (8003034 <HAL_RCC_GetHCLKFreq+0x10>)
 800302a:	681b      	ldr	r3, [r3, #0]
}
 800302c:	4618      	mov	r0, r3
 800302e:	46bd      	mov	sp, r7
 8003030:	bc80      	pop	{r7}
 8003032:	4770      	bx	lr
 8003034:	20000014 	.word	0x20000014

08003038 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800303c:	f7ff fff2 	bl	8003024 <HAL_RCC_GetHCLKFreq>
 8003040:	4601      	mov	r1, r0
 8003042:	4b05      	ldr	r3, [pc, #20]	; (8003058 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	0a1b      	lsrs	r3, r3, #8
 8003048:	f003 0307 	and.w	r3, r3, #7
 800304c:	4a03      	ldr	r2, [pc, #12]	; (800305c <HAL_RCC_GetPCLK1Freq+0x24>)
 800304e:	5cd3      	ldrb	r3, [r2, r3]
 8003050:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003054:	4618      	mov	r0, r3
 8003056:	bd80      	pop	{r7, pc}
 8003058:	40021000 	.word	0x40021000
 800305c:	08007fbc 	.word	0x08007fbc

08003060 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003064:	f7ff ffde 	bl	8003024 <HAL_RCC_GetHCLKFreq>
 8003068:	4601      	mov	r1, r0
 800306a:	4b05      	ldr	r3, [pc, #20]	; (8003080 <HAL_RCC_GetPCLK2Freq+0x20>)
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	0adb      	lsrs	r3, r3, #11
 8003070:	f003 0307 	and.w	r3, r3, #7
 8003074:	4a03      	ldr	r2, [pc, #12]	; (8003084 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003076:	5cd3      	ldrb	r3, [r2, r3]
 8003078:	fa21 f303 	lsr.w	r3, r1, r3
}
 800307c:	4618      	mov	r0, r3
 800307e:	bd80      	pop	{r7, pc}
 8003080:	40021000 	.word	0x40021000
 8003084:	08007fbc 	.word	0x08007fbc

08003088 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003088:	b480      	push	{r7}
 800308a:	b085      	sub	sp, #20
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003090:	4b0a      	ldr	r3, [pc, #40]	; (80030bc <RCC_Delay+0x34>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a0a      	ldr	r2, [pc, #40]	; (80030c0 <RCC_Delay+0x38>)
 8003096:	fba2 2303 	umull	r2, r3, r2, r3
 800309a:	0a5b      	lsrs	r3, r3, #9
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	fb02 f303 	mul.w	r3, r2, r3
 80030a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80030a4:	bf00      	nop
  }
  while (Delay --);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	1e5a      	subs	r2, r3, #1
 80030aa:	60fa      	str	r2, [r7, #12]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d1f9      	bne.n	80030a4 <RCC_Delay+0x1c>
}
 80030b0:	bf00      	nop
 80030b2:	3714      	adds	r7, #20
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bc80      	pop	{r7}
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	20000014 	.word	0x20000014
 80030c0:	10624dd3 	.word	0x10624dd3

080030c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b086      	sub	sp, #24
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80030cc:	2300      	movs	r3, #0
 80030ce:	613b      	str	r3, [r7, #16]
 80030d0:	2300      	movs	r3, #0
 80030d2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0301 	and.w	r3, r3, #1
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d07d      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80030e0:	2300      	movs	r3, #0
 80030e2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030e4:	4b4f      	ldr	r3, [pc, #316]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030e6:	69db      	ldr	r3, [r3, #28]
 80030e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d10d      	bne.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030f0:	4b4c      	ldr	r3, [pc, #304]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030f2:	69db      	ldr	r3, [r3, #28]
 80030f4:	4a4b      	ldr	r2, [pc, #300]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030fa:	61d3      	str	r3, [r2, #28]
 80030fc:	4b49      	ldr	r3, [pc, #292]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030fe:	69db      	ldr	r3, [r3, #28]
 8003100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003104:	60bb      	str	r3, [r7, #8]
 8003106:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003108:	2301      	movs	r3, #1
 800310a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800310c:	4b46      	ldr	r3, [pc, #280]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003114:	2b00      	cmp	r3, #0
 8003116:	d118      	bne.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003118:	4b43      	ldr	r3, [pc, #268]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a42      	ldr	r2, [pc, #264]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800311e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003122:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003124:	f7fe fad8 	bl	80016d8 <HAL_GetTick>
 8003128:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800312a:	e008      	b.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800312c:	f7fe fad4 	bl	80016d8 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b64      	cmp	r3, #100	; 0x64
 8003138:	d901      	bls.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e06d      	b.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800313e:	4b3a      	ldr	r3, [pc, #232]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003146:	2b00      	cmp	r3, #0
 8003148:	d0f0      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800314a:	4b36      	ldr	r3, [pc, #216]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003152:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d02e      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	429a      	cmp	r2, r3
 8003166:	d027      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003168:	4b2e      	ldr	r3, [pc, #184]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800316a:	6a1b      	ldr	r3, [r3, #32]
 800316c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003170:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003172:	4b2e      	ldr	r3, [pc, #184]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003174:	2201      	movs	r2, #1
 8003176:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003178:	4b2c      	ldr	r3, [pc, #176]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800317a:	2200      	movs	r2, #0
 800317c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800317e:	4a29      	ldr	r2, [pc, #164]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	2b00      	cmp	r3, #0
 800318c:	d014      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800318e:	f7fe faa3 	bl	80016d8 <HAL_GetTick>
 8003192:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003194:	e00a      	b.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003196:	f7fe fa9f 	bl	80016d8 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d901      	bls.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e036      	b.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ac:	4b1d      	ldr	r3, [pc, #116]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ae:	6a1b      	ldr	r3, [r3, #32]
 80031b0:	f003 0302 	and.w	r3, r3, #2
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d0ee      	beq.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031b8:	4b1a      	ldr	r3, [pc, #104]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ba:	6a1b      	ldr	r3, [r3, #32]
 80031bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	4917      	ldr	r1, [pc, #92]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80031ca:	7dfb      	ldrb	r3, [r7, #23]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d105      	bne.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031d0:	4b14      	ldr	r3, [pc, #80]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031d2:	69db      	ldr	r3, [r3, #28]
 80031d4:	4a13      	ldr	r2, [pc, #76]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031da:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0302 	and.w	r3, r3, #2
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d008      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031e8:	4b0e      	ldr	r3, [pc, #56]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	490b      	ldr	r1, [pc, #44]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0310 	and.w	r3, r3, #16
 8003202:	2b00      	cmp	r3, #0
 8003204:	d008      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003206:	4b07      	ldr	r3, [pc, #28]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	4904      	ldr	r1, [pc, #16]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003214:	4313      	orrs	r3, r2
 8003216:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3718      	adds	r7, #24
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	40021000 	.word	0x40021000
 8003228:	40007000 	.word	0x40007000
 800322c:	42420440 	.word	0x42420440

08003230 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e01d      	b.n	800327e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	d106      	bne.n	800325c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f7fe f84e 	bl	80012f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2202      	movs	r2, #2
 8003260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	3304      	adds	r3, #4
 800326c:	4619      	mov	r1, r3
 800326e:	4610      	mov	r0, r2
 8003270:	f000 f902 	bl	8003478 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3708      	adds	r7, #8
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
	...

08003288 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2201      	movs	r2, #1
 8003298:	6839      	ldr	r1, [r7, #0]
 800329a:	4618      	mov	r0, r3
 800329c:	f000 fad6 	bl	800384c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a10      	ldr	r2, [pc, #64]	; (80032e8 <HAL_TIM_PWM_Start+0x60>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d107      	bne.n	80032ba <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f003 0307 	and.w	r3, r3, #7
 80032c4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2b06      	cmp	r3, #6
 80032ca:	d007      	beq.n	80032dc <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f042 0201 	orr.w	r2, r2, #1
 80032da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3710      	adds	r7, #16
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	40012c00 	.word	0x40012c00

080032ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d101      	bne.n	8003306 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003302:	2302      	movs	r3, #2
 8003304:	e0b4      	b.n	8003470 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2201      	movs	r2, #1
 800330a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2202      	movs	r2, #2
 8003312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2b0c      	cmp	r3, #12
 800331a:	f200 809f 	bhi.w	800345c <HAL_TIM_PWM_ConfigChannel+0x170>
 800331e:	a201      	add	r2, pc, #4	; (adr r2, 8003324 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003324:	08003359 	.word	0x08003359
 8003328:	0800345d 	.word	0x0800345d
 800332c:	0800345d 	.word	0x0800345d
 8003330:	0800345d 	.word	0x0800345d
 8003334:	08003399 	.word	0x08003399
 8003338:	0800345d 	.word	0x0800345d
 800333c:	0800345d 	.word	0x0800345d
 8003340:	0800345d 	.word	0x0800345d
 8003344:	080033db 	.word	0x080033db
 8003348:	0800345d 	.word	0x0800345d
 800334c:	0800345d 	.word	0x0800345d
 8003350:	0800345d 	.word	0x0800345d
 8003354:	0800341b 	.word	0x0800341b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68b9      	ldr	r1, [r7, #8]
 800335e:	4618      	mov	r0, r3
 8003360:	f000 f8ec 	bl	800353c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	699a      	ldr	r2, [r3, #24]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f042 0208 	orr.w	r2, r2, #8
 8003372:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	699a      	ldr	r2, [r3, #24]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f022 0204 	bic.w	r2, r2, #4
 8003382:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6999      	ldr	r1, [r3, #24]
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	691a      	ldr	r2, [r3, #16]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	619a      	str	r2, [r3, #24]
      break;
 8003396:	e062      	b.n	800345e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68b9      	ldr	r1, [r7, #8]
 800339e:	4618      	mov	r0, r3
 80033a0:	f000 f932 	bl	8003608 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	699a      	ldr	r2, [r3, #24]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	699a      	ldr	r2, [r3, #24]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	6999      	ldr	r1, [r3, #24]
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	021a      	lsls	r2, r3, #8
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	430a      	orrs	r2, r1
 80033d6:	619a      	str	r2, [r3, #24]
      break;
 80033d8:	e041      	b.n	800345e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68b9      	ldr	r1, [r7, #8]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f000 f97b 	bl	80036dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	69da      	ldr	r2, [r3, #28]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f042 0208 	orr.w	r2, r2, #8
 80033f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	69da      	ldr	r2, [r3, #28]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f022 0204 	bic.w	r2, r2, #4
 8003404:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	69d9      	ldr	r1, [r3, #28]
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	691a      	ldr	r2, [r3, #16]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	430a      	orrs	r2, r1
 8003416:	61da      	str	r2, [r3, #28]
      break;
 8003418:	e021      	b.n	800345e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68b9      	ldr	r1, [r7, #8]
 8003420:	4618      	mov	r0, r3
 8003422:	f000 f9c5 	bl	80037b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	69da      	ldr	r2, [r3, #28]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003434:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	69da      	ldr	r2, [r3, #28]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003444:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	69d9      	ldr	r1, [r3, #28]
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	021a      	lsls	r2, r3, #8
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	430a      	orrs	r2, r1
 8003458:	61da      	str	r2, [r3, #28]
      break;
 800345a:	e000      	b.n	800345e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800345c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2201      	movs	r2, #1
 8003462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	3710      	adds	r7, #16
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003478:	b480      	push	{r7}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	4a29      	ldr	r2, [pc, #164]	; (8003530 <TIM_Base_SetConfig+0xb8>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d00b      	beq.n	80034a8 <TIM_Base_SetConfig+0x30>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003496:	d007      	beq.n	80034a8 <TIM_Base_SetConfig+0x30>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4a26      	ldr	r2, [pc, #152]	; (8003534 <TIM_Base_SetConfig+0xbc>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d003      	beq.n	80034a8 <TIM_Base_SetConfig+0x30>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4a25      	ldr	r2, [pc, #148]	; (8003538 <TIM_Base_SetConfig+0xc0>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d108      	bne.n	80034ba <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	68fa      	ldr	r2, [r7, #12]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a1c      	ldr	r2, [pc, #112]	; (8003530 <TIM_Base_SetConfig+0xb8>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d00b      	beq.n	80034da <TIM_Base_SetConfig+0x62>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034c8:	d007      	beq.n	80034da <TIM_Base_SetConfig+0x62>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a19      	ldr	r2, [pc, #100]	; (8003534 <TIM_Base_SetConfig+0xbc>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d003      	beq.n	80034da <TIM_Base_SetConfig+0x62>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a18      	ldr	r2, [pc, #96]	; (8003538 <TIM_Base_SetConfig+0xc0>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d108      	bne.n	80034ec <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	689a      	ldr	r2, [r3, #8]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a07      	ldr	r2, [pc, #28]	; (8003530 <TIM_Base_SetConfig+0xb8>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d103      	bne.n	8003520 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	691a      	ldr	r2, [r3, #16]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	615a      	str	r2, [r3, #20]
}
 8003526:	bf00      	nop
 8003528:	3714      	adds	r7, #20
 800352a:	46bd      	mov	sp, r7
 800352c:	bc80      	pop	{r7}
 800352e:	4770      	bx	lr
 8003530:	40012c00 	.word	0x40012c00
 8003534:	40000400 	.word	0x40000400
 8003538:	40000800 	.word	0x40000800

0800353c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800353c:	b480      	push	{r7}
 800353e:	b087      	sub	sp, #28
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a1b      	ldr	r3, [r3, #32]
 800354a:	f023 0201 	bic.w	r2, r3, #1
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a1b      	ldr	r3, [r3, #32]
 8003556:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800356a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f023 0303 	bic.w	r3, r3, #3
 8003572:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	4313      	orrs	r3, r2
 800357c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	f023 0302 	bic.w	r3, r3, #2
 8003584:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	697a      	ldr	r2, [r7, #20]
 800358c:	4313      	orrs	r3, r2
 800358e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a1c      	ldr	r2, [pc, #112]	; (8003604 <TIM_OC1_SetConfig+0xc8>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d10c      	bne.n	80035b2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	f023 0308 	bic.w	r3, r3, #8
 800359e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	697a      	ldr	r2, [r7, #20]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	f023 0304 	bic.w	r3, r3, #4
 80035b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a13      	ldr	r2, [pc, #76]	; (8003604 <TIM_OC1_SetConfig+0xc8>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d111      	bne.n	80035de <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	4313      	orrs	r3, r2
 80035dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	68fa      	ldr	r2, [r7, #12]
 80035e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	685a      	ldr	r2, [r3, #4]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	697a      	ldr	r2, [r7, #20]
 80035f6:	621a      	str	r2, [r3, #32]
}
 80035f8:	bf00      	nop
 80035fa:	371c      	adds	r7, #28
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bc80      	pop	{r7}
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	40012c00 	.word	0x40012c00

08003608 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003608:	b480      	push	{r7}
 800360a:	b087      	sub	sp, #28
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a1b      	ldr	r3, [r3, #32]
 8003616:	f023 0210 	bic.w	r2, r3, #16
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a1b      	ldr	r3, [r3, #32]
 8003622:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	699b      	ldr	r3, [r3, #24]
 800362e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003636:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800363e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	021b      	lsls	r3, r3, #8
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	4313      	orrs	r3, r2
 800364a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	f023 0320 	bic.w	r3, r3, #32
 8003652:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	011b      	lsls	r3, r3, #4
 800365a:	697a      	ldr	r2, [r7, #20]
 800365c:	4313      	orrs	r3, r2
 800365e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a1d      	ldr	r2, [pc, #116]	; (80036d8 <TIM_OC2_SetConfig+0xd0>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d10d      	bne.n	8003684 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800366e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	011b      	lsls	r3, r3, #4
 8003676:	697a      	ldr	r2, [r7, #20]
 8003678:	4313      	orrs	r3, r2
 800367a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003682:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4a14      	ldr	r2, [pc, #80]	; (80036d8 <TIM_OC2_SetConfig+0xd0>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d113      	bne.n	80036b4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003692:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800369a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	695b      	ldr	r3, [r3, #20]
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	693a      	ldr	r2, [r7, #16]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	699b      	ldr	r3, [r3, #24]
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	693a      	ldr	r2, [r7, #16]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	685a      	ldr	r2, [r3, #4]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	697a      	ldr	r2, [r7, #20]
 80036cc:	621a      	str	r2, [r3, #32]
}
 80036ce:	bf00      	nop
 80036d0:	371c      	adds	r7, #28
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bc80      	pop	{r7}
 80036d6:	4770      	bx	lr
 80036d8:	40012c00 	.word	0x40012c00

080036dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036dc:	b480      	push	{r7}
 80036de:	b087      	sub	sp, #28
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a1b      	ldr	r3, [r3, #32]
 80036ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a1b      	ldr	r3, [r3, #32]
 80036f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	69db      	ldr	r3, [r3, #28]
 8003702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800370a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f023 0303 	bic.w	r3, r3, #3
 8003712:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68fa      	ldr	r2, [r7, #12]
 800371a:	4313      	orrs	r3, r2
 800371c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003724:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	021b      	lsls	r3, r3, #8
 800372c:	697a      	ldr	r2, [r7, #20]
 800372e:	4313      	orrs	r3, r2
 8003730:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a1d      	ldr	r2, [pc, #116]	; (80037ac <TIM_OC3_SetConfig+0xd0>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d10d      	bne.n	8003756 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003740:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	021b      	lsls	r3, r3, #8
 8003748:	697a      	ldr	r2, [r7, #20]
 800374a:	4313      	orrs	r3, r2
 800374c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003754:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a14      	ldr	r2, [pc, #80]	; (80037ac <TIM_OC3_SetConfig+0xd0>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d113      	bne.n	8003786 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003764:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800376c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	011b      	lsls	r3, r3, #4
 8003774:	693a      	ldr	r2, [r7, #16]
 8003776:	4313      	orrs	r3, r2
 8003778:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	011b      	lsls	r3, r3, #4
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	4313      	orrs	r3, r2
 8003784:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	693a      	ldr	r2, [r7, #16]
 800378a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	685a      	ldr	r2, [r3, #4]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	697a      	ldr	r2, [r7, #20]
 800379e:	621a      	str	r2, [r3, #32]
}
 80037a0:	bf00      	nop
 80037a2:	371c      	adds	r7, #28
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bc80      	pop	{r7}
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	40012c00 	.word	0x40012c00

080037b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b087      	sub	sp, #28
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a1b      	ldr	r3, [r3, #32]
 80037be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a1b      	ldr	r3, [r3, #32]
 80037ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	69db      	ldr	r3, [r3, #28]
 80037d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	021b      	lsls	r3, r3, #8
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	031b      	lsls	r3, r3, #12
 8003802:	693a      	ldr	r2, [r7, #16]
 8003804:	4313      	orrs	r3, r2
 8003806:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a0f      	ldr	r2, [pc, #60]	; (8003848 <TIM_OC4_SetConfig+0x98>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d109      	bne.n	8003824 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003816:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	695b      	ldr	r3, [r3, #20]
 800381c:	019b      	lsls	r3, r3, #6
 800381e:	697a      	ldr	r2, [r7, #20]
 8003820:	4313      	orrs	r3, r2
 8003822:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	697a      	ldr	r2, [r7, #20]
 8003828:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	68fa      	ldr	r2, [r7, #12]
 800382e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685a      	ldr	r2, [r3, #4]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	693a      	ldr	r2, [r7, #16]
 800383c:	621a      	str	r2, [r3, #32]
}
 800383e:	bf00      	nop
 8003840:	371c      	adds	r7, #28
 8003842:	46bd      	mov	sp, r7
 8003844:	bc80      	pop	{r7}
 8003846:	4770      	bx	lr
 8003848:	40012c00 	.word	0x40012c00

0800384c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800384c:	b480      	push	{r7}
 800384e:	b087      	sub	sp, #28
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	f003 031f 	and.w	r3, r3, #31
 800385e:	2201      	movs	r2, #1
 8003860:	fa02 f303 	lsl.w	r3, r2, r3
 8003864:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6a1a      	ldr	r2, [r3, #32]
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	43db      	mvns	r3, r3
 800386e:	401a      	ands	r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6a1a      	ldr	r2, [r3, #32]
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	f003 031f 	and.w	r3, r3, #31
 800387e:	6879      	ldr	r1, [r7, #4]
 8003880:	fa01 f303 	lsl.w	r3, r1, r3
 8003884:	431a      	orrs	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	621a      	str	r2, [r3, #32]
}
 800388a:	bf00      	nop
 800388c:	371c      	adds	r7, #28
 800388e:	46bd      	mov	sp, r7
 8003890:	bc80      	pop	{r7}
 8003892:	4770      	bx	lr

08003894 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003894:	b480      	push	{r7}
 8003896:	b085      	sub	sp, #20
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d101      	bne.n	80038ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038a8:	2302      	movs	r3, #2
 80038aa:	e032      	b.n	8003912 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2202      	movs	r2, #2
 80038b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68fa      	ldr	r2, [r7, #12]
 80038da:	4313      	orrs	r3, r2
 80038dc:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038e4:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	68ba      	ldr	r2, [r7, #8]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68ba      	ldr	r2, [r7, #8]
 80038fe:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	3714      	adds	r7, #20
 8003916:	46bd      	mov	sp, r7
 8003918:	bc80      	pop	{r7}
 800391a:	4770      	bx	lr

0800391c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e03f      	b.n	80039ae <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d106      	bne.n	8003948 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f7fd fda0 	bl	8001488 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2224      	movs	r2, #36	; 0x24
 800394c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68da      	ldr	r2, [r3, #12]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800395e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f000 fc35 	bl	80041d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	691a      	ldr	r2, [r3, #16]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003974:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	695a      	ldr	r2, [r3, #20]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003984:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68da      	ldr	r2, [r3, #12]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003994:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2220      	movs	r2, #32
 80039a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2220      	movs	r2, #32
 80039a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3708      	adds	r7, #8
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
	...

080039b8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b086      	sub	sp, #24
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	4613      	mov	r3, r2
 80039c4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	2b20      	cmp	r3, #32
 80039d0:	d153      	bne.n	8003a7a <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d002      	beq.n	80039de <HAL_UART_Transmit_DMA+0x26>
 80039d8:	88fb      	ldrh	r3, [r7, #6]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d101      	bne.n	80039e2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e04c      	b.n	8003a7c <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d101      	bne.n	80039f0 <HAL_UART_Transmit_DMA+0x38>
 80039ec:	2302      	movs	r3, #2
 80039ee:	e045      	b.n	8003a7c <HAL_UART_Transmit_DMA+0xc4>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80039f8:	68ba      	ldr	r2, [r7, #8]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	88fa      	ldrh	r2, [r7, #6]
 8003a02:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	88fa      	ldrh	r2, [r7, #6]
 8003a08:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2221      	movs	r2, #33	; 0x21
 8003a14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1c:	4a19      	ldr	r2, [pc, #100]	; (8003a84 <HAL_UART_Transmit_DMA+0xcc>)
 8003a1e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a24:	4a18      	ldr	r2, [pc, #96]	; (8003a88 <HAL_UART_Transmit_DMA+0xd0>)
 8003a26:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2c:	4a17      	ldr	r2, [pc, #92]	; (8003a8c <HAL_UART_Transmit_DMA+0xd4>)
 8003a2e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a34:	2200      	movs	r2, #0
 8003a36:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8003a38:	f107 0308 	add.w	r3, r7, #8
 8003a3c:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	6819      	ldr	r1, [r3, #0]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	3304      	adds	r3, #4
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	88fb      	ldrh	r3, [r7, #6]
 8003a50:	f7fe fb70 	bl	8002134 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a5c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	695a      	ldr	r2, [r3, #20]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a74:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003a76:	2300      	movs	r3, #0
 8003a78:	e000      	b.n	8003a7c <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8003a7a:	2302      	movs	r3, #2
  }
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3718      	adds	r7, #24
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	08003de3 	.word	0x08003de3
 8003a88:	08003e35 	.word	0x08003e35
 8003a8c:	08003ed5 	.word	0x08003ed5

08003a90 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b086      	sub	sp, #24
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2b20      	cmp	r3, #32
 8003aa8:	d166      	bne.n	8003b78 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d002      	beq.n	8003ab6 <HAL_UART_Receive_DMA+0x26>
 8003ab0:	88fb      	ldrh	r3, [r7, #6]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e05f      	b.n	8003b7a <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d101      	bne.n	8003ac8 <HAL_UART_Receive_DMA+0x38>
 8003ac4:	2302      	movs	r3, #2
 8003ac6:	e058      	b.n	8003b7a <HAL_UART_Receive_DMA+0xea>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003ad0:	68ba      	ldr	r2, [r7, #8]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	88fa      	ldrh	r2, [r7, #6]
 8003ada:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2222      	movs	r2, #34	; 0x22
 8003ae6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aee:	4a25      	ldr	r2, [pc, #148]	; (8003b84 <HAL_UART_Receive_DMA+0xf4>)
 8003af0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003af6:	4a24      	ldr	r2, [pc, #144]	; (8003b88 <HAL_UART_Receive_DMA+0xf8>)
 8003af8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003afe:	4a23      	ldr	r2, [pc, #140]	; (8003b8c <HAL_UART_Receive_DMA+0xfc>)
 8003b00:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b06:	2200      	movs	r2, #0
 8003b08:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 8003b0a:	f107 0308 	add.w	r3, r7, #8
 8003b0e:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	3304      	adds	r3, #4
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	88fb      	ldrh	r3, [r7, #6]
 8003b22:	f7fe fb07 	bl	8002134 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8003b26:	2300      	movs	r3, #0
 8003b28:	613b      	str	r3, [r7, #16]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	613b      	str	r3, [r7, #16]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	613b      	str	r3, [r7, #16]
 8003b3a:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68da      	ldr	r2, [r3, #12]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b52:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	695a      	ldr	r2, [r3, #20]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f042 0201 	orr.w	r2, r2, #1
 8003b62:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	695a      	ldr	r2, [r3, #20]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b72:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003b74:	2300      	movs	r3, #0
 8003b76:	e000      	b.n	8003b7a <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8003b78:	2302      	movs	r3, #2
  }
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3718      	adds	r7, #24
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	08003e51 	.word	0x08003e51
 8003b88:	08003eb9 	.word	0x08003eb9
 8003b8c:	08003ed5 	.word	0x08003ed5

08003b90 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b088      	sub	sp, #32
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	f003 030f 	and.w	r3, r3, #15
 8003bbe:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d10d      	bne.n	8003be2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	f003 0320 	and.w	r3, r3, #32
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d008      	beq.n	8003be2 <HAL_UART_IRQHandler+0x52>
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	f003 0320 	and.w	r3, r3, #32
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d003      	beq.n	8003be2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 fa77 	bl	80040ce <UART_Receive_IT>
      return;
 8003be0:	e0cc      	b.n	8003d7c <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	f000 80ab 	beq.w	8003d40 <HAL_UART_IRQHandler+0x1b0>
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	f003 0301 	and.w	r3, r3, #1
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d105      	bne.n	8003c00 <HAL_UART_IRQHandler+0x70>
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	f000 80a0 	beq.w	8003d40 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	f003 0301 	and.w	r3, r3, #1
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00a      	beq.n	8003c20 <HAL_UART_IRQHandler+0x90>
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d005      	beq.n	8003c20 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c18:	f043 0201 	orr.w	r2, r3, #1
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	f003 0304 	and.w	r3, r3, #4
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00a      	beq.n	8003c40 <HAL_UART_IRQHandler+0xb0>
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	f003 0301 	and.w	r3, r3, #1
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d005      	beq.n	8003c40 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c38:	f043 0202 	orr.w	r2, r3, #2
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00a      	beq.n	8003c60 <HAL_UART_IRQHandler+0xd0>
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d005      	beq.n	8003c60 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c58:	f043 0204 	orr.w	r2, r3, #4
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	f003 0308 	and.w	r3, r3, #8
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00a      	beq.n	8003c80 <HAL_UART_IRQHandler+0xf0>
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	f003 0301 	and.w	r3, r3, #1
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d005      	beq.n	8003c80 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c78:	f043 0208 	orr.w	r2, r3, #8
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d078      	beq.n	8003d7a <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	f003 0320 	and.w	r3, r3, #32
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d007      	beq.n	8003ca2 <HAL_UART_IRQHandler+0x112>
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	f003 0320 	and.w	r3, r3, #32
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d002      	beq.n	8003ca2 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f000 fa16 	bl	80040ce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	695b      	ldr	r3, [r3, #20]
 8003ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	bf14      	ite	ne
 8003cb0:	2301      	movne	r3, #1
 8003cb2:	2300      	moveq	r3, #0
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cbc:	f003 0308 	and.w	r3, r3, #8
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d102      	bne.n	8003cca <HAL_UART_IRQHandler+0x13a>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d031      	beq.n	8003d2e <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 f961 	bl	8003f92 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d023      	beq.n	8003d26 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	695a      	ldr	r2, [r3, #20]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cec:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d013      	beq.n	8003d1e <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cfa:	4a22      	ldr	r2, [pc, #136]	; (8003d84 <HAL_UART_IRQHandler+0x1f4>)
 8003cfc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7fe fa76 	bl	80021f4 <HAL_DMA_Abort_IT>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d016      	beq.n	8003d3c <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003d18:	4610      	mov	r0, r2
 8003d1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d1c:	e00e      	b.n	8003d3c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 f856 	bl	8003dd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d24:	e00a      	b.n	8003d3c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 f852 	bl	8003dd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d2c:	e006      	b.n	8003d3c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 f84e 	bl	8003dd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003d3a:	e01e      	b.n	8003d7a <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d3c:	bf00      	nop
    return;
 8003d3e:	e01c      	b.n	8003d7a <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d008      	beq.n	8003d5c <HAL_UART_IRQHandler+0x1cc>
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d003      	beq.n	8003d5c <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 f94d 	bl	8003ff4 <UART_Transmit_IT>
    return;
 8003d5a:	e00f      	b.n	8003d7c <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d00a      	beq.n	8003d7c <HAL_UART_IRQHandler+0x1ec>
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d005      	beq.n	8003d7c <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f000 f994 	bl	800409e <UART_EndTransmit_IT>
    return;
 8003d76:	bf00      	nop
 8003d78:	e000      	b.n	8003d7c <HAL_UART_IRQHandler+0x1ec>
    return;
 8003d7a:	bf00      	nop
  }
}
 8003d7c:	3720      	adds	r7, #32
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	08003fcd 	.word	0x08003fcd

08003d88 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003d90:	bf00      	nop
 8003d92:	370c      	adds	r7, #12
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bc80      	pop	{r7}
 8003d98:	4770      	bx	lr

08003d9a <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003d9a:	b480      	push	{r7}
 8003d9c:	b083      	sub	sp, #12
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003da2:	bf00      	nop
 8003da4:	370c      	adds	r7, #12
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bc80      	pop	{r7}
 8003daa:	4770      	bx	lr

08003dac <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003db4:	bf00      	nop
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bc80      	pop	{r7}
 8003dbc:	4770      	bx	lr

08003dbe <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003dbe:	b480      	push	{r7}
 8003dc0:	b083      	sub	sp, #12
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003dc6:	bf00      	nop
 8003dc8:	370c      	adds	r7, #12
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bc80      	pop	{r7}
 8003dce:	4770      	bx	lr

08003dd0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003dd8:	bf00      	nop
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bc80      	pop	{r7}
 8003de0:	4770      	bx	lr

08003de2 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b084      	sub	sp, #16
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dee:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0320 	and.w	r3, r3, #32
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d113      	bne.n	8003e26 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	695a      	ldr	r2, [r3, #20]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e12:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68da      	ldr	r2, [r3, #12]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e22:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003e24:	e002      	b.n	8003e2c <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8003e26:	68f8      	ldr	r0, [r7, #12]
 8003e28:	f7ff ffae 	bl	8003d88 <HAL_UART_TxCpltCallback>
}
 8003e2c:	bf00      	nop
 8003e2e:	3710      	adds	r7, #16
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e40:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003e42:	68f8      	ldr	r0, [r7, #12]
 8003e44:	f7ff ffa9 	bl	8003d9a <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e48:	bf00      	nop
 8003e4a:	3710      	adds	r7, #16
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0320 	and.w	r3, r3, #32
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d11e      	bne.n	8003eaa <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68da      	ldr	r2, [r3, #12]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e80:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	695a      	ldr	r2, [r3, #20]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f022 0201 	bic.w	r2, r2, #1
 8003e90:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	695a      	ldr	r2, [r3, #20]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ea0:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2220      	movs	r2, #32
 8003ea6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f7ff ff7e 	bl	8003dac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003eb0:	bf00      	nop
 8003eb2:	3710      	adds	r7, #16
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8003ec6:	68f8      	ldr	r0, [r7, #12]
 8003ec8:	f7ff ff79 	bl	8003dbe <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ecc:	bf00      	nop
 8003ece:	3710      	adds	r7, #16
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003edc:	2300      	movs	r3, #0
 8003ede:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	695b      	ldr	r3, [r3, #20]
 8003eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	bf14      	ite	ne
 8003ef4:	2301      	movne	r3, #1
 8003ef6:	2300      	moveq	r3, #0
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	2b21      	cmp	r3, #33	; 0x21
 8003f06:	d108      	bne.n	8003f1a <UART_DMAError+0x46>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d005      	beq.n	8003f1a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	2200      	movs	r2, #0
 8003f12:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003f14:	68b8      	ldr	r0, [r7, #8]
 8003f16:	f000 f827 	bl	8003f68 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	695b      	ldr	r3, [r3, #20]
 8003f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	bf14      	ite	ne
 8003f28:	2301      	movne	r3, #1
 8003f2a:	2300      	moveq	r3, #0
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	2b22      	cmp	r3, #34	; 0x22
 8003f3a:	d108      	bne.n	8003f4e <UART_DMAError+0x7a>
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d005      	beq.n	8003f4e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	2200      	movs	r2, #0
 8003f46:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003f48:	68b8      	ldr	r0, [r7, #8]
 8003f4a:	f000 f822 	bl	8003f92 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f52:	f043 0210 	orr.w	r2, r3, #16
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f5a:	68b8      	ldr	r0, [r7, #8]
 8003f5c:	f7ff ff38 	bl	8003dd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f60:	bf00      	nop
 8003f62:	3710      	adds	r7, #16
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68da      	ldr	r2, [r3, #12]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003f7e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2220      	movs	r2, #32
 8003f84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8003f88:	bf00      	nop
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bc80      	pop	{r7}
 8003f90:	4770      	bx	lr

08003f92 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f92:	b480      	push	{r7}
 8003f94:	b083      	sub	sp, #12
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68da      	ldr	r2, [r3, #12]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003fa8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	695a      	ldr	r2, [r3, #20]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f022 0201 	bic.w	r2, r2, #1
 8003fb8:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2220      	movs	r2, #32
 8003fbe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003fc2:	bf00      	nop
 8003fc4:	370c      	adds	r7, #12
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bc80      	pop	{r7}
 8003fca:	4770      	bx	lr

08003fcc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003fe6:	68f8      	ldr	r0, [r7, #12]
 8003fe8:	f7ff fef2 	bl	8003dd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fec:	bf00      	nop
 8003fee:	3710      	adds	r7, #16
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b085      	sub	sp, #20
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004002:	b2db      	uxtb	r3, r3
 8004004:	2b21      	cmp	r3, #33	; 0x21
 8004006:	d144      	bne.n	8004092 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004010:	d11a      	bne.n	8004048 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a1b      	ldr	r3, [r3, #32]
 8004016:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	881b      	ldrh	r3, [r3, #0]
 800401c:	461a      	mov	r2, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004026:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d105      	bne.n	800403c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a1b      	ldr	r3, [r3, #32]
 8004034:	1c9a      	adds	r2, r3, #2
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	621a      	str	r2, [r3, #32]
 800403a:	e00e      	b.n	800405a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a1b      	ldr	r3, [r3, #32]
 8004040:	1c5a      	adds	r2, r3, #1
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	621a      	str	r2, [r3, #32]
 8004046:	e008      	b.n	800405a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a1b      	ldr	r3, [r3, #32]
 800404c:	1c59      	adds	r1, r3, #1
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	6211      	str	r1, [r2, #32]
 8004052:	781a      	ldrb	r2, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800405e:	b29b      	uxth	r3, r3
 8004060:	3b01      	subs	r3, #1
 8004062:	b29b      	uxth	r3, r3
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	4619      	mov	r1, r3
 8004068:	84d1      	strh	r1, [r2, #38]	; 0x26
 800406a:	2b00      	cmp	r3, #0
 800406c:	d10f      	bne.n	800408e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68da      	ldr	r2, [r3, #12]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800407c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68da      	ldr	r2, [r3, #12]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800408c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800408e:	2300      	movs	r3, #0
 8004090:	e000      	b.n	8004094 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004092:	2302      	movs	r3, #2
  }
}
 8004094:	4618      	mov	r0, r3
 8004096:	3714      	adds	r7, #20
 8004098:	46bd      	mov	sp, r7
 800409a:	bc80      	pop	{r7}
 800409c:	4770      	bx	lr

0800409e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800409e:	b580      	push	{r7, lr}
 80040a0:	b082      	sub	sp, #8
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68da      	ldr	r2, [r3, #12]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040b4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2220      	movs	r2, #32
 80040ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f7ff fe62 	bl	8003d88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3708      	adds	r7, #8
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}

080040ce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80040ce:	b580      	push	{r7, lr}
 80040d0:	b084      	sub	sp, #16
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	2b22      	cmp	r3, #34	; 0x22
 80040e0:	d171      	bne.n	80041c6 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ea:	d123      	bne.n	8004134 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f0:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d10e      	bne.n	8004118 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	b29b      	uxth	r3, r3
 8004102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004106:	b29a      	uxth	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004110:	1c9a      	adds	r2, r3, #2
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	629a      	str	r2, [r3, #40]	; 0x28
 8004116:	e029      	b.n	800416c <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	b29b      	uxth	r3, r3
 8004120:	b2db      	uxtb	r3, r3
 8004122:	b29a      	uxth	r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800412c:	1c5a      	adds	r2, r3, #1
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	629a      	str	r2, [r3, #40]	; 0x28
 8004132:	e01b      	b.n	800416c <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	691b      	ldr	r3, [r3, #16]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d10a      	bne.n	8004152 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	6858      	ldr	r0, [r3, #4]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004146:	1c59      	adds	r1, r3, #1
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	6291      	str	r1, [r2, #40]	; 0x28
 800414c:	b2c2      	uxtb	r2, r0
 800414e:	701a      	strb	r2, [r3, #0]
 8004150:	e00c      	b.n	800416c <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	b2da      	uxtb	r2, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800415e:	1c58      	adds	r0, r3, #1
 8004160:	6879      	ldr	r1, [r7, #4]
 8004162:	6288      	str	r0, [r1, #40]	; 0x28
 8004164:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004168:	b2d2      	uxtb	r2, r2
 800416a:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004170:	b29b      	uxth	r3, r3
 8004172:	3b01      	subs	r3, #1
 8004174:	b29b      	uxth	r3, r3
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	4619      	mov	r1, r3
 800417a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800417c:	2b00      	cmp	r3, #0
 800417e:	d120      	bne.n	80041c2 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68da      	ldr	r2, [r3, #12]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f022 0220 	bic.w	r2, r2, #32
 800418e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	68da      	ldr	r2, [r3, #12]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800419e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	695a      	ldr	r2, [r3, #20]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f022 0201 	bic.w	r2, r2, #1
 80041ae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2220      	movs	r2, #32
 80041b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f7ff fdf7 	bl	8003dac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80041be:	2300      	movs	r3, #0
 80041c0:	e002      	b.n	80041c8 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80041c2:	2300      	movs	r3, #0
 80041c4:	e000      	b.n	80041c8 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80041c6:	2302      	movs	r3, #2
  }
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3710      	adds	r7, #16
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	68da      	ldr	r2, [r3, #12]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	430a      	orrs	r2, r1
 80041ec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	689a      	ldr	r2, [r3, #8]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	431a      	orrs	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	695b      	ldr	r3, [r3, #20]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800420a:	f023 030c 	bic.w	r3, r3, #12
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	6812      	ldr	r2, [r2, #0]
 8004212:	68f9      	ldr	r1, [r7, #12]
 8004214:	430b      	orrs	r3, r1
 8004216:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	695b      	ldr	r3, [r3, #20]
 800421e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	699a      	ldr	r2, [r3, #24]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	430a      	orrs	r2, r1
 800422c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a52      	ldr	r2, [pc, #328]	; (800437c <UART_SetConfig+0x1ac>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d14e      	bne.n	80042d6 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004238:	f7fe ff12 	bl	8003060 <HAL_RCC_GetPCLK2Freq>
 800423c:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800423e:	68ba      	ldr	r2, [r7, #8]
 8004240:	4613      	mov	r3, r2
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	4413      	add	r3, r2
 8004246:	009a      	lsls	r2, r3, #2
 8004248:	441a      	add	r2, r3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	fbb2 f3f3 	udiv	r3, r2, r3
 8004254:	4a4a      	ldr	r2, [pc, #296]	; (8004380 <UART_SetConfig+0x1b0>)
 8004256:	fba2 2303 	umull	r2, r3, r2, r3
 800425a:	095b      	lsrs	r3, r3, #5
 800425c:	0119      	lsls	r1, r3, #4
 800425e:	68ba      	ldr	r2, [r7, #8]
 8004260:	4613      	mov	r3, r2
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	4413      	add	r3, r2
 8004266:	009a      	lsls	r2, r3, #2
 8004268:	441a      	add	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	fbb2 f2f3 	udiv	r2, r2, r3
 8004274:	4b42      	ldr	r3, [pc, #264]	; (8004380 <UART_SetConfig+0x1b0>)
 8004276:	fba3 0302 	umull	r0, r3, r3, r2
 800427a:	095b      	lsrs	r3, r3, #5
 800427c:	2064      	movs	r0, #100	; 0x64
 800427e:	fb00 f303 	mul.w	r3, r0, r3
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	011b      	lsls	r3, r3, #4
 8004286:	3332      	adds	r3, #50	; 0x32
 8004288:	4a3d      	ldr	r2, [pc, #244]	; (8004380 <UART_SetConfig+0x1b0>)
 800428a:	fba2 2303 	umull	r2, r3, r2, r3
 800428e:	095b      	lsrs	r3, r3, #5
 8004290:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004294:	4419      	add	r1, r3
 8004296:	68ba      	ldr	r2, [r7, #8]
 8004298:	4613      	mov	r3, r2
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	4413      	add	r3, r2
 800429e:	009a      	lsls	r2, r3, #2
 80042a0:	441a      	add	r2, r3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80042ac:	4b34      	ldr	r3, [pc, #208]	; (8004380 <UART_SetConfig+0x1b0>)
 80042ae:	fba3 0302 	umull	r0, r3, r3, r2
 80042b2:	095b      	lsrs	r3, r3, #5
 80042b4:	2064      	movs	r0, #100	; 0x64
 80042b6:	fb00 f303 	mul.w	r3, r0, r3
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	011b      	lsls	r3, r3, #4
 80042be:	3332      	adds	r3, #50	; 0x32
 80042c0:	4a2f      	ldr	r2, [pc, #188]	; (8004380 <UART_SetConfig+0x1b0>)
 80042c2:	fba2 2303 	umull	r2, r3, r2, r3
 80042c6:	095b      	lsrs	r3, r3, #5
 80042c8:	f003 020f 	and.w	r2, r3, #15
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	440a      	add	r2, r1
 80042d2:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80042d4:	e04d      	b.n	8004372 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80042d6:	f7fe feaf 	bl	8003038 <HAL_RCC_GetPCLK1Freq>
 80042da:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042dc:	68ba      	ldr	r2, [r7, #8]
 80042de:	4613      	mov	r3, r2
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	4413      	add	r3, r2
 80042e4:	009a      	lsls	r2, r3, #2
 80042e6:	441a      	add	r2, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80042f2:	4a23      	ldr	r2, [pc, #140]	; (8004380 <UART_SetConfig+0x1b0>)
 80042f4:	fba2 2303 	umull	r2, r3, r2, r3
 80042f8:	095b      	lsrs	r3, r3, #5
 80042fa:	0119      	lsls	r1, r3, #4
 80042fc:	68ba      	ldr	r2, [r7, #8]
 80042fe:	4613      	mov	r3, r2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	4413      	add	r3, r2
 8004304:	009a      	lsls	r2, r3, #2
 8004306:	441a      	add	r2, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004312:	4b1b      	ldr	r3, [pc, #108]	; (8004380 <UART_SetConfig+0x1b0>)
 8004314:	fba3 0302 	umull	r0, r3, r3, r2
 8004318:	095b      	lsrs	r3, r3, #5
 800431a:	2064      	movs	r0, #100	; 0x64
 800431c:	fb00 f303 	mul.w	r3, r0, r3
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	011b      	lsls	r3, r3, #4
 8004324:	3332      	adds	r3, #50	; 0x32
 8004326:	4a16      	ldr	r2, [pc, #88]	; (8004380 <UART_SetConfig+0x1b0>)
 8004328:	fba2 2303 	umull	r2, r3, r2, r3
 800432c:	095b      	lsrs	r3, r3, #5
 800432e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004332:	4419      	add	r1, r3
 8004334:	68ba      	ldr	r2, [r7, #8]
 8004336:	4613      	mov	r3, r2
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	4413      	add	r3, r2
 800433c:	009a      	lsls	r2, r3, #2
 800433e:	441a      	add	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	fbb2 f2f3 	udiv	r2, r2, r3
 800434a:	4b0d      	ldr	r3, [pc, #52]	; (8004380 <UART_SetConfig+0x1b0>)
 800434c:	fba3 0302 	umull	r0, r3, r3, r2
 8004350:	095b      	lsrs	r3, r3, #5
 8004352:	2064      	movs	r0, #100	; 0x64
 8004354:	fb00 f303 	mul.w	r3, r0, r3
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	011b      	lsls	r3, r3, #4
 800435c:	3332      	adds	r3, #50	; 0x32
 800435e:	4a08      	ldr	r2, [pc, #32]	; (8004380 <UART_SetConfig+0x1b0>)
 8004360:	fba2 2303 	umull	r2, r3, r2, r3
 8004364:	095b      	lsrs	r3, r3, #5
 8004366:	f003 020f 	and.w	r2, r3, #15
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	440a      	add	r2, r1
 8004370:	609a      	str	r2, [r3, #8]
}
 8004372:	bf00      	nop
 8004374:	3710      	adds	r7, #16
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	40013800 	.word	0x40013800
 8004380:	51eb851f 	.word	0x51eb851f

08004384 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004384:	b480      	push	{r7}
 8004386:	b085      	sub	sp, #20
 8004388:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800438a:	f3ef 8305 	mrs	r3, IPSR
 800438e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004390:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004392:	2b00      	cmp	r3, #0
 8004394:	d10f      	bne.n	80043b6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004396:	f3ef 8310 	mrs	r3, PRIMASK
 800439a:	607b      	str	r3, [r7, #4]
  return(result);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d109      	bne.n	80043b6 <osKernelInitialize+0x32>
 80043a2:	4b10      	ldr	r3, [pc, #64]	; (80043e4 <osKernelInitialize+0x60>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d109      	bne.n	80043be <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80043aa:	f3ef 8311 	mrs	r3, BASEPRI
 80043ae:	603b      	str	r3, [r7, #0]
  return(result);
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d003      	beq.n	80043be <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80043b6:	f06f 0305 	mvn.w	r3, #5
 80043ba:	60fb      	str	r3, [r7, #12]
 80043bc:	e00c      	b.n	80043d8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80043be:	4b09      	ldr	r3, [pc, #36]	; (80043e4 <osKernelInitialize+0x60>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d105      	bne.n	80043d2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80043c6:	4b07      	ldr	r3, [pc, #28]	; (80043e4 <osKernelInitialize+0x60>)
 80043c8:	2201      	movs	r2, #1
 80043ca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80043cc:	2300      	movs	r3, #0
 80043ce:	60fb      	str	r3, [r7, #12]
 80043d0:	e002      	b.n	80043d8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80043d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043d6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80043d8:	68fb      	ldr	r3, [r7, #12]
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3714      	adds	r7, #20
 80043de:	46bd      	mov	sp, r7
 80043e0:	bc80      	pop	{r7}
 80043e2:	4770      	bx	lr
 80043e4:	200000d8 	.word	0x200000d8

080043e8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043ee:	f3ef 8305 	mrs	r3, IPSR
 80043f2:	60bb      	str	r3, [r7, #8]
  return(result);
 80043f4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d10f      	bne.n	800441a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043fa:	f3ef 8310 	mrs	r3, PRIMASK
 80043fe:	607b      	str	r3, [r7, #4]
  return(result);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d109      	bne.n	800441a <osKernelStart+0x32>
 8004406:	4b11      	ldr	r3, [pc, #68]	; (800444c <osKernelStart+0x64>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2b02      	cmp	r3, #2
 800440c:	d109      	bne.n	8004422 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800440e:	f3ef 8311 	mrs	r3, BASEPRI
 8004412:	603b      	str	r3, [r7, #0]
  return(result);
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d003      	beq.n	8004422 <osKernelStart+0x3a>
    stat = osErrorISR;
 800441a:	f06f 0305 	mvn.w	r3, #5
 800441e:	60fb      	str	r3, [r7, #12]
 8004420:	e00e      	b.n	8004440 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8004422:	4b0a      	ldr	r3, [pc, #40]	; (800444c <osKernelStart+0x64>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d107      	bne.n	800443a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800442a:	4b08      	ldr	r3, [pc, #32]	; (800444c <osKernelStart+0x64>)
 800442c:	2202      	movs	r2, #2
 800442e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004430:	f001 f864 	bl	80054fc <vTaskStartScheduler>
      stat = osOK;
 8004434:	2300      	movs	r3, #0
 8004436:	60fb      	str	r3, [r7, #12]
 8004438:	e002      	b.n	8004440 <osKernelStart+0x58>
    } else {
      stat = osError;
 800443a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800443e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004440:	68fb      	ldr	r3, [r7, #12]
}
 8004442:	4618      	mov	r0, r3
 8004444:	3710      	adds	r7, #16
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	200000d8 	.word	0x200000d8

08004450 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004450:	b580      	push	{r7, lr}
 8004452:	b092      	sub	sp, #72	; 0x48
 8004454:	af04      	add	r7, sp, #16
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800445c:	2300      	movs	r3, #0
 800445e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004460:	f3ef 8305 	mrs	r3, IPSR
 8004464:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004466:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8004468:	2b00      	cmp	r3, #0
 800446a:	f040 8094 	bne.w	8004596 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800446e:	f3ef 8310 	mrs	r3, PRIMASK
 8004472:	623b      	str	r3, [r7, #32]
  return(result);
 8004474:	6a3b      	ldr	r3, [r7, #32]
 8004476:	2b00      	cmp	r3, #0
 8004478:	f040 808d 	bne.w	8004596 <osThreadNew+0x146>
 800447c:	4b48      	ldr	r3, [pc, #288]	; (80045a0 <osThreadNew+0x150>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2b02      	cmp	r3, #2
 8004482:	d106      	bne.n	8004492 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004484:	f3ef 8311 	mrs	r3, BASEPRI
 8004488:	61fb      	str	r3, [r7, #28]
  return(result);
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	2b00      	cmp	r3, #0
 800448e:	f040 8082 	bne.w	8004596 <osThreadNew+0x146>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d07e      	beq.n	8004596 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8004498:	2380      	movs	r3, #128	; 0x80
 800449a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800449c:	2318      	movs	r3, #24
 800449e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80044a0:	2300      	movs	r3, #0
 80044a2:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80044a4:	f107 031b 	add.w	r3, r7, #27
 80044a8:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80044aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80044ae:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d045      	beq.n	8004542 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d002      	beq.n	80044c4 <osThreadNew+0x74>
        name = attr->name;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	699b      	ldr	r3, [r3, #24]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d002      	beq.n	80044d2 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	699b      	ldr	r3, [r3, #24]
 80044d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80044d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d008      	beq.n	80044ea <osThreadNew+0x9a>
 80044d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044da:	2b38      	cmp	r3, #56	; 0x38
 80044dc:	d805      	bhi.n	80044ea <osThreadNew+0x9a>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f003 0301 	and.w	r3, r3, #1
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d001      	beq.n	80044ee <osThreadNew+0x9e>
        return (NULL);
 80044ea:	2300      	movs	r3, #0
 80044ec:	e054      	b.n	8004598 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	695b      	ldr	r3, [r3, #20]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d003      	beq.n	80044fe <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	089b      	lsrs	r3, r3, #2
 80044fc:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00e      	beq.n	8004524 <osThreadNew+0xd4>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	2b5b      	cmp	r3, #91	; 0x5b
 800450c:	d90a      	bls.n	8004524 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004512:	2b00      	cmp	r3, #0
 8004514:	d006      	beq.n	8004524 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d002      	beq.n	8004524 <osThreadNew+0xd4>
        mem = 1;
 800451e:	2301      	movs	r3, #1
 8004520:	62bb      	str	r3, [r7, #40]	; 0x28
 8004522:	e010      	b.n	8004546 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d10c      	bne.n	8004546 <osThreadNew+0xf6>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d108      	bne.n	8004546 <osThreadNew+0xf6>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d104      	bne.n	8004546 <osThreadNew+0xf6>
          mem = 0;
 800453c:	2300      	movs	r3, #0
 800453e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004540:	e001      	b.n	8004546 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8004542:	2300      	movs	r3, #0
 8004544:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8004546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004548:	2b01      	cmp	r3, #1
 800454a:	d110      	bne.n	800456e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004554:	9202      	str	r2, [sp, #8]
 8004556:	9301      	str	r3, [sp, #4]
 8004558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800455a:	9300      	str	r3, [sp, #0]
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004560:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004562:	68f8      	ldr	r0, [r7, #12]
 8004564:	f000 fe02 	bl	800516c <xTaskCreateStatic>
 8004568:	4603      	mov	r3, r0
 800456a:	617b      	str	r3, [r7, #20]
 800456c:	e013      	b.n	8004596 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800456e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004570:	2b00      	cmp	r3, #0
 8004572:	d110      	bne.n	8004596 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004576:	b29a      	uxth	r2, r3
 8004578:	f107 0314 	add.w	r3, r7, #20
 800457c:	9301      	str	r3, [sp, #4]
 800457e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004580:	9300      	str	r3, [sp, #0]
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004586:	68f8      	ldr	r0, [r7, #12]
 8004588:	f000 fe49 	bl	800521e <xTaskCreate>
 800458c:	4603      	mov	r3, r0
 800458e:	2b01      	cmp	r3, #1
 8004590:	d001      	beq.n	8004596 <osThreadNew+0x146>
          hTask = NULL;
 8004592:	2300      	movs	r3, #0
 8004594:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004596:	697b      	ldr	r3, [r7, #20]
}
 8004598:	4618      	mov	r0, r3
 800459a:	3738      	adds	r7, #56	; 0x38
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	200000d8 	.word	0x200000d8

080045a4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b086      	sub	sp, #24
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045ac:	f3ef 8305 	mrs	r3, IPSR
 80045b0:	613b      	str	r3, [r7, #16]
  return(result);
 80045b2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d10f      	bne.n	80045d8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045b8:	f3ef 8310 	mrs	r3, PRIMASK
 80045bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d109      	bne.n	80045d8 <osDelay+0x34>
 80045c4:	4b0d      	ldr	r3, [pc, #52]	; (80045fc <osDelay+0x58>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d109      	bne.n	80045e0 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80045cc:	f3ef 8311 	mrs	r3, BASEPRI
 80045d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d003      	beq.n	80045e0 <osDelay+0x3c>
    stat = osErrorISR;
 80045d8:	f06f 0305 	mvn.w	r3, #5
 80045dc:	617b      	str	r3, [r7, #20]
 80045de:	e007      	b.n	80045f0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80045e0:	2300      	movs	r3, #0
 80045e2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d002      	beq.n	80045f0 <osDelay+0x4c>
      vTaskDelay(ticks);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 ff52 	bl	8005494 <vTaskDelay>
    }
  }

  return (stat);
 80045f0:	697b      	ldr	r3, [r7, #20]
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3718      	adds	r7, #24
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	200000d8 	.word	0x200000d8

08004600 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004600:	b480      	push	{r7}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	4a06      	ldr	r2, [pc, #24]	; (8004628 <vApplicationGetIdleTaskMemory+0x28>)
 8004610:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	4a05      	ldr	r2, [pc, #20]	; (800462c <vApplicationGetIdleTaskMemory+0x2c>)
 8004616:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2280      	movs	r2, #128	; 0x80
 800461c:	601a      	str	r2, [r3, #0]
}
 800461e:	bf00      	nop
 8004620:	3714      	adds	r7, #20
 8004622:	46bd      	mov	sp, r7
 8004624:	bc80      	pop	{r7}
 8004626:	4770      	bx	lr
 8004628:	200000dc 	.word	0x200000dc
 800462c:	20000138 	.word	0x20000138

08004630 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004630:	b480      	push	{r7}
 8004632:	b085      	sub	sp, #20
 8004634:	af00      	add	r7, sp, #0
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	60b9      	str	r1, [r7, #8]
 800463a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	4a07      	ldr	r2, [pc, #28]	; (800465c <vApplicationGetTimerTaskMemory+0x2c>)
 8004640:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	4a06      	ldr	r2, [pc, #24]	; (8004660 <vApplicationGetTimerTaskMemory+0x30>)
 8004646:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800464e:	601a      	str	r2, [r3, #0]
}
 8004650:	bf00      	nop
 8004652:	3714      	adds	r7, #20
 8004654:	46bd      	mov	sp, r7
 8004656:	bc80      	pop	{r7}
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	20000338 	.word	0x20000338
 8004660:	20000394 	.word	0x20000394

08004664 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f103 0208 	add.w	r2, r3, #8
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800467c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f103 0208 	add.w	r2, r3, #8
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f103 0208 	add.w	r2, r3, #8
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004698:	bf00      	nop
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	bc80      	pop	{r7}
 80046a0:	4770      	bx	lr

080046a2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80046a2:	b480      	push	{r7}
 80046a4:	b083      	sub	sp, #12
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80046b0:	bf00      	nop
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bc80      	pop	{r7}
 80046b8:	4770      	bx	lr

080046ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80046ba:	b480      	push	{r7}
 80046bc:	b085      	sub	sp, #20
 80046be:	af00      	add	r7, sp, #0
 80046c0:	6078      	str	r0, [r7, #4]
 80046c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	68fa      	ldr	r2, [r7, #12]
 80046ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	689a      	ldr	r2, [r3, #8]
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	683a      	ldr	r2, [r7, #0]
 80046de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	683a      	ldr	r2, [r7, #0]
 80046e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	1c5a      	adds	r2, r3, #1
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	601a      	str	r2, [r3, #0]
}
 80046f6:	bf00      	nop
 80046f8:	3714      	adds	r7, #20
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bc80      	pop	{r7}
 80046fe:	4770      	bx	lr

08004700 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004700:	b480      	push	{r7}
 8004702:	b085      	sub	sp, #20
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004716:	d103      	bne.n	8004720 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	60fb      	str	r3, [r7, #12]
 800471e:	e00c      	b.n	800473a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	3308      	adds	r3, #8
 8004724:	60fb      	str	r3, [r7, #12]
 8004726:	e002      	b.n	800472e <vListInsert+0x2e>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	60fb      	str	r3, [r7, #12]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68ba      	ldr	r2, [r7, #8]
 8004736:	429a      	cmp	r2, r3
 8004738:	d2f6      	bcs.n	8004728 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	685a      	ldr	r2, [r3, #4]
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	683a      	ldr	r2, [r7, #0]
 8004748:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	68fa      	ldr	r2, [r7, #12]
 800474e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	683a      	ldr	r2, [r7, #0]
 8004754:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	1c5a      	adds	r2, r3, #1
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	601a      	str	r2, [r3, #0]
}
 8004766:	bf00      	nop
 8004768:	3714      	adds	r7, #20
 800476a:	46bd      	mov	sp, r7
 800476c:	bc80      	pop	{r7}
 800476e:	4770      	bx	lr

08004770 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004770:	b480      	push	{r7}
 8004772:	b085      	sub	sp, #20
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	691b      	ldr	r3, [r3, #16]
 800477c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	6892      	ldr	r2, [r2, #8]
 8004786:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	6852      	ldr	r2, [r2, #4]
 8004790:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	429a      	cmp	r2, r3
 800479a:	d103      	bne.n	80047a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	689a      	ldr	r2, [r3, #8]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	1e5a      	subs	r2, r3, #1
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3714      	adds	r7, #20
 80047bc:	46bd      	mov	sp, r7
 80047be:	bc80      	pop	{r7}
 80047c0:	4770      	bx	lr
	...

080047c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d109      	bne.n	80047ec <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80047d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047dc:	f383 8811 	msr	BASEPRI, r3
 80047e0:	f3bf 8f6f 	isb	sy
 80047e4:	f3bf 8f4f 	dsb	sy
 80047e8:	60bb      	str	r3, [r7, #8]
 80047ea:	e7fe      	b.n	80047ea <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80047ec:	f001 ff94 	bl	8006718 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047f8:	68f9      	ldr	r1, [r7, #12]
 80047fa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80047fc:	fb01 f303 	mul.w	r3, r1, r3
 8004800:	441a      	add	r2, r3
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2200      	movs	r2, #0
 800480a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800481c:	3b01      	subs	r3, #1
 800481e:	68f9      	ldr	r1, [r7, #12]
 8004820:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004822:	fb01 f303 	mul.w	r3, r1, r3
 8004826:	441a      	add	r2, r3
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	22ff      	movs	r2, #255	; 0xff
 8004830:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	22ff      	movs	r2, #255	; 0xff
 8004838:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d114      	bne.n	800486c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d01a      	beq.n	8004880 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	3310      	adds	r3, #16
 800484e:	4618      	mov	r0, r3
 8004850:	f001 f8d8 	bl	8005a04 <xTaskRemoveFromEventList>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d012      	beq.n	8004880 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800485a:	4b0d      	ldr	r3, [pc, #52]	; (8004890 <xQueueGenericReset+0xcc>)
 800485c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004860:	601a      	str	r2, [r3, #0]
 8004862:	f3bf 8f4f 	dsb	sy
 8004866:	f3bf 8f6f 	isb	sy
 800486a:	e009      	b.n	8004880 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	3310      	adds	r3, #16
 8004870:	4618      	mov	r0, r3
 8004872:	f7ff fef7 	bl	8004664 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	3324      	adds	r3, #36	; 0x24
 800487a:	4618      	mov	r0, r3
 800487c:	f7ff fef2 	bl	8004664 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004880:	f001 ff78 	bl	8006774 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004884:	2301      	movs	r3, #1
}
 8004886:	4618      	mov	r0, r3
 8004888:	3710      	adds	r7, #16
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	e000ed04 	.word	0xe000ed04

08004894 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004894:	b580      	push	{r7, lr}
 8004896:	b08e      	sub	sp, #56	; 0x38
 8004898:	af02      	add	r7, sp, #8
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	607a      	str	r2, [r7, #4]
 80048a0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d109      	bne.n	80048bc <xQueueGenericCreateStatic+0x28>
 80048a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ac:	f383 8811 	msr	BASEPRI, r3
 80048b0:	f3bf 8f6f 	isb	sy
 80048b4:	f3bf 8f4f 	dsb	sy
 80048b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80048ba:	e7fe      	b.n	80048ba <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d109      	bne.n	80048d6 <xQueueGenericCreateStatic+0x42>
 80048c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c6:	f383 8811 	msr	BASEPRI, r3
 80048ca:	f3bf 8f6f 	isb	sy
 80048ce:	f3bf 8f4f 	dsb	sy
 80048d2:	627b      	str	r3, [r7, #36]	; 0x24
 80048d4:	e7fe      	b.n	80048d4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d002      	beq.n	80048e2 <xQueueGenericCreateStatic+0x4e>
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d001      	beq.n	80048e6 <xQueueGenericCreateStatic+0x52>
 80048e2:	2301      	movs	r3, #1
 80048e4:	e000      	b.n	80048e8 <xQueueGenericCreateStatic+0x54>
 80048e6:	2300      	movs	r3, #0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d109      	bne.n	8004900 <xQueueGenericCreateStatic+0x6c>
 80048ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f0:	f383 8811 	msr	BASEPRI, r3
 80048f4:	f3bf 8f6f 	isb	sy
 80048f8:	f3bf 8f4f 	dsb	sy
 80048fc:	623b      	str	r3, [r7, #32]
 80048fe:	e7fe      	b.n	80048fe <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d102      	bne.n	800490c <xQueueGenericCreateStatic+0x78>
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d101      	bne.n	8004910 <xQueueGenericCreateStatic+0x7c>
 800490c:	2301      	movs	r3, #1
 800490e:	e000      	b.n	8004912 <xQueueGenericCreateStatic+0x7e>
 8004910:	2300      	movs	r3, #0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d109      	bne.n	800492a <xQueueGenericCreateStatic+0x96>
 8004916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800491a:	f383 8811 	msr	BASEPRI, r3
 800491e:	f3bf 8f6f 	isb	sy
 8004922:	f3bf 8f4f 	dsb	sy
 8004926:	61fb      	str	r3, [r7, #28]
 8004928:	e7fe      	b.n	8004928 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800492a:	2350      	movs	r3, #80	; 0x50
 800492c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	2b50      	cmp	r3, #80	; 0x50
 8004932:	d009      	beq.n	8004948 <xQueueGenericCreateStatic+0xb4>
 8004934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004938:	f383 8811 	msr	BASEPRI, r3
 800493c:	f3bf 8f6f 	isb	sy
 8004940:	f3bf 8f4f 	dsb	sy
 8004944:	61bb      	str	r3, [r7, #24]
 8004946:	e7fe      	b.n	8004946 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800494c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00d      	beq.n	800496e <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004954:	2201      	movs	r2, #1
 8004956:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800495a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800495e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004960:	9300      	str	r3, [sp, #0]
 8004962:	4613      	mov	r3, r2
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	68b9      	ldr	r1, [r7, #8]
 8004968:	68f8      	ldr	r0, [r7, #12]
 800496a:	f000 f805 	bl	8004978 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800496e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004970:	4618      	mov	r0, r3
 8004972:	3730      	adds	r7, #48	; 0x30
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	607a      	str	r2, [r7, #4]
 8004984:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d103      	bne.n	8004994 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	69ba      	ldr	r2, [r7, #24]
 8004990:	601a      	str	r2, [r3, #0]
 8004992:	e002      	b.n	800499a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	68fa      	ldr	r2, [r7, #12]
 800499e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	68ba      	ldr	r2, [r7, #8]
 80049a4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80049a6:	2101      	movs	r1, #1
 80049a8:	69b8      	ldr	r0, [r7, #24]
 80049aa:	f7ff ff0b 	bl	80047c4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	78fa      	ldrb	r2, [r7, #3]
 80049b2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80049b6:	bf00      	nop
 80049b8:	3710      	adds	r7, #16
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
	...

080049c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b08e      	sub	sp, #56	; 0x38
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	607a      	str	r2, [r7, #4]
 80049cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80049ce:	2300      	movs	r3, #0
 80049d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80049d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d109      	bne.n	80049f0 <xQueueGenericSend+0x30>
 80049dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e0:	f383 8811 	msr	BASEPRI, r3
 80049e4:	f3bf 8f6f 	isb	sy
 80049e8:	f3bf 8f4f 	dsb	sy
 80049ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80049ee:	e7fe      	b.n	80049ee <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d103      	bne.n	80049fe <xQueueGenericSend+0x3e>
 80049f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d101      	bne.n	8004a02 <xQueueGenericSend+0x42>
 80049fe:	2301      	movs	r3, #1
 8004a00:	e000      	b.n	8004a04 <xQueueGenericSend+0x44>
 8004a02:	2300      	movs	r3, #0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d109      	bne.n	8004a1c <xQueueGenericSend+0x5c>
 8004a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a0c:	f383 8811 	msr	BASEPRI, r3
 8004a10:	f3bf 8f6f 	isb	sy
 8004a14:	f3bf 8f4f 	dsb	sy
 8004a18:	627b      	str	r3, [r7, #36]	; 0x24
 8004a1a:	e7fe      	b.n	8004a1a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d103      	bne.n	8004a2a <xQueueGenericSend+0x6a>
 8004a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d101      	bne.n	8004a2e <xQueueGenericSend+0x6e>
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e000      	b.n	8004a30 <xQueueGenericSend+0x70>
 8004a2e:	2300      	movs	r3, #0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d109      	bne.n	8004a48 <xQueueGenericSend+0x88>
 8004a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a38:	f383 8811 	msr	BASEPRI, r3
 8004a3c:	f3bf 8f6f 	isb	sy
 8004a40:	f3bf 8f4f 	dsb	sy
 8004a44:	623b      	str	r3, [r7, #32]
 8004a46:	e7fe      	b.n	8004a46 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a48:	f001 f996 	bl	8005d78 <xTaskGetSchedulerState>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d102      	bne.n	8004a58 <xQueueGenericSend+0x98>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d101      	bne.n	8004a5c <xQueueGenericSend+0x9c>
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e000      	b.n	8004a5e <xQueueGenericSend+0x9e>
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d109      	bne.n	8004a76 <xQueueGenericSend+0xb6>
 8004a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a66:	f383 8811 	msr	BASEPRI, r3
 8004a6a:	f3bf 8f6f 	isb	sy
 8004a6e:	f3bf 8f4f 	dsb	sy
 8004a72:	61fb      	str	r3, [r7, #28]
 8004a74:	e7fe      	b.n	8004a74 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a76:	f001 fe4f 	bl	8006718 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d302      	bcc.n	8004a8c <xQueueGenericSend+0xcc>
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d129      	bne.n	8004ae0 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004a8c:	683a      	ldr	r2, [r7, #0]
 8004a8e:	68b9      	ldr	r1, [r7, #8]
 8004a90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a92:	f000 f9ff 	bl	8004e94 <prvCopyDataToQueue>
 8004a96:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d010      	beq.n	8004ac2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa2:	3324      	adds	r3, #36	; 0x24
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f000 ffad 	bl	8005a04 <xTaskRemoveFromEventList>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d013      	beq.n	8004ad8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004ab0:	4b3f      	ldr	r3, [pc, #252]	; (8004bb0 <xQueueGenericSend+0x1f0>)
 8004ab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ab6:	601a      	str	r2, [r3, #0]
 8004ab8:	f3bf 8f4f 	dsb	sy
 8004abc:	f3bf 8f6f 	isb	sy
 8004ac0:	e00a      	b.n	8004ad8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d007      	beq.n	8004ad8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004ac8:	4b39      	ldr	r3, [pc, #228]	; (8004bb0 <xQueueGenericSend+0x1f0>)
 8004aca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ace:	601a      	str	r2, [r3, #0]
 8004ad0:	f3bf 8f4f 	dsb	sy
 8004ad4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004ad8:	f001 fe4c 	bl	8006774 <vPortExitCritical>
				return pdPASS;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e063      	b.n	8004ba8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d103      	bne.n	8004aee <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ae6:	f001 fe45 	bl	8006774 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004aea:	2300      	movs	r3, #0
 8004aec:	e05c      	b.n	8004ba8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d106      	bne.n	8004b02 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004af4:	f107 0314 	add.w	r3, r7, #20
 8004af8:	4618      	mov	r0, r3
 8004afa:	f000 ffe5 	bl	8005ac8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004afe:	2301      	movs	r3, #1
 8004b00:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004b02:	f001 fe37 	bl	8006774 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b06:	f000 fd5d 	bl	80055c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b0a:	f001 fe05 	bl	8006718 <vPortEnterCritical>
 8004b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b14:	b25b      	sxtb	r3, r3
 8004b16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b1a:	d103      	bne.n	8004b24 <xQueueGenericSend+0x164>
 8004b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b2a:	b25b      	sxtb	r3, r3
 8004b2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b30:	d103      	bne.n	8004b3a <xQueueGenericSend+0x17a>
 8004b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b34:	2200      	movs	r2, #0
 8004b36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b3a:	f001 fe1b 	bl	8006774 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b3e:	1d3a      	adds	r2, r7, #4
 8004b40:	f107 0314 	add.w	r3, r7, #20
 8004b44:	4611      	mov	r1, r2
 8004b46:	4618      	mov	r0, r3
 8004b48:	f000 ffd4 	bl	8005af4 <xTaskCheckForTimeOut>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d124      	bne.n	8004b9c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004b52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b54:	f000 fa96 	bl	8005084 <prvIsQueueFull>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d018      	beq.n	8004b90 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b60:	3310      	adds	r3, #16
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	4611      	mov	r1, r2
 8004b66:	4618      	mov	r0, r3
 8004b68:	f000 fefe 	bl	8005968 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004b6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b6e:	f000 fa21 	bl	8004fb4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004b72:	f000 fd35 	bl	80055e0 <xTaskResumeAll>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	f47f af7c 	bne.w	8004a76 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8004b7e:	4b0c      	ldr	r3, [pc, #48]	; (8004bb0 <xQueueGenericSend+0x1f0>)
 8004b80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b84:	601a      	str	r2, [r3, #0]
 8004b86:	f3bf 8f4f 	dsb	sy
 8004b8a:	f3bf 8f6f 	isb	sy
 8004b8e:	e772      	b.n	8004a76 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004b90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b92:	f000 fa0f 	bl	8004fb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b96:	f000 fd23 	bl	80055e0 <xTaskResumeAll>
 8004b9a:	e76c      	b.n	8004a76 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004b9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b9e:	f000 fa09 	bl	8004fb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ba2:	f000 fd1d 	bl	80055e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004ba6:	2300      	movs	r3, #0
		}
	}
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3738      	adds	r7, #56	; 0x38
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	e000ed04 	.word	0xe000ed04

08004bb4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b08e      	sub	sp, #56	; 0x38
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	60b9      	str	r1, [r7, #8]
 8004bbe:	607a      	str	r2, [r7, #4]
 8004bc0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d109      	bne.n	8004be0 <xQueueGenericSendFromISR+0x2c>
 8004bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd0:	f383 8811 	msr	BASEPRI, r3
 8004bd4:	f3bf 8f6f 	isb	sy
 8004bd8:	f3bf 8f4f 	dsb	sy
 8004bdc:	627b      	str	r3, [r7, #36]	; 0x24
 8004bde:	e7fe      	b.n	8004bde <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d103      	bne.n	8004bee <xQueueGenericSendFromISR+0x3a>
 8004be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d101      	bne.n	8004bf2 <xQueueGenericSendFromISR+0x3e>
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e000      	b.n	8004bf4 <xQueueGenericSendFromISR+0x40>
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d109      	bne.n	8004c0c <xQueueGenericSendFromISR+0x58>
 8004bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bfc:	f383 8811 	msr	BASEPRI, r3
 8004c00:	f3bf 8f6f 	isb	sy
 8004c04:	f3bf 8f4f 	dsb	sy
 8004c08:	623b      	str	r3, [r7, #32]
 8004c0a:	e7fe      	b.n	8004c0a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d103      	bne.n	8004c1a <xQueueGenericSendFromISR+0x66>
 8004c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d101      	bne.n	8004c1e <xQueueGenericSendFromISR+0x6a>
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e000      	b.n	8004c20 <xQueueGenericSendFromISR+0x6c>
 8004c1e:	2300      	movs	r3, #0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d109      	bne.n	8004c38 <xQueueGenericSendFromISR+0x84>
 8004c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c28:	f383 8811 	msr	BASEPRI, r3
 8004c2c:	f3bf 8f6f 	isb	sy
 8004c30:	f3bf 8f4f 	dsb	sy
 8004c34:	61fb      	str	r3, [r7, #28]
 8004c36:	e7fe      	b.n	8004c36 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004c38:	f001 fe28 	bl	800688c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004c3c:	f3ef 8211 	mrs	r2, BASEPRI
 8004c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c44:	f383 8811 	msr	BASEPRI, r3
 8004c48:	f3bf 8f6f 	isb	sy
 8004c4c:	f3bf 8f4f 	dsb	sy
 8004c50:	61ba      	str	r2, [r7, #24]
 8004c52:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004c54:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004c56:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d302      	bcc.n	8004c6a <xQueueGenericSendFromISR+0xb6>
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	d12c      	bne.n	8004cc4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c74:	683a      	ldr	r2, [r7, #0]
 8004c76:	68b9      	ldr	r1, [r7, #8]
 8004c78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c7a:	f000 f90b 	bl	8004e94 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004c7e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004c82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c86:	d112      	bne.n	8004cae <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d016      	beq.n	8004cbe <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c92:	3324      	adds	r3, #36	; 0x24
 8004c94:	4618      	mov	r0, r3
 8004c96:	f000 feb5 	bl	8005a04 <xTaskRemoveFromEventList>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d00e      	beq.n	8004cbe <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d00b      	beq.n	8004cbe <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	601a      	str	r2, [r3, #0]
 8004cac:	e007      	b.n	8004cbe <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004cae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	b25a      	sxtb	r2, r3
 8004cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004cc2:	e001      	b.n	8004cc8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	637b      	str	r3, [r7, #52]	; 0x34
 8004cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cca:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3738      	adds	r7, #56	; 0x38
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b08c      	sub	sp, #48	; 0x30
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d109      	bne.n	8004d0a <xQueueReceive+0x2e>
	__asm volatile
 8004cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cfa:	f383 8811 	msr	BASEPRI, r3
 8004cfe:	f3bf 8f6f 	isb	sy
 8004d02:	f3bf 8f4f 	dsb	sy
 8004d06:	623b      	str	r3, [r7, #32]
 8004d08:	e7fe      	b.n	8004d08 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d103      	bne.n	8004d18 <xQueueReceive+0x3c>
 8004d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d101      	bne.n	8004d1c <xQueueReceive+0x40>
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e000      	b.n	8004d1e <xQueueReceive+0x42>
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d109      	bne.n	8004d36 <xQueueReceive+0x5a>
 8004d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d26:	f383 8811 	msr	BASEPRI, r3
 8004d2a:	f3bf 8f6f 	isb	sy
 8004d2e:	f3bf 8f4f 	dsb	sy
 8004d32:	61fb      	str	r3, [r7, #28]
 8004d34:	e7fe      	b.n	8004d34 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d36:	f001 f81f 	bl	8005d78 <xTaskGetSchedulerState>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d102      	bne.n	8004d46 <xQueueReceive+0x6a>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d101      	bne.n	8004d4a <xQueueReceive+0x6e>
 8004d46:	2301      	movs	r3, #1
 8004d48:	e000      	b.n	8004d4c <xQueueReceive+0x70>
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d109      	bne.n	8004d64 <xQueueReceive+0x88>
 8004d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d54:	f383 8811 	msr	BASEPRI, r3
 8004d58:	f3bf 8f6f 	isb	sy
 8004d5c:	f3bf 8f4f 	dsb	sy
 8004d60:	61bb      	str	r3, [r7, #24]
 8004d62:	e7fe      	b.n	8004d62 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d64:	f001 fcd8 	bl	8006718 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d6c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d01f      	beq.n	8004db4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004d74:	68b9      	ldr	r1, [r7, #8]
 8004d76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d78:	f000 f8f6 	bl	8004f68 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7e:	1e5a      	subs	r2, r3, #1
 8004d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d82:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d86:	691b      	ldr	r3, [r3, #16]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d00f      	beq.n	8004dac <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d8e:	3310      	adds	r3, #16
 8004d90:	4618      	mov	r0, r3
 8004d92:	f000 fe37 	bl	8005a04 <xTaskRemoveFromEventList>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d007      	beq.n	8004dac <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004d9c:	4b3c      	ldr	r3, [pc, #240]	; (8004e90 <xQueueReceive+0x1b4>)
 8004d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004da2:	601a      	str	r2, [r3, #0]
 8004da4:	f3bf 8f4f 	dsb	sy
 8004da8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004dac:	f001 fce2 	bl	8006774 <vPortExitCritical>
				return pdPASS;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e069      	b.n	8004e88 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d103      	bne.n	8004dc2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004dba:	f001 fcdb 	bl	8006774 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	e062      	b.n	8004e88 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d106      	bne.n	8004dd6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004dc8:	f107 0310 	add.w	r3, r7, #16
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f000 fe7b 	bl	8005ac8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004dd6:	f001 fccd 	bl	8006774 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004dda:	f000 fbf3 	bl	80055c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004dde:	f001 fc9b 	bl	8006718 <vPortEnterCritical>
 8004de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004de8:	b25b      	sxtb	r3, r3
 8004dea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004dee:	d103      	bne.n	8004df8 <xQueueReceive+0x11c>
 8004df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df2:	2200      	movs	r2, #0
 8004df4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dfa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004dfe:	b25b      	sxtb	r3, r3
 8004e00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e04:	d103      	bne.n	8004e0e <xQueueReceive+0x132>
 8004e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e0e:	f001 fcb1 	bl	8006774 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e12:	1d3a      	adds	r2, r7, #4
 8004e14:	f107 0310 	add.w	r3, r7, #16
 8004e18:	4611      	mov	r1, r2
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f000 fe6a 	bl	8005af4 <xTaskCheckForTimeOut>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d123      	bne.n	8004e6e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e28:	f000 f916 	bl	8005058 <prvIsQueueEmpty>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d017      	beq.n	8004e62 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e34:	3324      	adds	r3, #36	; 0x24
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	4611      	mov	r1, r2
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f000 fd94 	bl	8005968 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004e40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e42:	f000 f8b7 	bl	8004fb4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004e46:	f000 fbcb 	bl	80055e0 <xTaskResumeAll>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d189      	bne.n	8004d64 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004e50:	4b0f      	ldr	r3, [pc, #60]	; (8004e90 <xQueueReceive+0x1b4>)
 8004e52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e56:	601a      	str	r2, [r3, #0]
 8004e58:	f3bf 8f4f 	dsb	sy
 8004e5c:	f3bf 8f6f 	isb	sy
 8004e60:	e780      	b.n	8004d64 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004e62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e64:	f000 f8a6 	bl	8004fb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e68:	f000 fbba 	bl	80055e0 <xTaskResumeAll>
 8004e6c:	e77a      	b.n	8004d64 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004e6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e70:	f000 f8a0 	bl	8004fb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e74:	f000 fbb4 	bl	80055e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e7a:	f000 f8ed 	bl	8005058 <prvIsQueueEmpty>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	f43f af6f 	beq.w	8004d64 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004e86:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3730      	adds	r7, #48	; 0x30
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	e000ed04 	.word	0xe000ed04

08004e94 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b086      	sub	sp, #24
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d10d      	bne.n	8004ece <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d14d      	bne.n	8004f56 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f000 ff78 	bl	8005db4 <xTaskPriorityDisinherit>
 8004ec4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	605a      	str	r2, [r3, #4]
 8004ecc:	e043      	b.n	8004f56 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d119      	bne.n	8004f08 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6898      	ldr	r0, [r3, #8]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004edc:	461a      	mov	r2, r3
 8004ede:	68b9      	ldr	r1, [r7, #8]
 8004ee0:	f001 ff0e 	bl	8006d00 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	689a      	ldr	r2, [r3, #8]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eec:	441a      	add	r2, r3
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	689a      	ldr	r2, [r3, #8]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d32b      	bcc.n	8004f56 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	609a      	str	r2, [r3, #8]
 8004f06:	e026      	b.n	8004f56 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	68d8      	ldr	r0, [r3, #12]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f10:	461a      	mov	r2, r3
 8004f12:	68b9      	ldr	r1, [r7, #8]
 8004f14:	f001 fef4 	bl	8006d00 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	68da      	ldr	r2, [r3, #12]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f20:	425b      	negs	r3, r3
 8004f22:	441a      	add	r2, r3
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	68da      	ldr	r2, [r3, #12]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d207      	bcs.n	8004f44 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	685a      	ldr	r2, [r3, #4]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3c:	425b      	negs	r3, r3
 8004f3e:	441a      	add	r2, r3
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d105      	bne.n	8004f56 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d002      	beq.n	8004f56 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	3b01      	subs	r3, #1
 8004f54:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	1c5a      	adds	r2, r3, #1
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004f5e:	697b      	ldr	r3, [r7, #20]
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3718      	adds	r7, #24
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b082      	sub	sp, #8
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d018      	beq.n	8004fac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	68da      	ldr	r2, [r3, #12]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f82:	441a      	add	r2, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	68da      	ldr	r2, [r3, #12]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d303      	bcc.n	8004f9c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	68d9      	ldr	r1, [r3, #12]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	6838      	ldr	r0, [r7, #0]
 8004fa8:	f001 feaa 	bl	8006d00 <memcpy>
	}
}
 8004fac:	bf00      	nop
 8004fae:	3708      	adds	r7, #8
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004fbc:	f001 fbac 	bl	8006718 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fc6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004fc8:	e011      	b.n	8004fee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d012      	beq.n	8004ff8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	3324      	adds	r3, #36	; 0x24
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f000 fd14 	bl	8005a04 <xTaskRemoveFromEventList>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d001      	beq.n	8004fe6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004fe2:	f000 fde7 	bl	8005bb4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004fe6:	7bfb      	ldrb	r3, [r7, #15]
 8004fe8:	3b01      	subs	r3, #1
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004fee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	dce9      	bgt.n	8004fca <prvUnlockQueue+0x16>
 8004ff6:	e000      	b.n	8004ffa <prvUnlockQueue+0x46>
					break;
 8004ff8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	22ff      	movs	r2, #255	; 0xff
 8004ffe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005002:	f001 fbb7 	bl	8006774 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005006:	f001 fb87 	bl	8006718 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005010:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005012:	e011      	b.n	8005038 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d012      	beq.n	8005042 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	3310      	adds	r3, #16
 8005020:	4618      	mov	r0, r3
 8005022:	f000 fcef 	bl	8005a04 <xTaskRemoveFromEventList>
 8005026:	4603      	mov	r3, r0
 8005028:	2b00      	cmp	r3, #0
 800502a:	d001      	beq.n	8005030 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800502c:	f000 fdc2 	bl	8005bb4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005030:	7bbb      	ldrb	r3, [r7, #14]
 8005032:	3b01      	subs	r3, #1
 8005034:	b2db      	uxtb	r3, r3
 8005036:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005038:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800503c:	2b00      	cmp	r3, #0
 800503e:	dce9      	bgt.n	8005014 <prvUnlockQueue+0x60>
 8005040:	e000      	b.n	8005044 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005042:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	22ff      	movs	r2, #255	; 0xff
 8005048:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800504c:	f001 fb92 	bl	8006774 <vPortExitCritical>
}
 8005050:	bf00      	nop
 8005052:	3710      	adds	r7, #16
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005060:	f001 fb5a 	bl	8006718 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005068:	2b00      	cmp	r3, #0
 800506a:	d102      	bne.n	8005072 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800506c:	2301      	movs	r3, #1
 800506e:	60fb      	str	r3, [r7, #12]
 8005070:	e001      	b.n	8005076 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005072:	2300      	movs	r3, #0
 8005074:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005076:	f001 fb7d 	bl	8006774 <vPortExitCritical>

	return xReturn;
 800507a:	68fb      	ldr	r3, [r7, #12]
}
 800507c:	4618      	mov	r0, r3
 800507e:	3710      	adds	r7, #16
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b084      	sub	sp, #16
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800508c:	f001 fb44 	bl	8006718 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005098:	429a      	cmp	r2, r3
 800509a:	d102      	bne.n	80050a2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800509c:	2301      	movs	r3, #1
 800509e:	60fb      	str	r3, [r7, #12]
 80050a0:	e001      	b.n	80050a6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80050a2:	2300      	movs	r3, #0
 80050a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80050a6:	f001 fb65 	bl	8006774 <vPortExitCritical>

	return xReturn;
 80050aa:	68fb      	ldr	r3, [r7, #12]
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3710      	adds	r7, #16
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80050b4:	b480      	push	{r7}
 80050b6:	b085      	sub	sp, #20
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80050be:	2300      	movs	r3, #0
 80050c0:	60fb      	str	r3, [r7, #12]
 80050c2:	e014      	b.n	80050ee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80050c4:	4a0e      	ldr	r2, [pc, #56]	; (8005100 <vQueueAddToRegistry+0x4c>)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d10b      	bne.n	80050e8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80050d0:	490b      	ldr	r1, [pc, #44]	; (8005100 <vQueueAddToRegistry+0x4c>)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	683a      	ldr	r2, [r7, #0]
 80050d6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80050da:	4a09      	ldr	r2, [pc, #36]	; (8005100 <vQueueAddToRegistry+0x4c>)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	00db      	lsls	r3, r3, #3
 80050e0:	4413      	add	r3, r2
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80050e6:	e005      	b.n	80050f4 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	3301      	adds	r3, #1
 80050ec:	60fb      	str	r3, [r7, #12]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2b07      	cmp	r3, #7
 80050f2:	d9e7      	bls.n	80050c4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80050f4:	bf00      	nop
 80050f6:	3714      	adds	r7, #20
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bc80      	pop	{r7}
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop
 8005100:	20001d78 	.word	0x20001d78

08005104 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005104:	b580      	push	{r7, lr}
 8005106:	b086      	sub	sp, #24
 8005108:	af00      	add	r7, sp, #0
 800510a:	60f8      	str	r0, [r7, #12]
 800510c:	60b9      	str	r1, [r7, #8]
 800510e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005114:	f001 fb00 	bl	8006718 <vPortEnterCritical>
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800511e:	b25b      	sxtb	r3, r3
 8005120:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005124:	d103      	bne.n	800512e <vQueueWaitForMessageRestricted+0x2a>
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005134:	b25b      	sxtb	r3, r3
 8005136:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800513a:	d103      	bne.n	8005144 <vQueueWaitForMessageRestricted+0x40>
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	2200      	movs	r2, #0
 8005140:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005144:	f001 fb16 	bl	8006774 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800514c:	2b00      	cmp	r3, #0
 800514e:	d106      	bne.n	800515e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	3324      	adds	r3, #36	; 0x24
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	68b9      	ldr	r1, [r7, #8]
 8005158:	4618      	mov	r0, r3
 800515a:	f000 fc29 	bl	80059b0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800515e:	6978      	ldr	r0, [r7, #20]
 8005160:	f7ff ff28 	bl	8004fb4 <prvUnlockQueue>
	}
 8005164:	bf00      	nop
 8005166:	3718      	adds	r7, #24
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800516c:	b580      	push	{r7, lr}
 800516e:	b08e      	sub	sp, #56	; 0x38
 8005170:	af04      	add	r7, sp, #16
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	607a      	str	r2, [r7, #4]
 8005178:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800517a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800517c:	2b00      	cmp	r3, #0
 800517e:	d109      	bne.n	8005194 <xTaskCreateStatic+0x28>
 8005180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005184:	f383 8811 	msr	BASEPRI, r3
 8005188:	f3bf 8f6f 	isb	sy
 800518c:	f3bf 8f4f 	dsb	sy
 8005190:	623b      	str	r3, [r7, #32]
 8005192:	e7fe      	b.n	8005192 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8005194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005196:	2b00      	cmp	r3, #0
 8005198:	d109      	bne.n	80051ae <xTaskCreateStatic+0x42>
 800519a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800519e:	f383 8811 	msr	BASEPRI, r3
 80051a2:	f3bf 8f6f 	isb	sy
 80051a6:	f3bf 8f4f 	dsb	sy
 80051aa:	61fb      	str	r3, [r7, #28]
 80051ac:	e7fe      	b.n	80051ac <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80051ae:	235c      	movs	r3, #92	; 0x5c
 80051b0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	2b5c      	cmp	r3, #92	; 0x5c
 80051b6:	d009      	beq.n	80051cc <xTaskCreateStatic+0x60>
 80051b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051bc:	f383 8811 	msr	BASEPRI, r3
 80051c0:	f3bf 8f6f 	isb	sy
 80051c4:	f3bf 8f4f 	dsb	sy
 80051c8:	61bb      	str	r3, [r7, #24]
 80051ca:	e7fe      	b.n	80051ca <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80051cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d01e      	beq.n	8005210 <xTaskCreateStatic+0xa4>
 80051d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d01b      	beq.n	8005210 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80051d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051da:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80051dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051e0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80051e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e4:	2202      	movs	r2, #2
 80051e6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80051ea:	2300      	movs	r3, #0
 80051ec:	9303      	str	r3, [sp, #12]
 80051ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f0:	9302      	str	r3, [sp, #8]
 80051f2:	f107 0314 	add.w	r3, r7, #20
 80051f6:	9301      	str	r3, [sp, #4]
 80051f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051fa:	9300      	str	r3, [sp, #0]
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	68b9      	ldr	r1, [r7, #8]
 8005202:	68f8      	ldr	r0, [r7, #12]
 8005204:	f000 f850 	bl	80052a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005208:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800520a:	f000 f8d3 	bl	80053b4 <prvAddNewTaskToReadyList>
 800520e:	e001      	b.n	8005214 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8005210:	2300      	movs	r3, #0
 8005212:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005214:	697b      	ldr	r3, [r7, #20]
	}
 8005216:	4618      	mov	r0, r3
 8005218:	3728      	adds	r7, #40	; 0x28
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}

0800521e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800521e:	b580      	push	{r7, lr}
 8005220:	b08c      	sub	sp, #48	; 0x30
 8005222:	af04      	add	r7, sp, #16
 8005224:	60f8      	str	r0, [r7, #12]
 8005226:	60b9      	str	r1, [r7, #8]
 8005228:	603b      	str	r3, [r7, #0]
 800522a:	4613      	mov	r3, r2
 800522c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800522e:	88fb      	ldrh	r3, [r7, #6]
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	4618      	mov	r0, r3
 8005234:	f001 fb66 	bl	8006904 <pvPortMalloc>
 8005238:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d00e      	beq.n	800525e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005240:	205c      	movs	r0, #92	; 0x5c
 8005242:	f001 fb5f 	bl	8006904 <pvPortMalloc>
 8005246:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d003      	beq.n	8005256 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	697a      	ldr	r2, [r7, #20]
 8005252:	631a      	str	r2, [r3, #48]	; 0x30
 8005254:	e005      	b.n	8005262 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005256:	6978      	ldr	r0, [r7, #20]
 8005258:	f001 fc16 	bl	8006a88 <vPortFree>
 800525c:	e001      	b.n	8005262 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800525e:	2300      	movs	r3, #0
 8005260:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d017      	beq.n	8005298 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	2200      	movs	r2, #0
 800526c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005270:	88fa      	ldrh	r2, [r7, #6]
 8005272:	2300      	movs	r3, #0
 8005274:	9303      	str	r3, [sp, #12]
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	9302      	str	r3, [sp, #8]
 800527a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800527c:	9301      	str	r3, [sp, #4]
 800527e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005280:	9300      	str	r3, [sp, #0]
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	68b9      	ldr	r1, [r7, #8]
 8005286:	68f8      	ldr	r0, [r7, #12]
 8005288:	f000 f80e 	bl	80052a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800528c:	69f8      	ldr	r0, [r7, #28]
 800528e:	f000 f891 	bl	80053b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005292:	2301      	movs	r3, #1
 8005294:	61bb      	str	r3, [r7, #24]
 8005296:	e002      	b.n	800529e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005298:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800529c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800529e:	69bb      	ldr	r3, [r7, #24]
	}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3720      	adds	r7, #32
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b088      	sub	sp, #32
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	607a      	str	r2, [r7, #4]
 80052b4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80052b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	461a      	mov	r2, r3
 80052c0:	21a5      	movs	r1, #165	; 0xa5
 80052c2:	f001 fd28 	bl	8006d16 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80052c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80052d0:	3b01      	subs	r3, #1
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	4413      	add	r3, r2
 80052d6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	f023 0307 	bic.w	r3, r3, #7
 80052de:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	f003 0307 	and.w	r3, r3, #7
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d009      	beq.n	80052fe <prvInitialiseNewTask+0x56>
 80052ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ee:	f383 8811 	msr	BASEPRI, r3
 80052f2:	f3bf 8f6f 	isb	sy
 80052f6:	f3bf 8f4f 	dsb	sy
 80052fa:	617b      	str	r3, [r7, #20]
 80052fc:	e7fe      	b.n	80052fc <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80052fe:	2300      	movs	r3, #0
 8005300:	61fb      	str	r3, [r7, #28]
 8005302:	e012      	b.n	800532a <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005304:	68ba      	ldr	r2, [r7, #8]
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	4413      	add	r3, r2
 800530a:	7819      	ldrb	r1, [r3, #0]
 800530c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	4413      	add	r3, r2
 8005312:	3334      	adds	r3, #52	; 0x34
 8005314:	460a      	mov	r2, r1
 8005316:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005318:	68ba      	ldr	r2, [r7, #8]
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	4413      	add	r3, r2
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d006      	beq.n	8005332 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	3301      	adds	r3, #1
 8005328:	61fb      	str	r3, [r7, #28]
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	2b0f      	cmp	r3, #15
 800532e:	d9e9      	bls.n	8005304 <prvInitialiseNewTask+0x5c>
 8005330:	e000      	b.n	8005334 <prvInitialiseNewTask+0x8c>
		{
			break;
 8005332:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005336:	2200      	movs	r2, #0
 8005338:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800533c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800533e:	2b37      	cmp	r3, #55	; 0x37
 8005340:	d901      	bls.n	8005346 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005342:	2337      	movs	r3, #55	; 0x37
 8005344:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005348:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800534a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800534c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800534e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005350:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005354:	2200      	movs	r2, #0
 8005356:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535a:	3304      	adds	r3, #4
 800535c:	4618      	mov	r0, r3
 800535e:	f7ff f9a0 	bl	80046a2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005364:	3318      	adds	r3, #24
 8005366:	4618      	mov	r0, r3
 8005368:	f7ff f99b 	bl	80046a2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800536c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800536e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005370:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005374:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800537a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800537c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800537e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005380:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005384:	2200      	movs	r2, #0
 8005386:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800538a:	2200      	movs	r2, #0
 800538c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005390:	683a      	ldr	r2, [r7, #0]
 8005392:	68f9      	ldr	r1, [r7, #12]
 8005394:	69b8      	ldr	r0, [r7, #24]
 8005396:	f001 f8d7 	bl	8006548 <pxPortInitialiseStack>
 800539a:	4602      	mov	r2, r0
 800539c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800539e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80053a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d002      	beq.n	80053ac <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80053a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053aa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053ac:	bf00      	nop
 80053ae:	3720      	adds	r7, #32
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80053bc:	f001 f9ac 	bl	8006718 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80053c0:	4b2d      	ldr	r3, [pc, #180]	; (8005478 <prvAddNewTaskToReadyList+0xc4>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	3301      	adds	r3, #1
 80053c6:	4a2c      	ldr	r2, [pc, #176]	; (8005478 <prvAddNewTaskToReadyList+0xc4>)
 80053c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80053ca:	4b2c      	ldr	r3, [pc, #176]	; (800547c <prvAddNewTaskToReadyList+0xc8>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d109      	bne.n	80053e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80053d2:	4a2a      	ldr	r2, [pc, #168]	; (800547c <prvAddNewTaskToReadyList+0xc8>)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80053d8:	4b27      	ldr	r3, [pc, #156]	; (8005478 <prvAddNewTaskToReadyList+0xc4>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d110      	bne.n	8005402 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80053e0:	f000 fc0c 	bl	8005bfc <prvInitialiseTaskLists>
 80053e4:	e00d      	b.n	8005402 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80053e6:	4b26      	ldr	r3, [pc, #152]	; (8005480 <prvAddNewTaskToReadyList+0xcc>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d109      	bne.n	8005402 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80053ee:	4b23      	ldr	r3, [pc, #140]	; (800547c <prvAddNewTaskToReadyList+0xc8>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d802      	bhi.n	8005402 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80053fc:	4a1f      	ldr	r2, [pc, #124]	; (800547c <prvAddNewTaskToReadyList+0xc8>)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005402:	4b20      	ldr	r3, [pc, #128]	; (8005484 <prvAddNewTaskToReadyList+0xd0>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	3301      	adds	r3, #1
 8005408:	4a1e      	ldr	r2, [pc, #120]	; (8005484 <prvAddNewTaskToReadyList+0xd0>)
 800540a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800540c:	4b1d      	ldr	r3, [pc, #116]	; (8005484 <prvAddNewTaskToReadyList+0xd0>)
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005418:	4b1b      	ldr	r3, [pc, #108]	; (8005488 <prvAddNewTaskToReadyList+0xd4>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	429a      	cmp	r2, r3
 800541e:	d903      	bls.n	8005428 <prvAddNewTaskToReadyList+0x74>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005424:	4a18      	ldr	r2, [pc, #96]	; (8005488 <prvAddNewTaskToReadyList+0xd4>)
 8005426:	6013      	str	r3, [r2, #0]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800542c:	4613      	mov	r3, r2
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	4413      	add	r3, r2
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	4a15      	ldr	r2, [pc, #84]	; (800548c <prvAddNewTaskToReadyList+0xd8>)
 8005436:	441a      	add	r2, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	3304      	adds	r3, #4
 800543c:	4619      	mov	r1, r3
 800543e:	4610      	mov	r0, r2
 8005440:	f7ff f93b 	bl	80046ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005444:	f001 f996 	bl	8006774 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005448:	4b0d      	ldr	r3, [pc, #52]	; (8005480 <prvAddNewTaskToReadyList+0xcc>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d00e      	beq.n	800546e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005450:	4b0a      	ldr	r3, [pc, #40]	; (800547c <prvAddNewTaskToReadyList+0xc8>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800545a:	429a      	cmp	r2, r3
 800545c:	d207      	bcs.n	800546e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800545e:	4b0c      	ldr	r3, [pc, #48]	; (8005490 <prvAddNewTaskToReadyList+0xdc>)
 8005460:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005464:	601a      	str	r2, [r3, #0]
 8005466:	f3bf 8f4f 	dsb	sy
 800546a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800546e:	bf00      	nop
 8005470:	3708      	adds	r7, #8
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	20000c68 	.word	0x20000c68
 800547c:	20000794 	.word	0x20000794
 8005480:	20000c74 	.word	0x20000c74
 8005484:	20000c84 	.word	0x20000c84
 8005488:	20000c70 	.word	0x20000c70
 800548c:	20000798 	.word	0x20000798
 8005490:	e000ed04 	.word	0xe000ed04

08005494 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800549c:	2300      	movs	r3, #0
 800549e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d016      	beq.n	80054d4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80054a6:	4b13      	ldr	r3, [pc, #76]	; (80054f4 <vTaskDelay+0x60>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d009      	beq.n	80054c2 <vTaskDelay+0x2e>
 80054ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b2:	f383 8811 	msr	BASEPRI, r3
 80054b6:	f3bf 8f6f 	isb	sy
 80054ba:	f3bf 8f4f 	dsb	sy
 80054be:	60bb      	str	r3, [r7, #8]
 80054c0:	e7fe      	b.n	80054c0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80054c2:	f000 f87f 	bl	80055c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80054c6:	2100      	movs	r1, #0
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f000 fcdf 	bl	8005e8c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80054ce:	f000 f887 	bl	80055e0 <xTaskResumeAll>
 80054d2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d107      	bne.n	80054ea <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80054da:	4b07      	ldr	r3, [pc, #28]	; (80054f8 <vTaskDelay+0x64>)
 80054dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054e0:	601a      	str	r2, [r3, #0]
 80054e2:	f3bf 8f4f 	dsb	sy
 80054e6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80054ea:	bf00      	nop
 80054ec:	3710      	adds	r7, #16
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop
 80054f4:	20000c90 	.word	0x20000c90
 80054f8:	e000ed04 	.word	0xe000ed04

080054fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b08a      	sub	sp, #40	; 0x28
 8005500:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005502:	2300      	movs	r3, #0
 8005504:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005506:	2300      	movs	r3, #0
 8005508:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800550a:	463a      	mov	r2, r7
 800550c:	1d39      	adds	r1, r7, #4
 800550e:	f107 0308 	add.w	r3, r7, #8
 8005512:	4618      	mov	r0, r3
 8005514:	f7ff f874 	bl	8004600 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005518:	6839      	ldr	r1, [r7, #0]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	68ba      	ldr	r2, [r7, #8]
 800551e:	9202      	str	r2, [sp, #8]
 8005520:	9301      	str	r3, [sp, #4]
 8005522:	2300      	movs	r3, #0
 8005524:	9300      	str	r3, [sp, #0]
 8005526:	2300      	movs	r3, #0
 8005528:	460a      	mov	r2, r1
 800552a:	4920      	ldr	r1, [pc, #128]	; (80055ac <vTaskStartScheduler+0xb0>)
 800552c:	4820      	ldr	r0, [pc, #128]	; (80055b0 <vTaskStartScheduler+0xb4>)
 800552e:	f7ff fe1d 	bl	800516c <xTaskCreateStatic>
 8005532:	4602      	mov	r2, r0
 8005534:	4b1f      	ldr	r3, [pc, #124]	; (80055b4 <vTaskStartScheduler+0xb8>)
 8005536:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005538:	4b1e      	ldr	r3, [pc, #120]	; (80055b4 <vTaskStartScheduler+0xb8>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d002      	beq.n	8005546 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005540:	2301      	movs	r3, #1
 8005542:	617b      	str	r3, [r7, #20]
 8005544:	e001      	b.n	800554a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005546:	2300      	movs	r3, #0
 8005548:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	2b01      	cmp	r3, #1
 800554e:	d102      	bne.n	8005556 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005550:	f000 fcf0 	bl	8005f34 <xTimerCreateTimerTask>
 8005554:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	2b01      	cmp	r3, #1
 800555a:	d115      	bne.n	8005588 <vTaskStartScheduler+0x8c>
 800555c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005560:	f383 8811 	msr	BASEPRI, r3
 8005564:	f3bf 8f6f 	isb	sy
 8005568:	f3bf 8f4f 	dsb	sy
 800556c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800556e:	4b12      	ldr	r3, [pc, #72]	; (80055b8 <vTaskStartScheduler+0xbc>)
 8005570:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005574:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005576:	4b11      	ldr	r3, [pc, #68]	; (80055bc <vTaskStartScheduler+0xc0>)
 8005578:	2201      	movs	r2, #1
 800557a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800557c:	4b10      	ldr	r3, [pc, #64]	; (80055c0 <vTaskStartScheduler+0xc4>)
 800557e:	2200      	movs	r2, #0
 8005580:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005582:	f001 f859 	bl	8006638 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005586:	e00d      	b.n	80055a4 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800558e:	d109      	bne.n	80055a4 <vTaskStartScheduler+0xa8>
 8005590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005594:	f383 8811 	msr	BASEPRI, r3
 8005598:	f3bf 8f6f 	isb	sy
 800559c:	f3bf 8f4f 	dsb	sy
 80055a0:	60fb      	str	r3, [r7, #12]
 80055a2:	e7fe      	b.n	80055a2 <vTaskStartScheduler+0xa6>
}
 80055a4:	bf00      	nop
 80055a6:	3718      	adds	r7, #24
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	08007f28 	.word	0x08007f28
 80055b0:	08005bcd 	.word	0x08005bcd
 80055b4:	20000c8c 	.word	0x20000c8c
 80055b8:	20000c88 	.word	0x20000c88
 80055bc:	20000c74 	.word	0x20000c74
 80055c0:	20000c6c 	.word	0x20000c6c

080055c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80055c4:	b480      	push	{r7}
 80055c6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80055c8:	4b04      	ldr	r3, [pc, #16]	; (80055dc <vTaskSuspendAll+0x18>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	3301      	adds	r3, #1
 80055ce:	4a03      	ldr	r2, [pc, #12]	; (80055dc <vTaskSuspendAll+0x18>)
 80055d0:	6013      	str	r3, [r2, #0]
}
 80055d2:	bf00      	nop
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bc80      	pop	{r7}
 80055d8:	4770      	bx	lr
 80055da:	bf00      	nop
 80055dc:	20000c90 	.word	0x20000c90

080055e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80055e6:	2300      	movs	r3, #0
 80055e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80055ea:	2300      	movs	r3, #0
 80055ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80055ee:	4b41      	ldr	r3, [pc, #260]	; (80056f4 <xTaskResumeAll+0x114>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d109      	bne.n	800560a <xTaskResumeAll+0x2a>
 80055f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055fa:	f383 8811 	msr	BASEPRI, r3
 80055fe:	f3bf 8f6f 	isb	sy
 8005602:	f3bf 8f4f 	dsb	sy
 8005606:	603b      	str	r3, [r7, #0]
 8005608:	e7fe      	b.n	8005608 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800560a:	f001 f885 	bl	8006718 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800560e:	4b39      	ldr	r3, [pc, #228]	; (80056f4 <xTaskResumeAll+0x114>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	3b01      	subs	r3, #1
 8005614:	4a37      	ldr	r2, [pc, #220]	; (80056f4 <xTaskResumeAll+0x114>)
 8005616:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005618:	4b36      	ldr	r3, [pc, #216]	; (80056f4 <xTaskResumeAll+0x114>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d162      	bne.n	80056e6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005620:	4b35      	ldr	r3, [pc, #212]	; (80056f8 <xTaskResumeAll+0x118>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d05e      	beq.n	80056e6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005628:	e02f      	b.n	800568a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800562a:	4b34      	ldr	r3, [pc, #208]	; (80056fc <xTaskResumeAll+0x11c>)
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	3318      	adds	r3, #24
 8005636:	4618      	mov	r0, r3
 8005638:	f7ff f89a 	bl	8004770 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	3304      	adds	r3, #4
 8005640:	4618      	mov	r0, r3
 8005642:	f7ff f895 	bl	8004770 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800564a:	4b2d      	ldr	r3, [pc, #180]	; (8005700 <xTaskResumeAll+0x120>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	429a      	cmp	r2, r3
 8005650:	d903      	bls.n	800565a <xTaskResumeAll+0x7a>
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005656:	4a2a      	ldr	r2, [pc, #168]	; (8005700 <xTaskResumeAll+0x120>)
 8005658:	6013      	str	r3, [r2, #0]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800565e:	4613      	mov	r3, r2
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	4413      	add	r3, r2
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	4a27      	ldr	r2, [pc, #156]	; (8005704 <xTaskResumeAll+0x124>)
 8005668:	441a      	add	r2, r3
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	3304      	adds	r3, #4
 800566e:	4619      	mov	r1, r3
 8005670:	4610      	mov	r0, r2
 8005672:	f7ff f822 	bl	80046ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800567a:	4b23      	ldr	r3, [pc, #140]	; (8005708 <xTaskResumeAll+0x128>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005680:	429a      	cmp	r2, r3
 8005682:	d302      	bcc.n	800568a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005684:	4b21      	ldr	r3, [pc, #132]	; (800570c <xTaskResumeAll+0x12c>)
 8005686:	2201      	movs	r2, #1
 8005688:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800568a:	4b1c      	ldr	r3, [pc, #112]	; (80056fc <xTaskResumeAll+0x11c>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d1cb      	bne.n	800562a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d001      	beq.n	800569c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005698:	f000 fb4a 	bl	8005d30 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800569c:	4b1c      	ldr	r3, [pc, #112]	; (8005710 <xTaskResumeAll+0x130>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d010      	beq.n	80056ca <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80056a8:	f000 f844 	bl	8005734 <xTaskIncrementTick>
 80056ac:	4603      	mov	r3, r0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d002      	beq.n	80056b8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80056b2:	4b16      	ldr	r3, [pc, #88]	; (800570c <xTaskResumeAll+0x12c>)
 80056b4:	2201      	movs	r2, #1
 80056b6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	3b01      	subs	r3, #1
 80056bc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d1f1      	bne.n	80056a8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80056c4:	4b12      	ldr	r3, [pc, #72]	; (8005710 <xTaskResumeAll+0x130>)
 80056c6:	2200      	movs	r2, #0
 80056c8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80056ca:	4b10      	ldr	r3, [pc, #64]	; (800570c <xTaskResumeAll+0x12c>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d009      	beq.n	80056e6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80056d2:	2301      	movs	r3, #1
 80056d4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80056d6:	4b0f      	ldr	r3, [pc, #60]	; (8005714 <xTaskResumeAll+0x134>)
 80056d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056dc:	601a      	str	r2, [r3, #0]
 80056de:	f3bf 8f4f 	dsb	sy
 80056e2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80056e6:	f001 f845 	bl	8006774 <vPortExitCritical>

	return xAlreadyYielded;
 80056ea:	68bb      	ldr	r3, [r7, #8]
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3710      	adds	r7, #16
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	20000c90 	.word	0x20000c90
 80056f8:	20000c68 	.word	0x20000c68
 80056fc:	20000c28 	.word	0x20000c28
 8005700:	20000c70 	.word	0x20000c70
 8005704:	20000798 	.word	0x20000798
 8005708:	20000794 	.word	0x20000794
 800570c:	20000c7c 	.word	0x20000c7c
 8005710:	20000c78 	.word	0x20000c78
 8005714:	e000ed04 	.word	0xe000ed04

08005718 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800571e:	4b04      	ldr	r3, [pc, #16]	; (8005730 <xTaskGetTickCount+0x18>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005724:	687b      	ldr	r3, [r7, #4]
}
 8005726:	4618      	mov	r0, r3
 8005728:	370c      	adds	r7, #12
 800572a:	46bd      	mov	sp, r7
 800572c:	bc80      	pop	{r7}
 800572e:	4770      	bx	lr
 8005730:	20000c6c 	.word	0x20000c6c

08005734 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b086      	sub	sp, #24
 8005738:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800573a:	2300      	movs	r3, #0
 800573c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800573e:	4b51      	ldr	r3, [pc, #324]	; (8005884 <xTaskIncrementTick+0x150>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	2b00      	cmp	r3, #0
 8005744:	f040 808d 	bne.w	8005862 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005748:	4b4f      	ldr	r3, [pc, #316]	; (8005888 <xTaskIncrementTick+0x154>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	3301      	adds	r3, #1
 800574e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005750:	4a4d      	ldr	r2, [pc, #308]	; (8005888 <xTaskIncrementTick+0x154>)
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d11f      	bne.n	800579c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800575c:	4b4b      	ldr	r3, [pc, #300]	; (800588c <xTaskIncrementTick+0x158>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d009      	beq.n	800577a <xTaskIncrementTick+0x46>
 8005766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800576a:	f383 8811 	msr	BASEPRI, r3
 800576e:	f3bf 8f6f 	isb	sy
 8005772:	f3bf 8f4f 	dsb	sy
 8005776:	603b      	str	r3, [r7, #0]
 8005778:	e7fe      	b.n	8005778 <xTaskIncrementTick+0x44>
 800577a:	4b44      	ldr	r3, [pc, #272]	; (800588c <xTaskIncrementTick+0x158>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	60fb      	str	r3, [r7, #12]
 8005780:	4b43      	ldr	r3, [pc, #268]	; (8005890 <xTaskIncrementTick+0x15c>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a41      	ldr	r2, [pc, #260]	; (800588c <xTaskIncrementTick+0x158>)
 8005786:	6013      	str	r3, [r2, #0]
 8005788:	4a41      	ldr	r2, [pc, #260]	; (8005890 <xTaskIncrementTick+0x15c>)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6013      	str	r3, [r2, #0]
 800578e:	4b41      	ldr	r3, [pc, #260]	; (8005894 <xTaskIncrementTick+0x160>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	3301      	adds	r3, #1
 8005794:	4a3f      	ldr	r2, [pc, #252]	; (8005894 <xTaskIncrementTick+0x160>)
 8005796:	6013      	str	r3, [r2, #0]
 8005798:	f000 faca 	bl	8005d30 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800579c:	4b3e      	ldr	r3, [pc, #248]	; (8005898 <xTaskIncrementTick+0x164>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	693a      	ldr	r2, [r7, #16]
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d34e      	bcc.n	8005844 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057a6:	4b39      	ldr	r3, [pc, #228]	; (800588c <xTaskIncrementTick+0x158>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d101      	bne.n	80057b4 <xTaskIncrementTick+0x80>
 80057b0:	2301      	movs	r3, #1
 80057b2:	e000      	b.n	80057b6 <xTaskIncrementTick+0x82>
 80057b4:	2300      	movs	r3, #0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d004      	beq.n	80057c4 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057ba:	4b37      	ldr	r3, [pc, #220]	; (8005898 <xTaskIncrementTick+0x164>)
 80057bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80057c0:	601a      	str	r2, [r3, #0]
					break;
 80057c2:	e03f      	b.n	8005844 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80057c4:	4b31      	ldr	r3, [pc, #196]	; (800588c <xTaskIncrementTick+0x158>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80057d4:	693a      	ldr	r2, [r7, #16]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	429a      	cmp	r2, r3
 80057da:	d203      	bcs.n	80057e4 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80057dc:	4a2e      	ldr	r2, [pc, #184]	; (8005898 <xTaskIncrementTick+0x164>)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6013      	str	r3, [r2, #0]
						break;
 80057e2:	e02f      	b.n	8005844 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	3304      	adds	r3, #4
 80057e8:	4618      	mov	r0, r3
 80057ea:	f7fe ffc1 	bl	8004770 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d004      	beq.n	8005800 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	3318      	adds	r3, #24
 80057fa:	4618      	mov	r0, r3
 80057fc:	f7fe ffb8 	bl	8004770 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005804:	4b25      	ldr	r3, [pc, #148]	; (800589c <xTaskIncrementTick+0x168>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	429a      	cmp	r2, r3
 800580a:	d903      	bls.n	8005814 <xTaskIncrementTick+0xe0>
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005810:	4a22      	ldr	r2, [pc, #136]	; (800589c <xTaskIncrementTick+0x168>)
 8005812:	6013      	str	r3, [r2, #0]
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005818:	4613      	mov	r3, r2
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	4413      	add	r3, r2
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	4a1f      	ldr	r2, [pc, #124]	; (80058a0 <xTaskIncrementTick+0x16c>)
 8005822:	441a      	add	r2, r3
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	3304      	adds	r3, #4
 8005828:	4619      	mov	r1, r3
 800582a:	4610      	mov	r0, r2
 800582c:	f7fe ff45 	bl	80046ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005834:	4b1b      	ldr	r3, [pc, #108]	; (80058a4 <xTaskIncrementTick+0x170>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800583a:	429a      	cmp	r2, r3
 800583c:	d3b3      	bcc.n	80057a6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800583e:	2301      	movs	r3, #1
 8005840:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005842:	e7b0      	b.n	80057a6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005844:	4b17      	ldr	r3, [pc, #92]	; (80058a4 <xTaskIncrementTick+0x170>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800584a:	4915      	ldr	r1, [pc, #84]	; (80058a0 <xTaskIncrementTick+0x16c>)
 800584c:	4613      	mov	r3, r2
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	4413      	add	r3, r2
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	440b      	add	r3, r1
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	2b01      	cmp	r3, #1
 800585a:	d907      	bls.n	800586c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800585c:	2301      	movs	r3, #1
 800585e:	617b      	str	r3, [r7, #20]
 8005860:	e004      	b.n	800586c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005862:	4b11      	ldr	r3, [pc, #68]	; (80058a8 <xTaskIncrementTick+0x174>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	3301      	adds	r3, #1
 8005868:	4a0f      	ldr	r2, [pc, #60]	; (80058a8 <xTaskIncrementTick+0x174>)
 800586a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800586c:	4b0f      	ldr	r3, [pc, #60]	; (80058ac <xTaskIncrementTick+0x178>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d001      	beq.n	8005878 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8005874:	2301      	movs	r3, #1
 8005876:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005878:	697b      	ldr	r3, [r7, #20]
}
 800587a:	4618      	mov	r0, r3
 800587c:	3718      	adds	r7, #24
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	20000c90 	.word	0x20000c90
 8005888:	20000c6c 	.word	0x20000c6c
 800588c:	20000c20 	.word	0x20000c20
 8005890:	20000c24 	.word	0x20000c24
 8005894:	20000c80 	.word	0x20000c80
 8005898:	20000c88 	.word	0x20000c88
 800589c:	20000c70 	.word	0x20000c70
 80058a0:	20000798 	.word	0x20000798
 80058a4:	20000794 	.word	0x20000794
 80058a8:	20000c78 	.word	0x20000c78
 80058ac:	20000c7c 	.word	0x20000c7c

080058b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80058b0:	b480      	push	{r7}
 80058b2:	b085      	sub	sp, #20
 80058b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80058b6:	4b27      	ldr	r3, [pc, #156]	; (8005954 <vTaskSwitchContext+0xa4>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d003      	beq.n	80058c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80058be:	4b26      	ldr	r3, [pc, #152]	; (8005958 <vTaskSwitchContext+0xa8>)
 80058c0:	2201      	movs	r2, #1
 80058c2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80058c4:	e040      	b.n	8005948 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80058c6:	4b24      	ldr	r3, [pc, #144]	; (8005958 <vTaskSwitchContext+0xa8>)
 80058c8:	2200      	movs	r2, #0
 80058ca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80058cc:	4b23      	ldr	r3, [pc, #140]	; (800595c <vTaskSwitchContext+0xac>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	60fb      	str	r3, [r7, #12]
 80058d2:	e00f      	b.n	80058f4 <vTaskSwitchContext+0x44>
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d109      	bne.n	80058ee <vTaskSwitchContext+0x3e>
 80058da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058de:	f383 8811 	msr	BASEPRI, r3
 80058e2:	f3bf 8f6f 	isb	sy
 80058e6:	f3bf 8f4f 	dsb	sy
 80058ea:	607b      	str	r3, [r7, #4]
 80058ec:	e7fe      	b.n	80058ec <vTaskSwitchContext+0x3c>
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	3b01      	subs	r3, #1
 80058f2:	60fb      	str	r3, [r7, #12]
 80058f4:	491a      	ldr	r1, [pc, #104]	; (8005960 <vTaskSwitchContext+0xb0>)
 80058f6:	68fa      	ldr	r2, [r7, #12]
 80058f8:	4613      	mov	r3, r2
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	4413      	add	r3, r2
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	440b      	add	r3, r1
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d0e5      	beq.n	80058d4 <vTaskSwitchContext+0x24>
 8005908:	68fa      	ldr	r2, [r7, #12]
 800590a:	4613      	mov	r3, r2
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	4413      	add	r3, r2
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	4a13      	ldr	r2, [pc, #76]	; (8005960 <vTaskSwitchContext+0xb0>)
 8005914:	4413      	add	r3, r2
 8005916:	60bb      	str	r3, [r7, #8]
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	685a      	ldr	r2, [r3, #4]
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	605a      	str	r2, [r3, #4]
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	685a      	ldr	r2, [r3, #4]
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	3308      	adds	r3, #8
 800592a:	429a      	cmp	r2, r3
 800592c:	d104      	bne.n	8005938 <vTaskSwitchContext+0x88>
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	685a      	ldr	r2, [r3, #4]
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	605a      	str	r2, [r3, #4]
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	4a09      	ldr	r2, [pc, #36]	; (8005964 <vTaskSwitchContext+0xb4>)
 8005940:	6013      	str	r3, [r2, #0]
 8005942:	4a06      	ldr	r2, [pc, #24]	; (800595c <vTaskSwitchContext+0xac>)
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6013      	str	r3, [r2, #0]
}
 8005948:	bf00      	nop
 800594a:	3714      	adds	r7, #20
 800594c:	46bd      	mov	sp, r7
 800594e:	bc80      	pop	{r7}
 8005950:	4770      	bx	lr
 8005952:	bf00      	nop
 8005954:	20000c90 	.word	0x20000c90
 8005958:	20000c7c 	.word	0x20000c7c
 800595c:	20000c70 	.word	0x20000c70
 8005960:	20000798 	.word	0x20000798
 8005964:	20000794 	.word	0x20000794

08005968 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d109      	bne.n	800598c <vTaskPlaceOnEventList+0x24>
 8005978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800597c:	f383 8811 	msr	BASEPRI, r3
 8005980:	f3bf 8f6f 	isb	sy
 8005984:	f3bf 8f4f 	dsb	sy
 8005988:	60fb      	str	r3, [r7, #12]
 800598a:	e7fe      	b.n	800598a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800598c:	4b07      	ldr	r3, [pc, #28]	; (80059ac <vTaskPlaceOnEventList+0x44>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	3318      	adds	r3, #24
 8005992:	4619      	mov	r1, r3
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f7fe feb3 	bl	8004700 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800599a:	2101      	movs	r1, #1
 800599c:	6838      	ldr	r0, [r7, #0]
 800599e:	f000 fa75 	bl	8005e8c <prvAddCurrentTaskToDelayedList>
}
 80059a2:	bf00      	nop
 80059a4:	3710      	adds	r7, #16
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	bf00      	nop
 80059ac:	20000794 	.word	0x20000794

080059b0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b086      	sub	sp, #24
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d109      	bne.n	80059d6 <vTaskPlaceOnEventListRestricted+0x26>
 80059c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c6:	f383 8811 	msr	BASEPRI, r3
 80059ca:	f3bf 8f6f 	isb	sy
 80059ce:	f3bf 8f4f 	dsb	sy
 80059d2:	617b      	str	r3, [r7, #20]
 80059d4:	e7fe      	b.n	80059d4 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80059d6:	4b0a      	ldr	r3, [pc, #40]	; (8005a00 <vTaskPlaceOnEventListRestricted+0x50>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	3318      	adds	r3, #24
 80059dc:	4619      	mov	r1, r3
 80059de:	68f8      	ldr	r0, [r7, #12]
 80059e0:	f7fe fe6b 	bl	80046ba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d002      	beq.n	80059f0 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80059ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80059ee:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80059f0:	6879      	ldr	r1, [r7, #4]
 80059f2:	68b8      	ldr	r0, [r7, #8]
 80059f4:	f000 fa4a 	bl	8005e8c <prvAddCurrentTaskToDelayedList>
	}
 80059f8:	bf00      	nop
 80059fa:	3718      	adds	r7, #24
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}
 8005a00:	20000794 	.word	0x20000794

08005a04 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b086      	sub	sp, #24
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d109      	bne.n	8005a2e <xTaskRemoveFromEventList+0x2a>
 8005a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a1e:	f383 8811 	msr	BASEPRI, r3
 8005a22:	f3bf 8f6f 	isb	sy
 8005a26:	f3bf 8f4f 	dsb	sy
 8005a2a:	60fb      	str	r3, [r7, #12]
 8005a2c:	e7fe      	b.n	8005a2c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	3318      	adds	r3, #24
 8005a32:	4618      	mov	r0, r3
 8005a34:	f7fe fe9c 	bl	8004770 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a38:	4b1d      	ldr	r3, [pc, #116]	; (8005ab0 <xTaskRemoveFromEventList+0xac>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d11d      	bne.n	8005a7c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	3304      	adds	r3, #4
 8005a44:	4618      	mov	r0, r3
 8005a46:	f7fe fe93 	bl	8004770 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a4e:	4b19      	ldr	r3, [pc, #100]	; (8005ab4 <xTaskRemoveFromEventList+0xb0>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d903      	bls.n	8005a5e <xTaskRemoveFromEventList+0x5a>
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a5a:	4a16      	ldr	r2, [pc, #88]	; (8005ab4 <xTaskRemoveFromEventList+0xb0>)
 8005a5c:	6013      	str	r3, [r2, #0]
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a62:	4613      	mov	r3, r2
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	4413      	add	r3, r2
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	4a13      	ldr	r2, [pc, #76]	; (8005ab8 <xTaskRemoveFromEventList+0xb4>)
 8005a6c:	441a      	add	r2, r3
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	3304      	adds	r3, #4
 8005a72:	4619      	mov	r1, r3
 8005a74:	4610      	mov	r0, r2
 8005a76:	f7fe fe20 	bl	80046ba <vListInsertEnd>
 8005a7a:	e005      	b.n	8005a88 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	3318      	adds	r3, #24
 8005a80:	4619      	mov	r1, r3
 8005a82:	480e      	ldr	r0, [pc, #56]	; (8005abc <xTaskRemoveFromEventList+0xb8>)
 8005a84:	f7fe fe19 	bl	80046ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a8c:	4b0c      	ldr	r3, [pc, #48]	; (8005ac0 <xTaskRemoveFromEventList+0xbc>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d905      	bls.n	8005aa2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005a96:	2301      	movs	r3, #1
 8005a98:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005a9a:	4b0a      	ldr	r3, [pc, #40]	; (8005ac4 <xTaskRemoveFromEventList+0xc0>)
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	601a      	str	r2, [r3, #0]
 8005aa0:	e001      	b.n	8005aa6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005aa6:	697b      	ldr	r3, [r7, #20]
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3718      	adds	r7, #24
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	20000c90 	.word	0x20000c90
 8005ab4:	20000c70 	.word	0x20000c70
 8005ab8:	20000798 	.word	0x20000798
 8005abc:	20000c28 	.word	0x20000c28
 8005ac0:	20000794 	.word	0x20000794
 8005ac4:	20000c7c 	.word	0x20000c7c

08005ac8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b083      	sub	sp, #12
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005ad0:	4b06      	ldr	r3, [pc, #24]	; (8005aec <vTaskInternalSetTimeOutState+0x24>)
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005ad8:	4b05      	ldr	r3, [pc, #20]	; (8005af0 <vTaskInternalSetTimeOutState+0x28>)
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	605a      	str	r2, [r3, #4]
}
 8005ae0:	bf00      	nop
 8005ae2:	370c      	adds	r7, #12
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bc80      	pop	{r7}
 8005ae8:	4770      	bx	lr
 8005aea:	bf00      	nop
 8005aec:	20000c80 	.word	0x20000c80
 8005af0:	20000c6c 	.word	0x20000c6c

08005af4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b088      	sub	sp, #32
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d109      	bne.n	8005b18 <xTaskCheckForTimeOut+0x24>
 8005b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b08:	f383 8811 	msr	BASEPRI, r3
 8005b0c:	f3bf 8f6f 	isb	sy
 8005b10:	f3bf 8f4f 	dsb	sy
 8005b14:	613b      	str	r3, [r7, #16]
 8005b16:	e7fe      	b.n	8005b16 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d109      	bne.n	8005b32 <xTaskCheckForTimeOut+0x3e>
 8005b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b22:	f383 8811 	msr	BASEPRI, r3
 8005b26:	f3bf 8f6f 	isb	sy
 8005b2a:	f3bf 8f4f 	dsb	sy
 8005b2e:	60fb      	str	r3, [r7, #12]
 8005b30:	e7fe      	b.n	8005b30 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8005b32:	f000 fdf1 	bl	8006718 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005b36:	4b1d      	ldr	r3, [pc, #116]	; (8005bac <xTaskCheckForTimeOut+0xb8>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	69ba      	ldr	r2, [r7, #24]
 8005b42:	1ad3      	subs	r3, r2, r3
 8005b44:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b4e:	d102      	bne.n	8005b56 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005b50:	2300      	movs	r3, #0
 8005b52:	61fb      	str	r3, [r7, #28]
 8005b54:	e023      	b.n	8005b9e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	4b15      	ldr	r3, [pc, #84]	; (8005bb0 <xTaskCheckForTimeOut+0xbc>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d007      	beq.n	8005b72 <xTaskCheckForTimeOut+0x7e>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	69ba      	ldr	r2, [r7, #24]
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d302      	bcc.n	8005b72 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	61fb      	str	r3, [r7, #28]
 8005b70:	e015      	b.n	8005b9e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	697a      	ldr	r2, [r7, #20]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d20b      	bcs.n	8005b94 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	1ad2      	subs	r2, r2, r3
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f7ff ff9d 	bl	8005ac8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	61fb      	str	r3, [r7, #28]
 8005b92:	e004      	b.n	8005b9e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	2200      	movs	r2, #0
 8005b98:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005b9e:	f000 fde9 	bl	8006774 <vPortExitCritical>

	return xReturn;
 8005ba2:	69fb      	ldr	r3, [r7, #28]
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3720      	adds	r7, #32
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}
 8005bac:	20000c6c 	.word	0x20000c6c
 8005bb0:	20000c80 	.word	0x20000c80

08005bb4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005bb8:	4b03      	ldr	r3, [pc, #12]	; (8005bc8 <vTaskMissedYield+0x14>)
 8005bba:	2201      	movs	r2, #1
 8005bbc:	601a      	str	r2, [r3, #0]
}
 8005bbe:	bf00      	nop
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bc80      	pop	{r7}
 8005bc4:	4770      	bx	lr
 8005bc6:	bf00      	nop
 8005bc8:	20000c7c 	.word	0x20000c7c

08005bcc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b082      	sub	sp, #8
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005bd4:	f000 f852 	bl	8005c7c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005bd8:	4b06      	ldr	r3, [pc, #24]	; (8005bf4 <prvIdleTask+0x28>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d9f9      	bls.n	8005bd4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005be0:	4b05      	ldr	r3, [pc, #20]	; (8005bf8 <prvIdleTask+0x2c>)
 8005be2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005be6:	601a      	str	r2, [r3, #0]
 8005be8:	f3bf 8f4f 	dsb	sy
 8005bec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005bf0:	e7f0      	b.n	8005bd4 <prvIdleTask+0x8>
 8005bf2:	bf00      	nop
 8005bf4:	20000798 	.word	0x20000798
 8005bf8:	e000ed04 	.word	0xe000ed04

08005bfc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b082      	sub	sp, #8
 8005c00:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c02:	2300      	movs	r3, #0
 8005c04:	607b      	str	r3, [r7, #4]
 8005c06:	e00c      	b.n	8005c22 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	4613      	mov	r3, r2
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	4413      	add	r3, r2
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	4a12      	ldr	r2, [pc, #72]	; (8005c5c <prvInitialiseTaskLists+0x60>)
 8005c14:	4413      	add	r3, r2
 8005c16:	4618      	mov	r0, r3
 8005c18:	f7fe fd24 	bl	8004664 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	3301      	adds	r3, #1
 8005c20:	607b      	str	r3, [r7, #4]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2b37      	cmp	r3, #55	; 0x37
 8005c26:	d9ef      	bls.n	8005c08 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005c28:	480d      	ldr	r0, [pc, #52]	; (8005c60 <prvInitialiseTaskLists+0x64>)
 8005c2a:	f7fe fd1b 	bl	8004664 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005c2e:	480d      	ldr	r0, [pc, #52]	; (8005c64 <prvInitialiseTaskLists+0x68>)
 8005c30:	f7fe fd18 	bl	8004664 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005c34:	480c      	ldr	r0, [pc, #48]	; (8005c68 <prvInitialiseTaskLists+0x6c>)
 8005c36:	f7fe fd15 	bl	8004664 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005c3a:	480c      	ldr	r0, [pc, #48]	; (8005c6c <prvInitialiseTaskLists+0x70>)
 8005c3c:	f7fe fd12 	bl	8004664 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005c40:	480b      	ldr	r0, [pc, #44]	; (8005c70 <prvInitialiseTaskLists+0x74>)
 8005c42:	f7fe fd0f 	bl	8004664 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005c46:	4b0b      	ldr	r3, [pc, #44]	; (8005c74 <prvInitialiseTaskLists+0x78>)
 8005c48:	4a05      	ldr	r2, [pc, #20]	; (8005c60 <prvInitialiseTaskLists+0x64>)
 8005c4a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005c4c:	4b0a      	ldr	r3, [pc, #40]	; (8005c78 <prvInitialiseTaskLists+0x7c>)
 8005c4e:	4a05      	ldr	r2, [pc, #20]	; (8005c64 <prvInitialiseTaskLists+0x68>)
 8005c50:	601a      	str	r2, [r3, #0]
}
 8005c52:	bf00      	nop
 8005c54:	3708      	adds	r7, #8
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
 8005c5a:	bf00      	nop
 8005c5c:	20000798 	.word	0x20000798
 8005c60:	20000bf8 	.word	0x20000bf8
 8005c64:	20000c0c 	.word	0x20000c0c
 8005c68:	20000c28 	.word	0x20000c28
 8005c6c:	20000c3c 	.word	0x20000c3c
 8005c70:	20000c54 	.word	0x20000c54
 8005c74:	20000c20 	.word	0x20000c20
 8005c78:	20000c24 	.word	0x20000c24

08005c7c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b082      	sub	sp, #8
 8005c80:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c82:	e019      	b.n	8005cb8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005c84:	f000 fd48 	bl	8006718 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005c88:	4b0f      	ldr	r3, [pc, #60]	; (8005cc8 <prvCheckTasksWaitingTermination+0x4c>)
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	3304      	adds	r3, #4
 8005c94:	4618      	mov	r0, r3
 8005c96:	f7fe fd6b 	bl	8004770 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005c9a:	4b0c      	ldr	r3, [pc, #48]	; (8005ccc <prvCheckTasksWaitingTermination+0x50>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	3b01      	subs	r3, #1
 8005ca0:	4a0a      	ldr	r2, [pc, #40]	; (8005ccc <prvCheckTasksWaitingTermination+0x50>)
 8005ca2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005ca4:	4b0a      	ldr	r3, [pc, #40]	; (8005cd0 <prvCheckTasksWaitingTermination+0x54>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	3b01      	subs	r3, #1
 8005caa:	4a09      	ldr	r2, [pc, #36]	; (8005cd0 <prvCheckTasksWaitingTermination+0x54>)
 8005cac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005cae:	f000 fd61 	bl	8006774 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 f80e 	bl	8005cd4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005cb8:	4b05      	ldr	r3, [pc, #20]	; (8005cd0 <prvCheckTasksWaitingTermination+0x54>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d1e1      	bne.n	8005c84 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005cc0:	bf00      	nop
 8005cc2:	3708      	adds	r7, #8
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}
 8005cc8:	20000c3c 	.word	0x20000c3c
 8005ccc:	20000c68 	.word	0x20000c68
 8005cd0:	20000c50 	.word	0x20000c50

08005cd4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d108      	bne.n	8005cf8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cea:	4618      	mov	r0, r3
 8005cec:	f000 fecc 	bl	8006a88 <vPortFree>
				vPortFree( pxTCB );
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f000 fec9 	bl	8006a88 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005cf6:	e017      	b.n	8005d28 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d103      	bne.n	8005d0a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 fec0 	bl	8006a88 <vPortFree>
	}
 8005d08:	e00e      	b.n	8005d28 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005d10:	2b02      	cmp	r3, #2
 8005d12:	d009      	beq.n	8005d28 <prvDeleteTCB+0x54>
 8005d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d18:	f383 8811 	msr	BASEPRI, r3
 8005d1c:	f3bf 8f6f 	isb	sy
 8005d20:	f3bf 8f4f 	dsb	sy
 8005d24:	60fb      	str	r3, [r7, #12]
 8005d26:	e7fe      	b.n	8005d26 <prvDeleteTCB+0x52>
	}
 8005d28:	bf00      	nop
 8005d2a:	3710      	adds	r7, #16
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005d30:	b480      	push	{r7}
 8005d32:	b083      	sub	sp, #12
 8005d34:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d36:	4b0e      	ldr	r3, [pc, #56]	; (8005d70 <prvResetNextTaskUnblockTime+0x40>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d101      	bne.n	8005d44 <prvResetNextTaskUnblockTime+0x14>
 8005d40:	2301      	movs	r3, #1
 8005d42:	e000      	b.n	8005d46 <prvResetNextTaskUnblockTime+0x16>
 8005d44:	2300      	movs	r3, #0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d004      	beq.n	8005d54 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005d4a:	4b0a      	ldr	r3, [pc, #40]	; (8005d74 <prvResetNextTaskUnblockTime+0x44>)
 8005d4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d50:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005d52:	e008      	b.n	8005d66 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005d54:	4b06      	ldr	r3, [pc, #24]	; (8005d70 <prvResetNextTaskUnblockTime+0x40>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	4a04      	ldr	r2, [pc, #16]	; (8005d74 <prvResetNextTaskUnblockTime+0x44>)
 8005d64:	6013      	str	r3, [r2, #0]
}
 8005d66:	bf00      	nop
 8005d68:	370c      	adds	r7, #12
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bc80      	pop	{r7}
 8005d6e:	4770      	bx	lr
 8005d70:	20000c20 	.word	0x20000c20
 8005d74:	20000c88 	.word	0x20000c88

08005d78 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005d7e:	4b0b      	ldr	r3, [pc, #44]	; (8005dac <xTaskGetSchedulerState+0x34>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d102      	bne.n	8005d8c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005d86:	2301      	movs	r3, #1
 8005d88:	607b      	str	r3, [r7, #4]
 8005d8a:	e008      	b.n	8005d9e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d8c:	4b08      	ldr	r3, [pc, #32]	; (8005db0 <xTaskGetSchedulerState+0x38>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d102      	bne.n	8005d9a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005d94:	2302      	movs	r3, #2
 8005d96:	607b      	str	r3, [r7, #4]
 8005d98:	e001      	b.n	8005d9e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005d9e:	687b      	ldr	r3, [r7, #4]
	}
 8005da0:	4618      	mov	r0, r3
 8005da2:	370c      	adds	r7, #12
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bc80      	pop	{r7}
 8005da8:	4770      	bx	lr
 8005daa:	bf00      	nop
 8005dac:	20000c74 	.word	0x20000c74
 8005db0:	20000c90 	.word	0x20000c90

08005db4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b086      	sub	sp, #24
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d054      	beq.n	8005e74 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005dca:	4b2d      	ldr	r3, [pc, #180]	; (8005e80 <xTaskPriorityDisinherit+0xcc>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	693a      	ldr	r2, [r7, #16]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d009      	beq.n	8005de8 <xTaskPriorityDisinherit+0x34>
 8005dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd8:	f383 8811 	msr	BASEPRI, r3
 8005ddc:	f3bf 8f6f 	isb	sy
 8005de0:	f3bf 8f4f 	dsb	sy
 8005de4:	60fb      	str	r3, [r7, #12]
 8005de6:	e7fe      	b.n	8005de6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d109      	bne.n	8005e04 <xTaskPriorityDisinherit+0x50>
 8005df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df4:	f383 8811 	msr	BASEPRI, r3
 8005df8:	f3bf 8f6f 	isb	sy
 8005dfc:	f3bf 8f4f 	dsb	sy
 8005e00:	60bb      	str	r3, [r7, #8]
 8005e02:	e7fe      	b.n	8005e02 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e08:	1e5a      	subs	r2, r3, #1
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d02c      	beq.n	8005e74 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d128      	bne.n	8005e74 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	3304      	adds	r3, #4
 8005e26:	4618      	mov	r0, r3
 8005e28:	f7fe fca2 	bl	8004770 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e38:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e44:	4b0f      	ldr	r3, [pc, #60]	; (8005e84 <xTaskPriorityDisinherit+0xd0>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d903      	bls.n	8005e54 <xTaskPriorityDisinherit+0xa0>
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e50:	4a0c      	ldr	r2, [pc, #48]	; (8005e84 <xTaskPriorityDisinherit+0xd0>)
 8005e52:	6013      	str	r3, [r2, #0]
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e58:	4613      	mov	r3, r2
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	4413      	add	r3, r2
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	4a09      	ldr	r2, [pc, #36]	; (8005e88 <xTaskPriorityDisinherit+0xd4>)
 8005e62:	441a      	add	r2, r3
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	3304      	adds	r3, #4
 8005e68:	4619      	mov	r1, r3
 8005e6a:	4610      	mov	r0, r2
 8005e6c:	f7fe fc25 	bl	80046ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005e70:	2301      	movs	r3, #1
 8005e72:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005e74:	697b      	ldr	r3, [r7, #20]
	}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3718      	adds	r7, #24
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
 8005e7e:	bf00      	nop
 8005e80:	20000794 	.word	0x20000794
 8005e84:	20000c70 	.word	0x20000c70
 8005e88:	20000798 	.word	0x20000798

08005e8c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b084      	sub	sp, #16
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005e96:	4b21      	ldr	r3, [pc, #132]	; (8005f1c <prvAddCurrentTaskToDelayedList+0x90>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e9c:	4b20      	ldr	r3, [pc, #128]	; (8005f20 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	3304      	adds	r3, #4
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f7fe fc64 	bl	8004770 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005eae:	d10a      	bne.n	8005ec6 <prvAddCurrentTaskToDelayedList+0x3a>
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d007      	beq.n	8005ec6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005eb6:	4b1a      	ldr	r3, [pc, #104]	; (8005f20 <prvAddCurrentTaskToDelayedList+0x94>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	3304      	adds	r3, #4
 8005ebc:	4619      	mov	r1, r3
 8005ebe:	4819      	ldr	r0, [pc, #100]	; (8005f24 <prvAddCurrentTaskToDelayedList+0x98>)
 8005ec0:	f7fe fbfb 	bl	80046ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005ec4:	e026      	b.n	8005f14 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005ec6:	68fa      	ldr	r2, [r7, #12]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	4413      	add	r3, r2
 8005ecc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005ece:	4b14      	ldr	r3, [pc, #80]	; (8005f20 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68ba      	ldr	r2, [r7, #8]
 8005ed4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005ed6:	68ba      	ldr	r2, [r7, #8]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d209      	bcs.n	8005ef2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ede:	4b12      	ldr	r3, [pc, #72]	; (8005f28 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	4b0f      	ldr	r3, [pc, #60]	; (8005f20 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	3304      	adds	r3, #4
 8005ee8:	4619      	mov	r1, r3
 8005eea:	4610      	mov	r0, r2
 8005eec:	f7fe fc08 	bl	8004700 <vListInsert>
}
 8005ef0:	e010      	b.n	8005f14 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ef2:	4b0e      	ldr	r3, [pc, #56]	; (8005f2c <prvAddCurrentTaskToDelayedList+0xa0>)
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	4b0a      	ldr	r3, [pc, #40]	; (8005f20 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	3304      	adds	r3, #4
 8005efc:	4619      	mov	r1, r3
 8005efe:	4610      	mov	r0, r2
 8005f00:	f7fe fbfe 	bl	8004700 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005f04:	4b0a      	ldr	r3, [pc, #40]	; (8005f30 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	68ba      	ldr	r2, [r7, #8]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d202      	bcs.n	8005f14 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005f0e:	4a08      	ldr	r2, [pc, #32]	; (8005f30 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	6013      	str	r3, [r2, #0]
}
 8005f14:	bf00      	nop
 8005f16:	3710      	adds	r7, #16
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}
 8005f1c:	20000c6c 	.word	0x20000c6c
 8005f20:	20000794 	.word	0x20000794
 8005f24:	20000c54 	.word	0x20000c54
 8005f28:	20000c24 	.word	0x20000c24
 8005f2c:	20000c20 	.word	0x20000c20
 8005f30:	20000c88 	.word	0x20000c88

08005f34 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b08a      	sub	sp, #40	; 0x28
 8005f38:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005f3e:	f000 fac3 	bl	80064c8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005f42:	4b1c      	ldr	r3, [pc, #112]	; (8005fb4 <xTimerCreateTimerTask+0x80>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d021      	beq.n	8005f8e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005f52:	1d3a      	adds	r2, r7, #4
 8005f54:	f107 0108 	add.w	r1, r7, #8
 8005f58:	f107 030c 	add.w	r3, r7, #12
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f7fe fb67 	bl	8004630 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005f62:	6879      	ldr	r1, [r7, #4]
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	9202      	str	r2, [sp, #8]
 8005f6a:	9301      	str	r3, [sp, #4]
 8005f6c:	2302      	movs	r3, #2
 8005f6e:	9300      	str	r3, [sp, #0]
 8005f70:	2300      	movs	r3, #0
 8005f72:	460a      	mov	r2, r1
 8005f74:	4910      	ldr	r1, [pc, #64]	; (8005fb8 <xTimerCreateTimerTask+0x84>)
 8005f76:	4811      	ldr	r0, [pc, #68]	; (8005fbc <xTimerCreateTimerTask+0x88>)
 8005f78:	f7ff f8f8 	bl	800516c <xTaskCreateStatic>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	4b10      	ldr	r3, [pc, #64]	; (8005fc0 <xTimerCreateTimerTask+0x8c>)
 8005f80:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005f82:	4b0f      	ldr	r3, [pc, #60]	; (8005fc0 <xTimerCreateTimerTask+0x8c>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d001      	beq.n	8005f8e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d109      	bne.n	8005fa8 <xTimerCreateTimerTask+0x74>
 8005f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f98:	f383 8811 	msr	BASEPRI, r3
 8005f9c:	f3bf 8f6f 	isb	sy
 8005fa0:	f3bf 8f4f 	dsb	sy
 8005fa4:	613b      	str	r3, [r7, #16]
 8005fa6:	e7fe      	b.n	8005fa6 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8005fa8:	697b      	ldr	r3, [r7, #20]
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3718      	adds	r7, #24
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	bf00      	nop
 8005fb4:	20000cc4 	.word	0x20000cc4
 8005fb8:	08007f30 	.word	0x08007f30
 8005fbc:	080060dd 	.word	0x080060dd
 8005fc0:	20000cc8 	.word	0x20000cc8

08005fc4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b08a      	sub	sp, #40	; 0x28
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	607a      	str	r2, [r7, #4]
 8005fd0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d109      	bne.n	8005ff0 <xTimerGenericCommand+0x2c>
 8005fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe0:	f383 8811 	msr	BASEPRI, r3
 8005fe4:	f3bf 8f6f 	isb	sy
 8005fe8:	f3bf 8f4f 	dsb	sy
 8005fec:	623b      	str	r3, [r7, #32]
 8005fee:	e7fe      	b.n	8005fee <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005ff0:	4b19      	ldr	r3, [pc, #100]	; (8006058 <xTimerGenericCommand+0x94>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d02a      	beq.n	800604e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	2b05      	cmp	r3, #5
 8006008:	dc18      	bgt.n	800603c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800600a:	f7ff feb5 	bl	8005d78 <xTaskGetSchedulerState>
 800600e:	4603      	mov	r3, r0
 8006010:	2b02      	cmp	r3, #2
 8006012:	d109      	bne.n	8006028 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006014:	4b10      	ldr	r3, [pc, #64]	; (8006058 <xTimerGenericCommand+0x94>)
 8006016:	6818      	ldr	r0, [r3, #0]
 8006018:	f107 0110 	add.w	r1, r7, #16
 800601c:	2300      	movs	r3, #0
 800601e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006020:	f7fe fcce 	bl	80049c0 <xQueueGenericSend>
 8006024:	6278      	str	r0, [r7, #36]	; 0x24
 8006026:	e012      	b.n	800604e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006028:	4b0b      	ldr	r3, [pc, #44]	; (8006058 <xTimerGenericCommand+0x94>)
 800602a:	6818      	ldr	r0, [r3, #0]
 800602c:	f107 0110 	add.w	r1, r7, #16
 8006030:	2300      	movs	r3, #0
 8006032:	2200      	movs	r2, #0
 8006034:	f7fe fcc4 	bl	80049c0 <xQueueGenericSend>
 8006038:	6278      	str	r0, [r7, #36]	; 0x24
 800603a:	e008      	b.n	800604e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800603c:	4b06      	ldr	r3, [pc, #24]	; (8006058 <xTimerGenericCommand+0x94>)
 800603e:	6818      	ldr	r0, [r3, #0]
 8006040:	f107 0110 	add.w	r1, r7, #16
 8006044:	2300      	movs	r3, #0
 8006046:	683a      	ldr	r2, [r7, #0]
 8006048:	f7fe fdb4 	bl	8004bb4 <xQueueGenericSendFromISR>
 800604c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800604e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006050:	4618      	mov	r0, r3
 8006052:	3728      	adds	r7, #40	; 0x28
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}
 8006058:	20000cc4 	.word	0x20000cc4

0800605c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b088      	sub	sp, #32
 8006060:	af02      	add	r7, sp, #8
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006066:	4b1c      	ldr	r3, [pc, #112]	; (80060d8 <prvProcessExpiredTimer+0x7c>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	3304      	adds	r3, #4
 8006074:	4618      	mov	r0, r3
 8006076:	f7fe fb7b 	bl	8004770 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	69db      	ldr	r3, [r3, #28]
 800607e:	2b01      	cmp	r3, #1
 8006080:	d121      	bne.n	80060c6 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	699a      	ldr	r2, [r3, #24]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	18d1      	adds	r1, r2, r3
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	683a      	ldr	r2, [r7, #0]
 800608e:	6978      	ldr	r0, [r7, #20]
 8006090:	f000 f8c8 	bl	8006224 <prvInsertTimerInActiveList>
 8006094:	4603      	mov	r3, r0
 8006096:	2b00      	cmp	r3, #0
 8006098:	d015      	beq.n	80060c6 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800609a:	2300      	movs	r3, #0
 800609c:	9300      	str	r3, [sp, #0]
 800609e:	2300      	movs	r3, #0
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	2100      	movs	r1, #0
 80060a4:	6978      	ldr	r0, [r7, #20]
 80060a6:	f7ff ff8d 	bl	8005fc4 <xTimerGenericCommand>
 80060aa:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d109      	bne.n	80060c6 <prvProcessExpiredTimer+0x6a>
 80060b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b6:	f383 8811 	msr	BASEPRI, r3
 80060ba:	f3bf 8f6f 	isb	sy
 80060be:	f3bf 8f4f 	dsb	sy
 80060c2:	60fb      	str	r3, [r7, #12]
 80060c4:	e7fe      	b.n	80060c4 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ca:	6978      	ldr	r0, [r7, #20]
 80060cc:	4798      	blx	r3
}
 80060ce:	bf00      	nop
 80060d0:	3718      	adds	r7, #24
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
 80060d6:	bf00      	nop
 80060d8:	20000cbc 	.word	0x20000cbc

080060dc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b084      	sub	sp, #16
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80060e4:	f107 0308 	add.w	r3, r7, #8
 80060e8:	4618      	mov	r0, r3
 80060ea:	f000 f857 	bl	800619c <prvGetNextExpireTime>
 80060ee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	4619      	mov	r1, r3
 80060f4:	68f8      	ldr	r0, [r7, #12]
 80060f6:	f000 f803 	bl	8006100 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80060fa:	f000 f8d5 	bl	80062a8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80060fe:	e7f1      	b.n	80060e4 <prvTimerTask+0x8>

08006100 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b084      	sub	sp, #16
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800610a:	f7ff fa5b 	bl	80055c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800610e:	f107 0308 	add.w	r3, r7, #8
 8006112:	4618      	mov	r0, r3
 8006114:	f000 f866 	bl	80061e4 <prvSampleTimeNow>
 8006118:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d130      	bne.n	8006182 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d10a      	bne.n	800613c <prvProcessTimerOrBlockTask+0x3c>
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	429a      	cmp	r2, r3
 800612c:	d806      	bhi.n	800613c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800612e:	f7ff fa57 	bl	80055e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006132:	68f9      	ldr	r1, [r7, #12]
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f7ff ff91 	bl	800605c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800613a:	e024      	b.n	8006186 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d008      	beq.n	8006154 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006142:	4b13      	ldr	r3, [pc, #76]	; (8006190 <prvProcessTimerOrBlockTask+0x90>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2b00      	cmp	r3, #0
 800614a:	bf0c      	ite	eq
 800614c:	2301      	moveq	r3, #1
 800614e:	2300      	movne	r3, #0
 8006150:	b2db      	uxtb	r3, r3
 8006152:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006154:	4b0f      	ldr	r3, [pc, #60]	; (8006194 <prvProcessTimerOrBlockTask+0x94>)
 8006156:	6818      	ldr	r0, [r3, #0]
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	1ad3      	subs	r3, r2, r3
 800615e:	683a      	ldr	r2, [r7, #0]
 8006160:	4619      	mov	r1, r3
 8006162:	f7fe ffcf 	bl	8005104 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006166:	f7ff fa3b 	bl	80055e0 <xTaskResumeAll>
 800616a:	4603      	mov	r3, r0
 800616c:	2b00      	cmp	r3, #0
 800616e:	d10a      	bne.n	8006186 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006170:	4b09      	ldr	r3, [pc, #36]	; (8006198 <prvProcessTimerOrBlockTask+0x98>)
 8006172:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006176:	601a      	str	r2, [r3, #0]
 8006178:	f3bf 8f4f 	dsb	sy
 800617c:	f3bf 8f6f 	isb	sy
}
 8006180:	e001      	b.n	8006186 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006182:	f7ff fa2d 	bl	80055e0 <xTaskResumeAll>
}
 8006186:	bf00      	nop
 8006188:	3710      	adds	r7, #16
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
 800618e:	bf00      	nop
 8006190:	20000cc0 	.word	0x20000cc0
 8006194:	20000cc4 	.word	0x20000cc4
 8006198:	e000ed04 	.word	0xe000ed04

0800619c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800619c:	b480      	push	{r7}
 800619e:	b085      	sub	sp, #20
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80061a4:	4b0e      	ldr	r3, [pc, #56]	; (80061e0 <prvGetNextExpireTime+0x44>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	bf0c      	ite	eq
 80061ae:	2301      	moveq	r3, #1
 80061b0:	2300      	movne	r3, #0
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	461a      	mov	r2, r3
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d105      	bne.n	80061ce <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80061c2:	4b07      	ldr	r3, [pc, #28]	; (80061e0 <prvGetNextExpireTime+0x44>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	60fb      	str	r3, [r7, #12]
 80061cc:	e001      	b.n	80061d2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80061ce:	2300      	movs	r3, #0
 80061d0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80061d2:	68fb      	ldr	r3, [r7, #12]
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3714      	adds	r7, #20
 80061d8:	46bd      	mov	sp, r7
 80061da:	bc80      	pop	{r7}
 80061dc:	4770      	bx	lr
 80061de:	bf00      	nop
 80061e0:	20000cbc 	.word	0x20000cbc

080061e4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b084      	sub	sp, #16
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80061ec:	f7ff fa94 	bl	8005718 <xTaskGetTickCount>
 80061f0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80061f2:	4b0b      	ldr	r3, [pc, #44]	; (8006220 <prvSampleTimeNow+0x3c>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	68fa      	ldr	r2, [r7, #12]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d205      	bcs.n	8006208 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80061fc:	f000 f904 	bl	8006408 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	601a      	str	r2, [r3, #0]
 8006206:	e002      	b.n	800620e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800620e:	4a04      	ldr	r2, [pc, #16]	; (8006220 <prvSampleTimeNow+0x3c>)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006214:	68fb      	ldr	r3, [r7, #12]
}
 8006216:	4618      	mov	r0, r3
 8006218:	3710      	adds	r7, #16
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}
 800621e:	bf00      	nop
 8006220:	20000ccc 	.word	0x20000ccc

08006224 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b086      	sub	sp, #24
 8006228:	af00      	add	r7, sp, #0
 800622a:	60f8      	str	r0, [r7, #12]
 800622c:	60b9      	str	r1, [r7, #8]
 800622e:	607a      	str	r2, [r7, #4]
 8006230:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006232:	2300      	movs	r3, #0
 8006234:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	68ba      	ldr	r2, [r7, #8]
 800623a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	68fa      	ldr	r2, [r7, #12]
 8006240:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006242:	68ba      	ldr	r2, [r7, #8]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	429a      	cmp	r2, r3
 8006248:	d812      	bhi.n	8006270 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	1ad2      	subs	r2, r2, r3
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	699b      	ldr	r3, [r3, #24]
 8006254:	429a      	cmp	r2, r3
 8006256:	d302      	bcc.n	800625e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006258:	2301      	movs	r3, #1
 800625a:	617b      	str	r3, [r7, #20]
 800625c:	e01b      	b.n	8006296 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800625e:	4b10      	ldr	r3, [pc, #64]	; (80062a0 <prvInsertTimerInActiveList+0x7c>)
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	3304      	adds	r3, #4
 8006266:	4619      	mov	r1, r3
 8006268:	4610      	mov	r0, r2
 800626a:	f7fe fa49 	bl	8004700 <vListInsert>
 800626e:	e012      	b.n	8006296 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	429a      	cmp	r2, r3
 8006276:	d206      	bcs.n	8006286 <prvInsertTimerInActiveList+0x62>
 8006278:	68ba      	ldr	r2, [r7, #8]
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	429a      	cmp	r2, r3
 800627e:	d302      	bcc.n	8006286 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006280:	2301      	movs	r3, #1
 8006282:	617b      	str	r3, [r7, #20]
 8006284:	e007      	b.n	8006296 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006286:	4b07      	ldr	r3, [pc, #28]	; (80062a4 <prvInsertTimerInActiveList+0x80>)
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	3304      	adds	r3, #4
 800628e:	4619      	mov	r1, r3
 8006290:	4610      	mov	r0, r2
 8006292:	f7fe fa35 	bl	8004700 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006296:	697b      	ldr	r3, [r7, #20]
}
 8006298:	4618      	mov	r0, r3
 800629a:	3718      	adds	r7, #24
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}
 80062a0:	20000cc0 	.word	0x20000cc0
 80062a4:	20000cbc 	.word	0x20000cbc

080062a8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b08e      	sub	sp, #56	; 0x38
 80062ac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80062ae:	e099      	b.n	80063e4 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	da17      	bge.n	80062e6 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80062b6:	1d3b      	adds	r3, r7, #4
 80062b8:	3304      	adds	r3, #4
 80062ba:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80062bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d109      	bne.n	80062d6 <prvProcessReceivedCommands+0x2e>
 80062c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c6:	f383 8811 	msr	BASEPRI, r3
 80062ca:	f3bf 8f6f 	isb	sy
 80062ce:	f3bf 8f4f 	dsb	sy
 80062d2:	61fb      	str	r3, [r7, #28]
 80062d4:	e7fe      	b.n	80062d4 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80062d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062dc:	6850      	ldr	r0, [r2, #4]
 80062de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062e0:	6892      	ldr	r2, [r2, #8]
 80062e2:	4611      	mov	r1, r2
 80062e4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	db7a      	blt.n	80063e2 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80062f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f2:	695b      	ldr	r3, [r3, #20]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d004      	beq.n	8006302 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80062f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062fa:	3304      	adds	r3, #4
 80062fc:	4618      	mov	r0, r3
 80062fe:	f7fe fa37 	bl	8004770 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006302:	463b      	mov	r3, r7
 8006304:	4618      	mov	r0, r3
 8006306:	f7ff ff6d 	bl	80061e4 <prvSampleTimeNow>
 800630a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2b09      	cmp	r3, #9
 8006310:	d868      	bhi.n	80063e4 <prvProcessReceivedCommands+0x13c>
 8006312:	a201      	add	r2, pc, #4	; (adr r2, 8006318 <prvProcessReceivedCommands+0x70>)
 8006314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006318:	08006341 	.word	0x08006341
 800631c:	08006341 	.word	0x08006341
 8006320:	08006341 	.word	0x08006341
 8006324:	080063e5 	.word	0x080063e5
 8006328:	0800639b 	.word	0x0800639b
 800632c:	080063d1 	.word	0x080063d1
 8006330:	08006341 	.word	0x08006341
 8006334:	08006341 	.word	0x08006341
 8006338:	080063e5 	.word	0x080063e5
 800633c:	0800639b 	.word	0x0800639b
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006340:	68ba      	ldr	r2, [r7, #8]
 8006342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006344:	699b      	ldr	r3, [r3, #24]
 8006346:	18d1      	adds	r1, r2, r3
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800634c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800634e:	f7ff ff69 	bl	8006224 <prvInsertTimerInActiveList>
 8006352:	4603      	mov	r3, r0
 8006354:	2b00      	cmp	r3, #0
 8006356:	d045      	beq.n	80063e4 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800635a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800635e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006362:	69db      	ldr	r3, [r3, #28]
 8006364:	2b01      	cmp	r3, #1
 8006366:	d13d      	bne.n	80063e4 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006368:	68ba      	ldr	r2, [r7, #8]
 800636a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800636c:	699b      	ldr	r3, [r3, #24]
 800636e:	441a      	add	r2, r3
 8006370:	2300      	movs	r3, #0
 8006372:	9300      	str	r3, [sp, #0]
 8006374:	2300      	movs	r3, #0
 8006376:	2100      	movs	r1, #0
 8006378:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800637a:	f7ff fe23 	bl	8005fc4 <xTimerGenericCommand>
 800637e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006380:	6a3b      	ldr	r3, [r7, #32]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d12e      	bne.n	80063e4 <prvProcessReceivedCommands+0x13c>
 8006386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800638a:	f383 8811 	msr	BASEPRI, r3
 800638e:	f3bf 8f6f 	isb	sy
 8006392:	f3bf 8f4f 	dsb	sy
 8006396:	61bb      	str	r3, [r7, #24]
 8006398:	e7fe      	b.n	8006398 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800639a:	68ba      	ldr	r2, [r7, #8]
 800639c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800639e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80063a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a2:	699b      	ldr	r3, [r3, #24]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d109      	bne.n	80063bc <prvProcessReceivedCommands+0x114>
 80063a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ac:	f383 8811 	msr	BASEPRI, r3
 80063b0:	f3bf 8f6f 	isb	sy
 80063b4:	f3bf 8f4f 	dsb	sy
 80063b8:	617b      	str	r3, [r7, #20]
 80063ba:	e7fe      	b.n	80063ba <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80063bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063be:	699a      	ldr	r2, [r3, #24]
 80063c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c2:	18d1      	adds	r1, r2, r3
 80063c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063ca:	f7ff ff2b 	bl	8006224 <prvInsertTimerInActiveList>
					break;
 80063ce:	e009      	b.n	80063e4 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80063d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d104      	bne.n	80063e4 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 80063da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063dc:	f000 fb54 	bl	8006a88 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80063e0:	e000      	b.n	80063e4 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80063e2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80063e4:	4b07      	ldr	r3, [pc, #28]	; (8006404 <prvProcessReceivedCommands+0x15c>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	1d39      	adds	r1, r7, #4
 80063ea:	2200      	movs	r2, #0
 80063ec:	4618      	mov	r0, r3
 80063ee:	f7fe fc75 	bl	8004cdc <xQueueReceive>
 80063f2:	4603      	mov	r3, r0
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	f47f af5b 	bne.w	80062b0 <prvProcessReceivedCommands+0x8>
	}
}
 80063fa:	bf00      	nop
 80063fc:	3730      	adds	r7, #48	; 0x30
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
 8006402:	bf00      	nop
 8006404:	20000cc4 	.word	0x20000cc4

08006408 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b088      	sub	sp, #32
 800640c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800640e:	e044      	b.n	800649a <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006410:	4b2b      	ldr	r3, [pc, #172]	; (80064c0 <prvSwitchTimerLists+0xb8>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	68db      	ldr	r3, [r3, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800641a:	4b29      	ldr	r3, [pc, #164]	; (80064c0 <prvSwitchTimerLists+0xb8>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	3304      	adds	r3, #4
 8006428:	4618      	mov	r0, r3
 800642a:	f7fe f9a1 	bl	8004770 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006432:	68f8      	ldr	r0, [r7, #12]
 8006434:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	69db      	ldr	r3, [r3, #28]
 800643a:	2b01      	cmp	r3, #1
 800643c:	d12d      	bne.n	800649a <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	699b      	ldr	r3, [r3, #24]
 8006442:	693a      	ldr	r2, [r7, #16]
 8006444:	4413      	add	r3, r2
 8006446:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006448:	68ba      	ldr	r2, [r7, #8]
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	429a      	cmp	r2, r3
 800644e:	d90e      	bls.n	800646e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	68ba      	ldr	r2, [r7, #8]
 8006454:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	68fa      	ldr	r2, [r7, #12]
 800645a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800645c:	4b18      	ldr	r3, [pc, #96]	; (80064c0 <prvSwitchTimerLists+0xb8>)
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	3304      	adds	r3, #4
 8006464:	4619      	mov	r1, r3
 8006466:	4610      	mov	r0, r2
 8006468:	f7fe f94a 	bl	8004700 <vListInsert>
 800646c:	e015      	b.n	800649a <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800646e:	2300      	movs	r3, #0
 8006470:	9300      	str	r3, [sp, #0]
 8006472:	2300      	movs	r3, #0
 8006474:	693a      	ldr	r2, [r7, #16]
 8006476:	2100      	movs	r1, #0
 8006478:	68f8      	ldr	r0, [r7, #12]
 800647a:	f7ff fda3 	bl	8005fc4 <xTimerGenericCommand>
 800647e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d109      	bne.n	800649a <prvSwitchTimerLists+0x92>
 8006486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800648a:	f383 8811 	msr	BASEPRI, r3
 800648e:	f3bf 8f6f 	isb	sy
 8006492:	f3bf 8f4f 	dsb	sy
 8006496:	603b      	str	r3, [r7, #0]
 8006498:	e7fe      	b.n	8006498 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800649a:	4b09      	ldr	r3, [pc, #36]	; (80064c0 <prvSwitchTimerLists+0xb8>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d1b5      	bne.n	8006410 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80064a4:	4b06      	ldr	r3, [pc, #24]	; (80064c0 <prvSwitchTimerLists+0xb8>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80064aa:	4b06      	ldr	r3, [pc, #24]	; (80064c4 <prvSwitchTimerLists+0xbc>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a04      	ldr	r2, [pc, #16]	; (80064c0 <prvSwitchTimerLists+0xb8>)
 80064b0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80064b2:	4a04      	ldr	r2, [pc, #16]	; (80064c4 <prvSwitchTimerLists+0xbc>)
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	6013      	str	r3, [r2, #0]
}
 80064b8:	bf00      	nop
 80064ba:	3718      	adds	r7, #24
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}
 80064c0:	20000cbc 	.word	0x20000cbc
 80064c4:	20000cc0 	.word	0x20000cc0

080064c8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80064ce:	f000 f923 	bl	8006718 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80064d2:	4b15      	ldr	r3, [pc, #84]	; (8006528 <prvCheckForValidListAndQueue+0x60>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d120      	bne.n	800651c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80064da:	4814      	ldr	r0, [pc, #80]	; (800652c <prvCheckForValidListAndQueue+0x64>)
 80064dc:	f7fe f8c2 	bl	8004664 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80064e0:	4813      	ldr	r0, [pc, #76]	; (8006530 <prvCheckForValidListAndQueue+0x68>)
 80064e2:	f7fe f8bf 	bl	8004664 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80064e6:	4b13      	ldr	r3, [pc, #76]	; (8006534 <prvCheckForValidListAndQueue+0x6c>)
 80064e8:	4a10      	ldr	r2, [pc, #64]	; (800652c <prvCheckForValidListAndQueue+0x64>)
 80064ea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80064ec:	4b12      	ldr	r3, [pc, #72]	; (8006538 <prvCheckForValidListAndQueue+0x70>)
 80064ee:	4a10      	ldr	r2, [pc, #64]	; (8006530 <prvCheckForValidListAndQueue+0x68>)
 80064f0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80064f2:	2300      	movs	r3, #0
 80064f4:	9300      	str	r3, [sp, #0]
 80064f6:	4b11      	ldr	r3, [pc, #68]	; (800653c <prvCheckForValidListAndQueue+0x74>)
 80064f8:	4a11      	ldr	r2, [pc, #68]	; (8006540 <prvCheckForValidListAndQueue+0x78>)
 80064fa:	2110      	movs	r1, #16
 80064fc:	200a      	movs	r0, #10
 80064fe:	f7fe f9c9 	bl	8004894 <xQueueGenericCreateStatic>
 8006502:	4602      	mov	r2, r0
 8006504:	4b08      	ldr	r3, [pc, #32]	; (8006528 <prvCheckForValidListAndQueue+0x60>)
 8006506:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006508:	4b07      	ldr	r3, [pc, #28]	; (8006528 <prvCheckForValidListAndQueue+0x60>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d005      	beq.n	800651c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006510:	4b05      	ldr	r3, [pc, #20]	; (8006528 <prvCheckForValidListAndQueue+0x60>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	490b      	ldr	r1, [pc, #44]	; (8006544 <prvCheckForValidListAndQueue+0x7c>)
 8006516:	4618      	mov	r0, r3
 8006518:	f7fe fdcc 	bl	80050b4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800651c:	f000 f92a 	bl	8006774 <vPortExitCritical>
}
 8006520:	bf00      	nop
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
 8006526:	bf00      	nop
 8006528:	20000cc4 	.word	0x20000cc4
 800652c:	20000c94 	.word	0x20000c94
 8006530:	20000ca8 	.word	0x20000ca8
 8006534:	20000cbc 	.word	0x20000cbc
 8006538:	20000cc0 	.word	0x20000cc0
 800653c:	20000d70 	.word	0x20000d70
 8006540:	20000cd0 	.word	0x20000cd0
 8006544:	08007f38 	.word	0x08007f38

08006548 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006548:	b480      	push	{r7}
 800654a:	b085      	sub	sp, #20
 800654c:	af00      	add	r7, sp, #0
 800654e:	60f8      	str	r0, [r7, #12]
 8006550:	60b9      	str	r1, [r7, #8]
 8006552:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	3b04      	subs	r3, #4
 8006558:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006560:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	3b04      	subs	r3, #4
 8006566:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	f023 0201 	bic.w	r2, r3, #1
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	3b04      	subs	r3, #4
 8006576:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006578:	4a08      	ldr	r2, [pc, #32]	; (800659c <pxPortInitialiseStack+0x54>)
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	3b14      	subs	r3, #20
 8006582:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	3b20      	subs	r3, #32
 800658e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006590:	68fb      	ldr	r3, [r7, #12]
}
 8006592:	4618      	mov	r0, r3
 8006594:	3714      	adds	r7, #20
 8006596:	46bd      	mov	sp, r7
 8006598:	bc80      	pop	{r7}
 800659a:	4770      	bx	lr
 800659c:	080065a1 	.word	0x080065a1

080065a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80065a0:	b480      	push	{r7}
 80065a2:	b085      	sub	sp, #20
 80065a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80065a6:	2300      	movs	r3, #0
 80065a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80065aa:	4b10      	ldr	r3, [pc, #64]	; (80065ec <prvTaskExitError+0x4c>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065b2:	d009      	beq.n	80065c8 <prvTaskExitError+0x28>
 80065b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b8:	f383 8811 	msr	BASEPRI, r3
 80065bc:	f3bf 8f6f 	isb	sy
 80065c0:	f3bf 8f4f 	dsb	sy
 80065c4:	60fb      	str	r3, [r7, #12]
 80065c6:	e7fe      	b.n	80065c6 <prvTaskExitError+0x26>
 80065c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065cc:	f383 8811 	msr	BASEPRI, r3
 80065d0:	f3bf 8f6f 	isb	sy
 80065d4:	f3bf 8f4f 	dsb	sy
 80065d8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80065da:	bf00      	nop
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d0fc      	beq.n	80065dc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80065e2:	bf00      	nop
 80065e4:	3714      	adds	r7, #20
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bc80      	pop	{r7}
 80065ea:	4770      	bx	lr
 80065ec:	20000020 	.word	0x20000020

080065f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80065f0:	4b07      	ldr	r3, [pc, #28]	; (8006610 <pxCurrentTCBConst2>)
 80065f2:	6819      	ldr	r1, [r3, #0]
 80065f4:	6808      	ldr	r0, [r1, #0]
 80065f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80065fa:	f380 8809 	msr	PSP, r0
 80065fe:	f3bf 8f6f 	isb	sy
 8006602:	f04f 0000 	mov.w	r0, #0
 8006606:	f380 8811 	msr	BASEPRI, r0
 800660a:	f04e 0e0d 	orr.w	lr, lr, #13
 800660e:	4770      	bx	lr

08006610 <pxCurrentTCBConst2>:
 8006610:	20000794 	.word	0x20000794
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006614:	bf00      	nop
 8006616:	bf00      	nop

08006618 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006618:	4806      	ldr	r0, [pc, #24]	; (8006634 <prvPortStartFirstTask+0x1c>)
 800661a:	6800      	ldr	r0, [r0, #0]
 800661c:	6800      	ldr	r0, [r0, #0]
 800661e:	f380 8808 	msr	MSP, r0
 8006622:	b662      	cpsie	i
 8006624:	b661      	cpsie	f
 8006626:	f3bf 8f4f 	dsb	sy
 800662a:	f3bf 8f6f 	isb	sy
 800662e:	df00      	svc	0
 8006630:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006632:	bf00      	nop
 8006634:	e000ed08 	.word	0xe000ed08

08006638 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b084      	sub	sp, #16
 800663c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800663e:	4b31      	ldr	r3, [pc, #196]	; (8006704 <xPortStartScheduler+0xcc>)
 8006640:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	781b      	ldrb	r3, [r3, #0]
 8006646:	b2db      	uxtb	r3, r3
 8006648:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	22ff      	movs	r2, #255	; 0xff
 800664e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	b2db      	uxtb	r3, r3
 8006656:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006658:	78fb      	ldrb	r3, [r7, #3]
 800665a:	b2db      	uxtb	r3, r3
 800665c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006660:	b2da      	uxtb	r2, r3
 8006662:	4b29      	ldr	r3, [pc, #164]	; (8006708 <xPortStartScheduler+0xd0>)
 8006664:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006666:	4b29      	ldr	r3, [pc, #164]	; (800670c <xPortStartScheduler+0xd4>)
 8006668:	2207      	movs	r2, #7
 800666a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800666c:	e009      	b.n	8006682 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800666e:	4b27      	ldr	r3, [pc, #156]	; (800670c <xPortStartScheduler+0xd4>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	3b01      	subs	r3, #1
 8006674:	4a25      	ldr	r2, [pc, #148]	; (800670c <xPortStartScheduler+0xd4>)
 8006676:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006678:	78fb      	ldrb	r3, [r7, #3]
 800667a:	b2db      	uxtb	r3, r3
 800667c:	005b      	lsls	r3, r3, #1
 800667e:	b2db      	uxtb	r3, r3
 8006680:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006682:	78fb      	ldrb	r3, [r7, #3]
 8006684:	b2db      	uxtb	r3, r3
 8006686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800668a:	2b80      	cmp	r3, #128	; 0x80
 800668c:	d0ef      	beq.n	800666e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800668e:	4b1f      	ldr	r3, [pc, #124]	; (800670c <xPortStartScheduler+0xd4>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f1c3 0307 	rsb	r3, r3, #7
 8006696:	2b04      	cmp	r3, #4
 8006698:	d009      	beq.n	80066ae <xPortStartScheduler+0x76>
 800669a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800669e:	f383 8811 	msr	BASEPRI, r3
 80066a2:	f3bf 8f6f 	isb	sy
 80066a6:	f3bf 8f4f 	dsb	sy
 80066aa:	60bb      	str	r3, [r7, #8]
 80066ac:	e7fe      	b.n	80066ac <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80066ae:	4b17      	ldr	r3, [pc, #92]	; (800670c <xPortStartScheduler+0xd4>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	021b      	lsls	r3, r3, #8
 80066b4:	4a15      	ldr	r2, [pc, #84]	; (800670c <xPortStartScheduler+0xd4>)
 80066b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80066b8:	4b14      	ldr	r3, [pc, #80]	; (800670c <xPortStartScheduler+0xd4>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80066c0:	4a12      	ldr	r2, [pc, #72]	; (800670c <xPortStartScheduler+0xd4>)
 80066c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	b2da      	uxtb	r2, r3
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80066cc:	4b10      	ldr	r3, [pc, #64]	; (8006710 <xPortStartScheduler+0xd8>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a0f      	ldr	r2, [pc, #60]	; (8006710 <xPortStartScheduler+0xd8>)
 80066d2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80066d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80066d8:	4b0d      	ldr	r3, [pc, #52]	; (8006710 <xPortStartScheduler+0xd8>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a0c      	ldr	r2, [pc, #48]	; (8006710 <xPortStartScheduler+0xd8>)
 80066de:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80066e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80066e4:	f000 f8b0 	bl	8006848 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80066e8:	4b0a      	ldr	r3, [pc, #40]	; (8006714 <xPortStartScheduler+0xdc>)
 80066ea:	2200      	movs	r2, #0
 80066ec:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80066ee:	f7ff ff93 	bl	8006618 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80066f2:	f7ff f8dd 	bl	80058b0 <vTaskSwitchContext>
	prvTaskExitError();
 80066f6:	f7ff ff53 	bl	80065a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80066fa:	2300      	movs	r3, #0
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3710      	adds	r7, #16
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}
 8006704:	e000e400 	.word	0xe000e400
 8006708:	20000dc0 	.word	0x20000dc0
 800670c:	20000dc4 	.word	0x20000dc4
 8006710:	e000ed20 	.word	0xe000ed20
 8006714:	20000020 	.word	0x20000020

08006718 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006718:	b480      	push	{r7}
 800671a:	b083      	sub	sp, #12
 800671c:	af00      	add	r7, sp, #0
 800671e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006722:	f383 8811 	msr	BASEPRI, r3
 8006726:	f3bf 8f6f 	isb	sy
 800672a:	f3bf 8f4f 	dsb	sy
 800672e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006730:	4b0e      	ldr	r3, [pc, #56]	; (800676c <vPortEnterCritical+0x54>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	3301      	adds	r3, #1
 8006736:	4a0d      	ldr	r2, [pc, #52]	; (800676c <vPortEnterCritical+0x54>)
 8006738:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800673a:	4b0c      	ldr	r3, [pc, #48]	; (800676c <vPortEnterCritical+0x54>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	2b01      	cmp	r3, #1
 8006740:	d10e      	bne.n	8006760 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006742:	4b0b      	ldr	r3, [pc, #44]	; (8006770 <vPortEnterCritical+0x58>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	b2db      	uxtb	r3, r3
 8006748:	2b00      	cmp	r3, #0
 800674a:	d009      	beq.n	8006760 <vPortEnterCritical+0x48>
 800674c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006750:	f383 8811 	msr	BASEPRI, r3
 8006754:	f3bf 8f6f 	isb	sy
 8006758:	f3bf 8f4f 	dsb	sy
 800675c:	603b      	str	r3, [r7, #0]
 800675e:	e7fe      	b.n	800675e <vPortEnterCritical+0x46>
	}
}
 8006760:	bf00      	nop
 8006762:	370c      	adds	r7, #12
 8006764:	46bd      	mov	sp, r7
 8006766:	bc80      	pop	{r7}
 8006768:	4770      	bx	lr
 800676a:	bf00      	nop
 800676c:	20000020 	.word	0x20000020
 8006770:	e000ed04 	.word	0xe000ed04

08006774 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800677a:	4b10      	ldr	r3, [pc, #64]	; (80067bc <vPortExitCritical+0x48>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d109      	bne.n	8006796 <vPortExitCritical+0x22>
 8006782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006786:	f383 8811 	msr	BASEPRI, r3
 800678a:	f3bf 8f6f 	isb	sy
 800678e:	f3bf 8f4f 	dsb	sy
 8006792:	607b      	str	r3, [r7, #4]
 8006794:	e7fe      	b.n	8006794 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8006796:	4b09      	ldr	r3, [pc, #36]	; (80067bc <vPortExitCritical+0x48>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	3b01      	subs	r3, #1
 800679c:	4a07      	ldr	r2, [pc, #28]	; (80067bc <vPortExitCritical+0x48>)
 800679e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80067a0:	4b06      	ldr	r3, [pc, #24]	; (80067bc <vPortExitCritical+0x48>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d104      	bne.n	80067b2 <vPortExitCritical+0x3e>
 80067a8:	2300      	movs	r3, #0
 80067aa:	603b      	str	r3, [r7, #0]
	__asm volatile
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80067b2:	bf00      	nop
 80067b4:	370c      	adds	r7, #12
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bc80      	pop	{r7}
 80067ba:	4770      	bx	lr
 80067bc:	20000020 	.word	0x20000020

080067c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80067c0:	f3ef 8009 	mrs	r0, PSP
 80067c4:	f3bf 8f6f 	isb	sy
 80067c8:	4b0d      	ldr	r3, [pc, #52]	; (8006800 <pxCurrentTCBConst>)
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80067d0:	6010      	str	r0, [r2, #0]
 80067d2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80067d6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80067da:	f380 8811 	msr	BASEPRI, r0
 80067de:	f7ff f867 	bl	80058b0 <vTaskSwitchContext>
 80067e2:	f04f 0000 	mov.w	r0, #0
 80067e6:	f380 8811 	msr	BASEPRI, r0
 80067ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80067ee:	6819      	ldr	r1, [r3, #0]
 80067f0:	6808      	ldr	r0, [r1, #0]
 80067f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80067f6:	f380 8809 	msr	PSP, r0
 80067fa:	f3bf 8f6f 	isb	sy
 80067fe:	4770      	bx	lr

08006800 <pxCurrentTCBConst>:
 8006800:	20000794 	.word	0x20000794
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006804:	bf00      	nop
 8006806:	bf00      	nop

08006808 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b082      	sub	sp, #8
 800680c:	af00      	add	r7, sp, #0
	__asm volatile
 800680e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006812:	f383 8811 	msr	BASEPRI, r3
 8006816:	f3bf 8f6f 	isb	sy
 800681a:	f3bf 8f4f 	dsb	sy
 800681e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006820:	f7fe ff88 	bl	8005734 <xTaskIncrementTick>
 8006824:	4603      	mov	r3, r0
 8006826:	2b00      	cmp	r3, #0
 8006828:	d003      	beq.n	8006832 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800682a:	4b06      	ldr	r3, [pc, #24]	; (8006844 <xPortSysTickHandler+0x3c>)
 800682c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006830:	601a      	str	r2, [r3, #0]
 8006832:	2300      	movs	r3, #0
 8006834:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800683c:	bf00      	nop
 800683e:	3708      	adds	r7, #8
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}
 8006844:	e000ed04 	.word	0xe000ed04

08006848 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006848:	b480      	push	{r7}
 800684a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800684c:	4b0a      	ldr	r3, [pc, #40]	; (8006878 <vPortSetupTimerInterrupt+0x30>)
 800684e:	2200      	movs	r2, #0
 8006850:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006852:	4b0a      	ldr	r3, [pc, #40]	; (800687c <vPortSetupTimerInterrupt+0x34>)
 8006854:	2200      	movs	r2, #0
 8006856:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006858:	4b09      	ldr	r3, [pc, #36]	; (8006880 <vPortSetupTimerInterrupt+0x38>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a09      	ldr	r2, [pc, #36]	; (8006884 <vPortSetupTimerInterrupt+0x3c>)
 800685e:	fba2 2303 	umull	r2, r3, r2, r3
 8006862:	099b      	lsrs	r3, r3, #6
 8006864:	4a08      	ldr	r2, [pc, #32]	; (8006888 <vPortSetupTimerInterrupt+0x40>)
 8006866:	3b01      	subs	r3, #1
 8006868:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800686a:	4b03      	ldr	r3, [pc, #12]	; (8006878 <vPortSetupTimerInterrupt+0x30>)
 800686c:	2207      	movs	r2, #7
 800686e:	601a      	str	r2, [r3, #0]
}
 8006870:	bf00      	nop
 8006872:	46bd      	mov	sp, r7
 8006874:	bc80      	pop	{r7}
 8006876:	4770      	bx	lr
 8006878:	e000e010 	.word	0xe000e010
 800687c:	e000e018 	.word	0xe000e018
 8006880:	20000014 	.word	0x20000014
 8006884:	10624dd3 	.word	0x10624dd3
 8006888:	e000e014 	.word	0xe000e014

0800688c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800688c:	b480      	push	{r7}
 800688e:	b085      	sub	sp, #20
 8006890:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006892:	f3ef 8305 	mrs	r3, IPSR
 8006896:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2b0f      	cmp	r3, #15
 800689c:	d913      	bls.n	80068c6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800689e:	4a15      	ldr	r2, [pc, #84]	; (80068f4 <vPortValidateInterruptPriority+0x68>)
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	4413      	add	r3, r2
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80068a8:	4b13      	ldr	r3, [pc, #76]	; (80068f8 <vPortValidateInterruptPriority+0x6c>)
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	7afa      	ldrb	r2, [r7, #11]
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d209      	bcs.n	80068c6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80068b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b6:	f383 8811 	msr	BASEPRI, r3
 80068ba:	f3bf 8f6f 	isb	sy
 80068be:	f3bf 8f4f 	dsb	sy
 80068c2:	607b      	str	r3, [r7, #4]
 80068c4:	e7fe      	b.n	80068c4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80068c6:	4b0d      	ldr	r3, [pc, #52]	; (80068fc <vPortValidateInterruptPriority+0x70>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80068ce:	4b0c      	ldr	r3, [pc, #48]	; (8006900 <vPortValidateInterruptPriority+0x74>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d909      	bls.n	80068ea <vPortValidateInterruptPriority+0x5e>
 80068d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068da:	f383 8811 	msr	BASEPRI, r3
 80068de:	f3bf 8f6f 	isb	sy
 80068e2:	f3bf 8f4f 	dsb	sy
 80068e6:	603b      	str	r3, [r7, #0]
 80068e8:	e7fe      	b.n	80068e8 <vPortValidateInterruptPriority+0x5c>
	}
 80068ea:	bf00      	nop
 80068ec:	3714      	adds	r7, #20
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bc80      	pop	{r7}
 80068f2:	4770      	bx	lr
 80068f4:	e000e3f0 	.word	0xe000e3f0
 80068f8:	20000dc0 	.word	0x20000dc0
 80068fc:	e000ed0c 	.word	0xe000ed0c
 8006900:	20000dc4 	.word	0x20000dc4

08006904 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b08a      	sub	sp, #40	; 0x28
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800690c:	2300      	movs	r3, #0
 800690e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006910:	f7fe fe58 	bl	80055c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006914:	4b57      	ldr	r3, [pc, #348]	; (8006a74 <pvPortMalloc+0x170>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d101      	bne.n	8006920 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800691c:	f000 f90c 	bl	8006b38 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006920:	4b55      	ldr	r3, [pc, #340]	; (8006a78 <pvPortMalloc+0x174>)
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	4013      	ands	r3, r2
 8006928:	2b00      	cmp	r3, #0
 800692a:	f040 808c 	bne.w	8006a46 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d01c      	beq.n	800696e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006934:	2208      	movs	r2, #8
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	4413      	add	r3, r2
 800693a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f003 0307 	and.w	r3, r3, #7
 8006942:	2b00      	cmp	r3, #0
 8006944:	d013      	beq.n	800696e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f023 0307 	bic.w	r3, r3, #7
 800694c:	3308      	adds	r3, #8
 800694e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f003 0307 	and.w	r3, r3, #7
 8006956:	2b00      	cmp	r3, #0
 8006958:	d009      	beq.n	800696e <pvPortMalloc+0x6a>
 800695a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800695e:	f383 8811 	msr	BASEPRI, r3
 8006962:	f3bf 8f6f 	isb	sy
 8006966:	f3bf 8f4f 	dsb	sy
 800696a:	617b      	str	r3, [r7, #20]
 800696c:	e7fe      	b.n	800696c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d068      	beq.n	8006a46 <pvPortMalloc+0x142>
 8006974:	4b41      	ldr	r3, [pc, #260]	; (8006a7c <pvPortMalloc+0x178>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	429a      	cmp	r2, r3
 800697c:	d863      	bhi.n	8006a46 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800697e:	4b40      	ldr	r3, [pc, #256]	; (8006a80 <pvPortMalloc+0x17c>)
 8006980:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006982:	4b3f      	ldr	r3, [pc, #252]	; (8006a80 <pvPortMalloc+0x17c>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006988:	e004      	b.n	8006994 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800698a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800698e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	429a      	cmp	r2, r3
 800699c:	d903      	bls.n	80069a6 <pvPortMalloc+0xa2>
 800699e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d1f1      	bne.n	800698a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80069a6:	4b33      	ldr	r3, [pc, #204]	; (8006a74 <pvPortMalloc+0x170>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d04a      	beq.n	8006a46 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80069b0:	6a3b      	ldr	r3, [r7, #32]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	2208      	movs	r2, #8
 80069b6:	4413      	add	r3, r2
 80069b8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80069ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	6a3b      	ldr	r3, [r7, #32]
 80069c0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80069c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c4:	685a      	ldr	r2, [r3, #4]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	1ad2      	subs	r2, r2, r3
 80069ca:	2308      	movs	r3, #8
 80069cc:	005b      	lsls	r3, r3, #1
 80069ce:	429a      	cmp	r2, r3
 80069d0:	d91e      	bls.n	8006a10 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80069d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4413      	add	r3, r2
 80069d8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	f003 0307 	and.w	r3, r3, #7
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d009      	beq.n	80069f8 <pvPortMalloc+0xf4>
 80069e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e8:	f383 8811 	msr	BASEPRI, r3
 80069ec:	f3bf 8f6f 	isb	sy
 80069f0:	f3bf 8f4f 	dsb	sy
 80069f4:	613b      	str	r3, [r7, #16]
 80069f6:	e7fe      	b.n	80069f6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80069f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fa:	685a      	ldr	r2, [r3, #4]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	1ad2      	subs	r2, r2, r3
 8006a00:	69bb      	ldr	r3, [r7, #24]
 8006a02:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006a0a:	69b8      	ldr	r0, [r7, #24]
 8006a0c:	f000 f8f6 	bl	8006bfc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006a10:	4b1a      	ldr	r3, [pc, #104]	; (8006a7c <pvPortMalloc+0x178>)
 8006a12:	681a      	ldr	r2, [r3, #0]
 8006a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	1ad3      	subs	r3, r2, r3
 8006a1a:	4a18      	ldr	r2, [pc, #96]	; (8006a7c <pvPortMalloc+0x178>)
 8006a1c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006a1e:	4b17      	ldr	r3, [pc, #92]	; (8006a7c <pvPortMalloc+0x178>)
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	4b18      	ldr	r3, [pc, #96]	; (8006a84 <pvPortMalloc+0x180>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d203      	bcs.n	8006a32 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006a2a:	4b14      	ldr	r3, [pc, #80]	; (8006a7c <pvPortMalloc+0x178>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a15      	ldr	r2, [pc, #84]	; (8006a84 <pvPortMalloc+0x180>)
 8006a30:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a34:	685a      	ldr	r2, [r3, #4]
 8006a36:	4b10      	ldr	r3, [pc, #64]	; (8006a78 <pvPortMalloc+0x174>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	431a      	orrs	r2, r3
 8006a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a42:	2200      	movs	r2, #0
 8006a44:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006a46:	f7fe fdcb 	bl	80055e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a4a:	69fb      	ldr	r3, [r7, #28]
 8006a4c:	f003 0307 	and.w	r3, r3, #7
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d009      	beq.n	8006a68 <pvPortMalloc+0x164>
 8006a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a58:	f383 8811 	msr	BASEPRI, r3
 8006a5c:	f3bf 8f6f 	isb	sy
 8006a60:	f3bf 8f4f 	dsb	sy
 8006a64:	60fb      	str	r3, [r7, #12]
 8006a66:	e7fe      	b.n	8006a66 <pvPortMalloc+0x162>
	return pvReturn;
 8006a68:	69fb      	ldr	r3, [r7, #28]
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3728      	adds	r7, #40	; 0x28
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
 8006a72:	bf00      	nop
 8006a74:	200019d0 	.word	0x200019d0
 8006a78:	200019dc 	.word	0x200019dc
 8006a7c:	200019d4 	.word	0x200019d4
 8006a80:	200019c8 	.word	0x200019c8
 8006a84:	200019d8 	.word	0x200019d8

08006a88 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b086      	sub	sp, #24
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d046      	beq.n	8006b28 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006a9a:	2308      	movs	r3, #8
 8006a9c:	425b      	negs	r3, r3
 8006a9e:	697a      	ldr	r2, [r7, #20]
 8006aa0:	4413      	add	r3, r2
 8006aa2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	685a      	ldr	r2, [r3, #4]
 8006aac:	4b20      	ldr	r3, [pc, #128]	; (8006b30 <vPortFree+0xa8>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4013      	ands	r3, r2
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d109      	bne.n	8006aca <vPortFree+0x42>
 8006ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aba:	f383 8811 	msr	BASEPRI, r3
 8006abe:	f3bf 8f6f 	isb	sy
 8006ac2:	f3bf 8f4f 	dsb	sy
 8006ac6:	60fb      	str	r3, [r7, #12]
 8006ac8:	e7fe      	b.n	8006ac8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d009      	beq.n	8006ae6 <vPortFree+0x5e>
 8006ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad6:	f383 8811 	msr	BASEPRI, r3
 8006ada:	f3bf 8f6f 	isb	sy
 8006ade:	f3bf 8f4f 	dsb	sy
 8006ae2:	60bb      	str	r3, [r7, #8]
 8006ae4:	e7fe      	b.n	8006ae4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	685a      	ldr	r2, [r3, #4]
 8006aea:	4b11      	ldr	r3, [pc, #68]	; (8006b30 <vPortFree+0xa8>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4013      	ands	r3, r2
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d019      	beq.n	8006b28 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d115      	bne.n	8006b28 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	685a      	ldr	r2, [r3, #4]
 8006b00:	4b0b      	ldr	r3, [pc, #44]	; (8006b30 <vPortFree+0xa8>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	43db      	mvns	r3, r3
 8006b06:	401a      	ands	r2, r3
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006b0c:	f7fe fd5a 	bl	80055c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	685a      	ldr	r2, [r3, #4]
 8006b14:	4b07      	ldr	r3, [pc, #28]	; (8006b34 <vPortFree+0xac>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4413      	add	r3, r2
 8006b1a:	4a06      	ldr	r2, [pc, #24]	; (8006b34 <vPortFree+0xac>)
 8006b1c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006b1e:	6938      	ldr	r0, [r7, #16]
 8006b20:	f000 f86c 	bl	8006bfc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006b24:	f7fe fd5c 	bl	80055e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006b28:	bf00      	nop
 8006b2a:	3718      	adds	r7, #24
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}
 8006b30:	200019dc 	.word	0x200019dc
 8006b34:	200019d4 	.word	0x200019d4

08006b38 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b085      	sub	sp, #20
 8006b3c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006b3e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006b42:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006b44:	4b27      	ldr	r3, [pc, #156]	; (8006be4 <prvHeapInit+0xac>)
 8006b46:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f003 0307 	and.w	r3, r3, #7
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d00c      	beq.n	8006b6c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	3307      	adds	r3, #7
 8006b56:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f023 0307 	bic.w	r3, r3, #7
 8006b5e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006b60:	68ba      	ldr	r2, [r7, #8]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	1ad3      	subs	r3, r2, r3
 8006b66:	4a1f      	ldr	r2, [pc, #124]	; (8006be4 <prvHeapInit+0xac>)
 8006b68:	4413      	add	r3, r2
 8006b6a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006b70:	4a1d      	ldr	r2, [pc, #116]	; (8006be8 <prvHeapInit+0xb0>)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006b76:	4b1c      	ldr	r3, [pc, #112]	; (8006be8 <prvHeapInit+0xb0>)
 8006b78:	2200      	movs	r2, #0
 8006b7a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	68ba      	ldr	r2, [r7, #8]
 8006b80:	4413      	add	r3, r2
 8006b82:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006b84:	2208      	movs	r2, #8
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	1a9b      	subs	r3, r3, r2
 8006b8a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f023 0307 	bic.w	r3, r3, #7
 8006b92:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	4a15      	ldr	r2, [pc, #84]	; (8006bec <prvHeapInit+0xb4>)
 8006b98:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006b9a:	4b14      	ldr	r3, [pc, #80]	; (8006bec <prvHeapInit+0xb4>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006ba2:	4b12      	ldr	r3, [pc, #72]	; (8006bec <prvHeapInit+0xb4>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	68fa      	ldr	r2, [r7, #12]
 8006bb2:	1ad2      	subs	r2, r2, r3
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006bb8:	4b0c      	ldr	r3, [pc, #48]	; (8006bec <prvHeapInit+0xb4>)
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	4a0a      	ldr	r2, [pc, #40]	; (8006bf0 <prvHeapInit+0xb8>)
 8006bc6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	4a09      	ldr	r2, [pc, #36]	; (8006bf4 <prvHeapInit+0xbc>)
 8006bce:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006bd0:	4b09      	ldr	r3, [pc, #36]	; (8006bf8 <prvHeapInit+0xc0>)
 8006bd2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006bd6:	601a      	str	r2, [r3, #0]
}
 8006bd8:	bf00      	nop
 8006bda:	3714      	adds	r7, #20
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bc80      	pop	{r7}
 8006be0:	4770      	bx	lr
 8006be2:	bf00      	nop
 8006be4:	20000dc8 	.word	0x20000dc8
 8006be8:	200019c8 	.word	0x200019c8
 8006bec:	200019d0 	.word	0x200019d0
 8006bf0:	200019d8 	.word	0x200019d8
 8006bf4:	200019d4 	.word	0x200019d4
 8006bf8:	200019dc 	.word	0x200019dc

08006bfc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b085      	sub	sp, #20
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006c04:	4b27      	ldr	r3, [pc, #156]	; (8006ca4 <prvInsertBlockIntoFreeList+0xa8>)
 8006c06:	60fb      	str	r3, [r7, #12]
 8006c08:	e002      	b.n	8006c10 <prvInsertBlockIntoFreeList+0x14>
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	60fb      	str	r3, [r7, #12]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	429a      	cmp	r2, r3
 8006c18:	d8f7      	bhi.n	8006c0a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	68ba      	ldr	r2, [r7, #8]
 8006c24:	4413      	add	r3, r2
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d108      	bne.n	8006c3e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	685a      	ldr	r2, [r3, #4]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	441a      	add	r2, r3
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	68ba      	ldr	r2, [r7, #8]
 8006c48:	441a      	add	r2, r3
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d118      	bne.n	8006c84 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	4b14      	ldr	r3, [pc, #80]	; (8006ca8 <prvInsertBlockIntoFreeList+0xac>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d00d      	beq.n	8006c7a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	685a      	ldr	r2, [r3, #4]
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	441a      	add	r2, r3
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	601a      	str	r2, [r3, #0]
 8006c78:	e008      	b.n	8006c8c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006c7a:	4b0b      	ldr	r3, [pc, #44]	; (8006ca8 <prvInsertBlockIntoFreeList+0xac>)
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	601a      	str	r2, [r3, #0]
 8006c82:	e003      	b.n	8006c8c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006c8c:	68fa      	ldr	r2, [r7, #12]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d002      	beq.n	8006c9a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c9a:	bf00      	nop
 8006c9c:	3714      	adds	r7, #20
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bc80      	pop	{r7}
 8006ca2:	4770      	bx	lr
 8006ca4:	200019c8 	.word	0x200019c8
 8006ca8:	200019d0 	.word	0x200019d0

08006cac <__errno>:
 8006cac:	4b01      	ldr	r3, [pc, #4]	; (8006cb4 <__errno+0x8>)
 8006cae:	6818      	ldr	r0, [r3, #0]
 8006cb0:	4770      	bx	lr
 8006cb2:	bf00      	nop
 8006cb4:	20000024 	.word	0x20000024

08006cb8 <__libc_init_array>:
 8006cb8:	b570      	push	{r4, r5, r6, lr}
 8006cba:	2500      	movs	r5, #0
 8006cbc:	4e0c      	ldr	r6, [pc, #48]	; (8006cf0 <__libc_init_array+0x38>)
 8006cbe:	4c0d      	ldr	r4, [pc, #52]	; (8006cf4 <__libc_init_array+0x3c>)
 8006cc0:	1ba4      	subs	r4, r4, r6
 8006cc2:	10a4      	asrs	r4, r4, #2
 8006cc4:	42a5      	cmp	r5, r4
 8006cc6:	d109      	bne.n	8006cdc <__libc_init_array+0x24>
 8006cc8:	f000 fffe 	bl	8007cc8 <_init>
 8006ccc:	2500      	movs	r5, #0
 8006cce:	4e0a      	ldr	r6, [pc, #40]	; (8006cf8 <__libc_init_array+0x40>)
 8006cd0:	4c0a      	ldr	r4, [pc, #40]	; (8006cfc <__libc_init_array+0x44>)
 8006cd2:	1ba4      	subs	r4, r4, r6
 8006cd4:	10a4      	asrs	r4, r4, #2
 8006cd6:	42a5      	cmp	r5, r4
 8006cd8:	d105      	bne.n	8006ce6 <__libc_init_array+0x2e>
 8006cda:	bd70      	pop	{r4, r5, r6, pc}
 8006cdc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006ce0:	4798      	blx	r3
 8006ce2:	3501      	adds	r5, #1
 8006ce4:	e7ee      	b.n	8006cc4 <__libc_init_array+0xc>
 8006ce6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006cea:	4798      	blx	r3
 8006cec:	3501      	adds	r5, #1
 8006cee:	e7f2      	b.n	8006cd6 <__libc_init_array+0x1e>
 8006cf0:	0800805c 	.word	0x0800805c
 8006cf4:	0800805c 	.word	0x0800805c
 8006cf8:	0800805c 	.word	0x0800805c
 8006cfc:	08008060 	.word	0x08008060

08006d00 <memcpy>:
 8006d00:	b510      	push	{r4, lr}
 8006d02:	1e43      	subs	r3, r0, #1
 8006d04:	440a      	add	r2, r1
 8006d06:	4291      	cmp	r1, r2
 8006d08:	d100      	bne.n	8006d0c <memcpy+0xc>
 8006d0a:	bd10      	pop	{r4, pc}
 8006d0c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d10:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d14:	e7f7      	b.n	8006d06 <memcpy+0x6>

08006d16 <memset>:
 8006d16:	4603      	mov	r3, r0
 8006d18:	4402      	add	r2, r0
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d100      	bne.n	8006d20 <memset+0xa>
 8006d1e:	4770      	bx	lr
 8006d20:	f803 1b01 	strb.w	r1, [r3], #1
 8006d24:	e7f9      	b.n	8006d1a <memset+0x4>
	...

08006d28 <_puts_r>:
 8006d28:	b570      	push	{r4, r5, r6, lr}
 8006d2a:	460e      	mov	r6, r1
 8006d2c:	4605      	mov	r5, r0
 8006d2e:	b118      	cbz	r0, 8006d38 <_puts_r+0x10>
 8006d30:	6983      	ldr	r3, [r0, #24]
 8006d32:	b90b      	cbnz	r3, 8006d38 <_puts_r+0x10>
 8006d34:	f000 fa46 	bl	80071c4 <__sinit>
 8006d38:	69ab      	ldr	r3, [r5, #24]
 8006d3a:	68ac      	ldr	r4, [r5, #8]
 8006d3c:	b913      	cbnz	r3, 8006d44 <_puts_r+0x1c>
 8006d3e:	4628      	mov	r0, r5
 8006d40:	f000 fa40 	bl	80071c4 <__sinit>
 8006d44:	4b23      	ldr	r3, [pc, #140]	; (8006dd4 <_puts_r+0xac>)
 8006d46:	429c      	cmp	r4, r3
 8006d48:	d117      	bne.n	8006d7a <_puts_r+0x52>
 8006d4a:	686c      	ldr	r4, [r5, #4]
 8006d4c:	89a3      	ldrh	r3, [r4, #12]
 8006d4e:	071b      	lsls	r3, r3, #28
 8006d50:	d51d      	bpl.n	8006d8e <_puts_r+0x66>
 8006d52:	6923      	ldr	r3, [r4, #16]
 8006d54:	b1db      	cbz	r3, 8006d8e <_puts_r+0x66>
 8006d56:	3e01      	subs	r6, #1
 8006d58:	68a3      	ldr	r3, [r4, #8]
 8006d5a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006d5e:	3b01      	subs	r3, #1
 8006d60:	60a3      	str	r3, [r4, #8]
 8006d62:	b9e9      	cbnz	r1, 8006da0 <_puts_r+0x78>
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	da2e      	bge.n	8006dc6 <_puts_r+0x9e>
 8006d68:	4622      	mov	r2, r4
 8006d6a:	210a      	movs	r1, #10
 8006d6c:	4628      	mov	r0, r5
 8006d6e:	f000 f879 	bl	8006e64 <__swbuf_r>
 8006d72:	3001      	adds	r0, #1
 8006d74:	d011      	beq.n	8006d9a <_puts_r+0x72>
 8006d76:	200a      	movs	r0, #10
 8006d78:	e011      	b.n	8006d9e <_puts_r+0x76>
 8006d7a:	4b17      	ldr	r3, [pc, #92]	; (8006dd8 <_puts_r+0xb0>)
 8006d7c:	429c      	cmp	r4, r3
 8006d7e:	d101      	bne.n	8006d84 <_puts_r+0x5c>
 8006d80:	68ac      	ldr	r4, [r5, #8]
 8006d82:	e7e3      	b.n	8006d4c <_puts_r+0x24>
 8006d84:	4b15      	ldr	r3, [pc, #84]	; (8006ddc <_puts_r+0xb4>)
 8006d86:	429c      	cmp	r4, r3
 8006d88:	bf08      	it	eq
 8006d8a:	68ec      	ldreq	r4, [r5, #12]
 8006d8c:	e7de      	b.n	8006d4c <_puts_r+0x24>
 8006d8e:	4621      	mov	r1, r4
 8006d90:	4628      	mov	r0, r5
 8006d92:	f000 f8b9 	bl	8006f08 <__swsetup_r>
 8006d96:	2800      	cmp	r0, #0
 8006d98:	d0dd      	beq.n	8006d56 <_puts_r+0x2e>
 8006d9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d9e:	bd70      	pop	{r4, r5, r6, pc}
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	da04      	bge.n	8006dae <_puts_r+0x86>
 8006da4:	69a2      	ldr	r2, [r4, #24]
 8006da6:	429a      	cmp	r2, r3
 8006da8:	dc06      	bgt.n	8006db8 <_puts_r+0x90>
 8006daa:	290a      	cmp	r1, #10
 8006dac:	d004      	beq.n	8006db8 <_puts_r+0x90>
 8006dae:	6823      	ldr	r3, [r4, #0]
 8006db0:	1c5a      	adds	r2, r3, #1
 8006db2:	6022      	str	r2, [r4, #0]
 8006db4:	7019      	strb	r1, [r3, #0]
 8006db6:	e7cf      	b.n	8006d58 <_puts_r+0x30>
 8006db8:	4622      	mov	r2, r4
 8006dba:	4628      	mov	r0, r5
 8006dbc:	f000 f852 	bl	8006e64 <__swbuf_r>
 8006dc0:	3001      	adds	r0, #1
 8006dc2:	d1c9      	bne.n	8006d58 <_puts_r+0x30>
 8006dc4:	e7e9      	b.n	8006d9a <_puts_r+0x72>
 8006dc6:	200a      	movs	r0, #10
 8006dc8:	6823      	ldr	r3, [r4, #0]
 8006dca:	1c5a      	adds	r2, r3, #1
 8006dcc:	6022      	str	r2, [r4, #0]
 8006dce:	7018      	strb	r0, [r3, #0]
 8006dd0:	e7e5      	b.n	8006d9e <_puts_r+0x76>
 8006dd2:	bf00      	nop
 8006dd4:	08007fe8 	.word	0x08007fe8
 8006dd8:	08008008 	.word	0x08008008
 8006ddc:	08007fc8 	.word	0x08007fc8

08006de0 <puts>:
 8006de0:	4b02      	ldr	r3, [pc, #8]	; (8006dec <puts+0xc>)
 8006de2:	4601      	mov	r1, r0
 8006de4:	6818      	ldr	r0, [r3, #0]
 8006de6:	f7ff bf9f 	b.w	8006d28 <_puts_r>
 8006dea:	bf00      	nop
 8006dec:	20000024 	.word	0x20000024

08006df0 <_vsniprintf_r>:
 8006df0:	b530      	push	{r4, r5, lr}
 8006df2:	1e14      	subs	r4, r2, #0
 8006df4:	4605      	mov	r5, r0
 8006df6:	b09b      	sub	sp, #108	; 0x6c
 8006df8:	4618      	mov	r0, r3
 8006dfa:	da05      	bge.n	8006e08 <_vsniprintf_r+0x18>
 8006dfc:	238b      	movs	r3, #139	; 0x8b
 8006dfe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e02:	602b      	str	r3, [r5, #0]
 8006e04:	b01b      	add	sp, #108	; 0x6c
 8006e06:	bd30      	pop	{r4, r5, pc}
 8006e08:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006e0c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8006e10:	bf0c      	ite	eq
 8006e12:	4623      	moveq	r3, r4
 8006e14:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8006e18:	9302      	str	r3, [sp, #8]
 8006e1a:	9305      	str	r3, [sp, #20]
 8006e1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006e20:	9100      	str	r1, [sp, #0]
 8006e22:	9104      	str	r1, [sp, #16]
 8006e24:	f8ad 300e 	strh.w	r3, [sp, #14]
 8006e28:	4602      	mov	r2, r0
 8006e2a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006e2c:	4669      	mov	r1, sp
 8006e2e:	4628      	mov	r0, r5
 8006e30:	f000 fbb6 	bl	80075a0 <_svfiprintf_r>
 8006e34:	1c43      	adds	r3, r0, #1
 8006e36:	bfbc      	itt	lt
 8006e38:	238b      	movlt	r3, #139	; 0x8b
 8006e3a:	602b      	strlt	r3, [r5, #0]
 8006e3c:	2c00      	cmp	r4, #0
 8006e3e:	d0e1      	beq.n	8006e04 <_vsniprintf_r+0x14>
 8006e40:	2200      	movs	r2, #0
 8006e42:	9b00      	ldr	r3, [sp, #0]
 8006e44:	701a      	strb	r2, [r3, #0]
 8006e46:	e7dd      	b.n	8006e04 <_vsniprintf_r+0x14>

08006e48 <vsniprintf>:
 8006e48:	b507      	push	{r0, r1, r2, lr}
 8006e4a:	9300      	str	r3, [sp, #0]
 8006e4c:	4613      	mov	r3, r2
 8006e4e:	460a      	mov	r2, r1
 8006e50:	4601      	mov	r1, r0
 8006e52:	4803      	ldr	r0, [pc, #12]	; (8006e60 <vsniprintf+0x18>)
 8006e54:	6800      	ldr	r0, [r0, #0]
 8006e56:	f7ff ffcb 	bl	8006df0 <_vsniprintf_r>
 8006e5a:	b003      	add	sp, #12
 8006e5c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006e60:	20000024 	.word	0x20000024

08006e64 <__swbuf_r>:
 8006e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e66:	460e      	mov	r6, r1
 8006e68:	4614      	mov	r4, r2
 8006e6a:	4605      	mov	r5, r0
 8006e6c:	b118      	cbz	r0, 8006e76 <__swbuf_r+0x12>
 8006e6e:	6983      	ldr	r3, [r0, #24]
 8006e70:	b90b      	cbnz	r3, 8006e76 <__swbuf_r+0x12>
 8006e72:	f000 f9a7 	bl	80071c4 <__sinit>
 8006e76:	4b21      	ldr	r3, [pc, #132]	; (8006efc <__swbuf_r+0x98>)
 8006e78:	429c      	cmp	r4, r3
 8006e7a:	d12a      	bne.n	8006ed2 <__swbuf_r+0x6e>
 8006e7c:	686c      	ldr	r4, [r5, #4]
 8006e7e:	69a3      	ldr	r3, [r4, #24]
 8006e80:	60a3      	str	r3, [r4, #8]
 8006e82:	89a3      	ldrh	r3, [r4, #12]
 8006e84:	071a      	lsls	r2, r3, #28
 8006e86:	d52e      	bpl.n	8006ee6 <__swbuf_r+0x82>
 8006e88:	6923      	ldr	r3, [r4, #16]
 8006e8a:	b363      	cbz	r3, 8006ee6 <__swbuf_r+0x82>
 8006e8c:	6923      	ldr	r3, [r4, #16]
 8006e8e:	6820      	ldr	r0, [r4, #0]
 8006e90:	b2f6      	uxtb	r6, r6
 8006e92:	1ac0      	subs	r0, r0, r3
 8006e94:	6963      	ldr	r3, [r4, #20]
 8006e96:	4637      	mov	r7, r6
 8006e98:	4283      	cmp	r3, r0
 8006e9a:	dc04      	bgt.n	8006ea6 <__swbuf_r+0x42>
 8006e9c:	4621      	mov	r1, r4
 8006e9e:	4628      	mov	r0, r5
 8006ea0:	f000 f926 	bl	80070f0 <_fflush_r>
 8006ea4:	bb28      	cbnz	r0, 8006ef2 <__swbuf_r+0x8e>
 8006ea6:	68a3      	ldr	r3, [r4, #8]
 8006ea8:	3001      	adds	r0, #1
 8006eaa:	3b01      	subs	r3, #1
 8006eac:	60a3      	str	r3, [r4, #8]
 8006eae:	6823      	ldr	r3, [r4, #0]
 8006eb0:	1c5a      	adds	r2, r3, #1
 8006eb2:	6022      	str	r2, [r4, #0]
 8006eb4:	701e      	strb	r6, [r3, #0]
 8006eb6:	6963      	ldr	r3, [r4, #20]
 8006eb8:	4283      	cmp	r3, r0
 8006eba:	d004      	beq.n	8006ec6 <__swbuf_r+0x62>
 8006ebc:	89a3      	ldrh	r3, [r4, #12]
 8006ebe:	07db      	lsls	r3, r3, #31
 8006ec0:	d519      	bpl.n	8006ef6 <__swbuf_r+0x92>
 8006ec2:	2e0a      	cmp	r6, #10
 8006ec4:	d117      	bne.n	8006ef6 <__swbuf_r+0x92>
 8006ec6:	4621      	mov	r1, r4
 8006ec8:	4628      	mov	r0, r5
 8006eca:	f000 f911 	bl	80070f0 <_fflush_r>
 8006ece:	b190      	cbz	r0, 8006ef6 <__swbuf_r+0x92>
 8006ed0:	e00f      	b.n	8006ef2 <__swbuf_r+0x8e>
 8006ed2:	4b0b      	ldr	r3, [pc, #44]	; (8006f00 <__swbuf_r+0x9c>)
 8006ed4:	429c      	cmp	r4, r3
 8006ed6:	d101      	bne.n	8006edc <__swbuf_r+0x78>
 8006ed8:	68ac      	ldr	r4, [r5, #8]
 8006eda:	e7d0      	b.n	8006e7e <__swbuf_r+0x1a>
 8006edc:	4b09      	ldr	r3, [pc, #36]	; (8006f04 <__swbuf_r+0xa0>)
 8006ede:	429c      	cmp	r4, r3
 8006ee0:	bf08      	it	eq
 8006ee2:	68ec      	ldreq	r4, [r5, #12]
 8006ee4:	e7cb      	b.n	8006e7e <__swbuf_r+0x1a>
 8006ee6:	4621      	mov	r1, r4
 8006ee8:	4628      	mov	r0, r5
 8006eea:	f000 f80d 	bl	8006f08 <__swsetup_r>
 8006eee:	2800      	cmp	r0, #0
 8006ef0:	d0cc      	beq.n	8006e8c <__swbuf_r+0x28>
 8006ef2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006ef6:	4638      	mov	r0, r7
 8006ef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006efa:	bf00      	nop
 8006efc:	08007fe8 	.word	0x08007fe8
 8006f00:	08008008 	.word	0x08008008
 8006f04:	08007fc8 	.word	0x08007fc8

08006f08 <__swsetup_r>:
 8006f08:	4b32      	ldr	r3, [pc, #200]	; (8006fd4 <__swsetup_r+0xcc>)
 8006f0a:	b570      	push	{r4, r5, r6, lr}
 8006f0c:	681d      	ldr	r5, [r3, #0]
 8006f0e:	4606      	mov	r6, r0
 8006f10:	460c      	mov	r4, r1
 8006f12:	b125      	cbz	r5, 8006f1e <__swsetup_r+0x16>
 8006f14:	69ab      	ldr	r3, [r5, #24]
 8006f16:	b913      	cbnz	r3, 8006f1e <__swsetup_r+0x16>
 8006f18:	4628      	mov	r0, r5
 8006f1a:	f000 f953 	bl	80071c4 <__sinit>
 8006f1e:	4b2e      	ldr	r3, [pc, #184]	; (8006fd8 <__swsetup_r+0xd0>)
 8006f20:	429c      	cmp	r4, r3
 8006f22:	d10f      	bne.n	8006f44 <__swsetup_r+0x3c>
 8006f24:	686c      	ldr	r4, [r5, #4]
 8006f26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f2a:	b29a      	uxth	r2, r3
 8006f2c:	0715      	lsls	r5, r2, #28
 8006f2e:	d42c      	bmi.n	8006f8a <__swsetup_r+0x82>
 8006f30:	06d0      	lsls	r0, r2, #27
 8006f32:	d411      	bmi.n	8006f58 <__swsetup_r+0x50>
 8006f34:	2209      	movs	r2, #9
 8006f36:	6032      	str	r2, [r6, #0]
 8006f38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f3c:	81a3      	strh	r3, [r4, #12]
 8006f3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f42:	e03e      	b.n	8006fc2 <__swsetup_r+0xba>
 8006f44:	4b25      	ldr	r3, [pc, #148]	; (8006fdc <__swsetup_r+0xd4>)
 8006f46:	429c      	cmp	r4, r3
 8006f48:	d101      	bne.n	8006f4e <__swsetup_r+0x46>
 8006f4a:	68ac      	ldr	r4, [r5, #8]
 8006f4c:	e7eb      	b.n	8006f26 <__swsetup_r+0x1e>
 8006f4e:	4b24      	ldr	r3, [pc, #144]	; (8006fe0 <__swsetup_r+0xd8>)
 8006f50:	429c      	cmp	r4, r3
 8006f52:	bf08      	it	eq
 8006f54:	68ec      	ldreq	r4, [r5, #12]
 8006f56:	e7e6      	b.n	8006f26 <__swsetup_r+0x1e>
 8006f58:	0751      	lsls	r1, r2, #29
 8006f5a:	d512      	bpl.n	8006f82 <__swsetup_r+0x7a>
 8006f5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f5e:	b141      	cbz	r1, 8006f72 <__swsetup_r+0x6a>
 8006f60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f64:	4299      	cmp	r1, r3
 8006f66:	d002      	beq.n	8006f6e <__swsetup_r+0x66>
 8006f68:	4630      	mov	r0, r6
 8006f6a:	f000 fa19 	bl	80073a0 <_free_r>
 8006f6e:	2300      	movs	r3, #0
 8006f70:	6363      	str	r3, [r4, #52]	; 0x34
 8006f72:	89a3      	ldrh	r3, [r4, #12]
 8006f74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006f78:	81a3      	strh	r3, [r4, #12]
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	6063      	str	r3, [r4, #4]
 8006f7e:	6923      	ldr	r3, [r4, #16]
 8006f80:	6023      	str	r3, [r4, #0]
 8006f82:	89a3      	ldrh	r3, [r4, #12]
 8006f84:	f043 0308 	orr.w	r3, r3, #8
 8006f88:	81a3      	strh	r3, [r4, #12]
 8006f8a:	6923      	ldr	r3, [r4, #16]
 8006f8c:	b94b      	cbnz	r3, 8006fa2 <__swsetup_r+0x9a>
 8006f8e:	89a3      	ldrh	r3, [r4, #12]
 8006f90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006f94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f98:	d003      	beq.n	8006fa2 <__swsetup_r+0x9a>
 8006f9a:	4621      	mov	r1, r4
 8006f9c:	4630      	mov	r0, r6
 8006f9e:	f000 f9bf 	bl	8007320 <__smakebuf_r>
 8006fa2:	89a2      	ldrh	r2, [r4, #12]
 8006fa4:	f012 0301 	ands.w	r3, r2, #1
 8006fa8:	d00c      	beq.n	8006fc4 <__swsetup_r+0xbc>
 8006faa:	2300      	movs	r3, #0
 8006fac:	60a3      	str	r3, [r4, #8]
 8006fae:	6963      	ldr	r3, [r4, #20]
 8006fb0:	425b      	negs	r3, r3
 8006fb2:	61a3      	str	r3, [r4, #24]
 8006fb4:	6923      	ldr	r3, [r4, #16]
 8006fb6:	b953      	cbnz	r3, 8006fce <__swsetup_r+0xc6>
 8006fb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fbc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006fc0:	d1ba      	bne.n	8006f38 <__swsetup_r+0x30>
 8006fc2:	bd70      	pop	{r4, r5, r6, pc}
 8006fc4:	0792      	lsls	r2, r2, #30
 8006fc6:	bf58      	it	pl
 8006fc8:	6963      	ldrpl	r3, [r4, #20]
 8006fca:	60a3      	str	r3, [r4, #8]
 8006fcc:	e7f2      	b.n	8006fb4 <__swsetup_r+0xac>
 8006fce:	2000      	movs	r0, #0
 8006fd0:	e7f7      	b.n	8006fc2 <__swsetup_r+0xba>
 8006fd2:	bf00      	nop
 8006fd4:	20000024 	.word	0x20000024
 8006fd8:	08007fe8 	.word	0x08007fe8
 8006fdc:	08008008 	.word	0x08008008
 8006fe0:	08007fc8 	.word	0x08007fc8

08006fe4 <__sflush_r>:
 8006fe4:	898a      	ldrh	r2, [r1, #12]
 8006fe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fea:	4605      	mov	r5, r0
 8006fec:	0710      	lsls	r0, r2, #28
 8006fee:	460c      	mov	r4, r1
 8006ff0:	d458      	bmi.n	80070a4 <__sflush_r+0xc0>
 8006ff2:	684b      	ldr	r3, [r1, #4]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	dc05      	bgt.n	8007004 <__sflush_r+0x20>
 8006ff8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	dc02      	bgt.n	8007004 <__sflush_r+0x20>
 8006ffe:	2000      	movs	r0, #0
 8007000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007004:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007006:	2e00      	cmp	r6, #0
 8007008:	d0f9      	beq.n	8006ffe <__sflush_r+0x1a>
 800700a:	2300      	movs	r3, #0
 800700c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007010:	682f      	ldr	r7, [r5, #0]
 8007012:	6a21      	ldr	r1, [r4, #32]
 8007014:	602b      	str	r3, [r5, #0]
 8007016:	d032      	beq.n	800707e <__sflush_r+0x9a>
 8007018:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800701a:	89a3      	ldrh	r3, [r4, #12]
 800701c:	075a      	lsls	r2, r3, #29
 800701e:	d505      	bpl.n	800702c <__sflush_r+0x48>
 8007020:	6863      	ldr	r3, [r4, #4]
 8007022:	1ac0      	subs	r0, r0, r3
 8007024:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007026:	b10b      	cbz	r3, 800702c <__sflush_r+0x48>
 8007028:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800702a:	1ac0      	subs	r0, r0, r3
 800702c:	2300      	movs	r3, #0
 800702e:	4602      	mov	r2, r0
 8007030:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007032:	6a21      	ldr	r1, [r4, #32]
 8007034:	4628      	mov	r0, r5
 8007036:	47b0      	blx	r6
 8007038:	1c43      	adds	r3, r0, #1
 800703a:	89a3      	ldrh	r3, [r4, #12]
 800703c:	d106      	bne.n	800704c <__sflush_r+0x68>
 800703e:	6829      	ldr	r1, [r5, #0]
 8007040:	291d      	cmp	r1, #29
 8007042:	d848      	bhi.n	80070d6 <__sflush_r+0xf2>
 8007044:	4a29      	ldr	r2, [pc, #164]	; (80070ec <__sflush_r+0x108>)
 8007046:	40ca      	lsrs	r2, r1
 8007048:	07d6      	lsls	r6, r2, #31
 800704a:	d544      	bpl.n	80070d6 <__sflush_r+0xf2>
 800704c:	2200      	movs	r2, #0
 800704e:	6062      	str	r2, [r4, #4]
 8007050:	6922      	ldr	r2, [r4, #16]
 8007052:	04d9      	lsls	r1, r3, #19
 8007054:	6022      	str	r2, [r4, #0]
 8007056:	d504      	bpl.n	8007062 <__sflush_r+0x7e>
 8007058:	1c42      	adds	r2, r0, #1
 800705a:	d101      	bne.n	8007060 <__sflush_r+0x7c>
 800705c:	682b      	ldr	r3, [r5, #0]
 800705e:	b903      	cbnz	r3, 8007062 <__sflush_r+0x7e>
 8007060:	6560      	str	r0, [r4, #84]	; 0x54
 8007062:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007064:	602f      	str	r7, [r5, #0]
 8007066:	2900      	cmp	r1, #0
 8007068:	d0c9      	beq.n	8006ffe <__sflush_r+0x1a>
 800706a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800706e:	4299      	cmp	r1, r3
 8007070:	d002      	beq.n	8007078 <__sflush_r+0x94>
 8007072:	4628      	mov	r0, r5
 8007074:	f000 f994 	bl	80073a0 <_free_r>
 8007078:	2000      	movs	r0, #0
 800707a:	6360      	str	r0, [r4, #52]	; 0x34
 800707c:	e7c0      	b.n	8007000 <__sflush_r+0x1c>
 800707e:	2301      	movs	r3, #1
 8007080:	4628      	mov	r0, r5
 8007082:	47b0      	blx	r6
 8007084:	1c41      	adds	r1, r0, #1
 8007086:	d1c8      	bne.n	800701a <__sflush_r+0x36>
 8007088:	682b      	ldr	r3, [r5, #0]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d0c5      	beq.n	800701a <__sflush_r+0x36>
 800708e:	2b1d      	cmp	r3, #29
 8007090:	d001      	beq.n	8007096 <__sflush_r+0xb2>
 8007092:	2b16      	cmp	r3, #22
 8007094:	d101      	bne.n	800709a <__sflush_r+0xb6>
 8007096:	602f      	str	r7, [r5, #0]
 8007098:	e7b1      	b.n	8006ffe <__sflush_r+0x1a>
 800709a:	89a3      	ldrh	r3, [r4, #12]
 800709c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070a0:	81a3      	strh	r3, [r4, #12]
 80070a2:	e7ad      	b.n	8007000 <__sflush_r+0x1c>
 80070a4:	690f      	ldr	r7, [r1, #16]
 80070a6:	2f00      	cmp	r7, #0
 80070a8:	d0a9      	beq.n	8006ffe <__sflush_r+0x1a>
 80070aa:	0793      	lsls	r3, r2, #30
 80070ac:	bf18      	it	ne
 80070ae:	2300      	movne	r3, #0
 80070b0:	680e      	ldr	r6, [r1, #0]
 80070b2:	bf08      	it	eq
 80070b4:	694b      	ldreq	r3, [r1, #20]
 80070b6:	eba6 0807 	sub.w	r8, r6, r7
 80070ba:	600f      	str	r7, [r1, #0]
 80070bc:	608b      	str	r3, [r1, #8]
 80070be:	f1b8 0f00 	cmp.w	r8, #0
 80070c2:	dd9c      	ble.n	8006ffe <__sflush_r+0x1a>
 80070c4:	4643      	mov	r3, r8
 80070c6:	463a      	mov	r2, r7
 80070c8:	6a21      	ldr	r1, [r4, #32]
 80070ca:	4628      	mov	r0, r5
 80070cc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80070ce:	47b0      	blx	r6
 80070d0:	2800      	cmp	r0, #0
 80070d2:	dc06      	bgt.n	80070e2 <__sflush_r+0xfe>
 80070d4:	89a3      	ldrh	r3, [r4, #12]
 80070d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070da:	81a3      	strh	r3, [r4, #12]
 80070dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80070e0:	e78e      	b.n	8007000 <__sflush_r+0x1c>
 80070e2:	4407      	add	r7, r0
 80070e4:	eba8 0800 	sub.w	r8, r8, r0
 80070e8:	e7e9      	b.n	80070be <__sflush_r+0xda>
 80070ea:	bf00      	nop
 80070ec:	20400001 	.word	0x20400001

080070f0 <_fflush_r>:
 80070f0:	b538      	push	{r3, r4, r5, lr}
 80070f2:	690b      	ldr	r3, [r1, #16]
 80070f4:	4605      	mov	r5, r0
 80070f6:	460c      	mov	r4, r1
 80070f8:	b1db      	cbz	r3, 8007132 <_fflush_r+0x42>
 80070fa:	b118      	cbz	r0, 8007104 <_fflush_r+0x14>
 80070fc:	6983      	ldr	r3, [r0, #24]
 80070fe:	b90b      	cbnz	r3, 8007104 <_fflush_r+0x14>
 8007100:	f000 f860 	bl	80071c4 <__sinit>
 8007104:	4b0c      	ldr	r3, [pc, #48]	; (8007138 <_fflush_r+0x48>)
 8007106:	429c      	cmp	r4, r3
 8007108:	d109      	bne.n	800711e <_fflush_r+0x2e>
 800710a:	686c      	ldr	r4, [r5, #4]
 800710c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007110:	b17b      	cbz	r3, 8007132 <_fflush_r+0x42>
 8007112:	4621      	mov	r1, r4
 8007114:	4628      	mov	r0, r5
 8007116:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800711a:	f7ff bf63 	b.w	8006fe4 <__sflush_r>
 800711e:	4b07      	ldr	r3, [pc, #28]	; (800713c <_fflush_r+0x4c>)
 8007120:	429c      	cmp	r4, r3
 8007122:	d101      	bne.n	8007128 <_fflush_r+0x38>
 8007124:	68ac      	ldr	r4, [r5, #8]
 8007126:	e7f1      	b.n	800710c <_fflush_r+0x1c>
 8007128:	4b05      	ldr	r3, [pc, #20]	; (8007140 <_fflush_r+0x50>)
 800712a:	429c      	cmp	r4, r3
 800712c:	bf08      	it	eq
 800712e:	68ec      	ldreq	r4, [r5, #12]
 8007130:	e7ec      	b.n	800710c <_fflush_r+0x1c>
 8007132:	2000      	movs	r0, #0
 8007134:	bd38      	pop	{r3, r4, r5, pc}
 8007136:	bf00      	nop
 8007138:	08007fe8 	.word	0x08007fe8
 800713c:	08008008 	.word	0x08008008
 8007140:	08007fc8 	.word	0x08007fc8

08007144 <std>:
 8007144:	2300      	movs	r3, #0
 8007146:	b510      	push	{r4, lr}
 8007148:	4604      	mov	r4, r0
 800714a:	e9c0 3300 	strd	r3, r3, [r0]
 800714e:	6083      	str	r3, [r0, #8]
 8007150:	8181      	strh	r1, [r0, #12]
 8007152:	6643      	str	r3, [r0, #100]	; 0x64
 8007154:	81c2      	strh	r2, [r0, #14]
 8007156:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800715a:	6183      	str	r3, [r0, #24]
 800715c:	4619      	mov	r1, r3
 800715e:	2208      	movs	r2, #8
 8007160:	305c      	adds	r0, #92	; 0x5c
 8007162:	f7ff fdd8 	bl	8006d16 <memset>
 8007166:	4b05      	ldr	r3, [pc, #20]	; (800717c <std+0x38>)
 8007168:	6224      	str	r4, [r4, #32]
 800716a:	6263      	str	r3, [r4, #36]	; 0x24
 800716c:	4b04      	ldr	r3, [pc, #16]	; (8007180 <std+0x3c>)
 800716e:	62a3      	str	r3, [r4, #40]	; 0x28
 8007170:	4b04      	ldr	r3, [pc, #16]	; (8007184 <std+0x40>)
 8007172:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007174:	4b04      	ldr	r3, [pc, #16]	; (8007188 <std+0x44>)
 8007176:	6323      	str	r3, [r4, #48]	; 0x30
 8007178:	bd10      	pop	{r4, pc}
 800717a:	bf00      	nop
 800717c:	08007ac1 	.word	0x08007ac1
 8007180:	08007ae3 	.word	0x08007ae3
 8007184:	08007b1b 	.word	0x08007b1b
 8007188:	08007b3f 	.word	0x08007b3f

0800718c <_cleanup_r>:
 800718c:	4901      	ldr	r1, [pc, #4]	; (8007194 <_cleanup_r+0x8>)
 800718e:	f000 b885 	b.w	800729c <_fwalk_reent>
 8007192:	bf00      	nop
 8007194:	080070f1 	.word	0x080070f1

08007198 <__sfmoreglue>:
 8007198:	b570      	push	{r4, r5, r6, lr}
 800719a:	2568      	movs	r5, #104	; 0x68
 800719c:	1e4a      	subs	r2, r1, #1
 800719e:	4355      	muls	r5, r2
 80071a0:	460e      	mov	r6, r1
 80071a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80071a6:	f000 f947 	bl	8007438 <_malloc_r>
 80071aa:	4604      	mov	r4, r0
 80071ac:	b140      	cbz	r0, 80071c0 <__sfmoreglue+0x28>
 80071ae:	2100      	movs	r1, #0
 80071b0:	e9c0 1600 	strd	r1, r6, [r0]
 80071b4:	300c      	adds	r0, #12
 80071b6:	60a0      	str	r0, [r4, #8]
 80071b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80071bc:	f7ff fdab 	bl	8006d16 <memset>
 80071c0:	4620      	mov	r0, r4
 80071c2:	bd70      	pop	{r4, r5, r6, pc}

080071c4 <__sinit>:
 80071c4:	6983      	ldr	r3, [r0, #24]
 80071c6:	b510      	push	{r4, lr}
 80071c8:	4604      	mov	r4, r0
 80071ca:	bb33      	cbnz	r3, 800721a <__sinit+0x56>
 80071cc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80071d0:	6503      	str	r3, [r0, #80]	; 0x50
 80071d2:	4b12      	ldr	r3, [pc, #72]	; (800721c <__sinit+0x58>)
 80071d4:	4a12      	ldr	r2, [pc, #72]	; (8007220 <__sinit+0x5c>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	6282      	str	r2, [r0, #40]	; 0x28
 80071da:	4298      	cmp	r0, r3
 80071dc:	bf04      	itt	eq
 80071de:	2301      	moveq	r3, #1
 80071e0:	6183      	streq	r3, [r0, #24]
 80071e2:	f000 f81f 	bl	8007224 <__sfp>
 80071e6:	6060      	str	r0, [r4, #4]
 80071e8:	4620      	mov	r0, r4
 80071ea:	f000 f81b 	bl	8007224 <__sfp>
 80071ee:	60a0      	str	r0, [r4, #8]
 80071f0:	4620      	mov	r0, r4
 80071f2:	f000 f817 	bl	8007224 <__sfp>
 80071f6:	2200      	movs	r2, #0
 80071f8:	60e0      	str	r0, [r4, #12]
 80071fa:	2104      	movs	r1, #4
 80071fc:	6860      	ldr	r0, [r4, #4]
 80071fe:	f7ff ffa1 	bl	8007144 <std>
 8007202:	2201      	movs	r2, #1
 8007204:	2109      	movs	r1, #9
 8007206:	68a0      	ldr	r0, [r4, #8]
 8007208:	f7ff ff9c 	bl	8007144 <std>
 800720c:	2202      	movs	r2, #2
 800720e:	2112      	movs	r1, #18
 8007210:	68e0      	ldr	r0, [r4, #12]
 8007212:	f7ff ff97 	bl	8007144 <std>
 8007216:	2301      	movs	r3, #1
 8007218:	61a3      	str	r3, [r4, #24]
 800721a:	bd10      	pop	{r4, pc}
 800721c:	08007fc4 	.word	0x08007fc4
 8007220:	0800718d 	.word	0x0800718d

08007224 <__sfp>:
 8007224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007226:	4b1b      	ldr	r3, [pc, #108]	; (8007294 <__sfp+0x70>)
 8007228:	4607      	mov	r7, r0
 800722a:	681e      	ldr	r6, [r3, #0]
 800722c:	69b3      	ldr	r3, [r6, #24]
 800722e:	b913      	cbnz	r3, 8007236 <__sfp+0x12>
 8007230:	4630      	mov	r0, r6
 8007232:	f7ff ffc7 	bl	80071c4 <__sinit>
 8007236:	3648      	adds	r6, #72	; 0x48
 8007238:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800723c:	3b01      	subs	r3, #1
 800723e:	d503      	bpl.n	8007248 <__sfp+0x24>
 8007240:	6833      	ldr	r3, [r6, #0]
 8007242:	b133      	cbz	r3, 8007252 <__sfp+0x2e>
 8007244:	6836      	ldr	r6, [r6, #0]
 8007246:	e7f7      	b.n	8007238 <__sfp+0x14>
 8007248:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800724c:	b16d      	cbz	r5, 800726a <__sfp+0x46>
 800724e:	3468      	adds	r4, #104	; 0x68
 8007250:	e7f4      	b.n	800723c <__sfp+0x18>
 8007252:	2104      	movs	r1, #4
 8007254:	4638      	mov	r0, r7
 8007256:	f7ff ff9f 	bl	8007198 <__sfmoreglue>
 800725a:	6030      	str	r0, [r6, #0]
 800725c:	2800      	cmp	r0, #0
 800725e:	d1f1      	bne.n	8007244 <__sfp+0x20>
 8007260:	230c      	movs	r3, #12
 8007262:	4604      	mov	r4, r0
 8007264:	603b      	str	r3, [r7, #0]
 8007266:	4620      	mov	r0, r4
 8007268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800726a:	4b0b      	ldr	r3, [pc, #44]	; (8007298 <__sfp+0x74>)
 800726c:	6665      	str	r5, [r4, #100]	; 0x64
 800726e:	e9c4 5500 	strd	r5, r5, [r4]
 8007272:	60a5      	str	r5, [r4, #8]
 8007274:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007278:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800727c:	2208      	movs	r2, #8
 800727e:	4629      	mov	r1, r5
 8007280:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007284:	f7ff fd47 	bl	8006d16 <memset>
 8007288:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800728c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007290:	e7e9      	b.n	8007266 <__sfp+0x42>
 8007292:	bf00      	nop
 8007294:	08007fc4 	.word	0x08007fc4
 8007298:	ffff0001 	.word	0xffff0001

0800729c <_fwalk_reent>:
 800729c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072a0:	4680      	mov	r8, r0
 80072a2:	4689      	mov	r9, r1
 80072a4:	2600      	movs	r6, #0
 80072a6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80072aa:	b914      	cbnz	r4, 80072b2 <_fwalk_reent+0x16>
 80072ac:	4630      	mov	r0, r6
 80072ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072b2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80072b6:	3f01      	subs	r7, #1
 80072b8:	d501      	bpl.n	80072be <_fwalk_reent+0x22>
 80072ba:	6824      	ldr	r4, [r4, #0]
 80072bc:	e7f5      	b.n	80072aa <_fwalk_reent+0xe>
 80072be:	89ab      	ldrh	r3, [r5, #12]
 80072c0:	2b01      	cmp	r3, #1
 80072c2:	d907      	bls.n	80072d4 <_fwalk_reent+0x38>
 80072c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80072c8:	3301      	adds	r3, #1
 80072ca:	d003      	beq.n	80072d4 <_fwalk_reent+0x38>
 80072cc:	4629      	mov	r1, r5
 80072ce:	4640      	mov	r0, r8
 80072d0:	47c8      	blx	r9
 80072d2:	4306      	orrs	r6, r0
 80072d4:	3568      	adds	r5, #104	; 0x68
 80072d6:	e7ee      	b.n	80072b6 <_fwalk_reent+0x1a>

080072d8 <__swhatbuf_r>:
 80072d8:	b570      	push	{r4, r5, r6, lr}
 80072da:	460e      	mov	r6, r1
 80072dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072e0:	b096      	sub	sp, #88	; 0x58
 80072e2:	2900      	cmp	r1, #0
 80072e4:	4614      	mov	r4, r2
 80072e6:	461d      	mov	r5, r3
 80072e8:	da07      	bge.n	80072fa <__swhatbuf_r+0x22>
 80072ea:	2300      	movs	r3, #0
 80072ec:	602b      	str	r3, [r5, #0]
 80072ee:	89b3      	ldrh	r3, [r6, #12]
 80072f0:	061a      	lsls	r2, r3, #24
 80072f2:	d410      	bmi.n	8007316 <__swhatbuf_r+0x3e>
 80072f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072f8:	e00e      	b.n	8007318 <__swhatbuf_r+0x40>
 80072fa:	466a      	mov	r2, sp
 80072fc:	f000 fc46 	bl	8007b8c <_fstat_r>
 8007300:	2800      	cmp	r0, #0
 8007302:	dbf2      	blt.n	80072ea <__swhatbuf_r+0x12>
 8007304:	9a01      	ldr	r2, [sp, #4]
 8007306:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800730a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800730e:	425a      	negs	r2, r3
 8007310:	415a      	adcs	r2, r3
 8007312:	602a      	str	r2, [r5, #0]
 8007314:	e7ee      	b.n	80072f4 <__swhatbuf_r+0x1c>
 8007316:	2340      	movs	r3, #64	; 0x40
 8007318:	2000      	movs	r0, #0
 800731a:	6023      	str	r3, [r4, #0]
 800731c:	b016      	add	sp, #88	; 0x58
 800731e:	bd70      	pop	{r4, r5, r6, pc}

08007320 <__smakebuf_r>:
 8007320:	898b      	ldrh	r3, [r1, #12]
 8007322:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007324:	079d      	lsls	r5, r3, #30
 8007326:	4606      	mov	r6, r0
 8007328:	460c      	mov	r4, r1
 800732a:	d507      	bpl.n	800733c <__smakebuf_r+0x1c>
 800732c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007330:	6023      	str	r3, [r4, #0]
 8007332:	6123      	str	r3, [r4, #16]
 8007334:	2301      	movs	r3, #1
 8007336:	6163      	str	r3, [r4, #20]
 8007338:	b002      	add	sp, #8
 800733a:	bd70      	pop	{r4, r5, r6, pc}
 800733c:	ab01      	add	r3, sp, #4
 800733e:	466a      	mov	r2, sp
 8007340:	f7ff ffca 	bl	80072d8 <__swhatbuf_r>
 8007344:	9900      	ldr	r1, [sp, #0]
 8007346:	4605      	mov	r5, r0
 8007348:	4630      	mov	r0, r6
 800734a:	f000 f875 	bl	8007438 <_malloc_r>
 800734e:	b948      	cbnz	r0, 8007364 <__smakebuf_r+0x44>
 8007350:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007354:	059a      	lsls	r2, r3, #22
 8007356:	d4ef      	bmi.n	8007338 <__smakebuf_r+0x18>
 8007358:	f023 0303 	bic.w	r3, r3, #3
 800735c:	f043 0302 	orr.w	r3, r3, #2
 8007360:	81a3      	strh	r3, [r4, #12]
 8007362:	e7e3      	b.n	800732c <__smakebuf_r+0xc>
 8007364:	4b0d      	ldr	r3, [pc, #52]	; (800739c <__smakebuf_r+0x7c>)
 8007366:	62b3      	str	r3, [r6, #40]	; 0x28
 8007368:	89a3      	ldrh	r3, [r4, #12]
 800736a:	6020      	str	r0, [r4, #0]
 800736c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007370:	81a3      	strh	r3, [r4, #12]
 8007372:	9b00      	ldr	r3, [sp, #0]
 8007374:	6120      	str	r0, [r4, #16]
 8007376:	6163      	str	r3, [r4, #20]
 8007378:	9b01      	ldr	r3, [sp, #4]
 800737a:	b15b      	cbz	r3, 8007394 <__smakebuf_r+0x74>
 800737c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007380:	4630      	mov	r0, r6
 8007382:	f000 fc15 	bl	8007bb0 <_isatty_r>
 8007386:	b128      	cbz	r0, 8007394 <__smakebuf_r+0x74>
 8007388:	89a3      	ldrh	r3, [r4, #12]
 800738a:	f023 0303 	bic.w	r3, r3, #3
 800738e:	f043 0301 	orr.w	r3, r3, #1
 8007392:	81a3      	strh	r3, [r4, #12]
 8007394:	89a3      	ldrh	r3, [r4, #12]
 8007396:	431d      	orrs	r5, r3
 8007398:	81a5      	strh	r5, [r4, #12]
 800739a:	e7cd      	b.n	8007338 <__smakebuf_r+0x18>
 800739c:	0800718d 	.word	0x0800718d

080073a0 <_free_r>:
 80073a0:	b538      	push	{r3, r4, r5, lr}
 80073a2:	4605      	mov	r5, r0
 80073a4:	2900      	cmp	r1, #0
 80073a6:	d043      	beq.n	8007430 <_free_r+0x90>
 80073a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073ac:	1f0c      	subs	r4, r1, #4
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	bfb8      	it	lt
 80073b2:	18e4      	addlt	r4, r4, r3
 80073b4:	f000 fc45 	bl	8007c42 <__malloc_lock>
 80073b8:	4a1e      	ldr	r2, [pc, #120]	; (8007434 <_free_r+0x94>)
 80073ba:	6813      	ldr	r3, [r2, #0]
 80073bc:	4610      	mov	r0, r2
 80073be:	b933      	cbnz	r3, 80073ce <_free_r+0x2e>
 80073c0:	6063      	str	r3, [r4, #4]
 80073c2:	6014      	str	r4, [r2, #0]
 80073c4:	4628      	mov	r0, r5
 80073c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80073ca:	f000 bc3b 	b.w	8007c44 <__malloc_unlock>
 80073ce:	42a3      	cmp	r3, r4
 80073d0:	d90b      	bls.n	80073ea <_free_r+0x4a>
 80073d2:	6821      	ldr	r1, [r4, #0]
 80073d4:	1862      	adds	r2, r4, r1
 80073d6:	4293      	cmp	r3, r2
 80073d8:	bf01      	itttt	eq
 80073da:	681a      	ldreq	r2, [r3, #0]
 80073dc:	685b      	ldreq	r3, [r3, #4]
 80073de:	1852      	addeq	r2, r2, r1
 80073e0:	6022      	streq	r2, [r4, #0]
 80073e2:	6063      	str	r3, [r4, #4]
 80073e4:	6004      	str	r4, [r0, #0]
 80073e6:	e7ed      	b.n	80073c4 <_free_r+0x24>
 80073e8:	4613      	mov	r3, r2
 80073ea:	685a      	ldr	r2, [r3, #4]
 80073ec:	b10a      	cbz	r2, 80073f2 <_free_r+0x52>
 80073ee:	42a2      	cmp	r2, r4
 80073f0:	d9fa      	bls.n	80073e8 <_free_r+0x48>
 80073f2:	6819      	ldr	r1, [r3, #0]
 80073f4:	1858      	adds	r0, r3, r1
 80073f6:	42a0      	cmp	r0, r4
 80073f8:	d10b      	bne.n	8007412 <_free_r+0x72>
 80073fa:	6820      	ldr	r0, [r4, #0]
 80073fc:	4401      	add	r1, r0
 80073fe:	1858      	adds	r0, r3, r1
 8007400:	4282      	cmp	r2, r0
 8007402:	6019      	str	r1, [r3, #0]
 8007404:	d1de      	bne.n	80073c4 <_free_r+0x24>
 8007406:	6810      	ldr	r0, [r2, #0]
 8007408:	6852      	ldr	r2, [r2, #4]
 800740a:	4401      	add	r1, r0
 800740c:	6019      	str	r1, [r3, #0]
 800740e:	605a      	str	r2, [r3, #4]
 8007410:	e7d8      	b.n	80073c4 <_free_r+0x24>
 8007412:	d902      	bls.n	800741a <_free_r+0x7a>
 8007414:	230c      	movs	r3, #12
 8007416:	602b      	str	r3, [r5, #0]
 8007418:	e7d4      	b.n	80073c4 <_free_r+0x24>
 800741a:	6820      	ldr	r0, [r4, #0]
 800741c:	1821      	adds	r1, r4, r0
 800741e:	428a      	cmp	r2, r1
 8007420:	bf01      	itttt	eq
 8007422:	6811      	ldreq	r1, [r2, #0]
 8007424:	6852      	ldreq	r2, [r2, #4]
 8007426:	1809      	addeq	r1, r1, r0
 8007428:	6021      	streq	r1, [r4, #0]
 800742a:	6062      	str	r2, [r4, #4]
 800742c:	605c      	str	r4, [r3, #4]
 800742e:	e7c9      	b.n	80073c4 <_free_r+0x24>
 8007430:	bd38      	pop	{r3, r4, r5, pc}
 8007432:	bf00      	nop
 8007434:	200019e0 	.word	0x200019e0

08007438 <_malloc_r>:
 8007438:	b570      	push	{r4, r5, r6, lr}
 800743a:	1ccd      	adds	r5, r1, #3
 800743c:	f025 0503 	bic.w	r5, r5, #3
 8007440:	3508      	adds	r5, #8
 8007442:	2d0c      	cmp	r5, #12
 8007444:	bf38      	it	cc
 8007446:	250c      	movcc	r5, #12
 8007448:	2d00      	cmp	r5, #0
 800744a:	4606      	mov	r6, r0
 800744c:	db01      	blt.n	8007452 <_malloc_r+0x1a>
 800744e:	42a9      	cmp	r1, r5
 8007450:	d903      	bls.n	800745a <_malloc_r+0x22>
 8007452:	230c      	movs	r3, #12
 8007454:	6033      	str	r3, [r6, #0]
 8007456:	2000      	movs	r0, #0
 8007458:	bd70      	pop	{r4, r5, r6, pc}
 800745a:	f000 fbf2 	bl	8007c42 <__malloc_lock>
 800745e:	4a21      	ldr	r2, [pc, #132]	; (80074e4 <_malloc_r+0xac>)
 8007460:	6814      	ldr	r4, [r2, #0]
 8007462:	4621      	mov	r1, r4
 8007464:	b991      	cbnz	r1, 800748c <_malloc_r+0x54>
 8007466:	4c20      	ldr	r4, [pc, #128]	; (80074e8 <_malloc_r+0xb0>)
 8007468:	6823      	ldr	r3, [r4, #0]
 800746a:	b91b      	cbnz	r3, 8007474 <_malloc_r+0x3c>
 800746c:	4630      	mov	r0, r6
 800746e:	f000 fb17 	bl	8007aa0 <_sbrk_r>
 8007472:	6020      	str	r0, [r4, #0]
 8007474:	4629      	mov	r1, r5
 8007476:	4630      	mov	r0, r6
 8007478:	f000 fb12 	bl	8007aa0 <_sbrk_r>
 800747c:	1c43      	adds	r3, r0, #1
 800747e:	d124      	bne.n	80074ca <_malloc_r+0x92>
 8007480:	230c      	movs	r3, #12
 8007482:	4630      	mov	r0, r6
 8007484:	6033      	str	r3, [r6, #0]
 8007486:	f000 fbdd 	bl	8007c44 <__malloc_unlock>
 800748a:	e7e4      	b.n	8007456 <_malloc_r+0x1e>
 800748c:	680b      	ldr	r3, [r1, #0]
 800748e:	1b5b      	subs	r3, r3, r5
 8007490:	d418      	bmi.n	80074c4 <_malloc_r+0x8c>
 8007492:	2b0b      	cmp	r3, #11
 8007494:	d90f      	bls.n	80074b6 <_malloc_r+0x7e>
 8007496:	600b      	str	r3, [r1, #0]
 8007498:	18cc      	adds	r4, r1, r3
 800749a:	50cd      	str	r5, [r1, r3]
 800749c:	4630      	mov	r0, r6
 800749e:	f000 fbd1 	bl	8007c44 <__malloc_unlock>
 80074a2:	f104 000b 	add.w	r0, r4, #11
 80074a6:	1d23      	adds	r3, r4, #4
 80074a8:	f020 0007 	bic.w	r0, r0, #7
 80074ac:	1ac3      	subs	r3, r0, r3
 80074ae:	d0d3      	beq.n	8007458 <_malloc_r+0x20>
 80074b0:	425a      	negs	r2, r3
 80074b2:	50e2      	str	r2, [r4, r3]
 80074b4:	e7d0      	b.n	8007458 <_malloc_r+0x20>
 80074b6:	684b      	ldr	r3, [r1, #4]
 80074b8:	428c      	cmp	r4, r1
 80074ba:	bf16      	itet	ne
 80074bc:	6063      	strne	r3, [r4, #4]
 80074be:	6013      	streq	r3, [r2, #0]
 80074c0:	460c      	movne	r4, r1
 80074c2:	e7eb      	b.n	800749c <_malloc_r+0x64>
 80074c4:	460c      	mov	r4, r1
 80074c6:	6849      	ldr	r1, [r1, #4]
 80074c8:	e7cc      	b.n	8007464 <_malloc_r+0x2c>
 80074ca:	1cc4      	adds	r4, r0, #3
 80074cc:	f024 0403 	bic.w	r4, r4, #3
 80074d0:	42a0      	cmp	r0, r4
 80074d2:	d005      	beq.n	80074e0 <_malloc_r+0xa8>
 80074d4:	1a21      	subs	r1, r4, r0
 80074d6:	4630      	mov	r0, r6
 80074d8:	f000 fae2 	bl	8007aa0 <_sbrk_r>
 80074dc:	3001      	adds	r0, #1
 80074de:	d0cf      	beq.n	8007480 <_malloc_r+0x48>
 80074e0:	6025      	str	r5, [r4, #0]
 80074e2:	e7db      	b.n	800749c <_malloc_r+0x64>
 80074e4:	200019e0 	.word	0x200019e0
 80074e8:	200019e4 	.word	0x200019e4

080074ec <__ssputs_r>:
 80074ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074f0:	688e      	ldr	r6, [r1, #8]
 80074f2:	4682      	mov	sl, r0
 80074f4:	429e      	cmp	r6, r3
 80074f6:	460c      	mov	r4, r1
 80074f8:	4690      	mov	r8, r2
 80074fa:	4699      	mov	r9, r3
 80074fc:	d837      	bhi.n	800756e <__ssputs_r+0x82>
 80074fe:	898a      	ldrh	r2, [r1, #12]
 8007500:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007504:	d031      	beq.n	800756a <__ssputs_r+0x7e>
 8007506:	2302      	movs	r3, #2
 8007508:	6825      	ldr	r5, [r4, #0]
 800750a:	6909      	ldr	r1, [r1, #16]
 800750c:	1a6f      	subs	r7, r5, r1
 800750e:	6965      	ldr	r5, [r4, #20]
 8007510:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007514:	fb95 f5f3 	sdiv	r5, r5, r3
 8007518:	f109 0301 	add.w	r3, r9, #1
 800751c:	443b      	add	r3, r7
 800751e:	429d      	cmp	r5, r3
 8007520:	bf38      	it	cc
 8007522:	461d      	movcc	r5, r3
 8007524:	0553      	lsls	r3, r2, #21
 8007526:	d530      	bpl.n	800758a <__ssputs_r+0x9e>
 8007528:	4629      	mov	r1, r5
 800752a:	f7ff ff85 	bl	8007438 <_malloc_r>
 800752e:	4606      	mov	r6, r0
 8007530:	b950      	cbnz	r0, 8007548 <__ssputs_r+0x5c>
 8007532:	230c      	movs	r3, #12
 8007534:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007538:	f8ca 3000 	str.w	r3, [sl]
 800753c:	89a3      	ldrh	r3, [r4, #12]
 800753e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007542:	81a3      	strh	r3, [r4, #12]
 8007544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007548:	463a      	mov	r2, r7
 800754a:	6921      	ldr	r1, [r4, #16]
 800754c:	f7ff fbd8 	bl	8006d00 <memcpy>
 8007550:	89a3      	ldrh	r3, [r4, #12]
 8007552:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007556:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800755a:	81a3      	strh	r3, [r4, #12]
 800755c:	6126      	str	r6, [r4, #16]
 800755e:	443e      	add	r6, r7
 8007560:	6026      	str	r6, [r4, #0]
 8007562:	464e      	mov	r6, r9
 8007564:	6165      	str	r5, [r4, #20]
 8007566:	1bed      	subs	r5, r5, r7
 8007568:	60a5      	str	r5, [r4, #8]
 800756a:	454e      	cmp	r6, r9
 800756c:	d900      	bls.n	8007570 <__ssputs_r+0x84>
 800756e:	464e      	mov	r6, r9
 8007570:	4632      	mov	r2, r6
 8007572:	4641      	mov	r1, r8
 8007574:	6820      	ldr	r0, [r4, #0]
 8007576:	f000 fb4b 	bl	8007c10 <memmove>
 800757a:	68a3      	ldr	r3, [r4, #8]
 800757c:	2000      	movs	r0, #0
 800757e:	1b9b      	subs	r3, r3, r6
 8007580:	60a3      	str	r3, [r4, #8]
 8007582:	6823      	ldr	r3, [r4, #0]
 8007584:	441e      	add	r6, r3
 8007586:	6026      	str	r6, [r4, #0]
 8007588:	e7dc      	b.n	8007544 <__ssputs_r+0x58>
 800758a:	462a      	mov	r2, r5
 800758c:	f000 fb5b 	bl	8007c46 <_realloc_r>
 8007590:	4606      	mov	r6, r0
 8007592:	2800      	cmp	r0, #0
 8007594:	d1e2      	bne.n	800755c <__ssputs_r+0x70>
 8007596:	6921      	ldr	r1, [r4, #16]
 8007598:	4650      	mov	r0, sl
 800759a:	f7ff ff01 	bl	80073a0 <_free_r>
 800759e:	e7c8      	b.n	8007532 <__ssputs_r+0x46>

080075a0 <_svfiprintf_r>:
 80075a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075a4:	461d      	mov	r5, r3
 80075a6:	898b      	ldrh	r3, [r1, #12]
 80075a8:	b09d      	sub	sp, #116	; 0x74
 80075aa:	061f      	lsls	r7, r3, #24
 80075ac:	4680      	mov	r8, r0
 80075ae:	460c      	mov	r4, r1
 80075b0:	4616      	mov	r6, r2
 80075b2:	d50f      	bpl.n	80075d4 <_svfiprintf_r+0x34>
 80075b4:	690b      	ldr	r3, [r1, #16]
 80075b6:	b96b      	cbnz	r3, 80075d4 <_svfiprintf_r+0x34>
 80075b8:	2140      	movs	r1, #64	; 0x40
 80075ba:	f7ff ff3d 	bl	8007438 <_malloc_r>
 80075be:	6020      	str	r0, [r4, #0]
 80075c0:	6120      	str	r0, [r4, #16]
 80075c2:	b928      	cbnz	r0, 80075d0 <_svfiprintf_r+0x30>
 80075c4:	230c      	movs	r3, #12
 80075c6:	f8c8 3000 	str.w	r3, [r8]
 80075ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80075ce:	e0c8      	b.n	8007762 <_svfiprintf_r+0x1c2>
 80075d0:	2340      	movs	r3, #64	; 0x40
 80075d2:	6163      	str	r3, [r4, #20]
 80075d4:	2300      	movs	r3, #0
 80075d6:	9309      	str	r3, [sp, #36]	; 0x24
 80075d8:	2320      	movs	r3, #32
 80075da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80075de:	2330      	movs	r3, #48	; 0x30
 80075e0:	f04f 0b01 	mov.w	fp, #1
 80075e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80075e8:	9503      	str	r5, [sp, #12]
 80075ea:	4637      	mov	r7, r6
 80075ec:	463d      	mov	r5, r7
 80075ee:	f815 3b01 	ldrb.w	r3, [r5], #1
 80075f2:	b10b      	cbz	r3, 80075f8 <_svfiprintf_r+0x58>
 80075f4:	2b25      	cmp	r3, #37	; 0x25
 80075f6:	d13e      	bne.n	8007676 <_svfiprintf_r+0xd6>
 80075f8:	ebb7 0a06 	subs.w	sl, r7, r6
 80075fc:	d00b      	beq.n	8007616 <_svfiprintf_r+0x76>
 80075fe:	4653      	mov	r3, sl
 8007600:	4632      	mov	r2, r6
 8007602:	4621      	mov	r1, r4
 8007604:	4640      	mov	r0, r8
 8007606:	f7ff ff71 	bl	80074ec <__ssputs_r>
 800760a:	3001      	adds	r0, #1
 800760c:	f000 80a4 	beq.w	8007758 <_svfiprintf_r+0x1b8>
 8007610:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007612:	4453      	add	r3, sl
 8007614:	9309      	str	r3, [sp, #36]	; 0x24
 8007616:	783b      	ldrb	r3, [r7, #0]
 8007618:	2b00      	cmp	r3, #0
 800761a:	f000 809d 	beq.w	8007758 <_svfiprintf_r+0x1b8>
 800761e:	2300      	movs	r3, #0
 8007620:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007624:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007628:	9304      	str	r3, [sp, #16]
 800762a:	9307      	str	r3, [sp, #28]
 800762c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007630:	931a      	str	r3, [sp, #104]	; 0x68
 8007632:	462f      	mov	r7, r5
 8007634:	2205      	movs	r2, #5
 8007636:	f817 1b01 	ldrb.w	r1, [r7], #1
 800763a:	4850      	ldr	r0, [pc, #320]	; (800777c <_svfiprintf_r+0x1dc>)
 800763c:	f000 fada 	bl	8007bf4 <memchr>
 8007640:	9b04      	ldr	r3, [sp, #16]
 8007642:	b9d0      	cbnz	r0, 800767a <_svfiprintf_r+0xda>
 8007644:	06d9      	lsls	r1, r3, #27
 8007646:	bf44      	itt	mi
 8007648:	2220      	movmi	r2, #32
 800764a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800764e:	071a      	lsls	r2, r3, #28
 8007650:	bf44      	itt	mi
 8007652:	222b      	movmi	r2, #43	; 0x2b
 8007654:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007658:	782a      	ldrb	r2, [r5, #0]
 800765a:	2a2a      	cmp	r2, #42	; 0x2a
 800765c:	d015      	beq.n	800768a <_svfiprintf_r+0xea>
 800765e:	462f      	mov	r7, r5
 8007660:	2000      	movs	r0, #0
 8007662:	250a      	movs	r5, #10
 8007664:	9a07      	ldr	r2, [sp, #28]
 8007666:	4639      	mov	r1, r7
 8007668:	f811 3b01 	ldrb.w	r3, [r1], #1
 800766c:	3b30      	subs	r3, #48	; 0x30
 800766e:	2b09      	cmp	r3, #9
 8007670:	d94d      	bls.n	800770e <_svfiprintf_r+0x16e>
 8007672:	b1b8      	cbz	r0, 80076a4 <_svfiprintf_r+0x104>
 8007674:	e00f      	b.n	8007696 <_svfiprintf_r+0xf6>
 8007676:	462f      	mov	r7, r5
 8007678:	e7b8      	b.n	80075ec <_svfiprintf_r+0x4c>
 800767a:	4a40      	ldr	r2, [pc, #256]	; (800777c <_svfiprintf_r+0x1dc>)
 800767c:	463d      	mov	r5, r7
 800767e:	1a80      	subs	r0, r0, r2
 8007680:	fa0b f000 	lsl.w	r0, fp, r0
 8007684:	4318      	orrs	r0, r3
 8007686:	9004      	str	r0, [sp, #16]
 8007688:	e7d3      	b.n	8007632 <_svfiprintf_r+0x92>
 800768a:	9a03      	ldr	r2, [sp, #12]
 800768c:	1d11      	adds	r1, r2, #4
 800768e:	6812      	ldr	r2, [r2, #0]
 8007690:	9103      	str	r1, [sp, #12]
 8007692:	2a00      	cmp	r2, #0
 8007694:	db01      	blt.n	800769a <_svfiprintf_r+0xfa>
 8007696:	9207      	str	r2, [sp, #28]
 8007698:	e004      	b.n	80076a4 <_svfiprintf_r+0x104>
 800769a:	4252      	negs	r2, r2
 800769c:	f043 0302 	orr.w	r3, r3, #2
 80076a0:	9207      	str	r2, [sp, #28]
 80076a2:	9304      	str	r3, [sp, #16]
 80076a4:	783b      	ldrb	r3, [r7, #0]
 80076a6:	2b2e      	cmp	r3, #46	; 0x2e
 80076a8:	d10c      	bne.n	80076c4 <_svfiprintf_r+0x124>
 80076aa:	787b      	ldrb	r3, [r7, #1]
 80076ac:	2b2a      	cmp	r3, #42	; 0x2a
 80076ae:	d133      	bne.n	8007718 <_svfiprintf_r+0x178>
 80076b0:	9b03      	ldr	r3, [sp, #12]
 80076b2:	3702      	adds	r7, #2
 80076b4:	1d1a      	adds	r2, r3, #4
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	9203      	str	r2, [sp, #12]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	bfb8      	it	lt
 80076be:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80076c2:	9305      	str	r3, [sp, #20]
 80076c4:	4d2e      	ldr	r5, [pc, #184]	; (8007780 <_svfiprintf_r+0x1e0>)
 80076c6:	2203      	movs	r2, #3
 80076c8:	7839      	ldrb	r1, [r7, #0]
 80076ca:	4628      	mov	r0, r5
 80076cc:	f000 fa92 	bl	8007bf4 <memchr>
 80076d0:	b138      	cbz	r0, 80076e2 <_svfiprintf_r+0x142>
 80076d2:	2340      	movs	r3, #64	; 0x40
 80076d4:	1b40      	subs	r0, r0, r5
 80076d6:	fa03 f000 	lsl.w	r0, r3, r0
 80076da:	9b04      	ldr	r3, [sp, #16]
 80076dc:	3701      	adds	r7, #1
 80076de:	4303      	orrs	r3, r0
 80076e0:	9304      	str	r3, [sp, #16]
 80076e2:	7839      	ldrb	r1, [r7, #0]
 80076e4:	2206      	movs	r2, #6
 80076e6:	4827      	ldr	r0, [pc, #156]	; (8007784 <_svfiprintf_r+0x1e4>)
 80076e8:	1c7e      	adds	r6, r7, #1
 80076ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80076ee:	f000 fa81 	bl	8007bf4 <memchr>
 80076f2:	2800      	cmp	r0, #0
 80076f4:	d038      	beq.n	8007768 <_svfiprintf_r+0x1c8>
 80076f6:	4b24      	ldr	r3, [pc, #144]	; (8007788 <_svfiprintf_r+0x1e8>)
 80076f8:	bb13      	cbnz	r3, 8007740 <_svfiprintf_r+0x1a0>
 80076fa:	9b03      	ldr	r3, [sp, #12]
 80076fc:	3307      	adds	r3, #7
 80076fe:	f023 0307 	bic.w	r3, r3, #7
 8007702:	3308      	adds	r3, #8
 8007704:	9303      	str	r3, [sp, #12]
 8007706:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007708:	444b      	add	r3, r9
 800770a:	9309      	str	r3, [sp, #36]	; 0x24
 800770c:	e76d      	b.n	80075ea <_svfiprintf_r+0x4a>
 800770e:	fb05 3202 	mla	r2, r5, r2, r3
 8007712:	2001      	movs	r0, #1
 8007714:	460f      	mov	r7, r1
 8007716:	e7a6      	b.n	8007666 <_svfiprintf_r+0xc6>
 8007718:	2300      	movs	r3, #0
 800771a:	250a      	movs	r5, #10
 800771c:	4619      	mov	r1, r3
 800771e:	3701      	adds	r7, #1
 8007720:	9305      	str	r3, [sp, #20]
 8007722:	4638      	mov	r0, r7
 8007724:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007728:	3a30      	subs	r2, #48	; 0x30
 800772a:	2a09      	cmp	r2, #9
 800772c:	d903      	bls.n	8007736 <_svfiprintf_r+0x196>
 800772e:	2b00      	cmp	r3, #0
 8007730:	d0c8      	beq.n	80076c4 <_svfiprintf_r+0x124>
 8007732:	9105      	str	r1, [sp, #20]
 8007734:	e7c6      	b.n	80076c4 <_svfiprintf_r+0x124>
 8007736:	fb05 2101 	mla	r1, r5, r1, r2
 800773a:	2301      	movs	r3, #1
 800773c:	4607      	mov	r7, r0
 800773e:	e7f0      	b.n	8007722 <_svfiprintf_r+0x182>
 8007740:	ab03      	add	r3, sp, #12
 8007742:	9300      	str	r3, [sp, #0]
 8007744:	4622      	mov	r2, r4
 8007746:	4b11      	ldr	r3, [pc, #68]	; (800778c <_svfiprintf_r+0x1ec>)
 8007748:	a904      	add	r1, sp, #16
 800774a:	4640      	mov	r0, r8
 800774c:	f3af 8000 	nop.w
 8007750:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007754:	4681      	mov	r9, r0
 8007756:	d1d6      	bne.n	8007706 <_svfiprintf_r+0x166>
 8007758:	89a3      	ldrh	r3, [r4, #12]
 800775a:	065b      	lsls	r3, r3, #25
 800775c:	f53f af35 	bmi.w	80075ca <_svfiprintf_r+0x2a>
 8007760:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007762:	b01d      	add	sp, #116	; 0x74
 8007764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007768:	ab03      	add	r3, sp, #12
 800776a:	9300      	str	r3, [sp, #0]
 800776c:	4622      	mov	r2, r4
 800776e:	4b07      	ldr	r3, [pc, #28]	; (800778c <_svfiprintf_r+0x1ec>)
 8007770:	a904      	add	r1, sp, #16
 8007772:	4640      	mov	r0, r8
 8007774:	f000 f882 	bl	800787c <_printf_i>
 8007778:	e7ea      	b.n	8007750 <_svfiprintf_r+0x1b0>
 800777a:	bf00      	nop
 800777c:	08008028 	.word	0x08008028
 8007780:	0800802e 	.word	0x0800802e
 8007784:	08008032 	.word	0x08008032
 8007788:	00000000 	.word	0x00000000
 800778c:	080074ed 	.word	0x080074ed

08007790 <_printf_common>:
 8007790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007794:	4691      	mov	r9, r2
 8007796:	461f      	mov	r7, r3
 8007798:	688a      	ldr	r2, [r1, #8]
 800779a:	690b      	ldr	r3, [r1, #16]
 800779c:	4606      	mov	r6, r0
 800779e:	4293      	cmp	r3, r2
 80077a0:	bfb8      	it	lt
 80077a2:	4613      	movlt	r3, r2
 80077a4:	f8c9 3000 	str.w	r3, [r9]
 80077a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80077ac:	460c      	mov	r4, r1
 80077ae:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80077b2:	b112      	cbz	r2, 80077ba <_printf_common+0x2a>
 80077b4:	3301      	adds	r3, #1
 80077b6:	f8c9 3000 	str.w	r3, [r9]
 80077ba:	6823      	ldr	r3, [r4, #0]
 80077bc:	0699      	lsls	r1, r3, #26
 80077be:	bf42      	ittt	mi
 80077c0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80077c4:	3302      	addmi	r3, #2
 80077c6:	f8c9 3000 	strmi.w	r3, [r9]
 80077ca:	6825      	ldr	r5, [r4, #0]
 80077cc:	f015 0506 	ands.w	r5, r5, #6
 80077d0:	d107      	bne.n	80077e2 <_printf_common+0x52>
 80077d2:	f104 0a19 	add.w	sl, r4, #25
 80077d6:	68e3      	ldr	r3, [r4, #12]
 80077d8:	f8d9 2000 	ldr.w	r2, [r9]
 80077dc:	1a9b      	subs	r3, r3, r2
 80077de:	42ab      	cmp	r3, r5
 80077e0:	dc29      	bgt.n	8007836 <_printf_common+0xa6>
 80077e2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80077e6:	6822      	ldr	r2, [r4, #0]
 80077e8:	3300      	adds	r3, #0
 80077ea:	bf18      	it	ne
 80077ec:	2301      	movne	r3, #1
 80077ee:	0692      	lsls	r2, r2, #26
 80077f0:	d42e      	bmi.n	8007850 <_printf_common+0xc0>
 80077f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80077f6:	4639      	mov	r1, r7
 80077f8:	4630      	mov	r0, r6
 80077fa:	47c0      	blx	r8
 80077fc:	3001      	adds	r0, #1
 80077fe:	d021      	beq.n	8007844 <_printf_common+0xb4>
 8007800:	6823      	ldr	r3, [r4, #0]
 8007802:	68e5      	ldr	r5, [r4, #12]
 8007804:	f003 0306 	and.w	r3, r3, #6
 8007808:	2b04      	cmp	r3, #4
 800780a:	bf18      	it	ne
 800780c:	2500      	movne	r5, #0
 800780e:	f8d9 2000 	ldr.w	r2, [r9]
 8007812:	f04f 0900 	mov.w	r9, #0
 8007816:	bf08      	it	eq
 8007818:	1aad      	subeq	r5, r5, r2
 800781a:	68a3      	ldr	r3, [r4, #8]
 800781c:	6922      	ldr	r2, [r4, #16]
 800781e:	bf08      	it	eq
 8007820:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007824:	4293      	cmp	r3, r2
 8007826:	bfc4      	itt	gt
 8007828:	1a9b      	subgt	r3, r3, r2
 800782a:	18ed      	addgt	r5, r5, r3
 800782c:	341a      	adds	r4, #26
 800782e:	454d      	cmp	r5, r9
 8007830:	d11a      	bne.n	8007868 <_printf_common+0xd8>
 8007832:	2000      	movs	r0, #0
 8007834:	e008      	b.n	8007848 <_printf_common+0xb8>
 8007836:	2301      	movs	r3, #1
 8007838:	4652      	mov	r2, sl
 800783a:	4639      	mov	r1, r7
 800783c:	4630      	mov	r0, r6
 800783e:	47c0      	blx	r8
 8007840:	3001      	adds	r0, #1
 8007842:	d103      	bne.n	800784c <_printf_common+0xbc>
 8007844:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800784c:	3501      	adds	r5, #1
 800784e:	e7c2      	b.n	80077d6 <_printf_common+0x46>
 8007850:	2030      	movs	r0, #48	; 0x30
 8007852:	18e1      	adds	r1, r4, r3
 8007854:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007858:	1c5a      	adds	r2, r3, #1
 800785a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800785e:	4422      	add	r2, r4
 8007860:	3302      	adds	r3, #2
 8007862:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007866:	e7c4      	b.n	80077f2 <_printf_common+0x62>
 8007868:	2301      	movs	r3, #1
 800786a:	4622      	mov	r2, r4
 800786c:	4639      	mov	r1, r7
 800786e:	4630      	mov	r0, r6
 8007870:	47c0      	blx	r8
 8007872:	3001      	adds	r0, #1
 8007874:	d0e6      	beq.n	8007844 <_printf_common+0xb4>
 8007876:	f109 0901 	add.w	r9, r9, #1
 800787a:	e7d8      	b.n	800782e <_printf_common+0x9e>

0800787c <_printf_i>:
 800787c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007880:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007884:	460c      	mov	r4, r1
 8007886:	7e09      	ldrb	r1, [r1, #24]
 8007888:	b085      	sub	sp, #20
 800788a:	296e      	cmp	r1, #110	; 0x6e
 800788c:	4617      	mov	r7, r2
 800788e:	4606      	mov	r6, r0
 8007890:	4698      	mov	r8, r3
 8007892:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007894:	f000 80b3 	beq.w	80079fe <_printf_i+0x182>
 8007898:	d822      	bhi.n	80078e0 <_printf_i+0x64>
 800789a:	2963      	cmp	r1, #99	; 0x63
 800789c:	d036      	beq.n	800790c <_printf_i+0x90>
 800789e:	d80a      	bhi.n	80078b6 <_printf_i+0x3a>
 80078a0:	2900      	cmp	r1, #0
 80078a2:	f000 80b9 	beq.w	8007a18 <_printf_i+0x19c>
 80078a6:	2958      	cmp	r1, #88	; 0x58
 80078a8:	f000 8083 	beq.w	80079b2 <_printf_i+0x136>
 80078ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80078b0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80078b4:	e032      	b.n	800791c <_printf_i+0xa0>
 80078b6:	2964      	cmp	r1, #100	; 0x64
 80078b8:	d001      	beq.n	80078be <_printf_i+0x42>
 80078ba:	2969      	cmp	r1, #105	; 0x69
 80078bc:	d1f6      	bne.n	80078ac <_printf_i+0x30>
 80078be:	6820      	ldr	r0, [r4, #0]
 80078c0:	6813      	ldr	r3, [r2, #0]
 80078c2:	0605      	lsls	r5, r0, #24
 80078c4:	f103 0104 	add.w	r1, r3, #4
 80078c8:	d52a      	bpl.n	8007920 <_printf_i+0xa4>
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	6011      	str	r1, [r2, #0]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	da03      	bge.n	80078da <_printf_i+0x5e>
 80078d2:	222d      	movs	r2, #45	; 0x2d
 80078d4:	425b      	negs	r3, r3
 80078d6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80078da:	486f      	ldr	r0, [pc, #444]	; (8007a98 <_printf_i+0x21c>)
 80078dc:	220a      	movs	r2, #10
 80078de:	e039      	b.n	8007954 <_printf_i+0xd8>
 80078e0:	2973      	cmp	r1, #115	; 0x73
 80078e2:	f000 809d 	beq.w	8007a20 <_printf_i+0x1a4>
 80078e6:	d808      	bhi.n	80078fa <_printf_i+0x7e>
 80078e8:	296f      	cmp	r1, #111	; 0x6f
 80078ea:	d020      	beq.n	800792e <_printf_i+0xb2>
 80078ec:	2970      	cmp	r1, #112	; 0x70
 80078ee:	d1dd      	bne.n	80078ac <_printf_i+0x30>
 80078f0:	6823      	ldr	r3, [r4, #0]
 80078f2:	f043 0320 	orr.w	r3, r3, #32
 80078f6:	6023      	str	r3, [r4, #0]
 80078f8:	e003      	b.n	8007902 <_printf_i+0x86>
 80078fa:	2975      	cmp	r1, #117	; 0x75
 80078fc:	d017      	beq.n	800792e <_printf_i+0xb2>
 80078fe:	2978      	cmp	r1, #120	; 0x78
 8007900:	d1d4      	bne.n	80078ac <_printf_i+0x30>
 8007902:	2378      	movs	r3, #120	; 0x78
 8007904:	4865      	ldr	r0, [pc, #404]	; (8007a9c <_printf_i+0x220>)
 8007906:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800790a:	e055      	b.n	80079b8 <_printf_i+0x13c>
 800790c:	6813      	ldr	r3, [r2, #0]
 800790e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007912:	1d19      	adds	r1, r3, #4
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	6011      	str	r1, [r2, #0]
 8007918:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800791c:	2301      	movs	r3, #1
 800791e:	e08c      	b.n	8007a3a <_printf_i+0x1be>
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007926:	6011      	str	r1, [r2, #0]
 8007928:	bf18      	it	ne
 800792a:	b21b      	sxthne	r3, r3
 800792c:	e7cf      	b.n	80078ce <_printf_i+0x52>
 800792e:	6813      	ldr	r3, [r2, #0]
 8007930:	6825      	ldr	r5, [r4, #0]
 8007932:	1d18      	adds	r0, r3, #4
 8007934:	6010      	str	r0, [r2, #0]
 8007936:	0628      	lsls	r0, r5, #24
 8007938:	d501      	bpl.n	800793e <_printf_i+0xc2>
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	e002      	b.n	8007944 <_printf_i+0xc8>
 800793e:	0668      	lsls	r0, r5, #25
 8007940:	d5fb      	bpl.n	800793a <_printf_i+0xbe>
 8007942:	881b      	ldrh	r3, [r3, #0]
 8007944:	296f      	cmp	r1, #111	; 0x6f
 8007946:	bf14      	ite	ne
 8007948:	220a      	movne	r2, #10
 800794a:	2208      	moveq	r2, #8
 800794c:	4852      	ldr	r0, [pc, #328]	; (8007a98 <_printf_i+0x21c>)
 800794e:	2100      	movs	r1, #0
 8007950:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007954:	6865      	ldr	r5, [r4, #4]
 8007956:	2d00      	cmp	r5, #0
 8007958:	60a5      	str	r5, [r4, #8]
 800795a:	f2c0 8095 	blt.w	8007a88 <_printf_i+0x20c>
 800795e:	6821      	ldr	r1, [r4, #0]
 8007960:	f021 0104 	bic.w	r1, r1, #4
 8007964:	6021      	str	r1, [r4, #0]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d13d      	bne.n	80079e6 <_printf_i+0x16a>
 800796a:	2d00      	cmp	r5, #0
 800796c:	f040 808e 	bne.w	8007a8c <_printf_i+0x210>
 8007970:	4665      	mov	r5, ip
 8007972:	2a08      	cmp	r2, #8
 8007974:	d10b      	bne.n	800798e <_printf_i+0x112>
 8007976:	6823      	ldr	r3, [r4, #0]
 8007978:	07db      	lsls	r3, r3, #31
 800797a:	d508      	bpl.n	800798e <_printf_i+0x112>
 800797c:	6923      	ldr	r3, [r4, #16]
 800797e:	6862      	ldr	r2, [r4, #4]
 8007980:	429a      	cmp	r2, r3
 8007982:	bfde      	ittt	le
 8007984:	2330      	movle	r3, #48	; 0x30
 8007986:	f805 3c01 	strble.w	r3, [r5, #-1]
 800798a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800798e:	ebac 0305 	sub.w	r3, ip, r5
 8007992:	6123      	str	r3, [r4, #16]
 8007994:	f8cd 8000 	str.w	r8, [sp]
 8007998:	463b      	mov	r3, r7
 800799a:	aa03      	add	r2, sp, #12
 800799c:	4621      	mov	r1, r4
 800799e:	4630      	mov	r0, r6
 80079a0:	f7ff fef6 	bl	8007790 <_printf_common>
 80079a4:	3001      	adds	r0, #1
 80079a6:	d14d      	bne.n	8007a44 <_printf_i+0x1c8>
 80079a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80079ac:	b005      	add	sp, #20
 80079ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80079b2:	4839      	ldr	r0, [pc, #228]	; (8007a98 <_printf_i+0x21c>)
 80079b4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80079b8:	6813      	ldr	r3, [r2, #0]
 80079ba:	6821      	ldr	r1, [r4, #0]
 80079bc:	1d1d      	adds	r5, r3, #4
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	6015      	str	r5, [r2, #0]
 80079c2:	060a      	lsls	r2, r1, #24
 80079c4:	d50b      	bpl.n	80079de <_printf_i+0x162>
 80079c6:	07ca      	lsls	r2, r1, #31
 80079c8:	bf44      	itt	mi
 80079ca:	f041 0120 	orrmi.w	r1, r1, #32
 80079ce:	6021      	strmi	r1, [r4, #0]
 80079d0:	b91b      	cbnz	r3, 80079da <_printf_i+0x15e>
 80079d2:	6822      	ldr	r2, [r4, #0]
 80079d4:	f022 0220 	bic.w	r2, r2, #32
 80079d8:	6022      	str	r2, [r4, #0]
 80079da:	2210      	movs	r2, #16
 80079dc:	e7b7      	b.n	800794e <_printf_i+0xd2>
 80079de:	064d      	lsls	r5, r1, #25
 80079e0:	bf48      	it	mi
 80079e2:	b29b      	uxthmi	r3, r3
 80079e4:	e7ef      	b.n	80079c6 <_printf_i+0x14a>
 80079e6:	4665      	mov	r5, ip
 80079e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80079ec:	fb02 3311 	mls	r3, r2, r1, r3
 80079f0:	5cc3      	ldrb	r3, [r0, r3]
 80079f2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80079f6:	460b      	mov	r3, r1
 80079f8:	2900      	cmp	r1, #0
 80079fa:	d1f5      	bne.n	80079e8 <_printf_i+0x16c>
 80079fc:	e7b9      	b.n	8007972 <_printf_i+0xf6>
 80079fe:	6813      	ldr	r3, [r2, #0]
 8007a00:	6825      	ldr	r5, [r4, #0]
 8007a02:	1d18      	adds	r0, r3, #4
 8007a04:	6961      	ldr	r1, [r4, #20]
 8007a06:	6010      	str	r0, [r2, #0]
 8007a08:	0628      	lsls	r0, r5, #24
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	d501      	bpl.n	8007a12 <_printf_i+0x196>
 8007a0e:	6019      	str	r1, [r3, #0]
 8007a10:	e002      	b.n	8007a18 <_printf_i+0x19c>
 8007a12:	066a      	lsls	r2, r5, #25
 8007a14:	d5fb      	bpl.n	8007a0e <_printf_i+0x192>
 8007a16:	8019      	strh	r1, [r3, #0]
 8007a18:	2300      	movs	r3, #0
 8007a1a:	4665      	mov	r5, ip
 8007a1c:	6123      	str	r3, [r4, #16]
 8007a1e:	e7b9      	b.n	8007994 <_printf_i+0x118>
 8007a20:	6813      	ldr	r3, [r2, #0]
 8007a22:	1d19      	adds	r1, r3, #4
 8007a24:	6011      	str	r1, [r2, #0]
 8007a26:	681d      	ldr	r5, [r3, #0]
 8007a28:	6862      	ldr	r2, [r4, #4]
 8007a2a:	2100      	movs	r1, #0
 8007a2c:	4628      	mov	r0, r5
 8007a2e:	f000 f8e1 	bl	8007bf4 <memchr>
 8007a32:	b108      	cbz	r0, 8007a38 <_printf_i+0x1bc>
 8007a34:	1b40      	subs	r0, r0, r5
 8007a36:	6060      	str	r0, [r4, #4]
 8007a38:	6863      	ldr	r3, [r4, #4]
 8007a3a:	6123      	str	r3, [r4, #16]
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a42:	e7a7      	b.n	8007994 <_printf_i+0x118>
 8007a44:	6923      	ldr	r3, [r4, #16]
 8007a46:	462a      	mov	r2, r5
 8007a48:	4639      	mov	r1, r7
 8007a4a:	4630      	mov	r0, r6
 8007a4c:	47c0      	blx	r8
 8007a4e:	3001      	adds	r0, #1
 8007a50:	d0aa      	beq.n	80079a8 <_printf_i+0x12c>
 8007a52:	6823      	ldr	r3, [r4, #0]
 8007a54:	079b      	lsls	r3, r3, #30
 8007a56:	d413      	bmi.n	8007a80 <_printf_i+0x204>
 8007a58:	68e0      	ldr	r0, [r4, #12]
 8007a5a:	9b03      	ldr	r3, [sp, #12]
 8007a5c:	4298      	cmp	r0, r3
 8007a5e:	bfb8      	it	lt
 8007a60:	4618      	movlt	r0, r3
 8007a62:	e7a3      	b.n	80079ac <_printf_i+0x130>
 8007a64:	2301      	movs	r3, #1
 8007a66:	464a      	mov	r2, r9
 8007a68:	4639      	mov	r1, r7
 8007a6a:	4630      	mov	r0, r6
 8007a6c:	47c0      	blx	r8
 8007a6e:	3001      	adds	r0, #1
 8007a70:	d09a      	beq.n	80079a8 <_printf_i+0x12c>
 8007a72:	3501      	adds	r5, #1
 8007a74:	68e3      	ldr	r3, [r4, #12]
 8007a76:	9a03      	ldr	r2, [sp, #12]
 8007a78:	1a9b      	subs	r3, r3, r2
 8007a7a:	42ab      	cmp	r3, r5
 8007a7c:	dcf2      	bgt.n	8007a64 <_printf_i+0x1e8>
 8007a7e:	e7eb      	b.n	8007a58 <_printf_i+0x1dc>
 8007a80:	2500      	movs	r5, #0
 8007a82:	f104 0919 	add.w	r9, r4, #25
 8007a86:	e7f5      	b.n	8007a74 <_printf_i+0x1f8>
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d1ac      	bne.n	80079e6 <_printf_i+0x16a>
 8007a8c:	7803      	ldrb	r3, [r0, #0]
 8007a8e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a92:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a96:	e76c      	b.n	8007972 <_printf_i+0xf6>
 8007a98:	08008039 	.word	0x08008039
 8007a9c:	0800804a 	.word	0x0800804a

08007aa0 <_sbrk_r>:
 8007aa0:	b538      	push	{r3, r4, r5, lr}
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	4c05      	ldr	r4, [pc, #20]	; (8007abc <_sbrk_r+0x1c>)
 8007aa6:	4605      	mov	r5, r0
 8007aa8:	4608      	mov	r0, r1
 8007aaa:	6023      	str	r3, [r4, #0]
 8007aac:	f7f9 fb56 	bl	800115c <_sbrk>
 8007ab0:	1c43      	adds	r3, r0, #1
 8007ab2:	d102      	bne.n	8007aba <_sbrk_r+0x1a>
 8007ab4:	6823      	ldr	r3, [r4, #0]
 8007ab6:	b103      	cbz	r3, 8007aba <_sbrk_r+0x1a>
 8007ab8:	602b      	str	r3, [r5, #0]
 8007aba:	bd38      	pop	{r3, r4, r5, pc}
 8007abc:	20001db8 	.word	0x20001db8

08007ac0 <__sread>:
 8007ac0:	b510      	push	{r4, lr}
 8007ac2:	460c      	mov	r4, r1
 8007ac4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ac8:	f000 f8e4 	bl	8007c94 <_read_r>
 8007acc:	2800      	cmp	r0, #0
 8007ace:	bfab      	itete	ge
 8007ad0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007ad2:	89a3      	ldrhlt	r3, [r4, #12]
 8007ad4:	181b      	addge	r3, r3, r0
 8007ad6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007ada:	bfac      	ite	ge
 8007adc:	6563      	strge	r3, [r4, #84]	; 0x54
 8007ade:	81a3      	strhlt	r3, [r4, #12]
 8007ae0:	bd10      	pop	{r4, pc}

08007ae2 <__swrite>:
 8007ae2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ae6:	461f      	mov	r7, r3
 8007ae8:	898b      	ldrh	r3, [r1, #12]
 8007aea:	4605      	mov	r5, r0
 8007aec:	05db      	lsls	r3, r3, #23
 8007aee:	460c      	mov	r4, r1
 8007af0:	4616      	mov	r6, r2
 8007af2:	d505      	bpl.n	8007b00 <__swrite+0x1e>
 8007af4:	2302      	movs	r3, #2
 8007af6:	2200      	movs	r2, #0
 8007af8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007afc:	f000 f868 	bl	8007bd0 <_lseek_r>
 8007b00:	89a3      	ldrh	r3, [r4, #12]
 8007b02:	4632      	mov	r2, r6
 8007b04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b08:	81a3      	strh	r3, [r4, #12]
 8007b0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b0e:	463b      	mov	r3, r7
 8007b10:	4628      	mov	r0, r5
 8007b12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b16:	f000 b817 	b.w	8007b48 <_write_r>

08007b1a <__sseek>:
 8007b1a:	b510      	push	{r4, lr}
 8007b1c:	460c      	mov	r4, r1
 8007b1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b22:	f000 f855 	bl	8007bd0 <_lseek_r>
 8007b26:	1c43      	adds	r3, r0, #1
 8007b28:	89a3      	ldrh	r3, [r4, #12]
 8007b2a:	bf15      	itete	ne
 8007b2c:	6560      	strne	r0, [r4, #84]	; 0x54
 8007b2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007b32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007b36:	81a3      	strheq	r3, [r4, #12]
 8007b38:	bf18      	it	ne
 8007b3a:	81a3      	strhne	r3, [r4, #12]
 8007b3c:	bd10      	pop	{r4, pc}

08007b3e <__sclose>:
 8007b3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b42:	f000 b813 	b.w	8007b6c <_close_r>
	...

08007b48 <_write_r>:
 8007b48:	b538      	push	{r3, r4, r5, lr}
 8007b4a:	4605      	mov	r5, r0
 8007b4c:	4608      	mov	r0, r1
 8007b4e:	4611      	mov	r1, r2
 8007b50:	2200      	movs	r2, #0
 8007b52:	4c05      	ldr	r4, [pc, #20]	; (8007b68 <_write_r+0x20>)
 8007b54:	6022      	str	r2, [r4, #0]
 8007b56:	461a      	mov	r2, r3
 8007b58:	f7f9 f992 	bl	8000e80 <_write>
 8007b5c:	1c43      	adds	r3, r0, #1
 8007b5e:	d102      	bne.n	8007b66 <_write_r+0x1e>
 8007b60:	6823      	ldr	r3, [r4, #0]
 8007b62:	b103      	cbz	r3, 8007b66 <_write_r+0x1e>
 8007b64:	602b      	str	r3, [r5, #0]
 8007b66:	bd38      	pop	{r3, r4, r5, pc}
 8007b68:	20001db8 	.word	0x20001db8

08007b6c <_close_r>:
 8007b6c:	b538      	push	{r3, r4, r5, lr}
 8007b6e:	2300      	movs	r3, #0
 8007b70:	4c05      	ldr	r4, [pc, #20]	; (8007b88 <_close_r+0x1c>)
 8007b72:	4605      	mov	r5, r0
 8007b74:	4608      	mov	r0, r1
 8007b76:	6023      	str	r3, [r4, #0]
 8007b78:	f7f9 fabf 	bl	80010fa <_close>
 8007b7c:	1c43      	adds	r3, r0, #1
 8007b7e:	d102      	bne.n	8007b86 <_close_r+0x1a>
 8007b80:	6823      	ldr	r3, [r4, #0]
 8007b82:	b103      	cbz	r3, 8007b86 <_close_r+0x1a>
 8007b84:	602b      	str	r3, [r5, #0]
 8007b86:	bd38      	pop	{r3, r4, r5, pc}
 8007b88:	20001db8 	.word	0x20001db8

08007b8c <_fstat_r>:
 8007b8c:	b538      	push	{r3, r4, r5, lr}
 8007b8e:	2300      	movs	r3, #0
 8007b90:	4c06      	ldr	r4, [pc, #24]	; (8007bac <_fstat_r+0x20>)
 8007b92:	4605      	mov	r5, r0
 8007b94:	4608      	mov	r0, r1
 8007b96:	4611      	mov	r1, r2
 8007b98:	6023      	str	r3, [r4, #0]
 8007b9a:	f7f9 fab9 	bl	8001110 <_fstat>
 8007b9e:	1c43      	adds	r3, r0, #1
 8007ba0:	d102      	bne.n	8007ba8 <_fstat_r+0x1c>
 8007ba2:	6823      	ldr	r3, [r4, #0]
 8007ba4:	b103      	cbz	r3, 8007ba8 <_fstat_r+0x1c>
 8007ba6:	602b      	str	r3, [r5, #0]
 8007ba8:	bd38      	pop	{r3, r4, r5, pc}
 8007baa:	bf00      	nop
 8007bac:	20001db8 	.word	0x20001db8

08007bb0 <_isatty_r>:
 8007bb0:	b538      	push	{r3, r4, r5, lr}
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	4c05      	ldr	r4, [pc, #20]	; (8007bcc <_isatty_r+0x1c>)
 8007bb6:	4605      	mov	r5, r0
 8007bb8:	4608      	mov	r0, r1
 8007bba:	6023      	str	r3, [r4, #0]
 8007bbc:	f7f9 fab7 	bl	800112e <_isatty>
 8007bc0:	1c43      	adds	r3, r0, #1
 8007bc2:	d102      	bne.n	8007bca <_isatty_r+0x1a>
 8007bc4:	6823      	ldr	r3, [r4, #0]
 8007bc6:	b103      	cbz	r3, 8007bca <_isatty_r+0x1a>
 8007bc8:	602b      	str	r3, [r5, #0]
 8007bca:	bd38      	pop	{r3, r4, r5, pc}
 8007bcc:	20001db8 	.word	0x20001db8

08007bd0 <_lseek_r>:
 8007bd0:	b538      	push	{r3, r4, r5, lr}
 8007bd2:	4605      	mov	r5, r0
 8007bd4:	4608      	mov	r0, r1
 8007bd6:	4611      	mov	r1, r2
 8007bd8:	2200      	movs	r2, #0
 8007bda:	4c05      	ldr	r4, [pc, #20]	; (8007bf0 <_lseek_r+0x20>)
 8007bdc:	6022      	str	r2, [r4, #0]
 8007bde:	461a      	mov	r2, r3
 8007be0:	f7f9 faaf 	bl	8001142 <_lseek>
 8007be4:	1c43      	adds	r3, r0, #1
 8007be6:	d102      	bne.n	8007bee <_lseek_r+0x1e>
 8007be8:	6823      	ldr	r3, [r4, #0]
 8007bea:	b103      	cbz	r3, 8007bee <_lseek_r+0x1e>
 8007bec:	602b      	str	r3, [r5, #0]
 8007bee:	bd38      	pop	{r3, r4, r5, pc}
 8007bf0:	20001db8 	.word	0x20001db8

08007bf4 <memchr>:
 8007bf4:	b510      	push	{r4, lr}
 8007bf6:	b2c9      	uxtb	r1, r1
 8007bf8:	4402      	add	r2, r0
 8007bfa:	4290      	cmp	r0, r2
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	d101      	bne.n	8007c04 <memchr+0x10>
 8007c00:	2300      	movs	r3, #0
 8007c02:	e003      	b.n	8007c0c <memchr+0x18>
 8007c04:	781c      	ldrb	r4, [r3, #0]
 8007c06:	3001      	adds	r0, #1
 8007c08:	428c      	cmp	r4, r1
 8007c0a:	d1f6      	bne.n	8007bfa <memchr+0x6>
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	bd10      	pop	{r4, pc}

08007c10 <memmove>:
 8007c10:	4288      	cmp	r0, r1
 8007c12:	b510      	push	{r4, lr}
 8007c14:	eb01 0302 	add.w	r3, r1, r2
 8007c18:	d807      	bhi.n	8007c2a <memmove+0x1a>
 8007c1a:	1e42      	subs	r2, r0, #1
 8007c1c:	4299      	cmp	r1, r3
 8007c1e:	d00a      	beq.n	8007c36 <memmove+0x26>
 8007c20:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c24:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007c28:	e7f8      	b.n	8007c1c <memmove+0xc>
 8007c2a:	4283      	cmp	r3, r0
 8007c2c:	d9f5      	bls.n	8007c1a <memmove+0xa>
 8007c2e:	1881      	adds	r1, r0, r2
 8007c30:	1ad2      	subs	r2, r2, r3
 8007c32:	42d3      	cmn	r3, r2
 8007c34:	d100      	bne.n	8007c38 <memmove+0x28>
 8007c36:	bd10      	pop	{r4, pc}
 8007c38:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007c3c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007c40:	e7f7      	b.n	8007c32 <memmove+0x22>

08007c42 <__malloc_lock>:
 8007c42:	4770      	bx	lr

08007c44 <__malloc_unlock>:
 8007c44:	4770      	bx	lr

08007c46 <_realloc_r>:
 8007c46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c48:	4607      	mov	r7, r0
 8007c4a:	4614      	mov	r4, r2
 8007c4c:	460e      	mov	r6, r1
 8007c4e:	b921      	cbnz	r1, 8007c5a <_realloc_r+0x14>
 8007c50:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007c54:	4611      	mov	r1, r2
 8007c56:	f7ff bbef 	b.w	8007438 <_malloc_r>
 8007c5a:	b922      	cbnz	r2, 8007c66 <_realloc_r+0x20>
 8007c5c:	f7ff fba0 	bl	80073a0 <_free_r>
 8007c60:	4625      	mov	r5, r4
 8007c62:	4628      	mov	r0, r5
 8007c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c66:	f000 f827 	bl	8007cb8 <_malloc_usable_size_r>
 8007c6a:	42a0      	cmp	r0, r4
 8007c6c:	d20f      	bcs.n	8007c8e <_realloc_r+0x48>
 8007c6e:	4621      	mov	r1, r4
 8007c70:	4638      	mov	r0, r7
 8007c72:	f7ff fbe1 	bl	8007438 <_malloc_r>
 8007c76:	4605      	mov	r5, r0
 8007c78:	2800      	cmp	r0, #0
 8007c7a:	d0f2      	beq.n	8007c62 <_realloc_r+0x1c>
 8007c7c:	4631      	mov	r1, r6
 8007c7e:	4622      	mov	r2, r4
 8007c80:	f7ff f83e 	bl	8006d00 <memcpy>
 8007c84:	4631      	mov	r1, r6
 8007c86:	4638      	mov	r0, r7
 8007c88:	f7ff fb8a 	bl	80073a0 <_free_r>
 8007c8c:	e7e9      	b.n	8007c62 <_realloc_r+0x1c>
 8007c8e:	4635      	mov	r5, r6
 8007c90:	e7e7      	b.n	8007c62 <_realloc_r+0x1c>
	...

08007c94 <_read_r>:
 8007c94:	b538      	push	{r3, r4, r5, lr}
 8007c96:	4605      	mov	r5, r0
 8007c98:	4608      	mov	r0, r1
 8007c9a:	4611      	mov	r1, r2
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	4c05      	ldr	r4, [pc, #20]	; (8007cb4 <_read_r+0x20>)
 8007ca0:	6022      	str	r2, [r4, #0]
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	f7f9 fa0c 	bl	80010c0 <_read>
 8007ca8:	1c43      	adds	r3, r0, #1
 8007caa:	d102      	bne.n	8007cb2 <_read_r+0x1e>
 8007cac:	6823      	ldr	r3, [r4, #0]
 8007cae:	b103      	cbz	r3, 8007cb2 <_read_r+0x1e>
 8007cb0:	602b      	str	r3, [r5, #0]
 8007cb2:	bd38      	pop	{r3, r4, r5, pc}
 8007cb4:	20001db8 	.word	0x20001db8

08007cb8 <_malloc_usable_size_r>:
 8007cb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cbc:	1f18      	subs	r0, r3, #4
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	bfbc      	itt	lt
 8007cc2:	580b      	ldrlt	r3, [r1, r0]
 8007cc4:	18c0      	addlt	r0, r0, r3
 8007cc6:	4770      	bx	lr

08007cc8 <_init>:
 8007cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cca:	bf00      	nop
 8007ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cce:	bc08      	pop	{r3}
 8007cd0:	469e      	mov	lr, r3
 8007cd2:	4770      	bx	lr

08007cd4 <_fini>:
 8007cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cd6:	bf00      	nop
 8007cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cda:	bc08      	pop	{r3}
 8007cdc:	469e      	mov	lr, r3
 8007cde:	4770      	bx	lr
