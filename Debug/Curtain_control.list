
Curtain_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005624  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08005734  08005734  00015734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057d4  080057d4  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080057d4  080057d4  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080057d4  080057d4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057d4  080057d4  000157d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057d8  080057d8  000157d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080057dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bc4  20000010  080057ec  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001bd4  080057ec  00021bd4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016d66  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003297  00000000  00000000  00036d9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012f0  00000000  00000000  0003a038  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001158  00000000  00000000  0003b328  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000162fd  00000000  00000000  0003c480  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010912  00000000  00000000  0005277d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007d779  00000000  00000000  0006308f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e0808  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d10  00000000  00000000  000e0884  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	0800571c 	.word	0x0800571c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	0800571c 	.word	0x0800571c

08000150 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b084      	sub	sp, #16
 8000154:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000156:	1d3b      	adds	r3, r7, #4
 8000158:	2200      	movs	r2, #0
 800015a:	601a      	str	r2, [r3, #0]
 800015c:	605a      	str	r2, [r3, #4]
 800015e:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000160:	4b20      	ldr	r3, [pc, #128]	; (80001e4 <MX_ADC1_Init+0x94>)
 8000162:	4a21      	ldr	r2, [pc, #132]	; (80001e8 <MX_ADC1_Init+0x98>)
 8000164:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000166:	4b1f      	ldr	r3, [pc, #124]	; (80001e4 <MX_ADC1_Init+0x94>)
 8000168:	f44f 7280 	mov.w	r2, #256	; 0x100
 800016c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800016e:	4b1d      	ldr	r3, [pc, #116]	; (80001e4 <MX_ADC1_Init+0x94>)
 8000170:	2201      	movs	r2, #1
 8000172:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000174:	4b1b      	ldr	r3, [pc, #108]	; (80001e4 <MX_ADC1_Init+0x94>)
 8000176:	2200      	movs	r2, #0
 8000178:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800017a:	4b1a      	ldr	r3, [pc, #104]	; (80001e4 <MX_ADC1_Init+0x94>)
 800017c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000180:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000182:	4b18      	ldr	r3, [pc, #96]	; (80001e4 <MX_ADC1_Init+0x94>)
 8000184:	2200      	movs	r2, #0
 8000186:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000188:	4b16      	ldr	r3, [pc, #88]	; (80001e4 <MX_ADC1_Init+0x94>)
 800018a:	2202      	movs	r2, #2
 800018c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800018e:	4815      	ldr	r0, [pc, #84]	; (80001e4 <MX_ADC1_Init+0x94>)
 8000190:	f000 fd84 	bl	8000c9c <HAL_ADC_Init>
 8000194:	4603      	mov	r3, r0
 8000196:	2b00      	cmp	r3, #0
 8000198:	d001      	beq.n	800019e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800019a:	f000 fb40 	bl	800081e <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800019e:	2307      	movs	r3, #7
 80001a0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80001a2:	2301      	movs	r3, #1
 80001a4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80001a6:	2300      	movs	r3, #0
 80001a8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001aa:	1d3b      	adds	r3, r7, #4
 80001ac:	4619      	mov	r1, r3
 80001ae:	480d      	ldr	r0, [pc, #52]	; (80001e4 <MX_ADC1_Init+0x94>)
 80001b0:	f000 ff46 	bl	8001040 <HAL_ADC_ConfigChannel>
 80001b4:	4603      	mov	r3, r0
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d001      	beq.n	80001be <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80001ba:	f000 fb30 	bl	800081e <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80001be:	2308      	movs	r3, #8
 80001c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80001c2:	2302      	movs	r3, #2
 80001c4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001c6:	1d3b      	adds	r3, r7, #4
 80001c8:	4619      	mov	r1, r3
 80001ca:	4806      	ldr	r0, [pc, #24]	; (80001e4 <MX_ADC1_Init+0x94>)
 80001cc:	f000 ff38 	bl	8001040 <HAL_ADC_ConfigChannel>
 80001d0:	4603      	mov	r3, r0
 80001d2:	2b00      	cmp	r3, #0
 80001d4:	d001      	beq.n	80001da <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80001d6:	f000 fb22 	bl	800081e <Error_Handler>
  }

}
 80001da:	bf00      	nop
 80001dc:	3710      	adds	r7, #16
 80001de:	46bd      	mov	sp, r7
 80001e0:	bd80      	pop	{r7, pc}
 80001e2:	bf00      	nop
 80001e4:	2000193c 	.word	0x2000193c
 80001e8:	40012400 	.word	0x40012400

080001ec <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b08a      	sub	sp, #40	; 0x28
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001f4:	f107 0318 	add.w	r3, r7, #24
 80001f8:	2200      	movs	r2, #0
 80001fa:	601a      	str	r2, [r3, #0]
 80001fc:	605a      	str	r2, [r3, #4]
 80001fe:	609a      	str	r2, [r3, #8]
 8000200:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	4a33      	ldr	r2, [pc, #204]	; (80002d4 <HAL_ADC_MspInit+0xe8>)
 8000208:	4293      	cmp	r3, r2
 800020a:	d15f      	bne.n	80002cc <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800020c:	4b32      	ldr	r3, [pc, #200]	; (80002d8 <HAL_ADC_MspInit+0xec>)
 800020e:	699b      	ldr	r3, [r3, #24]
 8000210:	4a31      	ldr	r2, [pc, #196]	; (80002d8 <HAL_ADC_MspInit+0xec>)
 8000212:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000216:	6193      	str	r3, [r2, #24]
 8000218:	4b2f      	ldr	r3, [pc, #188]	; (80002d8 <HAL_ADC_MspInit+0xec>)
 800021a:	699b      	ldr	r3, [r3, #24]
 800021c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000220:	617b      	str	r3, [r7, #20]
 8000222:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000224:	4b2c      	ldr	r3, [pc, #176]	; (80002d8 <HAL_ADC_MspInit+0xec>)
 8000226:	699b      	ldr	r3, [r3, #24]
 8000228:	4a2b      	ldr	r2, [pc, #172]	; (80002d8 <HAL_ADC_MspInit+0xec>)
 800022a:	f043 0304 	orr.w	r3, r3, #4
 800022e:	6193      	str	r3, [r2, #24]
 8000230:	4b29      	ldr	r3, [pc, #164]	; (80002d8 <HAL_ADC_MspInit+0xec>)
 8000232:	699b      	ldr	r3, [r3, #24]
 8000234:	f003 0304 	and.w	r3, r3, #4
 8000238:	613b      	str	r3, [r7, #16]
 800023a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800023c:	4b26      	ldr	r3, [pc, #152]	; (80002d8 <HAL_ADC_MspInit+0xec>)
 800023e:	699b      	ldr	r3, [r3, #24]
 8000240:	4a25      	ldr	r2, [pc, #148]	; (80002d8 <HAL_ADC_MspInit+0xec>)
 8000242:	f043 0308 	orr.w	r3, r3, #8
 8000246:	6193      	str	r3, [r2, #24]
 8000248:	4b23      	ldr	r3, [pc, #140]	; (80002d8 <HAL_ADC_MspInit+0xec>)
 800024a:	699b      	ldr	r3, [r3, #24]
 800024c:	f003 0308 	and.w	r3, r3, #8
 8000250:	60fb      	str	r3, [r7, #12]
 8000252:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = ADC1_Pin;
 8000254:	2380      	movs	r3, #128	; 0x80
 8000256:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000258:	2303      	movs	r3, #3
 800025a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_GPIO_Port, &GPIO_InitStruct);
 800025c:	f107 0318 	add.w	r3, r7, #24
 8000260:	4619      	mov	r1, r3
 8000262:	481e      	ldr	r0, [pc, #120]	; (80002dc <HAL_ADC_MspInit+0xf0>)
 8000264:	f001 fbd2 	bl	8001a0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC2_Pin;
 8000268:	2301      	movs	r3, #1
 800026a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800026c:	2303      	movs	r3, #3
 800026e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC2_GPIO_Port, &GPIO_InitStruct);
 8000270:	f107 0318 	add.w	r3, r7, #24
 8000274:	4619      	mov	r1, r3
 8000276:	481a      	ldr	r0, [pc, #104]	; (80002e0 <HAL_ADC_MspInit+0xf4>)
 8000278:	f001 fbc8 	bl	8001a0c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800027c:	4b19      	ldr	r3, [pc, #100]	; (80002e4 <HAL_ADC_MspInit+0xf8>)
 800027e:	4a1a      	ldr	r2, [pc, #104]	; (80002e8 <HAL_ADC_MspInit+0xfc>)
 8000280:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000282:	4b18      	ldr	r3, [pc, #96]	; (80002e4 <HAL_ADC_MspInit+0xf8>)
 8000284:	2200      	movs	r2, #0
 8000286:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000288:	4b16      	ldr	r3, [pc, #88]	; (80002e4 <HAL_ADC_MspInit+0xf8>)
 800028a:	2200      	movs	r2, #0
 800028c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800028e:	4b15      	ldr	r3, [pc, #84]	; (80002e4 <HAL_ADC_MspInit+0xf8>)
 8000290:	2280      	movs	r2, #128	; 0x80
 8000292:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000294:	4b13      	ldr	r3, [pc, #76]	; (80002e4 <HAL_ADC_MspInit+0xf8>)
 8000296:	f44f 7200 	mov.w	r2, #512	; 0x200
 800029a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800029c:	4b11      	ldr	r3, [pc, #68]	; (80002e4 <HAL_ADC_MspInit+0xf8>)
 800029e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80002a2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80002a4:	4b0f      	ldr	r3, [pc, #60]	; (80002e4 <HAL_ADC_MspInit+0xf8>)
 80002a6:	2220      	movs	r2, #32
 80002a8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80002aa:	4b0e      	ldr	r3, [pc, #56]	; (80002e4 <HAL_ADC_MspInit+0xf8>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80002b0:	480c      	ldr	r0, [pc, #48]	; (80002e4 <HAL_ADC_MspInit+0xf8>)
 80002b2:	f001 f9bd 	bl	8001630 <HAL_DMA_Init>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d001      	beq.n	80002c0 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 80002bc:	f000 faaf 	bl	800081e <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	4a08      	ldr	r2, [pc, #32]	; (80002e4 <HAL_ADC_MspInit+0xf8>)
 80002c4:	621a      	str	r2, [r3, #32]
 80002c6:	4a07      	ldr	r2, [pc, #28]	; (80002e4 <HAL_ADC_MspInit+0xf8>)
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80002cc:	bf00      	nop
 80002ce:	3728      	adds	r7, #40	; 0x28
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	40012400 	.word	0x40012400
 80002d8:	40021000 	.word	0x40021000
 80002dc:	40010800 	.word	0x40010800
 80002e0:	40010c00 	.word	0x40010c00
 80002e4:	2000196c 	.word	0x2000196c
 80002e8:	40020008 	.word	0x40020008

080002ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b082      	sub	sp, #8
 80002f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002f2:	4b0c      	ldr	r3, [pc, #48]	; (8000324 <MX_DMA_Init+0x38>)
 80002f4:	695b      	ldr	r3, [r3, #20]
 80002f6:	4a0b      	ldr	r2, [pc, #44]	; (8000324 <MX_DMA_Init+0x38>)
 80002f8:	f043 0301 	orr.w	r3, r3, #1
 80002fc:	6153      	str	r3, [r2, #20]
 80002fe:	4b09      	ldr	r3, [pc, #36]	; (8000324 <MX_DMA_Init+0x38>)
 8000300:	695b      	ldr	r3, [r3, #20]
 8000302:	f003 0301 	and.w	r3, r3, #1
 8000306:	607b      	str	r3, [r7, #4]
 8000308:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800030a:	2200      	movs	r2, #0
 800030c:	2100      	movs	r1, #0
 800030e:	200b      	movs	r0, #11
 8000310:	f001 f957 	bl	80015c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000314:	200b      	movs	r0, #11
 8000316:	f001 f970 	bl	80015fa <HAL_NVIC_EnableIRQ>

}
 800031a:	bf00      	nop
 800031c:	3708      	adds	r7, #8
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	40021000 	.word	0x40021000

08000328 <HAL_GPIO_EXTI_Callback>:
  .stack_size = 128 * 4
};

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0
 800032e:	4603      	mov	r3, r0
 8000330:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 8000332:	88fb      	ldrh	r3, [r7, #6]
 8000334:	2b10      	cmp	r3, #16
 8000336:	d012      	beq.n	800035e <HAL_GPIO_EXTI_Callback+0x36>
 8000338:	2b10      	cmp	r3, #16
 800033a:	dc02      	bgt.n	8000342 <HAL_GPIO_EXTI_Callback+0x1a>
 800033c:	2b08      	cmp	r3, #8
 800033e:	d005      	beq.n	800034c <HAL_GPIO_EXTI_Callback+0x24>
	case GPIO_PIN_6:
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); //PC13 Led
		buttom_flag=4;
		break;
	}
}
 8000340:	e028      	b.n	8000394 <HAL_GPIO_EXTI_Callback+0x6c>
	switch (GPIO_Pin) {
 8000342:	2b20      	cmp	r3, #32
 8000344:	d014      	beq.n	8000370 <HAL_GPIO_EXTI_Callback+0x48>
 8000346:	2b40      	cmp	r3, #64	; 0x40
 8000348:	d01b      	beq.n	8000382 <HAL_GPIO_EXTI_Callback+0x5a>
}
 800034a:	e023      	b.n	8000394 <HAL_GPIO_EXTI_Callback+0x6c>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); //PC13 Led
 800034c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000350:	4812      	ldr	r0, [pc, #72]	; (800039c <HAL_GPIO_EXTI_Callback+0x74>)
 8000352:	f001 fccd 	bl	8001cf0 <HAL_GPIO_TogglePin>
		buttom_flag=1;
 8000356:	4b12      	ldr	r3, [pc, #72]	; (80003a0 <HAL_GPIO_EXTI_Callback+0x78>)
 8000358:	2201      	movs	r2, #1
 800035a:	601a      	str	r2, [r3, #0]
		break;
 800035c:	e01a      	b.n	8000394 <HAL_GPIO_EXTI_Callback+0x6c>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); //PC13 Led
 800035e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000362:	480e      	ldr	r0, [pc, #56]	; (800039c <HAL_GPIO_EXTI_Callback+0x74>)
 8000364:	f001 fcc4 	bl	8001cf0 <HAL_GPIO_TogglePin>
		buttom_flag=2;
 8000368:	4b0d      	ldr	r3, [pc, #52]	; (80003a0 <HAL_GPIO_EXTI_Callback+0x78>)
 800036a:	2202      	movs	r2, #2
 800036c:	601a      	str	r2, [r3, #0]
		break;
 800036e:	e011      	b.n	8000394 <HAL_GPIO_EXTI_Callback+0x6c>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); //PC13 Led
 8000370:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000374:	4809      	ldr	r0, [pc, #36]	; (800039c <HAL_GPIO_EXTI_Callback+0x74>)
 8000376:	f001 fcbb 	bl	8001cf0 <HAL_GPIO_TogglePin>
		buttom_flag=3;
 800037a:	4b09      	ldr	r3, [pc, #36]	; (80003a0 <HAL_GPIO_EXTI_Callback+0x78>)
 800037c:	2203      	movs	r2, #3
 800037e:	601a      	str	r2, [r3, #0]
		break;
 8000380:	e008      	b.n	8000394 <HAL_GPIO_EXTI_Callback+0x6c>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); //PC13 Led
 8000382:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000386:	4805      	ldr	r0, [pc, #20]	; (800039c <HAL_GPIO_EXTI_Callback+0x74>)
 8000388:	f001 fcb2 	bl	8001cf0 <HAL_GPIO_TogglePin>
		buttom_flag=4;
 800038c:	4b04      	ldr	r3, [pc, #16]	; (80003a0 <HAL_GPIO_EXTI_Callback+0x78>)
 800038e:	2204      	movs	r2, #4
 8000390:	601a      	str	r2, [r3, #0]
		break;
 8000392:	bf00      	nop
}
 8000394:	bf00      	nop
 8000396:	3708      	adds	r7, #8
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}
 800039c:	40011000 	.word	0x40011000
 80003a0:	20000030 	.word	0x20000030

080003a4 <zheng_zhuan>:

void zheng_zhuan(void) {
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MC_1_GPIO_Port, MC_1_Pin, GPIO_PIN_RESET);
 80003a8:	2200      	movs	r2, #0
 80003aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003ae:	4805      	ldr	r0, [pc, #20]	; (80003c4 <zheng_zhuan+0x20>)
 80003b0:	f001 fc86 	bl	8001cc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MC_2_GPIO_Port, MC_2_Pin, GPIO_PIN_SET);
 80003b4:	2201      	movs	r2, #1
 80003b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003ba:	4802      	ldr	r0, [pc, #8]	; (80003c4 <zheng_zhuan+0x20>)
 80003bc:	f001 fc80 	bl	8001cc0 <HAL_GPIO_WritePin>
}
 80003c0:	bf00      	nop
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	40010800 	.word	0x40010800

080003c8 <fan_zhuan>:
void fan_zhuan(void) {
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MC_1_GPIO_Port, MC_1_Pin, GPIO_PIN_SET);
 80003cc:	2201      	movs	r2, #1
 80003ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003d2:	4805      	ldr	r0, [pc, #20]	; (80003e8 <fan_zhuan+0x20>)
 80003d4:	f001 fc74 	bl	8001cc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MC_2_GPIO_Port, MC_2_Pin, GPIO_PIN_RESET);
 80003d8:	2200      	movs	r2, #0
 80003da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003de:	4802      	ldr	r0, [pc, #8]	; (80003e8 <fan_zhuan+0x20>)
 80003e0:	f001 fc6e 	bl	8001cc0 <HAL_GPIO_WritePin>
}
 80003e4:	bf00      	nop
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	40010800 	.word	0x40010800

080003ec <stop_motor>:
void stop_motor(void) {
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MC_1_GPIO_Port, MC_1_Pin, GPIO_PIN_RESET);
 80003f0:	2200      	movs	r2, #0
 80003f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003f6:	4808      	ldr	r0, [pc, #32]	; (8000418 <stop_motor+0x2c>)
 80003f8:	f001 fc62 	bl	8001cc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MC_2_GPIO_Port, MC_2_Pin, GPIO_PIN_RESET);
 80003fc:	2200      	movs	r2, #0
 80003fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000402:	4805      	ldr	r0, [pc, #20]	; (8000418 <stop_motor+0x2c>)
 8000404:	f001 fc5c 	bl	8001cc0 <HAL_GPIO_WritePin>
	user_pwm_setvalue_1(0);
 8000408:	2000      	movs	r0, #0
 800040a:	f000 fb83 	bl	8000b14 <user_pwm_setvalue_1>
	user_pwm_setvalue_2(0);
 800040e:	2000      	movs	r0, #0
 8000410:	f000 fb9e 	bl	8000b50 <user_pwm_setvalue_2>
}
 8000414:	bf00      	nop
 8000416:	bd80      	pop	{r7, pc}
 8000418:	40010800 	.word	0x40010800

0800041c <turn_on_motor>:
void lock_motor(void) {
	HAL_GPIO_WritePin(MC_1_GPIO_Port, MC_1_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(MC_2_GPIO_Port, MC_2_Pin, GPIO_PIN_SET);
}
void turn_on_motor(int slow_time,int time,int slow_pwm,int pwm){
 800041c:	b580      	push	{r7, lr}
 800041e:	b084      	sub	sp, #16
 8000420:	af00      	add	r7, sp, #0
 8000422:	60f8      	str	r0, [r7, #12]
 8000424:	60b9      	str	r1, [r7, #8]
 8000426:	607a      	str	r2, [r7, #4]
 8000428:	603b      	str	r3, [r7, #0]
	zheng_zhuan();
 800042a:	f7ff ffbb 	bl	80003a4 <zheng_zhuan>
	user_pwm_setvalue_1(slow_pwm);
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	b29b      	uxth	r3, r3
 8000432:	4618      	mov	r0, r3
 8000434:	f000 fb6e 	bl	8000b14 <user_pwm_setvalue_1>
	osDelay(slow_time);
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	4618      	mov	r0, r3
 800043c:	f002 fdae 	bl	8002f9c <osDelay>
	user_pwm_setvalue_1(pwm);
 8000440:	683b      	ldr	r3, [r7, #0]
 8000442:	b29b      	uxth	r3, r3
 8000444:	4618      	mov	r0, r3
 8000446:	f000 fb65 	bl	8000b14 <user_pwm_setvalue_1>
	osDelay(time);
 800044a:	68bb      	ldr	r3, [r7, #8]
 800044c:	4618      	mov	r0, r3
 800044e:	f002 fda5 	bl	8002f9c <osDelay>
	user_pwm_setvalue_1(slow_pwm);
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	b29b      	uxth	r3, r3
 8000456:	4618      	mov	r0, r3
 8000458:	f000 fb5c 	bl	8000b14 <user_pwm_setvalue_1>
	osDelay(slow_time);
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	4618      	mov	r0, r3
 8000460:	f002 fd9c 	bl	8002f9c <osDelay>
	stop_motor();
 8000464:	f7ff ffc2 	bl	80003ec <stop_motor>

}
 8000468:	bf00      	nop
 800046a:	3710      	adds	r7, #16
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}

08000470 <turn_off_motor>:

void turn_off_motor(int slow_time,int time,int slow_pwm,int pwm){
 8000470:	b580      	push	{r7, lr}
 8000472:	b084      	sub	sp, #16
 8000474:	af00      	add	r7, sp, #0
 8000476:	60f8      	str	r0, [r7, #12]
 8000478:	60b9      	str	r1, [r7, #8]
 800047a:	607a      	str	r2, [r7, #4]
 800047c:	603b      	str	r3, [r7, #0]
	fan_zhuan();
 800047e:	f7ff ffa3 	bl	80003c8 <fan_zhuan>
	user_pwm_setvalue_2(slow_pwm);
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	b29b      	uxth	r3, r3
 8000486:	4618      	mov	r0, r3
 8000488:	f000 fb62 	bl	8000b50 <user_pwm_setvalue_2>
	osDelay(slow_time);
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	4618      	mov	r0, r3
 8000490:	f002 fd84 	bl	8002f9c <osDelay>
	user_pwm_setvalue_2(pwm);
 8000494:	683b      	ldr	r3, [r7, #0]
 8000496:	b29b      	uxth	r3, r3
 8000498:	4618      	mov	r0, r3
 800049a:	f000 fb59 	bl	8000b50 <user_pwm_setvalue_2>
	osDelay(time);
 800049e:	68bb      	ldr	r3, [r7, #8]
 80004a0:	4618      	mov	r0, r3
 80004a2:	f002 fd7b 	bl	8002f9c <osDelay>
	user_pwm_setvalue_2(slow_pwm);
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	b29b      	uxth	r3, r3
 80004aa:	4618      	mov	r0, r3
 80004ac:	f000 fb50 	bl	8000b50 <user_pwm_setvalue_2>
	osDelay(slow_time);
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	4618      	mov	r0, r3
 80004b4:	f002 fd72 	bl	8002f9c <osDelay>
	stop_motor();
 80004b8:	f7ff ff98 	bl	80003ec <stop_motor>

}
 80004bc:	bf00      	nop
 80004be:	3710      	adds	r7, #16
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}

080004c4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	stop_motor();
 80004c8:	f7ff ff90 	bl	80003ec <stop_motor>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004cc:	4a08      	ldr	r2, [pc, #32]	; (80004f0 <MX_FREERTOS_Init+0x2c>)
 80004ce:	2100      	movs	r1, #0
 80004d0:	4808      	ldr	r0, [pc, #32]	; (80004f4 <MX_FREERTOS_Init+0x30>)
 80004d2:	f002 fcb9 	bl	8002e48 <osThreadNew>
 80004d6:	4602      	mov	r2, r0
 80004d8:	4b07      	ldr	r3, [pc, #28]	; (80004f8 <MX_FREERTOS_Init+0x34>)
 80004da:	601a      	str	r2, [r3, #0]

  /* creation of myTaskoutput */
  myTaskoutputHandle = osThreadNew(StartTask02, NULL, &myTaskoutput_attributes);
 80004dc:	4a07      	ldr	r2, [pc, #28]	; (80004fc <MX_FREERTOS_Init+0x38>)
 80004de:	2100      	movs	r1, #0
 80004e0:	4807      	ldr	r0, [pc, #28]	; (8000500 <MX_FREERTOS_Init+0x3c>)
 80004e2:	f002 fcb1 	bl	8002e48 <osThreadNew>
 80004e6:	4602      	mov	r2, r0
 80004e8:	4b06      	ldr	r3, [pc, #24]	; (8000504 <MX_FREERTOS_Init+0x40>)
 80004ea:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80004ec:	bf00      	nop
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	0800577c 	.word	0x0800577c
 80004f4:	08000509 	.word	0x08000509
 80004f8:	200019b0 	.word	0x200019b0
 80004fc:	080057a0 	.word	0x080057a0
 8000500:	08000565 	.word	0x08000565
 8000504:	200019b4 	.word	0x200019b4

08000508 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	/* Infinite loop */
	for (;;) {

		if(buttom_flag==1){
 8000510:	4b13      	ldr	r3, [pc, #76]	; (8000560 <StartDefaultTask+0x58>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	2b01      	cmp	r3, #1
 8000516:	d10d      	bne.n	8000534 <StartDefaultTask+0x2c>
			turn_on_motor(1000, 5000, 500, 1000);
 8000518:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800051c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000520:	f241 3188 	movw	r1, #5000	; 0x1388
 8000524:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000528:	f7ff ff78 	bl	800041c <turn_on_motor>
			buttom_flag=0;
 800052c:	4b0c      	ldr	r3, [pc, #48]	; (8000560 <StartDefaultTask+0x58>)
 800052e:	2200      	movs	r2, #0
 8000530:	601a      	str	r2, [r3, #0]
 8000532:	e010      	b.n	8000556 <StartDefaultTask+0x4e>
		}else if(buttom_flag==2){
 8000534:	4b0a      	ldr	r3, [pc, #40]	; (8000560 <StartDefaultTask+0x58>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	2b02      	cmp	r3, #2
 800053a:	d10c      	bne.n	8000556 <StartDefaultTask+0x4e>
			turn_off_motor(1000, 5000, 500, 1000);
 800053c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000540:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000544:	f241 3188 	movw	r1, #5000	; 0x1388
 8000548:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800054c:	f7ff ff90 	bl	8000470 <turn_off_motor>
			buttom_flag=0;
 8000550:	4b03      	ldr	r3, [pc, #12]	; (8000560 <StartDefaultTask+0x58>)
 8000552:	2200      	movs	r2, #0
 8000554:	601a      	str	r2, [r3, #0]
		}
		osDelay(1);
 8000556:	2001      	movs	r0, #1
 8000558:	f002 fd20 	bl	8002f9c <osDelay>
		if(buttom_flag==1){
 800055c:	e7d8      	b.n	8000510 <StartDefaultTask+0x8>
 800055e:	bf00      	nop
 8000560:	20000030 	.word	0x20000030

08000564 <StartTask02>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &ADC_Value, 100);
 800056c:	2264      	movs	r2, #100	; 0x64
 800056e:	4922      	ldr	r1, [pc, #136]	; (80005f8 <StartTask02+0x94>)
 8000570:	4822      	ldr	r0, [pc, #136]	; (80005fc <StartTask02+0x98>)
 8000572:	f000 fc6b 	bl	8000e4c <HAL_ADC_Start_DMA>
	/* Infinite loop */
	for (;;) {
		for (i = 0, ad1 = 0, ad2 = 0; i < 100;) {
 8000576:	4b22      	ldr	r3, [pc, #136]	; (8000600 <StartTask02+0x9c>)
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	4b21      	ldr	r3, [pc, #132]	; (8000604 <StartTask02+0xa0>)
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	4b21      	ldr	r3, [pc, #132]	; (8000608 <StartTask02+0xa4>)
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	e01c      	b.n	80005c4 <StartTask02+0x60>
			ad1 += ADC_Value[i++];
 800058a:	4b1d      	ldr	r3, [pc, #116]	; (8000600 <StartTask02+0x9c>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	1c5a      	adds	r2, r3, #1
 8000590:	491b      	ldr	r1, [pc, #108]	; (8000600 <StartTask02+0x9c>)
 8000592:	600a      	str	r2, [r1, #0]
 8000594:	4a18      	ldr	r2, [pc, #96]	; (80005f8 <StartTask02+0x94>)
 8000596:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800059a:	4b1a      	ldr	r3, [pc, #104]	; (8000604 <StartTask02+0xa0>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4413      	add	r3, r2
 80005a0:	4a18      	ldr	r2, [pc, #96]	; (8000604 <StartTask02+0xa0>)
 80005a2:	6013      	str	r3, [r2, #0]
			ad2 += ADC_Value[i++];
 80005a4:	4b16      	ldr	r3, [pc, #88]	; (8000600 <StartTask02+0x9c>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	1c5a      	adds	r2, r3, #1
 80005aa:	4915      	ldr	r1, [pc, #84]	; (8000600 <StartTask02+0x9c>)
 80005ac:	600a      	str	r2, [r1, #0]
 80005ae:	4a12      	ldr	r2, [pc, #72]	; (80005f8 <StartTask02+0x94>)
 80005b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005b4:	4b14      	ldr	r3, [pc, #80]	; (8000608 <StartTask02+0xa4>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4413      	add	r3, r2
 80005ba:	4a13      	ldr	r2, [pc, #76]	; (8000608 <StartTask02+0xa4>)
 80005bc:	6013      	str	r3, [r2, #0]
			osDelay(10);
 80005be:	200a      	movs	r0, #10
 80005c0:	f002 fcec 	bl	8002f9c <osDelay>
		for (i = 0, ad1 = 0, ad2 = 0; i < 100;) {
 80005c4:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <StartTask02+0x9c>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	2b63      	cmp	r3, #99	; 0x63
 80005ca:	ddde      	ble.n	800058a <StartTask02+0x26>
		}
		ad1 /= 50;
 80005cc:	4b0d      	ldr	r3, [pc, #52]	; (8000604 <StartTask02+0xa0>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a0e      	ldr	r2, [pc, #56]	; (800060c <StartTask02+0xa8>)
 80005d2:	fba2 2303 	umull	r2, r3, r2, r3
 80005d6:	091b      	lsrs	r3, r3, #4
 80005d8:	4a0a      	ldr	r2, [pc, #40]	; (8000604 <StartTask02+0xa0>)
 80005da:	6013      	str	r3, [r2, #0]
		ad2 /= 50;
 80005dc:	4b0a      	ldr	r3, [pc, #40]	; (8000608 <StartTask02+0xa4>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a0a      	ldr	r2, [pc, #40]	; (800060c <StartTask02+0xa8>)
 80005e2:	fba2 2303 	umull	r2, r3, r2, r3
 80005e6:	091b      	lsrs	r3, r3, #4
 80005e8:	4a07      	ldr	r2, [pc, #28]	; (8000608 <StartTask02+0xa4>)
 80005ea:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80005ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005f0:	4807      	ldr	r0, [pc, #28]	; (8000610 <StartTask02+0xac>)
 80005f2:	f001 fb7d 	bl	8001cf0 <HAL_GPIO_TogglePin>
		for (i = 0, ad1 = 0, ad2 = 0; i < 100;) {
 80005f6:	e7be      	b.n	8000576 <StartTask02+0x12>
 80005f8:	200019b8 	.word	0x200019b8
 80005fc:	2000193c 	.word	0x2000193c
 8000600:	2000002c 	.word	0x2000002c
 8000604:	20001b48 	.word	0x20001b48
 8000608:	20001b4c 	.word	0x20001b4c
 800060c:	51eb851f 	.word	0x51eb851f
 8000610:	40011000 	.word	0x40011000

08000614 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b088      	sub	sp, #32
 8000618:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061a:	f107 0310 	add.w	r3, r7, #16
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	605a      	str	r2, [r3, #4]
 8000624:	609a      	str	r2, [r3, #8]
 8000626:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000628:	4b45      	ldr	r3, [pc, #276]	; (8000740 <MX_GPIO_Init+0x12c>)
 800062a:	699b      	ldr	r3, [r3, #24]
 800062c:	4a44      	ldr	r2, [pc, #272]	; (8000740 <MX_GPIO_Init+0x12c>)
 800062e:	f043 0310 	orr.w	r3, r3, #16
 8000632:	6193      	str	r3, [r2, #24]
 8000634:	4b42      	ldr	r3, [pc, #264]	; (8000740 <MX_GPIO_Init+0x12c>)
 8000636:	699b      	ldr	r3, [r3, #24]
 8000638:	f003 0310 	and.w	r3, r3, #16
 800063c:	60fb      	str	r3, [r7, #12]
 800063e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000640:	4b3f      	ldr	r3, [pc, #252]	; (8000740 <MX_GPIO_Init+0x12c>)
 8000642:	699b      	ldr	r3, [r3, #24]
 8000644:	4a3e      	ldr	r2, [pc, #248]	; (8000740 <MX_GPIO_Init+0x12c>)
 8000646:	f043 0304 	orr.w	r3, r3, #4
 800064a:	6193      	str	r3, [r2, #24]
 800064c:	4b3c      	ldr	r3, [pc, #240]	; (8000740 <MX_GPIO_Init+0x12c>)
 800064e:	699b      	ldr	r3, [r3, #24]
 8000650:	f003 0304 	and.w	r3, r3, #4
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000658:	4b39      	ldr	r3, [pc, #228]	; (8000740 <MX_GPIO_Init+0x12c>)
 800065a:	699b      	ldr	r3, [r3, #24]
 800065c:	4a38      	ldr	r2, [pc, #224]	; (8000740 <MX_GPIO_Init+0x12c>)
 800065e:	f043 0308 	orr.w	r3, r3, #8
 8000662:	6193      	str	r3, [r2, #24]
 8000664:	4b36      	ldr	r3, [pc, #216]	; (8000740 <MX_GPIO_Init+0x12c>)
 8000666:	699b      	ldr	r3, [r3, #24]
 8000668:	f003 0308 	and.w	r3, r3, #8
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000670:	2200      	movs	r2, #0
 8000672:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000676:	4833      	ldr	r0, [pc, #204]	; (8000744 <MX_GPIO_Init+0x130>)
 8000678:	f001 fb22 	bl	8001cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MC_4_Pin|MC_3_Pin, GPIO_PIN_RESET);
 800067c:	2200      	movs	r2, #0
 800067e:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000682:	4831      	ldr	r0, [pc, #196]	; (8000748 <MX_GPIO_Init+0x134>)
 8000684:	f001 fb1c 	bl	8001cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MC_2_Pin|MC_1_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8000688:	2200      	movs	r2, #0
 800068a:	f44f 51d8 	mov.w	r1, #6912	; 0x1b00
 800068e:	482f      	ldr	r0, [pc, #188]	; (800074c <MX_GPIO_Init+0x138>)
 8000690:	f001 fb16 	bl	8001cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000694:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000698:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069a:	2301      	movs	r3, #1
 800069c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069e:	2300      	movs	r3, #0
 80006a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a2:	2302      	movs	r3, #2
 80006a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80006a6:	f107 0310 	add.w	r3, r7, #16
 80006aa:	4619      	mov	r1, r3
 80006ac:	4825      	ldr	r0, [pc, #148]	; (8000744 <MX_GPIO_Init+0x130>)
 80006ae:	f001 f9ad 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = MC_4_Pin|MC_3_Pin;
 80006b2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80006b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b8:	2301      	movs	r3, #1
 80006ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006bc:	2300      	movs	r3, #0
 80006be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c0:	2302      	movs	r3, #2
 80006c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006c4:	f107 0310 	add.w	r3, r7, #16
 80006c8:	4619      	mov	r1, r3
 80006ca:	481f      	ldr	r0, [pc, #124]	; (8000748 <MX_GPIO_Init+0x134>)
 80006cc:	f001 f99e 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = MC_2_Pin|MC_1_Pin|LED2_Pin|LED1_Pin;
 80006d0:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 80006d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d6:	2301      	movs	r3, #1
 80006d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006de:	2302      	movs	r3, #2
 80006e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e2:	f107 0310 	add.w	r3, r7, #16
 80006e6:	4619      	mov	r1, r3
 80006e8:	4818      	ldr	r0, [pc, #96]	; (800074c <MX_GPIO_Init+0x138>)
 80006ea:	f001 f98f 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BUTTOM1_Pin|BUTTON2_Pin|BUTTON3_Pin|BUTTON4_Pin;
 80006ee:	2378      	movs	r3, #120	; 0x78
 80006f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006f2:	4b17      	ldr	r3, [pc, #92]	; (8000750 <MX_GPIO_Init+0x13c>)
 80006f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006f6:	2302      	movs	r3, #2
 80006f8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006fa:	f107 0310 	add.w	r3, r7, #16
 80006fe:	4619      	mov	r1, r3
 8000700:	4811      	ldr	r0, [pc, #68]	; (8000748 <MX_GPIO_Init+0x134>)
 8000702:	f001 f983 	bl	8001a0c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000706:	2200      	movs	r2, #0
 8000708:	2100      	movs	r1, #0
 800070a:	2009      	movs	r0, #9
 800070c:	f000 ff59 	bl	80015c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000710:	2009      	movs	r0, #9
 8000712:	f000 ff72 	bl	80015fa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000716:	2200      	movs	r2, #0
 8000718:	2100      	movs	r1, #0
 800071a:	200a      	movs	r0, #10
 800071c:	f000 ff51 	bl	80015c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000720:	200a      	movs	r0, #10
 8000722:	f000 ff6a 	bl	80015fa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000726:	2200      	movs	r2, #0
 8000728:	2100      	movs	r1, #0
 800072a:	2017      	movs	r0, #23
 800072c:	f000 ff49 	bl	80015c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000730:	2017      	movs	r0, #23
 8000732:	f000 ff62 	bl	80015fa <HAL_NVIC_EnableIRQ>

}
 8000736:	bf00      	nop
 8000738:	3720      	adds	r7, #32
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40021000 	.word	0x40021000
 8000744:	40011000 	.word	0x40011000
 8000748:	40010c00 	.word	0x40010c00
 800074c:	40010800 	.word	0x40010800
 8000750:	10110000 	.word	0x10110000

08000754 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000758:	f000 fa3e 	bl	8000bd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800075c:	f000 f80f 	bl	800077e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000760:	f7ff ff58 	bl	8000614 <MX_GPIO_Init>
  MX_DMA_Init();
 8000764:	f7ff fdc2 	bl	80002ec <MX_DMA_Init>
  MX_ADC1_Init();
 8000768:	f7ff fcf2 	bl	8000150 <MX_ADC1_Init>
  MX_TIM2_Init();
 800076c:	f000 f90c 	bl	8000988 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000770:	f002 fb04 	bl	8002d7c <osKernelInitialize>
  MX_FREERTOS_Init();
 8000774:	f7ff fea6 	bl	80004c4 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000778:	f002 fb32 	bl	8002de0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800077c:	e7fe      	b.n	800077c <main+0x28>

0800077e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800077e:	b580      	push	{r7, lr}
 8000780:	b094      	sub	sp, #80	; 0x50
 8000782:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000784:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000788:	2228      	movs	r2, #40	; 0x28
 800078a:	2100      	movs	r1, #0
 800078c:	4618      	mov	r0, r3
 800078e:	f004 ffbc 	bl	800570a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000792:	f107 0314 	add.w	r3, r7, #20
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]
 800079c:	609a      	str	r2, [r3, #8]
 800079e:	60da      	str	r2, [r3, #12]
 80007a0:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007ae:	2302      	movs	r3, #2
 80007b0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007b2:	2301      	movs	r3, #1
 80007b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007b6:	2310      	movs	r3, #16
 80007b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007ba:	2300      	movs	r3, #0
 80007bc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007c2:	4618      	mov	r0, r3
 80007c4:	f001 fac4 	bl	8001d50 <HAL_RCC_OscConfig>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80007ce:	f000 f826 	bl	800081e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d2:	230f      	movs	r3, #15
 80007d4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007d6:	2300      	movs	r3, #0
 80007d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007da:	2300      	movs	r3, #0
 80007dc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007de:	2300      	movs	r3, #0
 80007e0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e2:	2300      	movs	r3, #0
 80007e4:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007e6:	f107 0314 	add.w	r3, r7, #20
 80007ea:	2100      	movs	r1, #0
 80007ec:	4618      	mov	r0, r3
 80007ee:	f001 fd2f 	bl	8002250 <HAL_RCC_ClockConfig>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80007f8:	f000 f811 	bl	800081e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80007fc:	2302      	movs	r3, #2
 80007fe:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000800:	2300      	movs	r3, #0
 8000802:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000804:	1d3b      	adds	r3, r7, #4
 8000806:	4618      	mov	r0, r3
 8000808:	f001 fe8c 	bl	8002524 <HAL_RCCEx_PeriphCLKConfig>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000812:	f000 f804 	bl	800081e <Error_Handler>
  }
}
 8000816:	bf00      	nop
 8000818:	3750      	adds	r7, #80	; 0x50
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}

0800081e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800081e:	b480      	push	{r7}
 8000820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000822:	bf00      	nop
 8000824:	46bd      	mov	sp, r7
 8000826:	bc80      	pop	{r7}
 8000828:	4770      	bx	lr
	...

0800082c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800082c:	b480      	push	{r7}
 800082e:	b085      	sub	sp, #20
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000832:	4b15      	ldr	r3, [pc, #84]	; (8000888 <HAL_MspInit+0x5c>)
 8000834:	699b      	ldr	r3, [r3, #24]
 8000836:	4a14      	ldr	r2, [pc, #80]	; (8000888 <HAL_MspInit+0x5c>)
 8000838:	f043 0301 	orr.w	r3, r3, #1
 800083c:	6193      	str	r3, [r2, #24]
 800083e:	4b12      	ldr	r3, [pc, #72]	; (8000888 <HAL_MspInit+0x5c>)
 8000840:	699b      	ldr	r3, [r3, #24]
 8000842:	f003 0301 	and.w	r3, r3, #1
 8000846:	60bb      	str	r3, [r7, #8]
 8000848:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800084a:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <HAL_MspInit+0x5c>)
 800084c:	69db      	ldr	r3, [r3, #28]
 800084e:	4a0e      	ldr	r2, [pc, #56]	; (8000888 <HAL_MspInit+0x5c>)
 8000850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000854:	61d3      	str	r3, [r2, #28]
 8000856:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <HAL_MspInit+0x5c>)
 8000858:	69db      	ldr	r3, [r3, #28]
 800085a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000862:	4b0a      	ldr	r3, [pc, #40]	; (800088c <HAL_MspInit+0x60>)
 8000864:	685b      	ldr	r3, [r3, #4]
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	4a04      	ldr	r2, [pc, #16]	; (800088c <HAL_MspInit+0x60>)
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800087e:	bf00      	nop
 8000880:	3714      	adds	r7, #20
 8000882:	46bd      	mov	sp, r7
 8000884:	bc80      	pop	{r7}
 8000886:	4770      	bx	lr
 8000888:	40021000 	.word	0x40021000
 800088c:	40010000 	.word	0x40010000

08000890 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000894:	bf00      	nop
 8000896:	46bd      	mov	sp, r7
 8000898:	bc80      	pop	{r7}
 800089a:	4770      	bx	lr

0800089c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008a0:	e7fe      	b.n	80008a0 <HardFault_Handler+0x4>

080008a2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008a6:	e7fe      	b.n	80008a6 <MemManage_Handler+0x4>

080008a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ac:	e7fe      	b.n	80008ac <BusFault_Handler+0x4>

080008ae <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008b2:	e7fe      	b.n	80008b2 <UsageFault_Handler+0x4>

080008b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008b8:	bf00      	nop
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bc80      	pop	{r7}
 80008be:	4770      	bx	lr

080008c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008c4:	f000 f9ce 	bl	8000c64 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80008c8:	f003 ff52 	bl	8004770 <xTaskGetSchedulerState>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b01      	cmp	r3, #1
 80008d0:	d001      	beq.n	80008d6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80008d2:	f004 fc99 	bl	8005208 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}

080008da <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80008da:	b580      	push	{r7, lr}
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80008de:	2008      	movs	r0, #8
 80008e0:	f001 fa1e 	bl	8001d20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80008ec:	2010      	movs	r0, #16
 80008ee:	f001 fa17 	bl	8001d20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
	...

080008f8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80008fc:	4802      	ldr	r0, [pc, #8]	; (8000908 <DMA1_Channel1_IRQHandler+0x10>)
 80008fe:	f000 ff51 	bl	80017a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	2000196c 	.word	0x2000196c

0800090c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

	//speed_flag=speed_flag+100;
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000910:	2020      	movs	r0, #32
 8000912:	f001 fa05 	bl	8001d20 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000916:	2040      	movs	r0, #64	; 0x40
 8000918:	f001 fa02 	bl	8001d20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}

08000920 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000924:	4b15      	ldr	r3, [pc, #84]	; (800097c <SystemInit+0x5c>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a14      	ldr	r2, [pc, #80]	; (800097c <SystemInit+0x5c>)
 800092a:	f043 0301 	orr.w	r3, r3, #1
 800092e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000930:	4b12      	ldr	r3, [pc, #72]	; (800097c <SystemInit+0x5c>)
 8000932:	685a      	ldr	r2, [r3, #4]
 8000934:	4911      	ldr	r1, [pc, #68]	; (800097c <SystemInit+0x5c>)
 8000936:	4b12      	ldr	r3, [pc, #72]	; (8000980 <SystemInit+0x60>)
 8000938:	4013      	ands	r3, r2
 800093a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800093c:	4b0f      	ldr	r3, [pc, #60]	; (800097c <SystemInit+0x5c>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a0e      	ldr	r2, [pc, #56]	; (800097c <SystemInit+0x5c>)
 8000942:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000946:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800094a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800094c:	4b0b      	ldr	r3, [pc, #44]	; (800097c <SystemInit+0x5c>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a0a      	ldr	r2, [pc, #40]	; (800097c <SystemInit+0x5c>)
 8000952:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000956:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000958:	4b08      	ldr	r3, [pc, #32]	; (800097c <SystemInit+0x5c>)
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	4a07      	ldr	r2, [pc, #28]	; (800097c <SystemInit+0x5c>)
 800095e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000962:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000964:	4b05      	ldr	r3, [pc, #20]	; (800097c <SystemInit+0x5c>)
 8000966:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800096a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800096c:	4b05      	ldr	r3, [pc, #20]	; (8000984 <SystemInit+0x64>)
 800096e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000972:	609a      	str	r2, [r3, #8]
#endif 
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	bc80      	pop	{r7}
 800097a:	4770      	bx	lr
 800097c:	40021000 	.word	0x40021000
 8000980:	f8ff0000 	.word	0xf8ff0000
 8000984:	e000ed00 	.word	0xe000ed00

08000988 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b08a      	sub	sp, #40	; 0x28
 800098c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800098e:	f107 0320 	add.w	r3, r7, #32
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000998:	1d3b      	adds	r3, r7, #4
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
 80009a4:	611a      	str	r2, [r3, #16]
 80009a6:	615a      	str	r2, [r3, #20]
 80009a8:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 80009aa:	4b28      	ldr	r3, [pc, #160]	; (8000a4c <MX_TIM2_Init+0xc4>)
 80009ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009b0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80009b2:	4b26      	ldr	r3, [pc, #152]	; (8000a4c <MX_TIM2_Init+0xc4>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b8:	4b24      	ldr	r3, [pc, #144]	; (8000a4c <MX_TIM2_Init+0xc4>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80009be:	4b23      	ldr	r3, [pc, #140]	; (8000a4c <MX_TIM2_Init+0xc4>)
 80009c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c6:	4b21      	ldr	r3, [pc, #132]	; (8000a4c <MX_TIM2_Init+0xc4>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009cc:	4b1f      	ldr	r3, [pc, #124]	; (8000a4c <MX_TIM2_Init+0xc4>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80009d2:	481e      	ldr	r0, [pc, #120]	; (8000a4c <MX_TIM2_Init+0xc4>)
 80009d4:	f001 fe5c 	bl	8002690 <HAL_TIM_PWM_Init>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80009de:	f7ff ff1e 	bl	800081e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009e2:	2300      	movs	r3, #0
 80009e4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e6:	2300      	movs	r3, #0
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009ea:	f107 0320 	add.w	r3, r7, #32
 80009ee:	4619      	mov	r1, r3
 80009f0:	4816      	ldr	r0, [pc, #88]	; (8000a4c <MX_TIM2_Init+0xc4>)
 80009f2:	f002 f97f 	bl	8002cf4 <HAL_TIMEx_MasterConfigSynchronization>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80009fc:	f7ff ff0f 	bl	800081e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a00:	2360      	movs	r3, #96	; 0x60
 8000a02:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a10:	1d3b      	adds	r3, r7, #4
 8000a12:	2208      	movs	r2, #8
 8000a14:	4619      	mov	r1, r3
 8000a16:	480d      	ldr	r0, [pc, #52]	; (8000a4c <MX_TIM2_Init+0xc4>)
 8000a18:	f001 fe98 	bl	800274c <HAL_TIM_PWM_ConfigChannel>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000a22:	f7ff fefc 	bl	800081e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a26:	1d3b      	adds	r3, r7, #4
 8000a28:	220c      	movs	r2, #12
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4807      	ldr	r0, [pc, #28]	; (8000a4c <MX_TIM2_Init+0xc4>)
 8000a2e:	f001 fe8d 	bl	800274c <HAL_TIM_PWM_ConfigChannel>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000a38:	f7ff fef1 	bl	800081e <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8000a3c:	4803      	ldr	r0, [pc, #12]	; (8000a4c <MX_TIM2_Init+0xc4>)
 8000a3e:	f000 f823 	bl	8000a88 <HAL_TIM_MspPostInit>

}
 8000a42:	bf00      	nop
 8000a44:	3728      	adds	r7, #40	; 0x28
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20001b50 	.word	0x20001b50

08000a50 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b085      	sub	sp, #20
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a60:	d10b      	bne.n	8000a7a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a62:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <HAL_TIM_PWM_MspInit+0x34>)
 8000a64:	69db      	ldr	r3, [r3, #28]
 8000a66:	4a07      	ldr	r2, [pc, #28]	; (8000a84 <HAL_TIM_PWM_MspInit+0x34>)
 8000a68:	f043 0301 	orr.w	r3, r3, #1
 8000a6c:	61d3      	str	r3, [r2, #28]
 8000a6e:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <HAL_TIM_PWM_MspInit+0x34>)
 8000a70:	69db      	ldr	r3, [r3, #28]
 8000a72:	f003 0301 	and.w	r3, r3, #1
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000a7a:	bf00      	nop
 8000a7c:	3714      	adds	r7, #20
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bc80      	pop	{r7}
 8000a82:	4770      	bx	lr
 8000a84:	40021000 	.word	0x40021000

08000a88 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b088      	sub	sp, #32
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a90:	f107 030c 	add.w	r3, r7, #12
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000aa6:	d12a      	bne.n	8000afe <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa8:	4b17      	ldr	r3, [pc, #92]	; (8000b08 <HAL_TIM_MspPostInit+0x80>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	4a16      	ldr	r2, [pc, #88]	; (8000b08 <HAL_TIM_MspPostInit+0x80>)
 8000aae:	f043 0308 	orr.w	r3, r3, #8
 8000ab2:	6193      	str	r3, [r2, #24]
 8000ab4:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <HAL_TIM_MspPostInit+0x80>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	f003 0308 	and.w	r3, r3, #8
 8000abc:	60bb      	str	r3, [r7, #8]
 8000abe:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = PWM1_Pin|PWM2_Pin;
 8000ac0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ac4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aca:	2302      	movs	r3, #2
 8000acc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ace:	f107 030c 	add.w	r3, r7, #12
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	480d      	ldr	r0, [pc, #52]	; (8000b0c <HAL_TIM_MspPostInit+0x84>)
 8000ad6:	f000 ff99 	bl	8001a0c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8000ada:	4b0d      	ldr	r3, [pc, #52]	; (8000b10 <HAL_TIM_MspPostInit+0x88>)
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	61fb      	str	r3, [r7, #28]
 8000ae0:	69fb      	ldr	r3, [r7, #28]
 8000ae2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000ae6:	61fb      	str	r3, [r7, #28]
 8000ae8:	69fb      	ldr	r3, [r7, #28]
 8000aea:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000aee:	61fb      	str	r3, [r7, #28]
 8000af0:	69fb      	ldr	r3, [r7, #28]
 8000af2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000af6:	61fb      	str	r3, [r7, #28]
 8000af8:	4a05      	ldr	r2, [pc, #20]	; (8000b10 <HAL_TIM_MspPostInit+0x88>)
 8000afa:	69fb      	ldr	r3, [r7, #28]
 8000afc:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000afe:	bf00      	nop
 8000b00:	3720      	adds	r7, #32
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40021000 	.word	0x40021000
 8000b0c:	40010c00 	.word	0x40010c00
 8000b10:	40010000 	.word	0x40010000

08000b14 <user_pwm_setvalue_1>:

/* USER CODE BEGIN 1 */


void user_pwm_setvalue_1(uint16_t value)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08a      	sub	sp, #40	; 0x28
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	80fb      	strh	r3, [r7, #6]
    TIM_OC_InitTypeDef sConfigOC;

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b1e:	2360      	movs	r3, #96	; 0x60
 8000b20:	60fb      	str	r3, [r7, #12]
    sConfigOC.Pulse = value;
 8000b22:	88fb      	ldrh	r3, [r7, #6]
 8000b24:	613b      	str	r3, [r7, #16]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000b26:	2302      	movs	r3, #2
 8000b28:	617b      	str	r3, [r7, #20]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61fb      	str	r3, [r7, #28]
    HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3);
 8000b2e:	f107 030c 	add.w	r3, r7, #12
 8000b32:	2208      	movs	r2, #8
 8000b34:	4619      	mov	r1, r3
 8000b36:	4805      	ldr	r0, [pc, #20]	; (8000b4c <user_pwm_setvalue_1+0x38>)
 8000b38:	f001 fe08 	bl	800274c <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000b3c:	2108      	movs	r1, #8
 8000b3e:	4803      	ldr	r0, [pc, #12]	; (8000b4c <user_pwm_setvalue_1+0x38>)
 8000b40:	f001 fdd2 	bl	80026e8 <HAL_TIM_PWM_Start>
    //HAL_TIM_MspPostInit(&htim2);
}
 8000b44:	bf00      	nop
 8000b46:	3728      	adds	r7, #40	; 0x28
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	20001b50 	.word	0x20001b50

08000b50 <user_pwm_setvalue_2>:
void user_pwm_setvalue_2(uint16_t value)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08a      	sub	sp, #40	; 0x28
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	80fb      	strh	r3, [r7, #6]
    TIM_OC_InitTypeDef sConfigOC;

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b5a:	2360      	movs	r3, #96	; 0x60
 8000b5c:	60fb      	str	r3, [r7, #12]
    sConfigOC.Pulse = value;
 8000b5e:	88fb      	ldrh	r3, [r7, #6]
 8000b60:	613b      	str	r3, [r7, #16]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000b62:	2302      	movs	r3, #2
 8000b64:	617b      	str	r3, [r7, #20]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b66:	2300      	movs	r3, #0
 8000b68:	61fb      	str	r3, [r7, #28]
    HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4);
 8000b6a:	f107 030c 	add.w	r3, r7, #12
 8000b6e:	220c      	movs	r2, #12
 8000b70:	4619      	mov	r1, r3
 8000b72:	4805      	ldr	r0, [pc, #20]	; (8000b88 <user_pwm_setvalue_2+0x38>)
 8000b74:	f001 fdea 	bl	800274c <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000b78:	210c      	movs	r1, #12
 8000b7a:	4803      	ldr	r0, [pc, #12]	; (8000b88 <user_pwm_setvalue_2+0x38>)
 8000b7c:	f001 fdb4 	bl	80026e8 <HAL_TIM_PWM_Start>
   // HAL_TIM_MspPostInit(&htim2);
}
 8000b80:	bf00      	nop
 8000b82:	3728      	adds	r7, #40	; 0x28
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20001b50 	.word	0x20001b50

08000b8c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000b8c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000b8e:	e003      	b.n	8000b98 <LoopCopyDataInit>

08000b90 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000b90:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000b92:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000b94:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000b96:	3104      	adds	r1, #4

08000b98 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000b98:	480a      	ldr	r0, [pc, #40]	; (8000bc4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000b9c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000b9e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000ba0:	d3f6      	bcc.n	8000b90 <CopyDataInit>
  ldr r2, =_sbss
 8000ba2:	4a0a      	ldr	r2, [pc, #40]	; (8000bcc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000ba4:	e002      	b.n	8000bac <LoopFillZerobss>

08000ba6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000ba6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000ba8:	f842 3b04 	str.w	r3, [r2], #4

08000bac <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000bac:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000bae:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000bb0:	d3f9      	bcc.n	8000ba6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bb2:	f7ff feb5 	bl	8000920 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bb6:	f004 fd79 	bl	80056ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bba:	f7ff fdcb 	bl	8000754 <main>
  bx lr
 8000bbe:	4770      	bx	lr
  ldr r3, =_sidata
 8000bc0:	080057dc 	.word	0x080057dc
  ldr r0, =_sdata
 8000bc4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000bc8:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8000bcc:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8000bd0:	20001bd4 	.word	0x20001bd4

08000bd4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bd4:	e7fe      	b.n	8000bd4 <ADC1_2_IRQHandler>
	...

08000bd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bdc:	4b08      	ldr	r3, [pc, #32]	; (8000c00 <HAL_Init+0x28>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a07      	ldr	r2, [pc, #28]	; (8000c00 <HAL_Init+0x28>)
 8000be2:	f043 0310 	orr.w	r3, r3, #16
 8000be6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be8:	2003      	movs	r0, #3
 8000bea:	f000 fcdf 	bl	80015ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bee:	2000      	movs	r0, #0
 8000bf0:	f000 f808 	bl	8000c04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bf4:	f7ff fe1a 	bl	800082c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bf8:	2300      	movs	r3, #0
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40022000 	.word	0x40022000

08000c04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c0c:	4b12      	ldr	r3, [pc, #72]	; (8000c58 <HAL_InitTick+0x54>)
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	4b12      	ldr	r3, [pc, #72]	; (8000c5c <HAL_InitTick+0x58>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	4619      	mov	r1, r3
 8000c16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c22:	4618      	mov	r0, r3
 8000c24:	f000 fcf7 	bl	8001616 <HAL_SYSTICK_Config>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	e00e      	b.n	8000c50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2b0f      	cmp	r3, #15
 8000c36:	d80a      	bhi.n	8000c4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	6879      	ldr	r1, [r7, #4]
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c40:	f000 fcbf 	bl	80015c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c44:	4a06      	ldr	r2, [pc, #24]	; (8000c60 <HAL_InitTick+0x5c>)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	e000      	b.n	8000c50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20000000 	.word	0x20000000
 8000c5c:	20000008 	.word	0x20000008
 8000c60:	20000004 	.word	0x20000004

08000c64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c68:	4b05      	ldr	r3, [pc, #20]	; (8000c80 <HAL_IncTick+0x1c>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <HAL_IncTick+0x20>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4413      	add	r3, r2
 8000c74:	4a03      	ldr	r2, [pc, #12]	; (8000c84 <HAL_IncTick+0x20>)
 8000c76:	6013      	str	r3, [r2, #0]
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bc80      	pop	{r7}
 8000c7e:	4770      	bx	lr
 8000c80:	20000008 	.word	0x20000008
 8000c84:	20001b90 	.word	0x20001b90

08000c88 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c8c:	4b02      	ldr	r3, [pc, #8]	; (8000c98 <HAL_GetTick+0x10>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bc80      	pop	{r7}
 8000c96:	4770      	bx	lr
 8000c98:	20001b90 	.word	0x20001b90

08000c9c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b086      	sub	sp, #24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000cac:	2300      	movs	r3, #0
 8000cae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d101      	bne.n	8000cbe <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	e0be      	b.n	8000e3c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	689b      	ldr	r3, [r3, #8]
 8000cc2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d109      	bne.n	8000ce0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2200      	movs	r2, #0
 8000cd0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	f7ff fa86 	bl	80001ec <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000ce0:	6878      	ldr	r0, [r7, #4]
 8000ce2:	f000 faf7 	bl	80012d4 <ADC_ConversionStop_Disable>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cee:	f003 0310 	and.w	r3, r3, #16
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	f040 8099 	bne.w	8000e2a <HAL_ADC_Init+0x18e>
 8000cf8:	7dfb      	ldrb	r3, [r7, #23]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	f040 8095 	bne.w	8000e2a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d04:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d08:	f023 0302 	bic.w	r3, r3, #2
 8000d0c:	f043 0202 	orr.w	r2, r3, #2
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d1c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	7b1b      	ldrb	r3, [r3, #12]
 8000d22:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d24:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d26:	68ba      	ldr	r2, [r7, #8]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	689b      	ldr	r3, [r3, #8]
 8000d30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d34:	d003      	beq.n	8000d3e <HAL_ADC_Init+0xa2>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	689b      	ldr	r3, [r3, #8]
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d102      	bne.n	8000d44 <HAL_ADC_Init+0xa8>
 8000d3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d42:	e000      	b.n	8000d46 <HAL_ADC_Init+0xaa>
 8000d44:	2300      	movs	r3, #0
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	7d1b      	ldrb	r3, [r3, #20]
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d119      	bne.n	8000d88 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	7b1b      	ldrb	r3, [r3, #12]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d109      	bne.n	8000d70 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	699b      	ldr	r3, [r3, #24]
 8000d60:	3b01      	subs	r3, #1
 8000d62:	035a      	lsls	r2, r3, #13
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	4313      	orrs	r3, r2
 8000d68:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d6c:	613b      	str	r3, [r7, #16]
 8000d6e:	e00b      	b.n	8000d88 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d74:	f043 0220 	orr.w	r2, r3, #32
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d80:	f043 0201 	orr.w	r2, r3, #1
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	430a      	orrs	r2, r1
 8000d9a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	689a      	ldr	r2, [r3, #8]
 8000da2:	4b28      	ldr	r3, [pc, #160]	; (8000e44 <HAL_ADC_Init+0x1a8>)
 8000da4:	4013      	ands	r3, r2
 8000da6:	687a      	ldr	r2, [r7, #4]
 8000da8:	6812      	ldr	r2, [r2, #0]
 8000daa:	68b9      	ldr	r1, [r7, #8]
 8000dac:	430b      	orrs	r3, r1
 8000dae:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	689b      	ldr	r3, [r3, #8]
 8000db4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000db8:	d003      	beq.n	8000dc2 <HAL_ADC_Init+0x126>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	689b      	ldr	r3, [r3, #8]
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d104      	bne.n	8000dcc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	691b      	ldr	r3, [r3, #16]
 8000dc6:	3b01      	subs	r3, #1
 8000dc8:	051b      	lsls	r3, r3, #20
 8000dca:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dd2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	68fa      	ldr	r2, [r7, #12]
 8000ddc:	430a      	orrs	r2, r1
 8000dde:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	689a      	ldr	r2, [r3, #8]
 8000de6:	4b18      	ldr	r3, [pc, #96]	; (8000e48 <HAL_ADC_Init+0x1ac>)
 8000de8:	4013      	ands	r3, r2
 8000dea:	68ba      	ldr	r2, [r7, #8]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d10b      	bne.n	8000e08 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2200      	movs	r2, #0
 8000df4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dfa:	f023 0303 	bic.w	r3, r3, #3
 8000dfe:	f043 0201 	orr.w	r2, r3, #1
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e06:	e018      	b.n	8000e3a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e0c:	f023 0312 	bic.w	r3, r3, #18
 8000e10:	f043 0210 	orr.w	r2, r3, #16
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e1c:	f043 0201 	orr.w	r2, r3, #1
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000e24:	2301      	movs	r3, #1
 8000e26:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e28:	e007      	b.n	8000e3a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e2e:	f043 0210 	orr.w	r2, r3, #16
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3718      	adds	r7, #24
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	ffe1f7fd 	.word	0xffe1f7fd
 8000e48:	ff1f0efe 	.word	0xff1f0efe

08000e4c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b086      	sub	sp, #24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a64      	ldr	r2, [pc, #400]	; (8000ff4 <HAL_ADC_Start_DMA+0x1a8>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d004      	beq.n	8000e70 <HAL_ADC_Start_DMA+0x24>
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a63      	ldr	r2, [pc, #396]	; (8000ff8 <HAL_ADC_Start_DMA+0x1ac>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d106      	bne.n	8000e7e <HAL_ADC_Start_DMA+0x32>
 8000e70:	4b60      	ldr	r3, [pc, #384]	; (8000ff4 <HAL_ADC_Start_DMA+0x1a8>)
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	f040 80b3 	bne.w	8000fe4 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d101      	bne.n	8000e8c <HAL_ADC_Start_DMA+0x40>
 8000e88:	2302      	movs	r3, #2
 8000e8a:	e0ae      	b.n	8000fea <HAL_ADC_Start_DMA+0x19e>
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	2201      	movs	r2, #1
 8000e90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000e94:	68f8      	ldr	r0, [r7, #12]
 8000e96:	f000 f9cb 	bl	8001230 <ADC_Enable>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000e9e:	7dfb      	ldrb	r3, [r7, #23]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	f040 809a 	bne.w	8000fda <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eaa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000eae:	f023 0301 	bic.w	r3, r3, #1
 8000eb2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a4e      	ldr	r2, [pc, #312]	; (8000ff8 <HAL_ADC_Start_DMA+0x1ac>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d105      	bne.n	8000ed0 <HAL_ADC_Start_DMA+0x84>
 8000ec4:	4b4b      	ldr	r3, [pc, #300]	; (8000ff4 <HAL_ADC_Start_DMA+0x1a8>)
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d115      	bne.n	8000efc <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ed4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d026      	beq.n	8000f38 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ef2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000efa:	e01d      	b.n	8000f38 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f00:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a39      	ldr	r2, [pc, #228]	; (8000ff4 <HAL_ADC_Start_DMA+0x1a8>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d004      	beq.n	8000f1c <HAL_ADC_Start_DMA+0xd0>
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a38      	ldr	r2, [pc, #224]	; (8000ff8 <HAL_ADC_Start_DMA+0x1ac>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d10d      	bne.n	8000f38 <HAL_ADC_Start_DMA+0xec>
 8000f1c:	4b35      	ldr	r3, [pc, #212]	; (8000ff4 <HAL_ADC_Start_DMA+0x1a8>)
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d007      	beq.n	8000f38 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f2c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f30:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d006      	beq.n	8000f52 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f48:	f023 0206 	bic.w	r2, r3, #6
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f50:	e002      	b.n	8000f58 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	2200      	movs	r2, #0
 8000f56:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	6a1b      	ldr	r3, [r3, #32]
 8000f64:	4a25      	ldr	r2, [pc, #148]	; (8000ffc <HAL_ADC_Start_DMA+0x1b0>)
 8000f66:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	6a1b      	ldr	r3, [r3, #32]
 8000f6c:	4a24      	ldr	r2, [pc, #144]	; (8001000 <HAL_ADC_Start_DMA+0x1b4>)
 8000f6e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	6a1b      	ldr	r3, [r3, #32]
 8000f74:	4a23      	ldr	r2, [pc, #140]	; (8001004 <HAL_ADC_Start_DMA+0x1b8>)
 8000f76:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f06f 0202 	mvn.w	r2, #2
 8000f80:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	689a      	ldr	r2, [r3, #8]
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f90:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	6a18      	ldr	r0, [r3, #32]
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	334c      	adds	r3, #76	; 0x4c
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	68ba      	ldr	r2, [r7, #8]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f000 fb9f 	bl	80016e4 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	689b      	ldr	r3, [r3, #8]
 8000fac:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000fb0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000fb4:	d108      	bne.n	8000fc8 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	689a      	ldr	r2, [r3, #8]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000fc4:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000fc6:	e00f      	b.n	8000fe8 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	689a      	ldr	r2, [r3, #8]
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000fd6:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000fd8:	e006      	b.n	8000fe8 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8000fe2:	e001      	b.n	8000fe8 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000fe8:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3718      	adds	r7, #24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40012400 	.word	0x40012400
 8000ff8:	40012800 	.word	0x40012800
 8000ffc:	08001349 	.word	0x08001349
 8001000:	080013c5 	.word	0x080013c5
 8001004:	080013e1 	.word	0x080013e1

08001008 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	bc80      	pop	{r7}
 8001018:	4770      	bx	lr

0800101a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800101a:	b480      	push	{r7}
 800101c:	b083      	sub	sp, #12
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	bc80      	pop	{r7}
 800102a:	4770      	bx	lr

0800102c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001034:	bf00      	nop
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	bc80      	pop	{r7}
 800103c:	4770      	bx	lr
	...

08001040 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800104a:	2300      	movs	r3, #0
 800104c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800104e:	2300      	movs	r3, #0
 8001050:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001058:	2b01      	cmp	r3, #1
 800105a:	d101      	bne.n	8001060 <HAL_ADC_ConfigChannel+0x20>
 800105c:	2302      	movs	r3, #2
 800105e:	e0dc      	b.n	800121a <HAL_ADC_ConfigChannel+0x1da>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2201      	movs	r2, #1
 8001064:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	2b06      	cmp	r3, #6
 800106e:	d81c      	bhi.n	80010aa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685a      	ldr	r2, [r3, #4]
 800107a:	4613      	mov	r3, r2
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	4413      	add	r3, r2
 8001080:	3b05      	subs	r3, #5
 8001082:	221f      	movs	r2, #31
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	43db      	mvns	r3, r3
 800108a:	4019      	ands	r1, r3
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	6818      	ldr	r0, [r3, #0]
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685a      	ldr	r2, [r3, #4]
 8001094:	4613      	mov	r3, r2
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	4413      	add	r3, r2
 800109a:	3b05      	subs	r3, #5
 800109c:	fa00 f203 	lsl.w	r2, r0, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	430a      	orrs	r2, r1
 80010a6:	635a      	str	r2, [r3, #52]	; 0x34
 80010a8:	e03c      	b.n	8001124 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	2b0c      	cmp	r3, #12
 80010b0:	d81c      	bhi.n	80010ec <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685a      	ldr	r2, [r3, #4]
 80010bc:	4613      	mov	r3, r2
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	4413      	add	r3, r2
 80010c2:	3b23      	subs	r3, #35	; 0x23
 80010c4:	221f      	movs	r2, #31
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	43db      	mvns	r3, r3
 80010cc:	4019      	ands	r1, r3
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	6818      	ldr	r0, [r3, #0]
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685a      	ldr	r2, [r3, #4]
 80010d6:	4613      	mov	r3, r2
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	4413      	add	r3, r2
 80010dc:	3b23      	subs	r3, #35	; 0x23
 80010de:	fa00 f203 	lsl.w	r2, r0, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	430a      	orrs	r2, r1
 80010e8:	631a      	str	r2, [r3, #48]	; 0x30
 80010ea:	e01b      	b.n	8001124 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685a      	ldr	r2, [r3, #4]
 80010f6:	4613      	mov	r3, r2
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	4413      	add	r3, r2
 80010fc:	3b41      	subs	r3, #65	; 0x41
 80010fe:	221f      	movs	r2, #31
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	43db      	mvns	r3, r3
 8001106:	4019      	ands	r1, r3
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	6818      	ldr	r0, [r3, #0]
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685a      	ldr	r2, [r3, #4]
 8001110:	4613      	mov	r3, r2
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	4413      	add	r3, r2
 8001116:	3b41      	subs	r3, #65	; 0x41
 8001118:	fa00 f203 	lsl.w	r2, r0, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	430a      	orrs	r2, r1
 8001122:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2b09      	cmp	r3, #9
 800112a:	d91c      	bls.n	8001166 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	68d9      	ldr	r1, [r3, #12]
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	4613      	mov	r3, r2
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	4413      	add	r3, r2
 800113c:	3b1e      	subs	r3, #30
 800113e:	2207      	movs	r2, #7
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	43db      	mvns	r3, r3
 8001146:	4019      	ands	r1, r3
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	6898      	ldr	r0, [r3, #8]
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	4613      	mov	r3, r2
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	4413      	add	r3, r2
 8001156:	3b1e      	subs	r3, #30
 8001158:	fa00 f203 	lsl.w	r2, r0, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	430a      	orrs	r2, r1
 8001162:	60da      	str	r2, [r3, #12]
 8001164:	e019      	b.n	800119a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	6919      	ldr	r1, [r3, #16]
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	4613      	mov	r3, r2
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	4413      	add	r3, r2
 8001176:	2207      	movs	r2, #7
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	43db      	mvns	r3, r3
 800117e:	4019      	ands	r1, r3
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	6898      	ldr	r0, [r3, #8]
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	4613      	mov	r3, r2
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	4413      	add	r3, r2
 800118e:	fa00 f203 	lsl.w	r2, r0, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	430a      	orrs	r2, r1
 8001198:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2b10      	cmp	r3, #16
 80011a0:	d003      	beq.n	80011aa <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80011a6:	2b11      	cmp	r3, #17
 80011a8:	d132      	bne.n	8001210 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a1d      	ldr	r2, [pc, #116]	; (8001224 <HAL_ADC_ConfigChannel+0x1e4>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d125      	bne.n	8001200 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d126      	bne.n	8001210 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	689a      	ldr	r2, [r3, #8]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80011d0:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	2b10      	cmp	r3, #16
 80011d8:	d11a      	bne.n	8001210 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80011da:	4b13      	ldr	r3, [pc, #76]	; (8001228 <HAL_ADC_ConfigChannel+0x1e8>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a13      	ldr	r2, [pc, #76]	; (800122c <HAL_ADC_ConfigChannel+0x1ec>)
 80011e0:	fba2 2303 	umull	r2, r3, r2, r3
 80011e4:	0c9a      	lsrs	r2, r3, #18
 80011e6:	4613      	mov	r3, r2
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	4413      	add	r3, r2
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011f0:	e002      	b.n	80011f8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	3b01      	subs	r3, #1
 80011f6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d1f9      	bne.n	80011f2 <HAL_ADC_ConfigChannel+0x1b2>
 80011fe:	e007      	b.n	8001210 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001204:	f043 0220 	orr.w	r2, r3, #32
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2200      	movs	r2, #0
 8001214:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001218:	7bfb      	ldrb	r3, [r7, #15]
}
 800121a:	4618      	mov	r0, r3
 800121c:	3714      	adds	r7, #20
 800121e:	46bd      	mov	sp, r7
 8001220:	bc80      	pop	{r7}
 8001222:	4770      	bx	lr
 8001224:	40012400 	.word	0x40012400
 8001228:	20000000 	.word	0x20000000
 800122c:	431bde83 	.word	0x431bde83

08001230 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001238:	2300      	movs	r3, #0
 800123a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800123c:	2300      	movs	r3, #0
 800123e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	2b01      	cmp	r3, #1
 800124c:	d039      	beq.n	80012c2 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	689a      	ldr	r2, [r3, #8]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f042 0201 	orr.w	r2, r2, #1
 800125c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800125e:	4b1b      	ldr	r3, [pc, #108]	; (80012cc <ADC_Enable+0x9c>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a1b      	ldr	r2, [pc, #108]	; (80012d0 <ADC_Enable+0xa0>)
 8001264:	fba2 2303 	umull	r2, r3, r2, r3
 8001268:	0c9b      	lsrs	r3, r3, #18
 800126a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800126c:	e002      	b.n	8001274 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	3b01      	subs	r3, #1
 8001272:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d1f9      	bne.n	800126e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800127a:	f7ff fd05 	bl	8000c88 <HAL_GetTick>
 800127e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001280:	e018      	b.n	80012b4 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001282:	f7ff fd01 	bl	8000c88 <HAL_GetTick>
 8001286:	4602      	mov	r2, r0
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	2b02      	cmp	r3, #2
 800128e:	d911      	bls.n	80012b4 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001294:	f043 0210 	orr.w	r2, r3, #16
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012a0:	f043 0201 	orr.w	r2, r3, #1
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2200      	movs	r2, #0
 80012ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	e007      	b.n	80012c4 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d1df      	bne.n	8001282 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80012c2:	2300      	movs	r3, #0
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20000000 	.word	0x20000000
 80012d0:	431bde83 	.word	0x431bde83

080012d4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80012dc:	2300      	movs	r3, #0
 80012de:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d127      	bne.n	800133e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	689a      	ldr	r2, [r3, #8]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f022 0201 	bic.w	r2, r2, #1
 80012fc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80012fe:	f7ff fcc3 	bl	8000c88 <HAL_GetTick>
 8001302:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001304:	e014      	b.n	8001330 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001306:	f7ff fcbf 	bl	8000c88 <HAL_GetTick>
 800130a:	4602      	mov	r2, r0
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	2b02      	cmp	r3, #2
 8001312:	d90d      	bls.n	8001330 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001318:	f043 0210 	orr.w	r2, r3, #16
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001324:	f043 0201 	orr.w	r2, r3, #1
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	e007      	b.n	8001340 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	2b01      	cmp	r3, #1
 800133c:	d0e3      	beq.n	8001306 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800133e:	2300      	movs	r3, #0
}
 8001340:	4618      	mov	r0, r3
 8001342:	3710      	adds	r7, #16
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001354:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800135a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800135e:	2b00      	cmp	r3, #0
 8001360:	d127      	bne.n	80013b2 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001366:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001378:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800137c:	d115      	bne.n	80013aa <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001382:	2b00      	cmp	r3, #0
 8001384:	d111      	bne.n	80013aa <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800138a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001396:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d105      	bne.n	80013aa <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a2:	f043 0201 	orr.w	r2, r3, #1
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80013aa:	68f8      	ldr	r0, [r7, #12]
 80013ac:	f7ff fe2c 	bl	8001008 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80013b0:	e004      	b.n	80013bc <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	6a1b      	ldr	r3, [r3, #32]
 80013b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	4798      	blx	r3
}
 80013bc:	bf00      	nop
 80013be:	3710      	adds	r7, #16
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d0:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80013d2:	68f8      	ldr	r0, [r7, #12]
 80013d4:	f7ff fe21 	bl	800101a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80013d8:	bf00      	nop
 80013da:	3710      	adds	r7, #16
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ec:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013fe:	f043 0204 	orr.w	r2, r3, #4
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001406:	68f8      	ldr	r0, [r7, #12]
 8001408:	f7ff fe10 	bl	800102c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800140c:	bf00      	nop
 800140e:	3710      	adds	r7, #16
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}

08001414 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001424:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <__NVIC_SetPriorityGrouping+0x44>)
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800142a:	68ba      	ldr	r2, [r7, #8]
 800142c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001430:	4013      	ands	r3, r2
 8001432:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800143c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001440:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001444:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001446:	4a04      	ldr	r2, [pc, #16]	; (8001458 <__NVIC_SetPriorityGrouping+0x44>)
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	60d3      	str	r3, [r2, #12]
}
 800144c:	bf00      	nop
 800144e:	3714      	adds	r7, #20
 8001450:	46bd      	mov	sp, r7
 8001452:	bc80      	pop	{r7}
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001460:	4b04      	ldr	r3, [pc, #16]	; (8001474 <__NVIC_GetPriorityGrouping+0x18>)
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	0a1b      	lsrs	r3, r3, #8
 8001466:	f003 0307 	and.w	r3, r3, #7
}
 800146a:	4618      	mov	r0, r3
 800146c:	46bd      	mov	sp, r7
 800146e:	bc80      	pop	{r7}
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	e000ed00 	.word	0xe000ed00

08001478 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001486:	2b00      	cmp	r3, #0
 8001488:	db0b      	blt.n	80014a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	f003 021f 	and.w	r2, r3, #31
 8001490:	4906      	ldr	r1, [pc, #24]	; (80014ac <__NVIC_EnableIRQ+0x34>)
 8001492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001496:	095b      	lsrs	r3, r3, #5
 8001498:	2001      	movs	r0, #1
 800149a:	fa00 f202 	lsl.w	r2, r0, r2
 800149e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr
 80014ac:	e000e100 	.word	0xe000e100

080014b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	6039      	str	r1, [r7, #0]
 80014ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	db0a      	blt.n	80014da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	b2da      	uxtb	r2, r3
 80014c8:	490c      	ldr	r1, [pc, #48]	; (80014fc <__NVIC_SetPriority+0x4c>)
 80014ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ce:	0112      	lsls	r2, r2, #4
 80014d0:	b2d2      	uxtb	r2, r2
 80014d2:	440b      	add	r3, r1
 80014d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014d8:	e00a      	b.n	80014f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	b2da      	uxtb	r2, r3
 80014de:	4908      	ldr	r1, [pc, #32]	; (8001500 <__NVIC_SetPriority+0x50>)
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	f003 030f 	and.w	r3, r3, #15
 80014e6:	3b04      	subs	r3, #4
 80014e8:	0112      	lsls	r2, r2, #4
 80014ea:	b2d2      	uxtb	r2, r2
 80014ec:	440b      	add	r3, r1
 80014ee:	761a      	strb	r2, [r3, #24]
}
 80014f0:	bf00      	nop
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bc80      	pop	{r7}
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	e000e100 	.word	0xe000e100
 8001500:	e000ed00 	.word	0xe000ed00

08001504 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001504:	b480      	push	{r7}
 8001506:	b089      	sub	sp, #36	; 0x24
 8001508:	af00      	add	r7, sp, #0
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	f003 0307 	and.w	r3, r3, #7
 8001516:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	f1c3 0307 	rsb	r3, r3, #7
 800151e:	2b04      	cmp	r3, #4
 8001520:	bf28      	it	cs
 8001522:	2304      	movcs	r3, #4
 8001524:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	3304      	adds	r3, #4
 800152a:	2b06      	cmp	r3, #6
 800152c:	d902      	bls.n	8001534 <NVIC_EncodePriority+0x30>
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	3b03      	subs	r3, #3
 8001532:	e000      	b.n	8001536 <NVIC_EncodePriority+0x32>
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001538:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	43da      	mvns	r2, r3
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	401a      	ands	r2, r3
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800154c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	fa01 f303 	lsl.w	r3, r1, r3
 8001556:	43d9      	mvns	r1, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800155c:	4313      	orrs	r3, r2
         );
}
 800155e:	4618      	mov	r0, r3
 8001560:	3724      	adds	r7, #36	; 0x24
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr

08001568 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	3b01      	subs	r3, #1
 8001574:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001578:	d301      	bcc.n	800157e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800157a:	2301      	movs	r3, #1
 800157c:	e00f      	b.n	800159e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800157e:	4a0a      	ldr	r2, [pc, #40]	; (80015a8 <SysTick_Config+0x40>)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	3b01      	subs	r3, #1
 8001584:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001586:	210f      	movs	r1, #15
 8001588:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800158c:	f7ff ff90 	bl	80014b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001590:	4b05      	ldr	r3, [pc, #20]	; (80015a8 <SysTick_Config+0x40>)
 8001592:	2200      	movs	r2, #0
 8001594:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001596:	4b04      	ldr	r3, [pc, #16]	; (80015a8 <SysTick_Config+0x40>)
 8001598:	2207      	movs	r2, #7
 800159a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800159c:	2300      	movs	r3, #0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	e000e010 	.word	0xe000e010

080015ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f7ff ff2d 	bl	8001414 <__NVIC_SetPriorityGrouping>
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b086      	sub	sp, #24
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	4603      	mov	r3, r0
 80015ca:	60b9      	str	r1, [r7, #8]
 80015cc:	607a      	str	r2, [r7, #4]
 80015ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015d0:	2300      	movs	r3, #0
 80015d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015d4:	f7ff ff42 	bl	800145c <__NVIC_GetPriorityGrouping>
 80015d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	68b9      	ldr	r1, [r7, #8]
 80015de:	6978      	ldr	r0, [r7, #20]
 80015e0:	f7ff ff90 	bl	8001504 <NVIC_EncodePriority>
 80015e4:	4602      	mov	r2, r0
 80015e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ea:	4611      	mov	r1, r2
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff ff5f 	bl	80014b0 <__NVIC_SetPriority>
}
 80015f2:	bf00      	nop
 80015f4:	3718      	adds	r7, #24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b082      	sub	sp, #8
 80015fe:	af00      	add	r7, sp, #0
 8001600:	4603      	mov	r3, r0
 8001602:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff ff35 	bl	8001478 <__NVIC_EnableIRQ>
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b082      	sub	sp, #8
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f7ff ffa2 	bl	8001568 <SysTick_Config>
 8001624:	4603      	mov	r3, r0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
	...

08001630 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001638:	2300      	movs	r3, #0
 800163a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d101      	bne.n	8001646 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e043      	b.n	80016ce <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	461a      	mov	r2, r3
 800164c:	4b22      	ldr	r3, [pc, #136]	; (80016d8 <HAL_DMA_Init+0xa8>)
 800164e:	4413      	add	r3, r2
 8001650:	4a22      	ldr	r2, [pc, #136]	; (80016dc <HAL_DMA_Init+0xac>)
 8001652:	fba2 2303 	umull	r2, r3, r2, r3
 8001656:	091b      	lsrs	r3, r3, #4
 8001658:	009a      	lsls	r2, r3, #2
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4a1f      	ldr	r2, [pc, #124]	; (80016e0 <HAL_DMA_Init+0xb0>)
 8001662:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2202      	movs	r2, #2
 8001668:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800167a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800167e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001688:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	68db      	ldr	r3, [r3, #12]
 800168e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001694:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	695b      	ldr	r3, [r3, #20]
 800169a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	69db      	ldr	r3, [r3, #28]
 80016a6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80016a8:	68fa      	ldr	r2, [r7, #12]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2200      	movs	r2, #0
 80016ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2201      	movs	r2, #1
 80016c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2200      	movs	r2, #0
 80016c8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3714      	adds	r7, #20
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bc80      	pop	{r7}
 80016d6:	4770      	bx	lr
 80016d8:	bffdfff8 	.word	0xbffdfff8
 80016dc:	cccccccd 	.word	0xcccccccd
 80016e0:	40020000 	.word	0x40020000

080016e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
 80016f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016f2:	2300      	movs	r3, #0
 80016f4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d101      	bne.n	8001704 <HAL_DMA_Start_IT+0x20>
 8001700:	2302      	movs	r3, #2
 8001702:	e04a      	b.n	800179a <HAL_DMA_Start_IT+0xb6>
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2201      	movs	r2, #1
 8001708:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001712:	2b01      	cmp	r3, #1
 8001714:	d13a      	bne.n	800178c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	2202      	movs	r2, #2
 800171a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2200      	movs	r2, #0
 8001722:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f022 0201 	bic.w	r2, r2, #1
 8001732:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	68b9      	ldr	r1, [r7, #8]
 800173a:	68f8      	ldr	r0, [r7, #12]
 800173c:	f000 f938 	bl	80019b0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001744:	2b00      	cmp	r3, #0
 8001746:	d008      	beq.n	800175a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f042 020e 	orr.w	r2, r2, #14
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	e00f      	b.n	800177a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f022 0204 	bic.w	r2, r2, #4
 8001768:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f042 020a 	orr.w	r2, r2, #10
 8001778:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f042 0201 	orr.w	r2, r2, #1
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	e005      	b.n	8001798 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2200      	movs	r2, #0
 8001790:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001794:	2302      	movs	r3, #2
 8001796:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001798:	7dfb      	ldrb	r3, [r7, #23]
}
 800179a:	4618      	mov	r0, r3
 800179c:	3718      	adds	r7, #24
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
	...

080017a4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c0:	2204      	movs	r2, #4
 80017c2:	409a      	lsls	r2, r3
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	4013      	ands	r3, r2
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d04f      	beq.n	800186c <HAL_DMA_IRQHandler+0xc8>
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	f003 0304 	and.w	r3, r3, #4
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d04a      	beq.n	800186c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0320 	and.w	r3, r3, #32
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d107      	bne.n	80017f4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f022 0204 	bic.w	r2, r2, #4
 80017f2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a66      	ldr	r2, [pc, #408]	; (8001994 <HAL_DMA_IRQHandler+0x1f0>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d029      	beq.n	8001852 <HAL_DMA_IRQHandler+0xae>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a65      	ldr	r2, [pc, #404]	; (8001998 <HAL_DMA_IRQHandler+0x1f4>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d022      	beq.n	800184e <HAL_DMA_IRQHandler+0xaa>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a63      	ldr	r2, [pc, #396]	; (800199c <HAL_DMA_IRQHandler+0x1f8>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d01a      	beq.n	8001848 <HAL_DMA_IRQHandler+0xa4>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a62      	ldr	r2, [pc, #392]	; (80019a0 <HAL_DMA_IRQHandler+0x1fc>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d012      	beq.n	8001842 <HAL_DMA_IRQHandler+0x9e>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a60      	ldr	r2, [pc, #384]	; (80019a4 <HAL_DMA_IRQHandler+0x200>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d00a      	beq.n	800183c <HAL_DMA_IRQHandler+0x98>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a5f      	ldr	r2, [pc, #380]	; (80019a8 <HAL_DMA_IRQHandler+0x204>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d102      	bne.n	8001836 <HAL_DMA_IRQHandler+0x92>
 8001830:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001834:	e00e      	b.n	8001854 <HAL_DMA_IRQHandler+0xb0>
 8001836:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800183a:	e00b      	b.n	8001854 <HAL_DMA_IRQHandler+0xb0>
 800183c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001840:	e008      	b.n	8001854 <HAL_DMA_IRQHandler+0xb0>
 8001842:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001846:	e005      	b.n	8001854 <HAL_DMA_IRQHandler+0xb0>
 8001848:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800184c:	e002      	b.n	8001854 <HAL_DMA_IRQHandler+0xb0>
 800184e:	2340      	movs	r3, #64	; 0x40
 8001850:	e000      	b.n	8001854 <HAL_DMA_IRQHandler+0xb0>
 8001852:	2304      	movs	r3, #4
 8001854:	4a55      	ldr	r2, [pc, #340]	; (80019ac <HAL_DMA_IRQHandler+0x208>)
 8001856:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800185c:	2b00      	cmp	r3, #0
 800185e:	f000 8094 	beq.w	800198a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800186a:	e08e      	b.n	800198a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001870:	2202      	movs	r2, #2
 8001872:	409a      	lsls	r2, r3
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	4013      	ands	r3, r2
 8001878:	2b00      	cmp	r3, #0
 800187a:	d056      	beq.n	800192a <HAL_DMA_IRQHandler+0x186>
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d051      	beq.n	800192a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0320 	and.w	r3, r3, #32
 8001890:	2b00      	cmp	r3, #0
 8001892:	d10b      	bne.n	80018ac <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f022 020a 	bic.w	r2, r2, #10
 80018a2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2201      	movs	r2, #1
 80018a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a38      	ldr	r2, [pc, #224]	; (8001994 <HAL_DMA_IRQHandler+0x1f0>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d029      	beq.n	800190a <HAL_DMA_IRQHandler+0x166>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a37      	ldr	r2, [pc, #220]	; (8001998 <HAL_DMA_IRQHandler+0x1f4>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d022      	beq.n	8001906 <HAL_DMA_IRQHandler+0x162>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a35      	ldr	r2, [pc, #212]	; (800199c <HAL_DMA_IRQHandler+0x1f8>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d01a      	beq.n	8001900 <HAL_DMA_IRQHandler+0x15c>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a34      	ldr	r2, [pc, #208]	; (80019a0 <HAL_DMA_IRQHandler+0x1fc>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d012      	beq.n	80018fa <HAL_DMA_IRQHandler+0x156>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a32      	ldr	r2, [pc, #200]	; (80019a4 <HAL_DMA_IRQHandler+0x200>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d00a      	beq.n	80018f4 <HAL_DMA_IRQHandler+0x150>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a31      	ldr	r2, [pc, #196]	; (80019a8 <HAL_DMA_IRQHandler+0x204>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d102      	bne.n	80018ee <HAL_DMA_IRQHandler+0x14a>
 80018e8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80018ec:	e00e      	b.n	800190c <HAL_DMA_IRQHandler+0x168>
 80018ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018f2:	e00b      	b.n	800190c <HAL_DMA_IRQHandler+0x168>
 80018f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018f8:	e008      	b.n	800190c <HAL_DMA_IRQHandler+0x168>
 80018fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018fe:	e005      	b.n	800190c <HAL_DMA_IRQHandler+0x168>
 8001900:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001904:	e002      	b.n	800190c <HAL_DMA_IRQHandler+0x168>
 8001906:	2320      	movs	r3, #32
 8001908:	e000      	b.n	800190c <HAL_DMA_IRQHandler+0x168>
 800190a:	2302      	movs	r3, #2
 800190c:	4a27      	ldr	r2, [pc, #156]	; (80019ac <HAL_DMA_IRQHandler+0x208>)
 800190e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800191c:	2b00      	cmp	r3, #0
 800191e:	d034      	beq.n	800198a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001928:	e02f      	b.n	800198a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192e:	2208      	movs	r2, #8
 8001930:	409a      	lsls	r2, r3
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	4013      	ands	r3, r2
 8001936:	2b00      	cmp	r3, #0
 8001938:	d028      	beq.n	800198c <HAL_DMA_IRQHandler+0x1e8>
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	f003 0308 	and.w	r3, r3, #8
 8001940:	2b00      	cmp	r3, #0
 8001942:	d023      	beq.n	800198c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f022 020e 	bic.w	r2, r2, #14
 8001952:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800195c:	2101      	movs	r1, #1
 800195e:	fa01 f202 	lsl.w	r2, r1, r2
 8001962:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2201      	movs	r2, #1
 8001968:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2201      	movs	r2, #1
 800196e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	2b00      	cmp	r3, #0
 8001980:	d004      	beq.n	800198c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	4798      	blx	r3
    }
  }
  return;
 800198a:	bf00      	nop
 800198c:	bf00      	nop
}
 800198e:	3710      	adds	r7, #16
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40020008 	.word	0x40020008
 8001998:	4002001c 	.word	0x4002001c
 800199c:	40020030 	.word	0x40020030
 80019a0:	40020044 	.word	0x40020044
 80019a4:	40020058 	.word	0x40020058
 80019a8:	4002006c 	.word	0x4002006c
 80019ac:	40020000 	.word	0x40020000

080019b0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
 80019bc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019c6:	2101      	movs	r1, #1
 80019c8:	fa01 f202 	lsl.w	r2, r1, r2
 80019cc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	683a      	ldr	r2, [r7, #0]
 80019d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	2b10      	cmp	r3, #16
 80019dc:	d108      	bne.n	80019f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	68ba      	ldr	r2, [r7, #8]
 80019ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80019ee:	e007      	b.n	8001a00 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	68ba      	ldr	r2, [r7, #8]
 80019f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	60da      	str	r2, [r3, #12]
}
 8001a00:	bf00      	nop
 8001a02:	3714      	adds	r7, #20
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bc80      	pop	{r7}
 8001a08:	4770      	bx	lr
	...

08001a0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b08b      	sub	sp, #44	; 0x2c
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a16:	2300      	movs	r3, #0
 8001a18:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a1e:	e127      	b.n	8001c70 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a20:	2201      	movs	r2, #1
 8001a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	69fa      	ldr	r2, [r7, #28]
 8001a30:	4013      	ands	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	f040 8116 	bne.w	8001c6a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	2b12      	cmp	r3, #18
 8001a44:	d034      	beq.n	8001ab0 <HAL_GPIO_Init+0xa4>
 8001a46:	2b12      	cmp	r3, #18
 8001a48:	d80d      	bhi.n	8001a66 <HAL_GPIO_Init+0x5a>
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d02b      	beq.n	8001aa6 <HAL_GPIO_Init+0x9a>
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d804      	bhi.n	8001a5c <HAL_GPIO_Init+0x50>
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d031      	beq.n	8001aba <HAL_GPIO_Init+0xae>
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d01c      	beq.n	8001a94 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a5a:	e048      	b.n	8001aee <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001a5c:	2b03      	cmp	r3, #3
 8001a5e:	d043      	beq.n	8001ae8 <HAL_GPIO_Init+0xdc>
 8001a60:	2b11      	cmp	r3, #17
 8001a62:	d01b      	beq.n	8001a9c <HAL_GPIO_Init+0x90>
          break;
 8001a64:	e043      	b.n	8001aee <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001a66:	4a89      	ldr	r2, [pc, #548]	; (8001c8c <HAL_GPIO_Init+0x280>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d026      	beq.n	8001aba <HAL_GPIO_Init+0xae>
 8001a6c:	4a87      	ldr	r2, [pc, #540]	; (8001c8c <HAL_GPIO_Init+0x280>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d806      	bhi.n	8001a80 <HAL_GPIO_Init+0x74>
 8001a72:	4a87      	ldr	r2, [pc, #540]	; (8001c90 <HAL_GPIO_Init+0x284>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d020      	beq.n	8001aba <HAL_GPIO_Init+0xae>
 8001a78:	4a86      	ldr	r2, [pc, #536]	; (8001c94 <HAL_GPIO_Init+0x288>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d01d      	beq.n	8001aba <HAL_GPIO_Init+0xae>
          break;
 8001a7e:	e036      	b.n	8001aee <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001a80:	4a85      	ldr	r2, [pc, #532]	; (8001c98 <HAL_GPIO_Init+0x28c>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d019      	beq.n	8001aba <HAL_GPIO_Init+0xae>
 8001a86:	4a85      	ldr	r2, [pc, #532]	; (8001c9c <HAL_GPIO_Init+0x290>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d016      	beq.n	8001aba <HAL_GPIO_Init+0xae>
 8001a8c:	4a84      	ldr	r2, [pc, #528]	; (8001ca0 <HAL_GPIO_Init+0x294>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d013      	beq.n	8001aba <HAL_GPIO_Init+0xae>
          break;
 8001a92:	e02c      	b.n	8001aee <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	623b      	str	r3, [r7, #32]
          break;
 8001a9a:	e028      	b.n	8001aee <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	3304      	adds	r3, #4
 8001aa2:	623b      	str	r3, [r7, #32]
          break;
 8001aa4:	e023      	b.n	8001aee <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	3308      	adds	r3, #8
 8001aac:	623b      	str	r3, [r7, #32]
          break;
 8001aae:	e01e      	b.n	8001aee <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	330c      	adds	r3, #12
 8001ab6:	623b      	str	r3, [r7, #32]
          break;
 8001ab8:	e019      	b.n	8001aee <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d102      	bne.n	8001ac8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ac2:	2304      	movs	r3, #4
 8001ac4:	623b      	str	r3, [r7, #32]
          break;
 8001ac6:	e012      	b.n	8001aee <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d105      	bne.n	8001adc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ad0:	2308      	movs	r3, #8
 8001ad2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	69fa      	ldr	r2, [r7, #28]
 8001ad8:	611a      	str	r2, [r3, #16]
          break;
 8001ada:	e008      	b.n	8001aee <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001adc:	2308      	movs	r3, #8
 8001ade:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	69fa      	ldr	r2, [r7, #28]
 8001ae4:	615a      	str	r2, [r3, #20]
          break;
 8001ae6:	e002      	b.n	8001aee <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	623b      	str	r3, [r7, #32]
          break;
 8001aec:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	2bff      	cmp	r3, #255	; 0xff
 8001af2:	d801      	bhi.n	8001af8 <HAL_GPIO_Init+0xec>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	e001      	b.n	8001afc <HAL_GPIO_Init+0xf0>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3304      	adds	r3, #4
 8001afc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	2bff      	cmp	r3, #255	; 0xff
 8001b02:	d802      	bhi.n	8001b0a <HAL_GPIO_Init+0xfe>
 8001b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	e002      	b.n	8001b10 <HAL_GPIO_Init+0x104>
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0c:	3b08      	subs	r3, #8
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	210f      	movs	r1, #15
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	401a      	ands	r2, r3
 8001b22:	6a39      	ldr	r1, [r7, #32]
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2a:	431a      	orrs	r2, r3
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	f000 8096 	beq.w	8001c6a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b3e:	4b59      	ldr	r3, [pc, #356]	; (8001ca4 <HAL_GPIO_Init+0x298>)
 8001b40:	699b      	ldr	r3, [r3, #24]
 8001b42:	4a58      	ldr	r2, [pc, #352]	; (8001ca4 <HAL_GPIO_Init+0x298>)
 8001b44:	f043 0301 	orr.w	r3, r3, #1
 8001b48:	6193      	str	r3, [r2, #24]
 8001b4a:	4b56      	ldr	r3, [pc, #344]	; (8001ca4 <HAL_GPIO_Init+0x298>)
 8001b4c:	699b      	ldr	r3, [r3, #24]
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	60bb      	str	r3, [r7, #8]
 8001b54:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b56:	4a54      	ldr	r2, [pc, #336]	; (8001ca8 <HAL_GPIO_Init+0x29c>)
 8001b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5a:	089b      	lsrs	r3, r3, #2
 8001b5c:	3302      	adds	r3, #2
 8001b5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b62:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b66:	f003 0303 	and.w	r3, r3, #3
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	220f      	movs	r2, #15
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	43db      	mvns	r3, r3
 8001b74:	68fa      	ldr	r2, [r7, #12]
 8001b76:	4013      	ands	r3, r2
 8001b78:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a4b      	ldr	r2, [pc, #300]	; (8001cac <HAL_GPIO_Init+0x2a0>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d013      	beq.n	8001baa <HAL_GPIO_Init+0x19e>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a4a      	ldr	r2, [pc, #296]	; (8001cb0 <HAL_GPIO_Init+0x2a4>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d00d      	beq.n	8001ba6 <HAL_GPIO_Init+0x19a>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a49      	ldr	r2, [pc, #292]	; (8001cb4 <HAL_GPIO_Init+0x2a8>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d007      	beq.n	8001ba2 <HAL_GPIO_Init+0x196>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a48      	ldr	r2, [pc, #288]	; (8001cb8 <HAL_GPIO_Init+0x2ac>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d101      	bne.n	8001b9e <HAL_GPIO_Init+0x192>
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e006      	b.n	8001bac <HAL_GPIO_Init+0x1a0>
 8001b9e:	2304      	movs	r3, #4
 8001ba0:	e004      	b.n	8001bac <HAL_GPIO_Init+0x1a0>
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	e002      	b.n	8001bac <HAL_GPIO_Init+0x1a0>
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e000      	b.n	8001bac <HAL_GPIO_Init+0x1a0>
 8001baa:	2300      	movs	r3, #0
 8001bac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bae:	f002 0203 	and.w	r2, r2, #3
 8001bb2:	0092      	lsls	r2, r2, #2
 8001bb4:	4093      	lsls	r3, r2
 8001bb6:	68fa      	ldr	r2, [r7, #12]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001bbc:	493a      	ldr	r1, [pc, #232]	; (8001ca8 <HAL_GPIO_Init+0x29c>)
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc0:	089b      	lsrs	r3, r3, #2
 8001bc2:	3302      	adds	r3, #2
 8001bc4:	68fa      	ldr	r2, [r7, #12]
 8001bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d006      	beq.n	8001be4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001bd6:	4b39      	ldr	r3, [pc, #228]	; (8001cbc <HAL_GPIO_Init+0x2b0>)
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	4938      	ldr	r1, [pc, #224]	; (8001cbc <HAL_GPIO_Init+0x2b0>)
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	600b      	str	r3, [r1, #0]
 8001be2:	e006      	b.n	8001bf2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001be4:	4b35      	ldr	r3, [pc, #212]	; (8001cbc <HAL_GPIO_Init+0x2b0>)
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	43db      	mvns	r3, r3
 8001bec:	4933      	ldr	r1, [pc, #204]	; (8001cbc <HAL_GPIO_Init+0x2b0>)
 8001bee:	4013      	ands	r3, r2
 8001bf0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d006      	beq.n	8001c0c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001bfe:	4b2f      	ldr	r3, [pc, #188]	; (8001cbc <HAL_GPIO_Init+0x2b0>)
 8001c00:	685a      	ldr	r2, [r3, #4]
 8001c02:	492e      	ldr	r1, [pc, #184]	; (8001cbc <HAL_GPIO_Init+0x2b0>)
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	604b      	str	r3, [r1, #4]
 8001c0a:	e006      	b.n	8001c1a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c0c:	4b2b      	ldr	r3, [pc, #172]	; (8001cbc <HAL_GPIO_Init+0x2b0>)
 8001c0e:	685a      	ldr	r2, [r3, #4]
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	43db      	mvns	r3, r3
 8001c14:	4929      	ldr	r1, [pc, #164]	; (8001cbc <HAL_GPIO_Init+0x2b0>)
 8001c16:	4013      	ands	r3, r2
 8001c18:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d006      	beq.n	8001c34 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c26:	4b25      	ldr	r3, [pc, #148]	; (8001cbc <HAL_GPIO_Init+0x2b0>)
 8001c28:	689a      	ldr	r2, [r3, #8]
 8001c2a:	4924      	ldr	r1, [pc, #144]	; (8001cbc <HAL_GPIO_Init+0x2b0>)
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	608b      	str	r3, [r1, #8]
 8001c32:	e006      	b.n	8001c42 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c34:	4b21      	ldr	r3, [pc, #132]	; (8001cbc <HAL_GPIO_Init+0x2b0>)
 8001c36:	689a      	ldr	r2, [r3, #8]
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	491f      	ldr	r1, [pc, #124]	; (8001cbc <HAL_GPIO_Init+0x2b0>)
 8001c3e:	4013      	ands	r3, r2
 8001c40:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d006      	beq.n	8001c5c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c4e:	4b1b      	ldr	r3, [pc, #108]	; (8001cbc <HAL_GPIO_Init+0x2b0>)
 8001c50:	68da      	ldr	r2, [r3, #12]
 8001c52:	491a      	ldr	r1, [pc, #104]	; (8001cbc <HAL_GPIO_Init+0x2b0>)
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	60cb      	str	r3, [r1, #12]
 8001c5a:	e006      	b.n	8001c6a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c5c:	4b17      	ldr	r3, [pc, #92]	; (8001cbc <HAL_GPIO_Init+0x2b0>)
 8001c5e:	68da      	ldr	r2, [r3, #12]
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	43db      	mvns	r3, r3
 8001c64:	4915      	ldr	r1, [pc, #84]	; (8001cbc <HAL_GPIO_Init+0x2b0>)
 8001c66:	4013      	ands	r3, r2
 8001c68:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c76:	fa22 f303 	lsr.w	r3, r2, r3
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f47f aed0 	bne.w	8001a20 <HAL_GPIO_Init+0x14>
  }
}
 8001c80:	bf00      	nop
 8001c82:	372c      	adds	r7, #44	; 0x2c
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bc80      	pop	{r7}
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	10210000 	.word	0x10210000
 8001c90:	10110000 	.word	0x10110000
 8001c94:	10120000 	.word	0x10120000
 8001c98:	10310000 	.word	0x10310000
 8001c9c:	10320000 	.word	0x10320000
 8001ca0:	10220000 	.word	0x10220000
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	40010000 	.word	0x40010000
 8001cac:	40010800 	.word	0x40010800
 8001cb0:	40010c00 	.word	0x40010c00
 8001cb4:	40011000 	.word	0x40011000
 8001cb8:	40011400 	.word	0x40011400
 8001cbc:	40010400 	.word	0x40010400

08001cc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	460b      	mov	r3, r1
 8001cca:	807b      	strh	r3, [r7, #2]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cd0:	787b      	ldrb	r3, [r7, #1]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d003      	beq.n	8001cde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cd6:	887a      	ldrh	r2, [r7, #2]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001cdc:	e003      	b.n	8001ce6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cde:	887b      	ldrh	r3, [r7, #2]
 8001ce0:	041a      	lsls	r2, r3, #16
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	611a      	str	r2, [r3, #16]
}
 8001ce6:	bf00      	nop
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bc80      	pop	{r7}
 8001cee:	4770      	bx	lr

08001cf0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	68da      	ldr	r2, [r3, #12]
 8001d00:	887b      	ldrh	r3, [r7, #2]
 8001d02:	4013      	ands	r3, r2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d003      	beq.n	8001d10 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d08:	887a      	ldrh	r2, [r7, #2]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001d0e:	e002      	b.n	8001d16 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d10:	887a      	ldrh	r2, [r7, #2]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	611a      	str	r2, [r3, #16]
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc80      	pop	{r7}
 8001d1e:	4770      	bx	lr

08001d20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001d2a:	4b08      	ldr	r3, [pc, #32]	; (8001d4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d2c:	695a      	ldr	r2, [r3, #20]
 8001d2e:	88fb      	ldrh	r3, [r7, #6]
 8001d30:	4013      	ands	r3, r2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d006      	beq.n	8001d44 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d36:	4a05      	ldr	r2, [pc, #20]	; (8001d4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d38:	88fb      	ldrh	r3, [r7, #6]
 8001d3a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d3c:	88fb      	ldrh	r3, [r7, #6]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7fe faf2 	bl	8000328 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d44:	bf00      	nop
 8001d46:	3708      	adds	r7, #8
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	40010400 	.word	0x40010400

08001d50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d101      	bne.n	8001d62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e26c      	b.n	800223c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f000 8087 	beq.w	8001e7e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d70:	4b92      	ldr	r3, [pc, #584]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f003 030c 	and.w	r3, r3, #12
 8001d78:	2b04      	cmp	r3, #4
 8001d7a:	d00c      	beq.n	8001d96 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d7c:	4b8f      	ldr	r3, [pc, #572]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f003 030c 	and.w	r3, r3, #12
 8001d84:	2b08      	cmp	r3, #8
 8001d86:	d112      	bne.n	8001dae <HAL_RCC_OscConfig+0x5e>
 8001d88:	4b8c      	ldr	r3, [pc, #560]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d94:	d10b      	bne.n	8001dae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d96:	4b89      	ldr	r3, [pc, #548]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d06c      	beq.n	8001e7c <HAL_RCC_OscConfig+0x12c>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d168      	bne.n	8001e7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e246      	b.n	800223c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001db6:	d106      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x76>
 8001db8:	4b80      	ldr	r3, [pc, #512]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a7f      	ldr	r2, [pc, #508]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001dbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dc2:	6013      	str	r3, [r2, #0]
 8001dc4:	e02e      	b.n	8001e24 <HAL_RCC_OscConfig+0xd4>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d10c      	bne.n	8001de8 <HAL_RCC_OscConfig+0x98>
 8001dce:	4b7b      	ldr	r3, [pc, #492]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a7a      	ldr	r2, [pc, #488]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001dd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dd8:	6013      	str	r3, [r2, #0]
 8001dda:	4b78      	ldr	r3, [pc, #480]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a77      	ldr	r2, [pc, #476]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001de0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001de4:	6013      	str	r3, [r2, #0]
 8001de6:	e01d      	b.n	8001e24 <HAL_RCC_OscConfig+0xd4>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001df0:	d10c      	bne.n	8001e0c <HAL_RCC_OscConfig+0xbc>
 8001df2:	4b72      	ldr	r3, [pc, #456]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a71      	ldr	r2, [pc, #452]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001df8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dfc:	6013      	str	r3, [r2, #0]
 8001dfe:	4b6f      	ldr	r3, [pc, #444]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a6e      	ldr	r2, [pc, #440]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001e04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e08:	6013      	str	r3, [r2, #0]
 8001e0a:	e00b      	b.n	8001e24 <HAL_RCC_OscConfig+0xd4>
 8001e0c:	4b6b      	ldr	r3, [pc, #428]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a6a      	ldr	r2, [pc, #424]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001e12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e16:	6013      	str	r3, [r2, #0]
 8001e18:	4b68      	ldr	r3, [pc, #416]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a67      	ldr	r2, [pc, #412]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001e1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e22:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d013      	beq.n	8001e54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e2c:	f7fe ff2c 	bl	8000c88 <HAL_GetTick>
 8001e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e32:	e008      	b.n	8001e46 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e34:	f7fe ff28 	bl	8000c88 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b64      	cmp	r3, #100	; 0x64
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e1fa      	b.n	800223c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e46:	4b5d      	ldr	r3, [pc, #372]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d0f0      	beq.n	8001e34 <HAL_RCC_OscConfig+0xe4>
 8001e52:	e014      	b.n	8001e7e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e54:	f7fe ff18 	bl	8000c88 <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e5a:	e008      	b.n	8001e6e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e5c:	f7fe ff14 	bl	8000c88 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b64      	cmp	r3, #100	; 0x64
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e1e6      	b.n	800223c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e6e:	4b53      	ldr	r3, [pc, #332]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d1f0      	bne.n	8001e5c <HAL_RCC_OscConfig+0x10c>
 8001e7a:	e000      	b.n	8001e7e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d063      	beq.n	8001f52 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e8a:	4b4c      	ldr	r3, [pc, #304]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f003 030c 	and.w	r3, r3, #12
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d00b      	beq.n	8001eae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e96:	4b49      	ldr	r3, [pc, #292]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f003 030c 	and.w	r3, r3, #12
 8001e9e:	2b08      	cmp	r3, #8
 8001ea0:	d11c      	bne.n	8001edc <HAL_RCC_OscConfig+0x18c>
 8001ea2:	4b46      	ldr	r3, [pc, #280]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d116      	bne.n	8001edc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eae:	4b43      	ldr	r3, [pc, #268]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d005      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x176>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d001      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e1ba      	b.n	800223c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ec6:	4b3d      	ldr	r3, [pc, #244]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	695b      	ldr	r3, [r3, #20]
 8001ed2:	00db      	lsls	r3, r3, #3
 8001ed4:	4939      	ldr	r1, [pc, #228]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eda:	e03a      	b.n	8001f52 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	691b      	ldr	r3, [r3, #16]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d020      	beq.n	8001f26 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ee4:	4b36      	ldr	r3, [pc, #216]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eea:	f7fe fecd 	bl	8000c88 <HAL_GetTick>
 8001eee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ef0:	e008      	b.n	8001f04 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ef2:	f7fe fec9 	bl	8000c88 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e19b      	b.n	800223c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f04:	4b2d      	ldr	r3, [pc, #180]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0302 	and.w	r3, r3, #2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d0f0      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f10:	4b2a      	ldr	r3, [pc, #168]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	695b      	ldr	r3, [r3, #20]
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	4927      	ldr	r1, [pc, #156]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001f20:	4313      	orrs	r3, r2
 8001f22:	600b      	str	r3, [r1, #0]
 8001f24:	e015      	b.n	8001f52 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f26:	4b26      	ldr	r3, [pc, #152]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2c:	f7fe feac 	bl	8000c88 <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f34:	f7fe fea8 	bl	8000c88 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e17a      	b.n	800223c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f46:	4b1d      	ldr	r3, [pc, #116]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1f0      	bne.n	8001f34 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0308 	and.w	r3, r3, #8
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d03a      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	699b      	ldr	r3, [r3, #24]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d019      	beq.n	8001f9a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f66:	4b17      	ldr	r3, [pc, #92]	; (8001fc4 <HAL_RCC_OscConfig+0x274>)
 8001f68:	2201      	movs	r2, #1
 8001f6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f6c:	f7fe fe8c 	bl	8000c88 <HAL_GetTick>
 8001f70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f72:	e008      	b.n	8001f86 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f74:	f7fe fe88 	bl	8000c88 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e15a      	b.n	800223c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f86:	4b0d      	ldr	r3, [pc, #52]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d0f0      	beq.n	8001f74 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f92:	2001      	movs	r0, #1
 8001f94:	f000 faa8 	bl	80024e8 <RCC_Delay>
 8001f98:	e01c      	b.n	8001fd4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f9a:	4b0a      	ldr	r3, [pc, #40]	; (8001fc4 <HAL_RCC_OscConfig+0x274>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fa0:	f7fe fe72 	bl	8000c88 <HAL_GetTick>
 8001fa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fa6:	e00f      	b.n	8001fc8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fa8:	f7fe fe6e 	bl	8000c88 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d908      	bls.n	8001fc8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e140      	b.n	800223c <HAL_RCC_OscConfig+0x4ec>
 8001fba:	bf00      	nop
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	42420000 	.word	0x42420000
 8001fc4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fc8:	4b9e      	ldr	r3, [pc, #632]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 8001fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d1e9      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0304 	and.w	r3, r3, #4
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	f000 80a6 	beq.w	800212e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fe6:	4b97      	ldr	r3, [pc, #604]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d10d      	bne.n	800200e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ff2:	4b94      	ldr	r3, [pc, #592]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	4a93      	ldr	r2, [pc, #588]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 8001ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ffc:	61d3      	str	r3, [r2, #28]
 8001ffe:	4b91      	ldr	r3, [pc, #580]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002006:	60bb      	str	r3, [r7, #8]
 8002008:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800200a:	2301      	movs	r3, #1
 800200c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800200e:	4b8e      	ldr	r3, [pc, #568]	; (8002248 <HAL_RCC_OscConfig+0x4f8>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002016:	2b00      	cmp	r3, #0
 8002018:	d118      	bne.n	800204c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800201a:	4b8b      	ldr	r3, [pc, #556]	; (8002248 <HAL_RCC_OscConfig+0x4f8>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a8a      	ldr	r2, [pc, #552]	; (8002248 <HAL_RCC_OscConfig+0x4f8>)
 8002020:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002024:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002026:	f7fe fe2f 	bl	8000c88 <HAL_GetTick>
 800202a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800202c:	e008      	b.n	8002040 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800202e:	f7fe fe2b 	bl	8000c88 <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	2b64      	cmp	r3, #100	; 0x64
 800203a:	d901      	bls.n	8002040 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e0fd      	b.n	800223c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002040:	4b81      	ldr	r3, [pc, #516]	; (8002248 <HAL_RCC_OscConfig+0x4f8>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002048:	2b00      	cmp	r3, #0
 800204a:	d0f0      	beq.n	800202e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	2b01      	cmp	r3, #1
 8002052:	d106      	bne.n	8002062 <HAL_RCC_OscConfig+0x312>
 8002054:	4b7b      	ldr	r3, [pc, #492]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 8002056:	6a1b      	ldr	r3, [r3, #32]
 8002058:	4a7a      	ldr	r2, [pc, #488]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 800205a:	f043 0301 	orr.w	r3, r3, #1
 800205e:	6213      	str	r3, [r2, #32]
 8002060:	e02d      	b.n	80020be <HAL_RCC_OscConfig+0x36e>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d10c      	bne.n	8002084 <HAL_RCC_OscConfig+0x334>
 800206a:	4b76      	ldr	r3, [pc, #472]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 800206c:	6a1b      	ldr	r3, [r3, #32]
 800206e:	4a75      	ldr	r2, [pc, #468]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 8002070:	f023 0301 	bic.w	r3, r3, #1
 8002074:	6213      	str	r3, [r2, #32]
 8002076:	4b73      	ldr	r3, [pc, #460]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 8002078:	6a1b      	ldr	r3, [r3, #32]
 800207a:	4a72      	ldr	r2, [pc, #456]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 800207c:	f023 0304 	bic.w	r3, r3, #4
 8002080:	6213      	str	r3, [r2, #32]
 8002082:	e01c      	b.n	80020be <HAL_RCC_OscConfig+0x36e>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	2b05      	cmp	r3, #5
 800208a:	d10c      	bne.n	80020a6 <HAL_RCC_OscConfig+0x356>
 800208c:	4b6d      	ldr	r3, [pc, #436]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	4a6c      	ldr	r2, [pc, #432]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 8002092:	f043 0304 	orr.w	r3, r3, #4
 8002096:	6213      	str	r3, [r2, #32]
 8002098:	4b6a      	ldr	r3, [pc, #424]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 800209a:	6a1b      	ldr	r3, [r3, #32]
 800209c:	4a69      	ldr	r2, [pc, #420]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 800209e:	f043 0301 	orr.w	r3, r3, #1
 80020a2:	6213      	str	r3, [r2, #32]
 80020a4:	e00b      	b.n	80020be <HAL_RCC_OscConfig+0x36e>
 80020a6:	4b67      	ldr	r3, [pc, #412]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 80020a8:	6a1b      	ldr	r3, [r3, #32]
 80020aa:	4a66      	ldr	r2, [pc, #408]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 80020ac:	f023 0301 	bic.w	r3, r3, #1
 80020b0:	6213      	str	r3, [r2, #32]
 80020b2:	4b64      	ldr	r3, [pc, #400]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 80020b4:	6a1b      	ldr	r3, [r3, #32]
 80020b6:	4a63      	ldr	r2, [pc, #396]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 80020b8:	f023 0304 	bic.w	r3, r3, #4
 80020bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d015      	beq.n	80020f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020c6:	f7fe fddf 	bl	8000c88 <HAL_GetTick>
 80020ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020cc:	e00a      	b.n	80020e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ce:	f7fe fddb 	bl	8000c88 <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020dc:	4293      	cmp	r3, r2
 80020de:	d901      	bls.n	80020e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e0ab      	b.n	800223c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020e4:	4b57      	ldr	r3, [pc, #348]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 80020e6:	6a1b      	ldr	r3, [r3, #32]
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d0ee      	beq.n	80020ce <HAL_RCC_OscConfig+0x37e>
 80020f0:	e014      	b.n	800211c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020f2:	f7fe fdc9 	bl	8000c88 <HAL_GetTick>
 80020f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020f8:	e00a      	b.n	8002110 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020fa:	f7fe fdc5 	bl	8000c88 <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	f241 3288 	movw	r2, #5000	; 0x1388
 8002108:	4293      	cmp	r3, r2
 800210a:	d901      	bls.n	8002110 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e095      	b.n	800223c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002110:	4b4c      	ldr	r3, [pc, #304]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 8002112:	6a1b      	ldr	r3, [r3, #32]
 8002114:	f003 0302 	and.w	r3, r3, #2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d1ee      	bne.n	80020fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800211c:	7dfb      	ldrb	r3, [r7, #23]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d105      	bne.n	800212e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002122:	4b48      	ldr	r3, [pc, #288]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	4a47      	ldr	r2, [pc, #284]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 8002128:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800212c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	69db      	ldr	r3, [r3, #28]
 8002132:	2b00      	cmp	r3, #0
 8002134:	f000 8081 	beq.w	800223a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002138:	4b42      	ldr	r3, [pc, #264]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f003 030c 	and.w	r3, r3, #12
 8002140:	2b08      	cmp	r3, #8
 8002142:	d061      	beq.n	8002208 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	69db      	ldr	r3, [r3, #28]
 8002148:	2b02      	cmp	r3, #2
 800214a:	d146      	bne.n	80021da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800214c:	4b3f      	ldr	r3, [pc, #252]	; (800224c <HAL_RCC_OscConfig+0x4fc>)
 800214e:	2200      	movs	r2, #0
 8002150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002152:	f7fe fd99 	bl	8000c88 <HAL_GetTick>
 8002156:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002158:	e008      	b.n	800216c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800215a:	f7fe fd95 	bl	8000c88 <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	2b02      	cmp	r3, #2
 8002166:	d901      	bls.n	800216c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e067      	b.n	800223c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800216c:	4b35      	ldr	r3, [pc, #212]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d1f0      	bne.n	800215a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a1b      	ldr	r3, [r3, #32]
 800217c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002180:	d108      	bne.n	8002194 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002182:	4b30      	ldr	r3, [pc, #192]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	492d      	ldr	r1, [pc, #180]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 8002190:	4313      	orrs	r3, r2
 8002192:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002194:	4b2b      	ldr	r3, [pc, #172]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a19      	ldr	r1, [r3, #32]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a4:	430b      	orrs	r3, r1
 80021a6:	4927      	ldr	r1, [pc, #156]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021ac:	4b27      	ldr	r3, [pc, #156]	; (800224c <HAL_RCC_OscConfig+0x4fc>)
 80021ae:	2201      	movs	r2, #1
 80021b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b2:	f7fe fd69 	bl	8000c88 <HAL_GetTick>
 80021b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021b8:	e008      	b.n	80021cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ba:	f7fe fd65 	bl	8000c88 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e037      	b.n	800223c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021cc:	4b1d      	ldr	r3, [pc, #116]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d0f0      	beq.n	80021ba <HAL_RCC_OscConfig+0x46a>
 80021d8:	e02f      	b.n	800223a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021da:	4b1c      	ldr	r3, [pc, #112]	; (800224c <HAL_RCC_OscConfig+0x4fc>)
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e0:	f7fe fd52 	bl	8000c88 <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e8:	f7fe fd4e 	bl	8000c88 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e020      	b.n	800223c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021fa:	4b12      	ldr	r3, [pc, #72]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1f0      	bne.n	80021e8 <HAL_RCC_OscConfig+0x498>
 8002206:	e018      	b.n	800223a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	69db      	ldr	r3, [r3, #28]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d101      	bne.n	8002214 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e013      	b.n	800223c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002214:	4b0b      	ldr	r3, [pc, #44]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a1b      	ldr	r3, [r3, #32]
 8002224:	429a      	cmp	r2, r3
 8002226:	d106      	bne.n	8002236 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002232:	429a      	cmp	r2, r3
 8002234:	d001      	beq.n	800223a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e000      	b.n	800223c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	3718      	adds	r7, #24
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	40021000 	.word	0x40021000
 8002248:	40007000 	.word	0x40007000
 800224c:	42420060 	.word	0x42420060

08002250 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d101      	bne.n	8002264 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e0d0      	b.n	8002406 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002264:	4b6a      	ldr	r3, [pc, #424]	; (8002410 <HAL_RCC_ClockConfig+0x1c0>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0307 	and.w	r3, r3, #7
 800226c:	683a      	ldr	r2, [r7, #0]
 800226e:	429a      	cmp	r2, r3
 8002270:	d910      	bls.n	8002294 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002272:	4b67      	ldr	r3, [pc, #412]	; (8002410 <HAL_RCC_ClockConfig+0x1c0>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f023 0207 	bic.w	r2, r3, #7
 800227a:	4965      	ldr	r1, [pc, #404]	; (8002410 <HAL_RCC_ClockConfig+0x1c0>)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	4313      	orrs	r3, r2
 8002280:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002282:	4b63      	ldr	r3, [pc, #396]	; (8002410 <HAL_RCC_ClockConfig+0x1c0>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0307 	and.w	r3, r3, #7
 800228a:	683a      	ldr	r2, [r7, #0]
 800228c:	429a      	cmp	r2, r3
 800228e:	d001      	beq.n	8002294 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e0b8      	b.n	8002406 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0302 	and.w	r3, r3, #2
 800229c:	2b00      	cmp	r3, #0
 800229e:	d020      	beq.n	80022e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0304 	and.w	r3, r3, #4
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d005      	beq.n	80022b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022ac:	4b59      	ldr	r3, [pc, #356]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	4a58      	ldr	r2, [pc, #352]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 80022b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80022b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0308 	and.w	r3, r3, #8
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d005      	beq.n	80022d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022c4:	4b53      	ldr	r3, [pc, #332]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	4a52      	ldr	r2, [pc, #328]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 80022ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80022ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022d0:	4b50      	ldr	r3, [pc, #320]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	494d      	ldr	r1, [pc, #308]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d040      	beq.n	8002370 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d107      	bne.n	8002306 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022f6:	4b47      	ldr	r3, [pc, #284]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d115      	bne.n	800232e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e07f      	b.n	8002406 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	2b02      	cmp	r3, #2
 800230c:	d107      	bne.n	800231e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800230e:	4b41      	ldr	r3, [pc, #260]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d109      	bne.n	800232e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e073      	b.n	8002406 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800231e:	4b3d      	ldr	r3, [pc, #244]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e06b      	b.n	8002406 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800232e:	4b39      	ldr	r3, [pc, #228]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f023 0203 	bic.w	r2, r3, #3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	4936      	ldr	r1, [pc, #216]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 800233c:	4313      	orrs	r3, r2
 800233e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002340:	f7fe fca2 	bl	8000c88 <HAL_GetTick>
 8002344:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002346:	e00a      	b.n	800235e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002348:	f7fe fc9e 	bl	8000c88 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	f241 3288 	movw	r2, #5000	; 0x1388
 8002356:	4293      	cmp	r3, r2
 8002358:	d901      	bls.n	800235e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e053      	b.n	8002406 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800235e:	4b2d      	ldr	r3, [pc, #180]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f003 020c 	and.w	r2, r3, #12
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	429a      	cmp	r2, r3
 800236e:	d1eb      	bne.n	8002348 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002370:	4b27      	ldr	r3, [pc, #156]	; (8002410 <HAL_RCC_ClockConfig+0x1c0>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0307 	and.w	r3, r3, #7
 8002378:	683a      	ldr	r2, [r7, #0]
 800237a:	429a      	cmp	r2, r3
 800237c:	d210      	bcs.n	80023a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800237e:	4b24      	ldr	r3, [pc, #144]	; (8002410 <HAL_RCC_ClockConfig+0x1c0>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f023 0207 	bic.w	r2, r3, #7
 8002386:	4922      	ldr	r1, [pc, #136]	; (8002410 <HAL_RCC_ClockConfig+0x1c0>)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	4313      	orrs	r3, r2
 800238c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800238e:	4b20      	ldr	r3, [pc, #128]	; (8002410 <HAL_RCC_ClockConfig+0x1c0>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	429a      	cmp	r2, r3
 800239a:	d001      	beq.n	80023a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e032      	b.n	8002406 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0304 	and.w	r3, r3, #4
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d008      	beq.n	80023be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023ac:	4b19      	ldr	r3, [pc, #100]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	4916      	ldr	r1, [pc, #88]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0308 	and.w	r3, r3, #8
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d009      	beq.n	80023de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023ca:	4b12      	ldr	r3, [pc, #72]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	490e      	ldr	r1, [pc, #56]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023de:	f000 f821 	bl	8002424 <HAL_RCC_GetSysClockFreq>
 80023e2:	4601      	mov	r1, r0
 80023e4:	4b0b      	ldr	r3, [pc, #44]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	091b      	lsrs	r3, r3, #4
 80023ea:	f003 030f 	and.w	r3, r3, #15
 80023ee:	4a0a      	ldr	r2, [pc, #40]	; (8002418 <HAL_RCC_ClockConfig+0x1c8>)
 80023f0:	5cd3      	ldrb	r3, [r2, r3]
 80023f2:	fa21 f303 	lsr.w	r3, r1, r3
 80023f6:	4a09      	ldr	r2, [pc, #36]	; (800241c <HAL_RCC_ClockConfig+0x1cc>)
 80023f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023fa:	4b09      	ldr	r3, [pc, #36]	; (8002420 <HAL_RCC_ClockConfig+0x1d0>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4618      	mov	r0, r3
 8002400:	f7fe fc00 	bl	8000c04 <HAL_InitTick>

  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3710      	adds	r7, #16
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	40022000 	.word	0x40022000
 8002414:	40021000 	.word	0x40021000
 8002418:	080057c4 	.word	0x080057c4
 800241c:	20000000 	.word	0x20000000
 8002420:	20000004 	.word	0x20000004

08002424 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002424:	b490      	push	{r4, r7}
 8002426:	b08a      	sub	sp, #40	; 0x28
 8002428:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800242a:	4b2a      	ldr	r3, [pc, #168]	; (80024d4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800242c:	1d3c      	adds	r4, r7, #4
 800242e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002430:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002434:	4b28      	ldr	r3, [pc, #160]	; (80024d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002436:	881b      	ldrh	r3, [r3, #0]
 8002438:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800243a:	2300      	movs	r3, #0
 800243c:	61fb      	str	r3, [r7, #28]
 800243e:	2300      	movs	r3, #0
 8002440:	61bb      	str	r3, [r7, #24]
 8002442:	2300      	movs	r3, #0
 8002444:	627b      	str	r3, [r7, #36]	; 0x24
 8002446:	2300      	movs	r3, #0
 8002448:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800244a:	2300      	movs	r3, #0
 800244c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800244e:	4b23      	ldr	r3, [pc, #140]	; (80024dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	f003 030c 	and.w	r3, r3, #12
 800245a:	2b04      	cmp	r3, #4
 800245c:	d002      	beq.n	8002464 <HAL_RCC_GetSysClockFreq+0x40>
 800245e:	2b08      	cmp	r3, #8
 8002460:	d003      	beq.n	800246a <HAL_RCC_GetSysClockFreq+0x46>
 8002462:	e02d      	b.n	80024c0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002464:	4b1e      	ldr	r3, [pc, #120]	; (80024e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002466:	623b      	str	r3, [r7, #32]
      break;
 8002468:	e02d      	b.n	80024c6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	0c9b      	lsrs	r3, r3, #18
 800246e:	f003 030f 	and.w	r3, r3, #15
 8002472:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002476:	4413      	add	r3, r2
 8002478:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800247c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d013      	beq.n	80024b0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002488:	4b14      	ldr	r3, [pc, #80]	; (80024dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	0c5b      	lsrs	r3, r3, #17
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002496:	4413      	add	r3, r2
 8002498:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800249c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	4a0f      	ldr	r2, [pc, #60]	; (80024e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80024a2:	fb02 f203 	mul.w	r2, r2, r3
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ac:	627b      	str	r3, [r7, #36]	; 0x24
 80024ae:	e004      	b.n	80024ba <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	4a0c      	ldr	r2, [pc, #48]	; (80024e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 80024b4:	fb02 f303 	mul.w	r3, r2, r3
 80024b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	623b      	str	r3, [r7, #32]
      break;
 80024be:	e002      	b.n	80024c6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024c0:	4b07      	ldr	r3, [pc, #28]	; (80024e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80024c2:	623b      	str	r3, [r7, #32]
      break;
 80024c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024c6:	6a3b      	ldr	r3, [r7, #32]
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3728      	adds	r7, #40	; 0x28
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bc90      	pop	{r4, r7}
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	08005750 	.word	0x08005750
 80024d8:	08005760 	.word	0x08005760
 80024dc:	40021000 	.word	0x40021000
 80024e0:	007a1200 	.word	0x007a1200
 80024e4:	003d0900 	.word	0x003d0900

080024e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80024f0:	4b0a      	ldr	r3, [pc, #40]	; (800251c <RCC_Delay+0x34>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a0a      	ldr	r2, [pc, #40]	; (8002520 <RCC_Delay+0x38>)
 80024f6:	fba2 2303 	umull	r2, r3, r2, r3
 80024fa:	0a5b      	lsrs	r3, r3, #9
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	fb02 f303 	mul.w	r3, r2, r3
 8002502:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002504:	bf00      	nop
  }
  while (Delay --);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	1e5a      	subs	r2, r3, #1
 800250a:	60fa      	str	r2, [r7, #12]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d1f9      	bne.n	8002504 <RCC_Delay+0x1c>
}
 8002510:	bf00      	nop
 8002512:	3714      	adds	r7, #20
 8002514:	46bd      	mov	sp, r7
 8002516:	bc80      	pop	{r7}
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	20000000 	.word	0x20000000
 8002520:	10624dd3 	.word	0x10624dd3

08002524 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800252c:	2300      	movs	r3, #0
 800252e:	613b      	str	r3, [r7, #16]
 8002530:	2300      	movs	r3, #0
 8002532:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0301 	and.w	r3, r3, #1
 800253c:	2b00      	cmp	r3, #0
 800253e:	d07d      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002540:	2300      	movs	r3, #0
 8002542:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002544:	4b4f      	ldr	r3, [pc, #316]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002546:	69db      	ldr	r3, [r3, #28]
 8002548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d10d      	bne.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002550:	4b4c      	ldr	r3, [pc, #304]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002552:	69db      	ldr	r3, [r3, #28]
 8002554:	4a4b      	ldr	r2, [pc, #300]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002556:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800255a:	61d3      	str	r3, [r2, #28]
 800255c:	4b49      	ldr	r3, [pc, #292]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800255e:	69db      	ldr	r3, [r3, #28]
 8002560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002564:	60bb      	str	r3, [r7, #8]
 8002566:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002568:	2301      	movs	r3, #1
 800256a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800256c:	4b46      	ldr	r3, [pc, #280]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002574:	2b00      	cmp	r3, #0
 8002576:	d118      	bne.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002578:	4b43      	ldr	r3, [pc, #268]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a42      	ldr	r2, [pc, #264]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800257e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002582:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002584:	f7fe fb80 	bl	8000c88 <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800258a:	e008      	b.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800258c:	f7fe fb7c 	bl	8000c88 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b64      	cmp	r3, #100	; 0x64
 8002598:	d901      	bls.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e06d      	b.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800259e:	4b3a      	ldr	r3, [pc, #232]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d0f0      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80025aa:	4b36      	ldr	r3, [pc, #216]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025ac:	6a1b      	ldr	r3, [r3, #32]
 80025ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025b2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d02e      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d027      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80025c8:	4b2e      	ldr	r3, [pc, #184]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025ca:	6a1b      	ldr	r3, [r3, #32]
 80025cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025d0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80025d2:	4b2e      	ldr	r3, [pc, #184]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80025d4:	2201      	movs	r2, #1
 80025d6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025d8:	4b2c      	ldr	r3, [pc, #176]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80025da:	2200      	movs	r2, #0
 80025dc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80025de:	4a29      	ldr	r2, [pc, #164]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d014      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ee:	f7fe fb4b 	bl	8000c88 <HAL_GetTick>
 80025f2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025f4:	e00a      	b.n	800260c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025f6:	f7fe fb47 	bl	8000c88 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	f241 3288 	movw	r2, #5000	; 0x1388
 8002604:	4293      	cmp	r3, r2
 8002606:	d901      	bls.n	800260c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e036      	b.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800260c:	4b1d      	ldr	r3, [pc, #116]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d0ee      	beq.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002618:	4b1a      	ldr	r3, [pc, #104]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800261a:	6a1b      	ldr	r3, [r3, #32]
 800261c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	4917      	ldr	r1, [pc, #92]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002626:	4313      	orrs	r3, r2
 8002628:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800262a:	7dfb      	ldrb	r3, [r7, #23]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d105      	bne.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002630:	4b14      	ldr	r3, [pc, #80]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002632:	69db      	ldr	r3, [r3, #28]
 8002634:	4a13      	ldr	r2, [pc, #76]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002636:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800263a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d008      	beq.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002648:	4b0e      	ldr	r3, [pc, #56]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	490b      	ldr	r1, [pc, #44]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002656:	4313      	orrs	r3, r2
 8002658:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0310 	and.w	r3, r3, #16
 8002662:	2b00      	cmp	r3, #0
 8002664:	d008      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002666:	4b07      	ldr	r3, [pc, #28]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	4904      	ldr	r1, [pc, #16]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002674:	4313      	orrs	r3, r2
 8002676:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3718      	adds	r7, #24
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	40021000 	.word	0x40021000
 8002688:	40007000 	.word	0x40007000
 800268c:	42420440 	.word	0x42420440

08002690 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d101      	bne.n	80026a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e01d      	b.n	80026de <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d106      	bne.n	80026bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f7fe f9ca 	bl	8000a50 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2202      	movs	r2, #2
 80026c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	3304      	adds	r3, #4
 80026cc:	4619      	mov	r1, r3
 80026ce:	4610      	mov	r0, r2
 80026d0:	f000 f902 	bl	80028d8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
	...

080026e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2201      	movs	r2, #1
 80026f8:	6839      	ldr	r1, [r7, #0]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f000 fad6 	bl	8002cac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a10      	ldr	r2, [pc, #64]	; (8002748 <HAL_TIM_PWM_Start+0x60>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d107      	bne.n	800271a <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002718:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	f003 0307 	and.w	r3, r3, #7
 8002724:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2b06      	cmp	r3, #6
 800272a:	d007      	beq.n	800273c <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f042 0201 	orr.w	r2, r2, #1
 800273a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	40012c00 	.word	0x40012c00

0800274c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800275e:	2b01      	cmp	r3, #1
 8002760:	d101      	bne.n	8002766 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002762:	2302      	movs	r3, #2
 8002764:	e0b4      	b.n	80028d0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2201      	movs	r2, #1
 800276a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2202      	movs	r2, #2
 8002772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2b0c      	cmp	r3, #12
 800277a:	f200 809f 	bhi.w	80028bc <HAL_TIM_PWM_ConfigChannel+0x170>
 800277e:	a201      	add	r2, pc, #4	; (adr r2, 8002784 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002784:	080027b9 	.word	0x080027b9
 8002788:	080028bd 	.word	0x080028bd
 800278c:	080028bd 	.word	0x080028bd
 8002790:	080028bd 	.word	0x080028bd
 8002794:	080027f9 	.word	0x080027f9
 8002798:	080028bd 	.word	0x080028bd
 800279c:	080028bd 	.word	0x080028bd
 80027a0:	080028bd 	.word	0x080028bd
 80027a4:	0800283b 	.word	0x0800283b
 80027a8:	080028bd 	.word	0x080028bd
 80027ac:	080028bd 	.word	0x080028bd
 80027b0:	080028bd 	.word	0x080028bd
 80027b4:	0800287b 	.word	0x0800287b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	68b9      	ldr	r1, [r7, #8]
 80027be:	4618      	mov	r0, r3
 80027c0:	f000 f8ec 	bl	800299c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	699a      	ldr	r2, [r3, #24]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f042 0208 	orr.w	r2, r2, #8
 80027d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	699a      	ldr	r2, [r3, #24]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f022 0204 	bic.w	r2, r2, #4
 80027e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	6999      	ldr	r1, [r3, #24]
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	691a      	ldr	r2, [r3, #16]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	430a      	orrs	r2, r1
 80027f4:	619a      	str	r2, [r3, #24]
      break;
 80027f6:	e062      	b.n	80028be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	68b9      	ldr	r1, [r7, #8]
 80027fe:	4618      	mov	r0, r3
 8002800:	f000 f932 	bl	8002a68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	699a      	ldr	r2, [r3, #24]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002812:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	699a      	ldr	r2, [r3, #24]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002822:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	6999      	ldr	r1, [r3, #24]
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	021a      	lsls	r2, r3, #8
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	430a      	orrs	r2, r1
 8002836:	619a      	str	r2, [r3, #24]
      break;
 8002838:	e041      	b.n	80028be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68b9      	ldr	r1, [r7, #8]
 8002840:	4618      	mov	r0, r3
 8002842:	f000 f97b 	bl	8002b3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	69da      	ldr	r2, [r3, #28]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f042 0208 	orr.w	r2, r2, #8
 8002854:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	69da      	ldr	r2, [r3, #28]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f022 0204 	bic.w	r2, r2, #4
 8002864:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	69d9      	ldr	r1, [r3, #28]
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	691a      	ldr	r2, [r3, #16]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	430a      	orrs	r2, r1
 8002876:	61da      	str	r2, [r3, #28]
      break;
 8002878:	e021      	b.n	80028be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68b9      	ldr	r1, [r7, #8]
 8002880:	4618      	mov	r0, r3
 8002882:	f000 f9c5 	bl	8002c10 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	69da      	ldr	r2, [r3, #28]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002894:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	69da      	ldr	r2, [r3, #28]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	69d9      	ldr	r1, [r3, #28]
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	021a      	lsls	r2, r3, #8
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	430a      	orrs	r2, r1
 80028b8:	61da      	str	r2, [r3, #28]
      break;
 80028ba:	e000      	b.n	80028be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80028bc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2201      	movs	r2, #1
 80028c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3710      	adds	r7, #16
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80028d8:	b480      	push	{r7}
 80028da:	b085      	sub	sp, #20
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a29      	ldr	r2, [pc, #164]	; (8002990 <TIM_Base_SetConfig+0xb8>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d00b      	beq.n	8002908 <TIM_Base_SetConfig+0x30>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028f6:	d007      	beq.n	8002908 <TIM_Base_SetConfig+0x30>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4a26      	ldr	r2, [pc, #152]	; (8002994 <TIM_Base_SetConfig+0xbc>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d003      	beq.n	8002908 <TIM_Base_SetConfig+0x30>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a25      	ldr	r2, [pc, #148]	; (8002998 <TIM_Base_SetConfig+0xc0>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d108      	bne.n	800291a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800290e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	68fa      	ldr	r2, [r7, #12]
 8002916:	4313      	orrs	r3, r2
 8002918:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a1c      	ldr	r2, [pc, #112]	; (8002990 <TIM_Base_SetConfig+0xb8>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d00b      	beq.n	800293a <TIM_Base_SetConfig+0x62>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002928:	d007      	beq.n	800293a <TIM_Base_SetConfig+0x62>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a19      	ldr	r2, [pc, #100]	; (8002994 <TIM_Base_SetConfig+0xbc>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d003      	beq.n	800293a <TIM_Base_SetConfig+0x62>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a18      	ldr	r2, [pc, #96]	; (8002998 <TIM_Base_SetConfig+0xc0>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d108      	bne.n	800294c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002940:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	4313      	orrs	r3, r2
 800294a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	4313      	orrs	r3, r2
 8002958:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	68fa      	ldr	r2, [r7, #12]
 800295e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	689a      	ldr	r2, [r3, #8]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4a07      	ldr	r2, [pc, #28]	; (8002990 <TIM_Base_SetConfig+0xb8>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d103      	bne.n	8002980 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	691a      	ldr	r2, [r3, #16]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	615a      	str	r2, [r3, #20]
}
 8002986:	bf00      	nop
 8002988:	3714      	adds	r7, #20
 800298a:	46bd      	mov	sp, r7
 800298c:	bc80      	pop	{r7}
 800298e:	4770      	bx	lr
 8002990:	40012c00 	.word	0x40012c00
 8002994:	40000400 	.word	0x40000400
 8002998:	40000800 	.word	0x40000800

0800299c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800299c:	b480      	push	{r7}
 800299e:	b087      	sub	sp, #28
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a1b      	ldr	r3, [r3, #32]
 80029aa:	f023 0201 	bic.w	r2, r3, #1
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a1b      	ldr	r3, [r3, #32]
 80029b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f023 0303 	bic.w	r3, r3, #3
 80029d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	68fa      	ldr	r2, [r7, #12]
 80029da:	4313      	orrs	r3, r2
 80029dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	f023 0302 	bic.w	r3, r3, #2
 80029e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4a1c      	ldr	r2, [pc, #112]	; (8002a64 <TIM_OC1_SetConfig+0xc8>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d10c      	bne.n	8002a12 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	f023 0308 	bic.w	r3, r3, #8
 80029fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	f023 0304 	bic.w	r3, r3, #4
 8002a10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a13      	ldr	r2, [pc, #76]	; (8002a64 <TIM_OC1_SetConfig+0xc8>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d111      	bne.n	8002a3e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	693a      	ldr	r2, [r7, #16]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685a      	ldr	r2, [r3, #4]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	697a      	ldr	r2, [r7, #20]
 8002a56:	621a      	str	r2, [r3, #32]
}
 8002a58:	bf00      	nop
 8002a5a:	371c      	adds	r7, #28
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bc80      	pop	{r7}
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	40012c00 	.word	0x40012c00

08002a68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b087      	sub	sp, #28
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a1b      	ldr	r3, [r3, #32]
 8002a76:	f023 0210 	bic.w	r2, r3, #16
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a1b      	ldr	r3, [r3, #32]
 8002a82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	021b      	lsls	r3, r3, #8
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	f023 0320 	bic.w	r3, r3, #32
 8002ab2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	011b      	lsls	r3, r3, #4
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4a1d      	ldr	r2, [pc, #116]	; (8002b38 <TIM_OC2_SetConfig+0xd0>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d10d      	bne.n	8002ae4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ace:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	011b      	lsls	r3, r3, #4
 8002ad6:	697a      	ldr	r2, [r7, #20]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ae2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a14      	ldr	r2, [pc, #80]	; (8002b38 <TIM_OC2_SetConfig+0xd0>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d113      	bne.n	8002b14 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002af2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002afa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	695b      	ldr	r3, [r3, #20]
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	699b      	ldr	r3, [r3, #24]
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	693a      	ldr	r2, [r7, #16]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685a      	ldr	r2, [r3, #4]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	697a      	ldr	r2, [r7, #20]
 8002b2c:	621a      	str	r2, [r3, #32]
}
 8002b2e:	bf00      	nop
 8002b30:	371c      	adds	r7, #28
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bc80      	pop	{r7}
 8002b36:	4770      	bx	lr
 8002b38:	40012c00 	.word	0x40012c00

08002b3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b087      	sub	sp, #28
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a1b      	ldr	r3, [r3, #32]
 8002b4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a1b      	ldr	r3, [r3, #32]
 8002b56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	69db      	ldr	r3, [r3, #28]
 8002b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f023 0303 	bic.w	r3, r3, #3
 8002b72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68fa      	ldr	r2, [r7, #12]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	021b      	lsls	r3, r3, #8
 8002b8c:	697a      	ldr	r2, [r7, #20]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a1d      	ldr	r2, [pc, #116]	; (8002c0c <TIM_OC3_SetConfig+0xd0>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d10d      	bne.n	8002bb6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ba0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	021b      	lsls	r3, r3, #8
 8002ba8:	697a      	ldr	r2, [r7, #20]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002bb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a14      	ldr	r2, [pc, #80]	; (8002c0c <TIM_OC3_SetConfig+0xd0>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d113      	bne.n	8002be6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002bc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002bcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	011b      	lsls	r3, r3, #4
 8002bd4:	693a      	ldr	r2, [r7, #16]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	011b      	lsls	r3, r3, #4
 8002be0:	693a      	ldr	r2, [r7, #16]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	693a      	ldr	r2, [r7, #16]
 8002bea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	685a      	ldr	r2, [r3, #4]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	697a      	ldr	r2, [r7, #20]
 8002bfe:	621a      	str	r2, [r3, #32]
}
 8002c00:	bf00      	nop
 8002c02:	371c      	adds	r7, #28
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bc80      	pop	{r7}
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	40012c00 	.word	0x40012c00

08002c10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b087      	sub	sp, #28
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a1b      	ldr	r3, [r3, #32]
 8002c1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a1b      	ldr	r3, [r3, #32]
 8002c2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	69db      	ldr	r3, [r3, #28]
 8002c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	021b      	lsls	r3, r3, #8
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	031b      	lsls	r3, r3, #12
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4a0f      	ldr	r2, [pc, #60]	; (8002ca8 <TIM_OC4_SetConfig+0x98>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d109      	bne.n	8002c84 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	695b      	ldr	r3, [r3, #20]
 8002c7c:	019b      	lsls	r3, r3, #6
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	697a      	ldr	r2, [r7, #20]
 8002c88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	68fa      	ldr	r2, [r7, #12]
 8002c8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685a      	ldr	r2, [r3, #4]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	621a      	str	r2, [r3, #32]
}
 8002c9e:	bf00      	nop
 8002ca0:	371c      	adds	r7, #28
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bc80      	pop	{r7}
 8002ca6:	4770      	bx	lr
 8002ca8:	40012c00 	.word	0x40012c00

08002cac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b087      	sub	sp, #28
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	f003 031f 	and.w	r3, r3, #31
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6a1a      	ldr	r2, [r3, #32]
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	43db      	mvns	r3, r3
 8002cce:	401a      	ands	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6a1a      	ldr	r2, [r3, #32]
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	f003 031f 	and.w	r3, r3, #31
 8002cde:	6879      	ldr	r1, [r7, #4]
 8002ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce4:	431a      	orrs	r2, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	621a      	str	r2, [r3, #32]
}
 8002cea:	bf00      	nop
 8002cec:	371c      	adds	r7, #28
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bc80      	pop	{r7}
 8002cf2:	4770      	bx	lr

08002cf4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d101      	bne.n	8002d0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d08:	2302      	movs	r3, #2
 8002d0a:	e032      	b.n	8002d72 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2202      	movs	r2, #2
 8002d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	68fa      	ldr	r2, [r7, #12]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d44:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	68ba      	ldr	r2, [r7, #8]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68fa      	ldr	r2, [r7, #12]
 8002d56:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	68ba      	ldr	r2, [r7, #8]
 8002d5e:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3714      	adds	r7, #20
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bc80      	pop	{r7}
 8002d7a:	4770      	bx	lr

08002d7c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002d7c:	b480      	push	{r7}
 8002d7e:	b085      	sub	sp, #20
 8002d80:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d82:	f3ef 8305 	mrs	r3, IPSR
 8002d86:	60bb      	str	r3, [r7, #8]
  return(result);
 8002d88:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d10f      	bne.n	8002dae <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d8e:	f3ef 8310 	mrs	r3, PRIMASK
 8002d92:	607b      	str	r3, [r7, #4]
  return(result);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d109      	bne.n	8002dae <osKernelInitialize+0x32>
 8002d9a:	4b10      	ldr	r3, [pc, #64]	; (8002ddc <osKernelInitialize+0x60>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d109      	bne.n	8002db6 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002da2:	f3ef 8311 	mrs	r3, BASEPRI
 8002da6:	603b      	str	r3, [r7, #0]
  return(result);
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d003      	beq.n	8002db6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002dae:	f06f 0305 	mvn.w	r3, #5
 8002db2:	60fb      	str	r3, [r7, #12]
 8002db4:	e00c      	b.n	8002dd0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002db6:	4b09      	ldr	r3, [pc, #36]	; (8002ddc <osKernelInitialize+0x60>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d105      	bne.n	8002dca <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8002dbe:	4b07      	ldr	r3, [pc, #28]	; (8002ddc <osKernelInitialize+0x60>)
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	60fb      	str	r3, [r7, #12]
 8002dc8:	e002      	b.n	8002dd0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002dca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002dce:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3714      	adds	r7, #20
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bc80      	pop	{r7}
 8002dda:	4770      	bx	lr
 8002ddc:	20000034 	.word	0x20000034

08002de0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002de6:	f3ef 8305 	mrs	r3, IPSR
 8002dea:	60bb      	str	r3, [r7, #8]
  return(result);
 8002dec:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d10f      	bne.n	8002e12 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002df2:	f3ef 8310 	mrs	r3, PRIMASK
 8002df6:	607b      	str	r3, [r7, #4]
  return(result);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d109      	bne.n	8002e12 <osKernelStart+0x32>
 8002dfe:	4b11      	ldr	r3, [pc, #68]	; (8002e44 <osKernelStart+0x64>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d109      	bne.n	8002e1a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002e06:	f3ef 8311 	mrs	r3, BASEPRI
 8002e0a:	603b      	str	r3, [r7, #0]
  return(result);
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d003      	beq.n	8002e1a <osKernelStart+0x3a>
    stat = osErrorISR;
 8002e12:	f06f 0305 	mvn.w	r3, #5
 8002e16:	60fb      	str	r3, [r7, #12]
 8002e18:	e00e      	b.n	8002e38 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8002e1a:	4b0a      	ldr	r3, [pc, #40]	; (8002e44 <osKernelStart+0x64>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d107      	bne.n	8002e32 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8002e22:	4b08      	ldr	r3, [pc, #32]	; (8002e44 <osKernelStart+0x64>)
 8002e24:	2202      	movs	r2, #2
 8002e26:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002e28:	f001 f864 	bl	8003ef4 <vTaskStartScheduler>
      stat = osOK;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	60fb      	str	r3, [r7, #12]
 8002e30:	e002      	b.n	8002e38 <osKernelStart+0x58>
    } else {
      stat = osError;
 8002e32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e36:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002e38:	68fb      	ldr	r3, [r7, #12]
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3710      	adds	r7, #16
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	20000034 	.word	0x20000034

08002e48 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b092      	sub	sp, #72	; 0x48
 8002e4c:	af04      	add	r7, sp, #16
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002e54:	2300      	movs	r3, #0
 8002e56:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e58:	f3ef 8305 	mrs	r3, IPSR
 8002e5c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f040 8094 	bne.w	8002f8e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e66:	f3ef 8310 	mrs	r3, PRIMASK
 8002e6a:	623b      	str	r3, [r7, #32]
  return(result);
 8002e6c:	6a3b      	ldr	r3, [r7, #32]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f040 808d 	bne.w	8002f8e <osThreadNew+0x146>
 8002e74:	4b48      	ldr	r3, [pc, #288]	; (8002f98 <osThreadNew+0x150>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d106      	bne.n	8002e8a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002e7c:	f3ef 8311 	mrs	r3, BASEPRI
 8002e80:	61fb      	str	r3, [r7, #28]
  return(result);
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f040 8082 	bne.w	8002f8e <osThreadNew+0x146>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d07e      	beq.n	8002f8e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002e90:	2380      	movs	r3, #128	; 0x80
 8002e92:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002e94:	2318      	movs	r3, #24
 8002e96:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8002e98:	2300      	movs	r3, #0
 8002e9a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002e9c:	f107 031b 	add.w	r3, r7, #27
 8002ea0:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8002ea2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ea6:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d045      	beq.n	8002f3a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d002      	beq.n	8002ebc <osThreadNew+0x74>
        name = attr->name;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d002      	beq.n	8002eca <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d008      	beq.n	8002ee2 <osThreadNew+0x9a>
 8002ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed2:	2b38      	cmp	r3, #56	; 0x38
 8002ed4:	d805      	bhi.n	8002ee2 <osThreadNew+0x9a>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <osThreadNew+0x9e>
        return (NULL);
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	e054      	b.n	8002f90 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	695b      	ldr	r3, [r3, #20]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d003      	beq.n	8002ef6 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	089b      	lsrs	r3, r3, #2
 8002ef4:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00e      	beq.n	8002f1c <osThreadNew+0xd4>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	2b5b      	cmp	r3, #91	; 0x5b
 8002f04:	d90a      	bls.n	8002f1c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d006      	beq.n	8002f1c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d002      	beq.n	8002f1c <osThreadNew+0xd4>
        mem = 1;
 8002f16:	2301      	movs	r3, #1
 8002f18:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f1a:	e010      	b.n	8002f3e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d10c      	bne.n	8002f3e <osThreadNew+0xf6>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d108      	bne.n	8002f3e <osThreadNew+0xf6>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	691b      	ldr	r3, [r3, #16]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d104      	bne.n	8002f3e <osThreadNew+0xf6>
          mem = 0;
 8002f34:	2300      	movs	r3, #0
 8002f36:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f38:	e001      	b.n	8002f3e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8002f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d110      	bne.n	8002f66 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002f4c:	9202      	str	r2, [sp, #8]
 8002f4e:	9301      	str	r3, [sp, #4]
 8002f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f52:	9300      	str	r3, [sp, #0]
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f58:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002f5a:	68f8      	ldr	r0, [r7, #12]
 8002f5c:	f000 fe02 	bl	8003b64 <xTaskCreateStatic>
 8002f60:	4603      	mov	r3, r0
 8002f62:	617b      	str	r3, [r7, #20]
 8002f64:	e013      	b.n	8002f8e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8002f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d110      	bne.n	8002f8e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f6e:	b29a      	uxth	r2, r3
 8002f70:	f107 0314 	add.w	r3, r7, #20
 8002f74:	9301      	str	r3, [sp, #4]
 8002f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f78:	9300      	str	r3, [sp, #0]
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002f7e:	68f8      	ldr	r0, [r7, #12]
 8002f80:	f000 fe49 	bl	8003c16 <xTaskCreate>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d001      	beq.n	8002f8e <osThreadNew+0x146>
          hTask = NULL;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002f8e:	697b      	ldr	r3, [r7, #20]
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3738      	adds	r7, #56	; 0x38
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	20000034 	.word	0x20000034

08002f9c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b086      	sub	sp, #24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002fa4:	f3ef 8305 	mrs	r3, IPSR
 8002fa8:	613b      	str	r3, [r7, #16]
  return(result);
 8002faa:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d10f      	bne.n	8002fd0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fb0:	f3ef 8310 	mrs	r3, PRIMASK
 8002fb4:	60fb      	str	r3, [r7, #12]
  return(result);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d109      	bne.n	8002fd0 <osDelay+0x34>
 8002fbc:	4b0d      	ldr	r3, [pc, #52]	; (8002ff4 <osDelay+0x58>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d109      	bne.n	8002fd8 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002fc4:	f3ef 8311 	mrs	r3, BASEPRI
 8002fc8:	60bb      	str	r3, [r7, #8]
  return(result);
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d003      	beq.n	8002fd8 <osDelay+0x3c>
    stat = osErrorISR;
 8002fd0:	f06f 0305 	mvn.w	r3, #5
 8002fd4:	617b      	str	r3, [r7, #20]
 8002fd6:	e007      	b.n	8002fe8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d002      	beq.n	8002fe8 <osDelay+0x4c>
      vTaskDelay(ticks);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 ff52 	bl	8003e8c <vTaskDelay>
    }
  }

  return (stat);
 8002fe8:	697b      	ldr	r3, [r7, #20]
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3718      	adds	r7, #24
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	20000034 	.word	0x20000034

08002ff8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002ff8:	b480      	push	{r7}
 8002ffa:	b085      	sub	sp, #20
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	4a06      	ldr	r2, [pc, #24]	; (8003020 <vApplicationGetIdleTaskMemory+0x28>)
 8003008:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	4a05      	ldr	r2, [pc, #20]	; (8003024 <vApplicationGetIdleTaskMemory+0x2c>)
 800300e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2280      	movs	r2, #128	; 0x80
 8003014:	601a      	str	r2, [r3, #0]
}
 8003016:	bf00      	nop
 8003018:	3714      	adds	r7, #20
 800301a:	46bd      	mov	sp, r7
 800301c:	bc80      	pop	{r7}
 800301e:	4770      	bx	lr
 8003020:	20000038 	.word	0x20000038
 8003024:	20000094 	.word	0x20000094

08003028 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003028:	b480      	push	{r7}
 800302a:	b085      	sub	sp, #20
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	4a07      	ldr	r2, [pc, #28]	; (8003054 <vApplicationGetTimerTaskMemory+0x2c>)
 8003038:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	4a06      	ldr	r2, [pc, #24]	; (8003058 <vApplicationGetTimerTaskMemory+0x30>)
 800303e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003046:	601a      	str	r2, [r3, #0]
}
 8003048:	bf00      	nop
 800304a:	3714      	adds	r7, #20
 800304c:	46bd      	mov	sp, r7
 800304e:	bc80      	pop	{r7}
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	20000294 	.word	0x20000294
 8003058:	200002f0 	.word	0x200002f0

0800305c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f103 0208 	add.w	r2, r3, #8
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003074:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f103 0208 	add.w	r2, r3, #8
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f103 0208 	add.w	r2, r3, #8
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003090:	bf00      	nop
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	bc80      	pop	{r7}
 8003098:	4770      	bx	lr

0800309a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800309a:	b480      	push	{r7}
 800309c:	b083      	sub	sp, #12
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80030a8:	bf00      	nop
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bc80      	pop	{r7}
 80030b0:	4770      	bx	lr

080030b2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80030b2:	b480      	push	{r7}
 80030b4:	b085      	sub	sp, #20
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
 80030ba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	689a      	ldr	r2, [r3, #8]
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	683a      	ldr	r2, [r7, #0]
 80030d6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	683a      	ldr	r2, [r7, #0]
 80030dc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	1c5a      	adds	r2, r3, #1
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	601a      	str	r2, [r3, #0]
}
 80030ee:	bf00      	nop
 80030f0:	3714      	adds	r7, #20
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bc80      	pop	{r7}
 80030f6:	4770      	bx	lr

080030f8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80030f8:	b480      	push	{r7}
 80030fa:	b085      	sub	sp, #20
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800310e:	d103      	bne.n	8003118 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	60fb      	str	r3, [r7, #12]
 8003116:	e00c      	b.n	8003132 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	3308      	adds	r3, #8
 800311c:	60fb      	str	r3, [r7, #12]
 800311e:	e002      	b.n	8003126 <vListInsert+0x2e>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	60fb      	str	r3, [r7, #12]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68ba      	ldr	r2, [r7, #8]
 800312e:	429a      	cmp	r2, r3
 8003130:	d2f6      	bcs.n	8003120 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	685a      	ldr	r2, [r3, #4]
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	683a      	ldr	r2, [r7, #0]
 8003140:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	683a      	ldr	r2, [r7, #0]
 800314c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	1c5a      	adds	r2, r3, #1
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	601a      	str	r2, [r3, #0]
}
 800315e:	bf00      	nop
 8003160:	3714      	adds	r7, #20
 8003162:	46bd      	mov	sp, r7
 8003164:	bc80      	pop	{r7}
 8003166:	4770      	bx	lr

08003168 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003168:	b480      	push	{r7}
 800316a:	b085      	sub	sp, #20
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	691b      	ldr	r3, [r3, #16]
 8003174:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	6892      	ldr	r2, [r2, #8]
 800317e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	6852      	ldr	r2, [r2, #4]
 8003188:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	429a      	cmp	r2, r3
 8003192:	d103      	bne.n	800319c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689a      	ldr	r2, [r3, #8]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	1e5a      	subs	r2, r3, #1
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3714      	adds	r7, #20
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bc80      	pop	{r7}
 80031b8:	4770      	bx	lr
	...

080031bc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d109      	bne.n	80031e4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80031d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d4:	f383 8811 	msr	BASEPRI, r3
 80031d8:	f3bf 8f6f 	isb	sy
 80031dc:	f3bf 8f4f 	dsb	sy
 80031e0:	60bb      	str	r3, [r7, #8]
 80031e2:	e7fe      	b.n	80031e2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80031e4:	f001 ff98 	bl	8005118 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031f0:	68f9      	ldr	r1, [r7, #12]
 80031f2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80031f4:	fb01 f303 	mul.w	r3, r1, r3
 80031f8:	441a      	add	r2, r3
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003214:	3b01      	subs	r3, #1
 8003216:	68f9      	ldr	r1, [r7, #12]
 8003218:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800321a:	fb01 f303 	mul.w	r3, r1, r3
 800321e:	441a      	add	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	22ff      	movs	r2, #255	; 0xff
 8003228:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	22ff      	movs	r2, #255	; 0xff
 8003230:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d114      	bne.n	8003264 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d01a      	beq.n	8003278 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	3310      	adds	r3, #16
 8003246:	4618      	mov	r0, r3
 8003248:	f001 f8d8 	bl	80043fc <xTaskRemoveFromEventList>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d012      	beq.n	8003278 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003252:	4b0d      	ldr	r3, [pc, #52]	; (8003288 <xQueueGenericReset+0xcc>)
 8003254:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003258:	601a      	str	r2, [r3, #0]
 800325a:	f3bf 8f4f 	dsb	sy
 800325e:	f3bf 8f6f 	isb	sy
 8003262:	e009      	b.n	8003278 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	3310      	adds	r3, #16
 8003268:	4618      	mov	r0, r3
 800326a:	f7ff fef7 	bl	800305c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	3324      	adds	r3, #36	; 0x24
 8003272:	4618      	mov	r0, r3
 8003274:	f7ff fef2 	bl	800305c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003278:	f001 ff7c 	bl	8005174 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800327c:	2301      	movs	r3, #1
}
 800327e:	4618      	mov	r0, r3
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	e000ed04 	.word	0xe000ed04

0800328c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800328c:	b580      	push	{r7, lr}
 800328e:	b08e      	sub	sp, #56	; 0x38
 8003290:	af02      	add	r7, sp, #8
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	607a      	str	r2, [r7, #4]
 8003298:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d109      	bne.n	80032b4 <xQueueGenericCreateStatic+0x28>
 80032a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a4:	f383 8811 	msr	BASEPRI, r3
 80032a8:	f3bf 8f6f 	isb	sy
 80032ac:	f3bf 8f4f 	dsb	sy
 80032b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80032b2:	e7fe      	b.n	80032b2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d109      	bne.n	80032ce <xQueueGenericCreateStatic+0x42>
 80032ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032be:	f383 8811 	msr	BASEPRI, r3
 80032c2:	f3bf 8f6f 	isb	sy
 80032c6:	f3bf 8f4f 	dsb	sy
 80032ca:	627b      	str	r3, [r7, #36]	; 0x24
 80032cc:	e7fe      	b.n	80032cc <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d002      	beq.n	80032da <xQueueGenericCreateStatic+0x4e>
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <xQueueGenericCreateStatic+0x52>
 80032da:	2301      	movs	r3, #1
 80032dc:	e000      	b.n	80032e0 <xQueueGenericCreateStatic+0x54>
 80032de:	2300      	movs	r3, #0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d109      	bne.n	80032f8 <xQueueGenericCreateStatic+0x6c>
 80032e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032e8:	f383 8811 	msr	BASEPRI, r3
 80032ec:	f3bf 8f6f 	isb	sy
 80032f0:	f3bf 8f4f 	dsb	sy
 80032f4:	623b      	str	r3, [r7, #32]
 80032f6:	e7fe      	b.n	80032f6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d102      	bne.n	8003304 <xQueueGenericCreateStatic+0x78>
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d101      	bne.n	8003308 <xQueueGenericCreateStatic+0x7c>
 8003304:	2301      	movs	r3, #1
 8003306:	e000      	b.n	800330a <xQueueGenericCreateStatic+0x7e>
 8003308:	2300      	movs	r3, #0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d109      	bne.n	8003322 <xQueueGenericCreateStatic+0x96>
 800330e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003312:	f383 8811 	msr	BASEPRI, r3
 8003316:	f3bf 8f6f 	isb	sy
 800331a:	f3bf 8f4f 	dsb	sy
 800331e:	61fb      	str	r3, [r7, #28]
 8003320:	e7fe      	b.n	8003320 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003322:	2350      	movs	r3, #80	; 0x50
 8003324:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	2b50      	cmp	r3, #80	; 0x50
 800332a:	d009      	beq.n	8003340 <xQueueGenericCreateStatic+0xb4>
 800332c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003330:	f383 8811 	msr	BASEPRI, r3
 8003334:	f3bf 8f6f 	isb	sy
 8003338:	f3bf 8f4f 	dsb	sy
 800333c:	61bb      	str	r3, [r7, #24]
 800333e:	e7fe      	b.n	800333e <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00d      	beq.n	8003366 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800334a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800334c:	2201      	movs	r2, #1
 800334e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003352:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003358:	9300      	str	r3, [sp, #0]
 800335a:	4613      	mov	r3, r2
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	68b9      	ldr	r1, [r7, #8]
 8003360:	68f8      	ldr	r0, [r7, #12]
 8003362:	f000 f805 	bl	8003370 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003368:	4618      	mov	r0, r3
 800336a:	3730      	adds	r7, #48	; 0x30
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	607a      	str	r2, [r7, #4]
 800337c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d103      	bne.n	800338c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	69ba      	ldr	r2, [r7, #24]
 8003388:	601a      	str	r2, [r3, #0]
 800338a:	e002      	b.n	8003392 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	68ba      	ldr	r2, [r7, #8]
 800339c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800339e:	2101      	movs	r1, #1
 80033a0:	69b8      	ldr	r0, [r7, #24]
 80033a2:	f7ff ff0b 	bl	80031bc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	78fa      	ldrb	r2, [r7, #3]
 80033aa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80033ae:	bf00      	nop
 80033b0:	3710      	adds	r7, #16
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
	...

080033b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b08e      	sub	sp, #56	; 0x38
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	607a      	str	r2, [r7, #4]
 80033c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80033c6:	2300      	movs	r3, #0
 80033c8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80033ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d109      	bne.n	80033e8 <xQueueGenericSend+0x30>
 80033d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033d8:	f383 8811 	msr	BASEPRI, r3
 80033dc:	f3bf 8f6f 	isb	sy
 80033e0:	f3bf 8f4f 	dsb	sy
 80033e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80033e6:	e7fe      	b.n	80033e6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d103      	bne.n	80033f6 <xQueueGenericSend+0x3e>
 80033ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d101      	bne.n	80033fa <xQueueGenericSend+0x42>
 80033f6:	2301      	movs	r3, #1
 80033f8:	e000      	b.n	80033fc <xQueueGenericSend+0x44>
 80033fa:	2300      	movs	r3, #0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d109      	bne.n	8003414 <xQueueGenericSend+0x5c>
 8003400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003404:	f383 8811 	msr	BASEPRI, r3
 8003408:	f3bf 8f6f 	isb	sy
 800340c:	f3bf 8f4f 	dsb	sy
 8003410:	627b      	str	r3, [r7, #36]	; 0x24
 8003412:	e7fe      	b.n	8003412 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	2b02      	cmp	r3, #2
 8003418:	d103      	bne.n	8003422 <xQueueGenericSend+0x6a>
 800341a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800341c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800341e:	2b01      	cmp	r3, #1
 8003420:	d101      	bne.n	8003426 <xQueueGenericSend+0x6e>
 8003422:	2301      	movs	r3, #1
 8003424:	e000      	b.n	8003428 <xQueueGenericSend+0x70>
 8003426:	2300      	movs	r3, #0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d109      	bne.n	8003440 <xQueueGenericSend+0x88>
 800342c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003430:	f383 8811 	msr	BASEPRI, r3
 8003434:	f3bf 8f6f 	isb	sy
 8003438:	f3bf 8f4f 	dsb	sy
 800343c:	623b      	str	r3, [r7, #32]
 800343e:	e7fe      	b.n	800343e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003440:	f001 f996 	bl	8004770 <xTaskGetSchedulerState>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d102      	bne.n	8003450 <xQueueGenericSend+0x98>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d101      	bne.n	8003454 <xQueueGenericSend+0x9c>
 8003450:	2301      	movs	r3, #1
 8003452:	e000      	b.n	8003456 <xQueueGenericSend+0x9e>
 8003454:	2300      	movs	r3, #0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d109      	bne.n	800346e <xQueueGenericSend+0xb6>
 800345a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800345e:	f383 8811 	msr	BASEPRI, r3
 8003462:	f3bf 8f6f 	isb	sy
 8003466:	f3bf 8f4f 	dsb	sy
 800346a:	61fb      	str	r3, [r7, #28]
 800346c:	e7fe      	b.n	800346c <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800346e:	f001 fe53 	bl	8005118 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003474:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800347a:	429a      	cmp	r2, r3
 800347c:	d302      	bcc.n	8003484 <xQueueGenericSend+0xcc>
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	2b02      	cmp	r3, #2
 8003482:	d129      	bne.n	80034d8 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003484:	683a      	ldr	r2, [r7, #0]
 8003486:	68b9      	ldr	r1, [r7, #8]
 8003488:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800348a:	f000 f9ff 	bl	800388c <prvCopyDataToQueue>
 800348e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003494:	2b00      	cmp	r3, #0
 8003496:	d010      	beq.n	80034ba <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800349a:	3324      	adds	r3, #36	; 0x24
 800349c:	4618      	mov	r0, r3
 800349e:	f000 ffad 	bl	80043fc <xTaskRemoveFromEventList>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d013      	beq.n	80034d0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80034a8:	4b3f      	ldr	r3, [pc, #252]	; (80035a8 <xQueueGenericSend+0x1f0>)
 80034aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034ae:	601a      	str	r2, [r3, #0]
 80034b0:	f3bf 8f4f 	dsb	sy
 80034b4:	f3bf 8f6f 	isb	sy
 80034b8:	e00a      	b.n	80034d0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80034ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d007      	beq.n	80034d0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80034c0:	4b39      	ldr	r3, [pc, #228]	; (80035a8 <xQueueGenericSend+0x1f0>)
 80034c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034c6:	601a      	str	r2, [r3, #0]
 80034c8:	f3bf 8f4f 	dsb	sy
 80034cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80034d0:	f001 fe50 	bl	8005174 <vPortExitCritical>
				return pdPASS;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e063      	b.n	80035a0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d103      	bne.n	80034e6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80034de:	f001 fe49 	bl	8005174 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80034e2:	2300      	movs	r3, #0
 80034e4:	e05c      	b.n	80035a0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80034e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d106      	bne.n	80034fa <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80034ec:	f107 0314 	add.w	r3, r7, #20
 80034f0:	4618      	mov	r0, r3
 80034f2:	f000 ffe5 	bl	80044c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80034f6:	2301      	movs	r3, #1
 80034f8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80034fa:	f001 fe3b 	bl	8005174 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80034fe:	f000 fd5d 	bl	8003fbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003502:	f001 fe09 	bl	8005118 <vPortEnterCritical>
 8003506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003508:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800350c:	b25b      	sxtb	r3, r3
 800350e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003512:	d103      	bne.n	800351c <xQueueGenericSend+0x164>
 8003514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003516:	2200      	movs	r2, #0
 8003518:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800351c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800351e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003522:	b25b      	sxtb	r3, r3
 8003524:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003528:	d103      	bne.n	8003532 <xQueueGenericSend+0x17a>
 800352a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800352c:	2200      	movs	r2, #0
 800352e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003532:	f001 fe1f 	bl	8005174 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003536:	1d3a      	adds	r2, r7, #4
 8003538:	f107 0314 	add.w	r3, r7, #20
 800353c:	4611      	mov	r1, r2
 800353e:	4618      	mov	r0, r3
 8003540:	f000 ffd4 	bl	80044ec <xTaskCheckForTimeOut>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d124      	bne.n	8003594 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800354a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800354c:	f000 fa96 	bl	8003a7c <prvIsQueueFull>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d018      	beq.n	8003588 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003558:	3310      	adds	r3, #16
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	4611      	mov	r1, r2
 800355e:	4618      	mov	r0, r3
 8003560:	f000 fefe 	bl	8004360 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003564:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003566:	f000 fa21 	bl	80039ac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800356a:	f000 fd35 	bl	8003fd8 <xTaskResumeAll>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	f47f af7c 	bne.w	800346e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003576:	4b0c      	ldr	r3, [pc, #48]	; (80035a8 <xQueueGenericSend+0x1f0>)
 8003578:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800357c:	601a      	str	r2, [r3, #0]
 800357e:	f3bf 8f4f 	dsb	sy
 8003582:	f3bf 8f6f 	isb	sy
 8003586:	e772      	b.n	800346e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003588:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800358a:	f000 fa0f 	bl	80039ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800358e:	f000 fd23 	bl	8003fd8 <xTaskResumeAll>
 8003592:	e76c      	b.n	800346e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003594:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003596:	f000 fa09 	bl	80039ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800359a:	f000 fd1d 	bl	8003fd8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800359e:	2300      	movs	r3, #0
		}
	}
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3738      	adds	r7, #56	; 0x38
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	e000ed04 	.word	0xe000ed04

080035ac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b08e      	sub	sp, #56	; 0x38
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	607a      	str	r2, [r7, #4]
 80035b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80035be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d109      	bne.n	80035d8 <xQueueGenericSendFromISR+0x2c>
 80035c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c8:	f383 8811 	msr	BASEPRI, r3
 80035cc:	f3bf 8f6f 	isb	sy
 80035d0:	f3bf 8f4f 	dsb	sy
 80035d4:	627b      	str	r3, [r7, #36]	; 0x24
 80035d6:	e7fe      	b.n	80035d6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d103      	bne.n	80035e6 <xQueueGenericSendFromISR+0x3a>
 80035de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d101      	bne.n	80035ea <xQueueGenericSendFromISR+0x3e>
 80035e6:	2301      	movs	r3, #1
 80035e8:	e000      	b.n	80035ec <xQueueGenericSendFromISR+0x40>
 80035ea:	2300      	movs	r3, #0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d109      	bne.n	8003604 <xQueueGenericSendFromISR+0x58>
 80035f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f4:	f383 8811 	msr	BASEPRI, r3
 80035f8:	f3bf 8f6f 	isb	sy
 80035fc:	f3bf 8f4f 	dsb	sy
 8003600:	623b      	str	r3, [r7, #32]
 8003602:	e7fe      	b.n	8003602 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	2b02      	cmp	r3, #2
 8003608:	d103      	bne.n	8003612 <xQueueGenericSendFromISR+0x66>
 800360a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800360c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800360e:	2b01      	cmp	r3, #1
 8003610:	d101      	bne.n	8003616 <xQueueGenericSendFromISR+0x6a>
 8003612:	2301      	movs	r3, #1
 8003614:	e000      	b.n	8003618 <xQueueGenericSendFromISR+0x6c>
 8003616:	2300      	movs	r3, #0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d109      	bne.n	8003630 <xQueueGenericSendFromISR+0x84>
 800361c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003620:	f383 8811 	msr	BASEPRI, r3
 8003624:	f3bf 8f6f 	isb	sy
 8003628:	f3bf 8f4f 	dsb	sy
 800362c:	61fb      	str	r3, [r7, #28]
 800362e:	e7fe      	b.n	800362e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003630:	f001 fe2c 	bl	800528c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003634:	f3ef 8211 	mrs	r2, BASEPRI
 8003638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800363c:	f383 8811 	msr	BASEPRI, r3
 8003640:	f3bf 8f6f 	isb	sy
 8003644:	f3bf 8f4f 	dsb	sy
 8003648:	61ba      	str	r2, [r7, #24]
 800364a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800364c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800364e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003652:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003658:	429a      	cmp	r2, r3
 800365a:	d302      	bcc.n	8003662 <xQueueGenericSendFromISR+0xb6>
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	2b02      	cmp	r3, #2
 8003660:	d12c      	bne.n	80036bc <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003664:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003668:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800366c:	683a      	ldr	r2, [r7, #0]
 800366e:	68b9      	ldr	r1, [r7, #8]
 8003670:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003672:	f000 f90b 	bl	800388c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003676:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800367a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800367e:	d112      	bne.n	80036a6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003684:	2b00      	cmp	r3, #0
 8003686:	d016      	beq.n	80036b6 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800368a:	3324      	adds	r3, #36	; 0x24
 800368c:	4618      	mov	r0, r3
 800368e:	f000 feb5 	bl	80043fc <xTaskRemoveFromEventList>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00e      	beq.n	80036b6 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00b      	beq.n	80036b6 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2201      	movs	r2, #1
 80036a2:	601a      	str	r2, [r3, #0]
 80036a4:	e007      	b.n	80036b6 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80036a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80036aa:	3301      	adds	r3, #1
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	b25a      	sxtb	r2, r3
 80036b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80036b6:	2301      	movs	r3, #1
 80036b8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80036ba:	e001      	b.n	80036c0 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80036bc:	2300      	movs	r3, #0
 80036be:	637b      	str	r3, [r7, #52]	; 0x34
 80036c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80036ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3738      	adds	r7, #56	; 0x38
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b08c      	sub	sp, #48	; 0x30
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80036e0:	2300      	movs	r3, #0
 80036e2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80036e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d109      	bne.n	8003702 <xQueueReceive+0x2e>
	__asm volatile
 80036ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f2:	f383 8811 	msr	BASEPRI, r3
 80036f6:	f3bf 8f6f 	isb	sy
 80036fa:	f3bf 8f4f 	dsb	sy
 80036fe:	623b      	str	r3, [r7, #32]
 8003700:	e7fe      	b.n	8003700 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d103      	bne.n	8003710 <xQueueReceive+0x3c>
 8003708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800370a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370c:	2b00      	cmp	r3, #0
 800370e:	d101      	bne.n	8003714 <xQueueReceive+0x40>
 8003710:	2301      	movs	r3, #1
 8003712:	e000      	b.n	8003716 <xQueueReceive+0x42>
 8003714:	2300      	movs	r3, #0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d109      	bne.n	800372e <xQueueReceive+0x5a>
 800371a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800371e:	f383 8811 	msr	BASEPRI, r3
 8003722:	f3bf 8f6f 	isb	sy
 8003726:	f3bf 8f4f 	dsb	sy
 800372a:	61fb      	str	r3, [r7, #28]
 800372c:	e7fe      	b.n	800372c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800372e:	f001 f81f 	bl	8004770 <xTaskGetSchedulerState>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d102      	bne.n	800373e <xQueueReceive+0x6a>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d101      	bne.n	8003742 <xQueueReceive+0x6e>
 800373e:	2301      	movs	r3, #1
 8003740:	e000      	b.n	8003744 <xQueueReceive+0x70>
 8003742:	2300      	movs	r3, #0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d109      	bne.n	800375c <xQueueReceive+0x88>
 8003748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800374c:	f383 8811 	msr	BASEPRI, r3
 8003750:	f3bf 8f6f 	isb	sy
 8003754:	f3bf 8f4f 	dsb	sy
 8003758:	61bb      	str	r3, [r7, #24]
 800375a:	e7fe      	b.n	800375a <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800375c:	f001 fcdc 	bl	8005118 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003764:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003768:	2b00      	cmp	r3, #0
 800376a:	d01f      	beq.n	80037ac <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800376c:	68b9      	ldr	r1, [r7, #8]
 800376e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003770:	f000 f8f6 	bl	8003960 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003776:	1e5a      	subs	r2, r3, #1
 8003778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800377a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800377c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800377e:	691b      	ldr	r3, [r3, #16]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d00f      	beq.n	80037a4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003786:	3310      	adds	r3, #16
 8003788:	4618      	mov	r0, r3
 800378a:	f000 fe37 	bl	80043fc <xTaskRemoveFromEventList>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d007      	beq.n	80037a4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003794:	4b3c      	ldr	r3, [pc, #240]	; (8003888 <xQueueReceive+0x1b4>)
 8003796:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800379a:	601a      	str	r2, [r3, #0]
 800379c:	f3bf 8f4f 	dsb	sy
 80037a0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80037a4:	f001 fce6 	bl	8005174 <vPortExitCritical>
				return pdPASS;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e069      	b.n	8003880 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d103      	bne.n	80037ba <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80037b2:	f001 fcdf 	bl	8005174 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80037b6:	2300      	movs	r3, #0
 80037b8:	e062      	b.n	8003880 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80037ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d106      	bne.n	80037ce <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80037c0:	f107 0310 	add.w	r3, r7, #16
 80037c4:	4618      	mov	r0, r3
 80037c6:	f000 fe7b 	bl	80044c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80037ca:	2301      	movs	r3, #1
 80037cc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80037ce:	f001 fcd1 	bl	8005174 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80037d2:	f000 fbf3 	bl	8003fbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80037d6:	f001 fc9f 	bl	8005118 <vPortEnterCritical>
 80037da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037e0:	b25b      	sxtb	r3, r3
 80037e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037e6:	d103      	bne.n	80037f0 <xQueueReceive+0x11c>
 80037e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037f6:	b25b      	sxtb	r3, r3
 80037f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037fc:	d103      	bne.n	8003806 <xQueueReceive+0x132>
 80037fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003800:	2200      	movs	r2, #0
 8003802:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003806:	f001 fcb5 	bl	8005174 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800380a:	1d3a      	adds	r2, r7, #4
 800380c:	f107 0310 	add.w	r3, r7, #16
 8003810:	4611      	mov	r1, r2
 8003812:	4618      	mov	r0, r3
 8003814:	f000 fe6a 	bl	80044ec <xTaskCheckForTimeOut>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d123      	bne.n	8003866 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800381e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003820:	f000 f916 	bl	8003a50 <prvIsQueueEmpty>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d017      	beq.n	800385a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800382a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800382c:	3324      	adds	r3, #36	; 0x24
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	4611      	mov	r1, r2
 8003832:	4618      	mov	r0, r3
 8003834:	f000 fd94 	bl	8004360 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003838:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800383a:	f000 f8b7 	bl	80039ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800383e:	f000 fbcb 	bl	8003fd8 <xTaskResumeAll>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d189      	bne.n	800375c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8003848:	4b0f      	ldr	r3, [pc, #60]	; (8003888 <xQueueReceive+0x1b4>)
 800384a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800384e:	601a      	str	r2, [r3, #0]
 8003850:	f3bf 8f4f 	dsb	sy
 8003854:	f3bf 8f6f 	isb	sy
 8003858:	e780      	b.n	800375c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800385a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800385c:	f000 f8a6 	bl	80039ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003860:	f000 fbba 	bl	8003fd8 <xTaskResumeAll>
 8003864:	e77a      	b.n	800375c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003866:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003868:	f000 f8a0 	bl	80039ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800386c:	f000 fbb4 	bl	8003fd8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003870:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003872:	f000 f8ed 	bl	8003a50 <prvIsQueueEmpty>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	f43f af6f 	beq.w	800375c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800387e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003880:	4618      	mov	r0, r3
 8003882:	3730      	adds	r7, #48	; 0x30
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	e000ed04 	.word	0xe000ed04

0800388c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b086      	sub	sp, #24
 8003890:	af00      	add	r7, sp, #0
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003898:	2300      	movs	r3, #0
 800389a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d10d      	bne.n	80038c6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d14d      	bne.n	800394e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	4618      	mov	r0, r3
 80038b8:	f000 ff78 	bl	80047ac <xTaskPriorityDisinherit>
 80038bc:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	605a      	str	r2, [r3, #4]
 80038c4:	e043      	b.n	800394e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d119      	bne.n	8003900 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6898      	ldr	r0, [r3, #8]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d4:	461a      	mov	r2, r3
 80038d6:	68b9      	ldr	r1, [r7, #8]
 80038d8:	f001 ff0c 	bl	80056f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	689a      	ldr	r2, [r3, #8]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e4:	441a      	add	r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	689a      	ldr	r2, [r3, #8]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d32b      	bcc.n	800394e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	609a      	str	r2, [r3, #8]
 80038fe:	e026      	b.n	800394e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	68d8      	ldr	r0, [r3, #12]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003908:	461a      	mov	r2, r3
 800390a:	68b9      	ldr	r1, [r7, #8]
 800390c:	f001 fef2 	bl	80056f4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	68da      	ldr	r2, [r3, #12]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003918:	425b      	negs	r3, r3
 800391a:	441a      	add	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	68da      	ldr	r2, [r3, #12]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	429a      	cmp	r2, r3
 800392a:	d207      	bcs.n	800393c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	685a      	ldr	r2, [r3, #4]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003934:	425b      	negs	r3, r3
 8003936:	441a      	add	r2, r3
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2b02      	cmp	r3, #2
 8003940:	d105      	bne.n	800394e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d002      	beq.n	800394e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	3b01      	subs	r3, #1
 800394c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	1c5a      	adds	r2, r3, #1
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003956:	697b      	ldr	r3, [r7, #20]
}
 8003958:	4618      	mov	r0, r3
 800395a:	3718      	adds	r7, #24
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396e:	2b00      	cmp	r3, #0
 8003970:	d018      	beq.n	80039a4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	68da      	ldr	r2, [r3, #12]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397a:	441a      	add	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	68da      	ldr	r2, [r3, #12]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	429a      	cmp	r2, r3
 800398a:	d303      	bcc.n	8003994 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	68d9      	ldr	r1, [r3, #12]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399c:	461a      	mov	r2, r3
 800399e:	6838      	ldr	r0, [r7, #0]
 80039a0:	f001 fea8 	bl	80056f4 <memcpy>
	}
}
 80039a4:	bf00      	nop
 80039a6:	3708      	adds	r7, #8
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80039b4:	f001 fbb0 	bl	8005118 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039be:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80039c0:	e011      	b.n	80039e6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d012      	beq.n	80039f0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	3324      	adds	r3, #36	; 0x24
 80039ce:	4618      	mov	r0, r3
 80039d0:	f000 fd14 	bl	80043fc <xTaskRemoveFromEventList>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80039da:	f000 fde7 	bl	80045ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80039de:	7bfb      	ldrb	r3, [r7, #15]
 80039e0:	3b01      	subs	r3, #1
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80039e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	dce9      	bgt.n	80039c2 <prvUnlockQueue+0x16>
 80039ee:	e000      	b.n	80039f2 <prvUnlockQueue+0x46>
					break;
 80039f0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	22ff      	movs	r2, #255	; 0xff
 80039f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80039fa:	f001 fbbb 	bl	8005174 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80039fe:	f001 fb8b 	bl	8005118 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a08:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a0a:	e011      	b.n	8003a30 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	691b      	ldr	r3, [r3, #16]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d012      	beq.n	8003a3a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	3310      	adds	r3, #16
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f000 fcef 	bl	80043fc <xTaskRemoveFromEventList>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d001      	beq.n	8003a28 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003a24:	f000 fdc2 	bl	80045ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003a28:	7bbb      	ldrb	r3, [r7, #14]
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	dce9      	bgt.n	8003a0c <prvUnlockQueue+0x60>
 8003a38:	e000      	b.n	8003a3c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003a3a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	22ff      	movs	r2, #255	; 0xff
 8003a40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003a44:	f001 fb96 	bl	8005174 <vPortExitCritical>
}
 8003a48:	bf00      	nop
 8003a4a:	3710      	adds	r7, #16
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003a58:	f001 fb5e 	bl	8005118 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d102      	bne.n	8003a6a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003a64:	2301      	movs	r3, #1
 8003a66:	60fb      	str	r3, [r7, #12]
 8003a68:	e001      	b.n	8003a6e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003a6e:	f001 fb81 	bl	8005174 <vPortExitCritical>

	return xReturn;
 8003a72:	68fb      	ldr	r3, [r7, #12]
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3710      	adds	r7, #16
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003a84:	f001 fb48 	bl	8005118 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d102      	bne.n	8003a9a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003a94:	2301      	movs	r3, #1
 8003a96:	60fb      	str	r3, [r7, #12]
 8003a98:	e001      	b.n	8003a9e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003a9e:	f001 fb69 	bl	8005174 <vPortExitCritical>

	return xReturn;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3710      	adds	r7, #16
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003aac:	b480      	push	{r7}
 8003aae:	b085      	sub	sp, #20
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	60fb      	str	r3, [r7, #12]
 8003aba:	e014      	b.n	8003ae6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003abc:	4a0e      	ldr	r2, [pc, #56]	; (8003af8 <vQueueAddToRegistry+0x4c>)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d10b      	bne.n	8003ae0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003ac8:	490b      	ldr	r1, [pc, #44]	; (8003af8 <vQueueAddToRegistry+0x4c>)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	683a      	ldr	r2, [r7, #0]
 8003ace:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003ad2:	4a09      	ldr	r2, [pc, #36]	; (8003af8 <vQueueAddToRegistry+0x4c>)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	4413      	add	r3, r2
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003ade:	e005      	b.n	8003aec <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	60fb      	str	r3, [r7, #12]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2b07      	cmp	r3, #7
 8003aea:	d9e7      	bls.n	8003abc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003aec:	bf00      	nop
 8003aee:	3714      	adds	r7, #20
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bc80      	pop	{r7}
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	20001b94 	.word	0x20001b94

08003afc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b086      	sub	sp, #24
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003b0c:	f001 fb04 	bl	8005118 <vPortEnterCritical>
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b16:	b25b      	sxtb	r3, r3
 8003b18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b1c:	d103      	bne.n	8003b26 <vQueueWaitForMessageRestricted+0x2a>
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b2c:	b25b      	sxtb	r3, r3
 8003b2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b32:	d103      	bne.n	8003b3c <vQueueWaitForMessageRestricted+0x40>
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b3c:	f001 fb1a 	bl	8005174 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d106      	bne.n	8003b56 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	3324      	adds	r3, #36	; 0x24
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	68b9      	ldr	r1, [r7, #8]
 8003b50:	4618      	mov	r0, r3
 8003b52:	f000 fc29 	bl	80043a8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003b56:	6978      	ldr	r0, [r7, #20]
 8003b58:	f7ff ff28 	bl	80039ac <prvUnlockQueue>
	}
 8003b5c:	bf00      	nop
 8003b5e:	3718      	adds	r7, #24
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b08e      	sub	sp, #56	; 0x38
 8003b68:	af04      	add	r7, sp, #16
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	607a      	str	r2, [r7, #4]
 8003b70:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d109      	bne.n	8003b8c <xTaskCreateStatic+0x28>
 8003b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b7c:	f383 8811 	msr	BASEPRI, r3
 8003b80:	f3bf 8f6f 	isb	sy
 8003b84:	f3bf 8f4f 	dsb	sy
 8003b88:	623b      	str	r3, [r7, #32]
 8003b8a:	e7fe      	b.n	8003b8a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d109      	bne.n	8003ba6 <xTaskCreateStatic+0x42>
 8003b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b96:	f383 8811 	msr	BASEPRI, r3
 8003b9a:	f3bf 8f6f 	isb	sy
 8003b9e:	f3bf 8f4f 	dsb	sy
 8003ba2:	61fb      	str	r3, [r7, #28]
 8003ba4:	e7fe      	b.n	8003ba4 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003ba6:	235c      	movs	r3, #92	; 0x5c
 8003ba8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	2b5c      	cmp	r3, #92	; 0x5c
 8003bae:	d009      	beq.n	8003bc4 <xTaskCreateStatic+0x60>
 8003bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb4:	f383 8811 	msr	BASEPRI, r3
 8003bb8:	f3bf 8f6f 	isb	sy
 8003bbc:	f3bf 8f4f 	dsb	sy
 8003bc0:	61bb      	str	r3, [r7, #24]
 8003bc2:	e7fe      	b.n	8003bc2 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d01e      	beq.n	8003c08 <xTaskCreateStatic+0xa4>
 8003bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d01b      	beq.n	8003c08 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bd2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bd8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bdc:	2202      	movs	r2, #2
 8003bde:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003be2:	2300      	movs	r3, #0
 8003be4:	9303      	str	r3, [sp, #12]
 8003be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be8:	9302      	str	r3, [sp, #8]
 8003bea:	f107 0314 	add.w	r3, r7, #20
 8003bee:	9301      	str	r3, [sp, #4]
 8003bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf2:	9300      	str	r3, [sp, #0]
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	68b9      	ldr	r1, [r7, #8]
 8003bfa:	68f8      	ldr	r0, [r7, #12]
 8003bfc:	f000 f850 	bl	8003ca0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003c00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c02:	f000 f8d3 	bl	8003dac <prvAddNewTaskToReadyList>
 8003c06:	e001      	b.n	8003c0c <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003c0c:	697b      	ldr	r3, [r7, #20]
	}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3728      	adds	r7, #40	; 0x28
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003c16:	b580      	push	{r7, lr}
 8003c18:	b08c      	sub	sp, #48	; 0x30
 8003c1a:	af04      	add	r7, sp, #16
 8003c1c:	60f8      	str	r0, [r7, #12]
 8003c1e:	60b9      	str	r1, [r7, #8]
 8003c20:	603b      	str	r3, [r7, #0]
 8003c22:	4613      	mov	r3, r2
 8003c24:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c26:	88fb      	ldrh	r3, [r7, #6]
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f001 fb6a 	bl	8005304 <pvPortMalloc>
 8003c30:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00e      	beq.n	8003c56 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003c38:	205c      	movs	r0, #92	; 0x5c
 8003c3a:	f001 fb63 	bl	8005304 <pvPortMalloc>
 8003c3e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d003      	beq.n	8003c4e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	697a      	ldr	r2, [r7, #20]
 8003c4a:	631a      	str	r2, [r3, #48]	; 0x30
 8003c4c:	e005      	b.n	8003c5a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003c4e:	6978      	ldr	r0, [r7, #20]
 8003c50:	f001 fc1a 	bl	8005488 <vPortFree>
 8003c54:	e001      	b.n	8003c5a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003c56:	2300      	movs	r3, #0
 8003c58:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d017      	beq.n	8003c90 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003c68:	88fa      	ldrh	r2, [r7, #6]
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	9303      	str	r3, [sp, #12]
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	9302      	str	r3, [sp, #8]
 8003c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c74:	9301      	str	r3, [sp, #4]
 8003c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c78:	9300      	str	r3, [sp, #0]
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	68b9      	ldr	r1, [r7, #8]
 8003c7e:	68f8      	ldr	r0, [r7, #12]
 8003c80:	f000 f80e 	bl	8003ca0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003c84:	69f8      	ldr	r0, [r7, #28]
 8003c86:	f000 f891 	bl	8003dac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	61bb      	str	r3, [r7, #24]
 8003c8e:	e002      	b.n	8003c96 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003c90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c94:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003c96:	69bb      	ldr	r3, [r7, #24]
	}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3720      	adds	r7, #32
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b088      	sub	sp, #32
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	60b9      	str	r1, [r7, #8]
 8003caa:	607a      	str	r2, [r7, #4]
 8003cac:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	21a5      	movs	r1, #165	; 0xa5
 8003cba:	f001 fd26 	bl	800570a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003cc8:	3b01      	subs	r3, #1
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	4413      	add	r3, r2
 8003cce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003cd0:	69bb      	ldr	r3, [r7, #24]
 8003cd2:	f023 0307 	bic.w	r3, r3, #7
 8003cd6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	f003 0307 	and.w	r3, r3, #7
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d009      	beq.n	8003cf6 <prvInitialiseNewTask+0x56>
 8003ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce6:	f383 8811 	msr	BASEPRI, r3
 8003cea:	f3bf 8f6f 	isb	sy
 8003cee:	f3bf 8f4f 	dsb	sy
 8003cf2:	617b      	str	r3, [r7, #20]
 8003cf4:	e7fe      	b.n	8003cf4 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	61fb      	str	r3, [r7, #28]
 8003cfa:	e012      	b.n	8003d22 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003cfc:	68ba      	ldr	r2, [r7, #8]
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	4413      	add	r3, r2
 8003d02:	7819      	ldrb	r1, [r3, #0]
 8003d04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	4413      	add	r3, r2
 8003d0a:	3334      	adds	r3, #52	; 0x34
 8003d0c:	460a      	mov	r2, r1
 8003d0e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003d10:	68ba      	ldr	r2, [r7, #8]
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	4413      	add	r3, r2
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d006      	beq.n	8003d2a <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	3301      	adds	r3, #1
 8003d20:	61fb      	str	r3, [r7, #28]
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	2b0f      	cmp	r3, #15
 8003d26:	d9e9      	bls.n	8003cfc <prvInitialiseNewTask+0x5c>
 8003d28:	e000      	b.n	8003d2c <prvInitialiseNewTask+0x8c>
		{
			break;
 8003d2a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d36:	2b37      	cmp	r3, #55	; 0x37
 8003d38:	d901      	bls.n	8003d3e <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003d3a:	2337      	movs	r3, #55	; 0x37
 8003d3c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d42:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d48:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d52:	3304      	adds	r3, #4
 8003d54:	4618      	mov	r0, r3
 8003d56:	f7ff f9a0 	bl	800309a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d5c:	3318      	adds	r3, #24
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f7ff f99b 	bl	800309a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d68:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d6c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d72:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d78:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003d88:	683a      	ldr	r2, [r7, #0]
 8003d8a:	68f9      	ldr	r1, [r7, #12]
 8003d8c:	69b8      	ldr	r0, [r7, #24]
 8003d8e:	f001 f8d7 	bl	8004f40 <pxPortInitialiseStack>
 8003d92:	4602      	mov	r2, r0
 8003d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d96:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d002      	beq.n	8003da4 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003da2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003da4:	bf00      	nop
 8003da6:	3720      	adds	r7, #32
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003db4:	f001 f9b0 	bl	8005118 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003db8:	4b2d      	ldr	r3, [pc, #180]	; (8003e70 <prvAddNewTaskToReadyList+0xc4>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	4a2c      	ldr	r2, [pc, #176]	; (8003e70 <prvAddNewTaskToReadyList+0xc4>)
 8003dc0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003dc2:	4b2c      	ldr	r3, [pc, #176]	; (8003e74 <prvAddNewTaskToReadyList+0xc8>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d109      	bne.n	8003dde <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003dca:	4a2a      	ldr	r2, [pc, #168]	; (8003e74 <prvAddNewTaskToReadyList+0xc8>)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003dd0:	4b27      	ldr	r3, [pc, #156]	; (8003e70 <prvAddNewTaskToReadyList+0xc4>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d110      	bne.n	8003dfa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003dd8:	f000 fc0c 	bl	80045f4 <prvInitialiseTaskLists>
 8003ddc:	e00d      	b.n	8003dfa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003dde:	4b26      	ldr	r3, [pc, #152]	; (8003e78 <prvAddNewTaskToReadyList+0xcc>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d109      	bne.n	8003dfa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003de6:	4b23      	ldr	r3, [pc, #140]	; (8003e74 <prvAddNewTaskToReadyList+0xc8>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d802      	bhi.n	8003dfa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003df4:	4a1f      	ldr	r2, [pc, #124]	; (8003e74 <prvAddNewTaskToReadyList+0xc8>)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003dfa:	4b20      	ldr	r3, [pc, #128]	; (8003e7c <prvAddNewTaskToReadyList+0xd0>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	3301      	adds	r3, #1
 8003e00:	4a1e      	ldr	r2, [pc, #120]	; (8003e7c <prvAddNewTaskToReadyList+0xd0>)
 8003e02:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003e04:	4b1d      	ldr	r3, [pc, #116]	; (8003e7c <prvAddNewTaskToReadyList+0xd0>)
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e10:	4b1b      	ldr	r3, [pc, #108]	; (8003e80 <prvAddNewTaskToReadyList+0xd4>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d903      	bls.n	8003e20 <prvAddNewTaskToReadyList+0x74>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e1c:	4a18      	ldr	r2, [pc, #96]	; (8003e80 <prvAddNewTaskToReadyList+0xd4>)
 8003e1e:	6013      	str	r3, [r2, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e24:	4613      	mov	r3, r2
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	4413      	add	r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	4a15      	ldr	r2, [pc, #84]	; (8003e84 <prvAddNewTaskToReadyList+0xd8>)
 8003e2e:	441a      	add	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	3304      	adds	r3, #4
 8003e34:	4619      	mov	r1, r3
 8003e36:	4610      	mov	r0, r2
 8003e38:	f7ff f93b 	bl	80030b2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003e3c:	f001 f99a 	bl	8005174 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003e40:	4b0d      	ldr	r3, [pc, #52]	; (8003e78 <prvAddNewTaskToReadyList+0xcc>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d00e      	beq.n	8003e66 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003e48:	4b0a      	ldr	r3, [pc, #40]	; (8003e74 <prvAddNewTaskToReadyList+0xc8>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d207      	bcs.n	8003e66 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003e56:	4b0c      	ldr	r3, [pc, #48]	; (8003e88 <prvAddNewTaskToReadyList+0xdc>)
 8003e58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e5c:	601a      	str	r2, [r3, #0]
 8003e5e:	f3bf 8f4f 	dsb	sy
 8003e62:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e66:	bf00      	nop
 8003e68:	3708      	adds	r7, #8
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	20000bc4 	.word	0x20000bc4
 8003e74:	200006f0 	.word	0x200006f0
 8003e78:	20000bd0 	.word	0x20000bd0
 8003e7c:	20000be0 	.word	0x20000be0
 8003e80:	20000bcc 	.word	0x20000bcc
 8003e84:	200006f4 	.word	0x200006f4
 8003e88:	e000ed04 	.word	0xe000ed04

08003e8c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003e94:	2300      	movs	r3, #0
 8003e96:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d016      	beq.n	8003ecc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003e9e:	4b13      	ldr	r3, [pc, #76]	; (8003eec <vTaskDelay+0x60>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d009      	beq.n	8003eba <vTaskDelay+0x2e>
 8003ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eaa:	f383 8811 	msr	BASEPRI, r3
 8003eae:	f3bf 8f6f 	isb	sy
 8003eb2:	f3bf 8f4f 	dsb	sy
 8003eb6:	60bb      	str	r3, [r7, #8]
 8003eb8:	e7fe      	b.n	8003eb8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003eba:	f000 f87f 	bl	8003fbc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003ebe:	2100      	movs	r1, #0
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f000 fcdf 	bl	8004884 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003ec6:	f000 f887 	bl	8003fd8 <xTaskResumeAll>
 8003eca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d107      	bne.n	8003ee2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003ed2:	4b07      	ldr	r3, [pc, #28]	; (8003ef0 <vTaskDelay+0x64>)
 8003ed4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ed8:	601a      	str	r2, [r3, #0]
 8003eda:	f3bf 8f4f 	dsb	sy
 8003ede:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003ee2:	bf00      	nop
 8003ee4:	3710      	adds	r7, #16
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	20000bec 	.word	0x20000bec
 8003ef0:	e000ed04 	.word	0xe000ed04

08003ef4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b08a      	sub	sp, #40	; 0x28
 8003ef8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003efa:	2300      	movs	r3, #0
 8003efc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003efe:	2300      	movs	r3, #0
 8003f00:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003f02:	463a      	mov	r2, r7
 8003f04:	1d39      	adds	r1, r7, #4
 8003f06:	f107 0308 	add.w	r3, r7, #8
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f7ff f874 	bl	8002ff8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003f10:	6839      	ldr	r1, [r7, #0]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	68ba      	ldr	r2, [r7, #8]
 8003f16:	9202      	str	r2, [sp, #8]
 8003f18:	9301      	str	r3, [sp, #4]
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	9300      	str	r3, [sp, #0]
 8003f1e:	2300      	movs	r3, #0
 8003f20:	460a      	mov	r2, r1
 8003f22:	4920      	ldr	r1, [pc, #128]	; (8003fa4 <vTaskStartScheduler+0xb0>)
 8003f24:	4820      	ldr	r0, [pc, #128]	; (8003fa8 <vTaskStartScheduler+0xb4>)
 8003f26:	f7ff fe1d 	bl	8003b64 <xTaskCreateStatic>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	4b1f      	ldr	r3, [pc, #124]	; (8003fac <vTaskStartScheduler+0xb8>)
 8003f2e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003f30:	4b1e      	ldr	r3, [pc, #120]	; (8003fac <vTaskStartScheduler+0xb8>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d002      	beq.n	8003f3e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	617b      	str	r3, [r7, #20]
 8003f3c:	e001      	b.n	8003f42 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d102      	bne.n	8003f4e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003f48:	f000 fcf0 	bl	800492c <xTimerCreateTimerTask>
 8003f4c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d115      	bne.n	8003f80 <vTaskStartScheduler+0x8c>
 8003f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f58:	f383 8811 	msr	BASEPRI, r3
 8003f5c:	f3bf 8f6f 	isb	sy
 8003f60:	f3bf 8f4f 	dsb	sy
 8003f64:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003f66:	4b12      	ldr	r3, [pc, #72]	; (8003fb0 <vTaskStartScheduler+0xbc>)
 8003f68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f6c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003f6e:	4b11      	ldr	r3, [pc, #68]	; (8003fb4 <vTaskStartScheduler+0xc0>)
 8003f70:	2201      	movs	r2, #1
 8003f72:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003f74:	4b10      	ldr	r3, [pc, #64]	; (8003fb8 <vTaskStartScheduler+0xc4>)
 8003f76:	2200      	movs	r2, #0
 8003f78:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003f7a:	f001 f85d 	bl	8005038 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003f7e:	e00d      	b.n	8003f9c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f86:	d109      	bne.n	8003f9c <vTaskStartScheduler+0xa8>
 8003f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8c:	f383 8811 	msr	BASEPRI, r3
 8003f90:	f3bf 8f6f 	isb	sy
 8003f94:	f3bf 8f4f 	dsb	sy
 8003f98:	60fb      	str	r3, [r7, #12]
 8003f9a:	e7fe      	b.n	8003f9a <vTaskStartScheduler+0xa6>
}
 8003f9c:	bf00      	nop
 8003f9e:	3718      	adds	r7, #24
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	08005764 	.word	0x08005764
 8003fa8:	080045c5 	.word	0x080045c5
 8003fac:	20000be8 	.word	0x20000be8
 8003fb0:	20000be4 	.word	0x20000be4
 8003fb4:	20000bd0 	.word	0x20000bd0
 8003fb8:	20000bc8 	.word	0x20000bc8

08003fbc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003fc0:	4b04      	ldr	r3, [pc, #16]	; (8003fd4 <vTaskSuspendAll+0x18>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	3301      	adds	r3, #1
 8003fc6:	4a03      	ldr	r2, [pc, #12]	; (8003fd4 <vTaskSuspendAll+0x18>)
 8003fc8:	6013      	str	r3, [r2, #0]
}
 8003fca:	bf00      	nop
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bc80      	pop	{r7}
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	20000bec 	.word	0x20000bec

08003fd8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003fe6:	4b41      	ldr	r3, [pc, #260]	; (80040ec <xTaskResumeAll+0x114>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d109      	bne.n	8004002 <xTaskResumeAll+0x2a>
 8003fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff2:	f383 8811 	msr	BASEPRI, r3
 8003ff6:	f3bf 8f6f 	isb	sy
 8003ffa:	f3bf 8f4f 	dsb	sy
 8003ffe:	603b      	str	r3, [r7, #0]
 8004000:	e7fe      	b.n	8004000 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004002:	f001 f889 	bl	8005118 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004006:	4b39      	ldr	r3, [pc, #228]	; (80040ec <xTaskResumeAll+0x114>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	3b01      	subs	r3, #1
 800400c:	4a37      	ldr	r2, [pc, #220]	; (80040ec <xTaskResumeAll+0x114>)
 800400e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004010:	4b36      	ldr	r3, [pc, #216]	; (80040ec <xTaskResumeAll+0x114>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d162      	bne.n	80040de <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004018:	4b35      	ldr	r3, [pc, #212]	; (80040f0 <xTaskResumeAll+0x118>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d05e      	beq.n	80040de <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004020:	e02f      	b.n	8004082 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004022:	4b34      	ldr	r3, [pc, #208]	; (80040f4 <xTaskResumeAll+0x11c>)
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	3318      	adds	r3, #24
 800402e:	4618      	mov	r0, r3
 8004030:	f7ff f89a 	bl	8003168 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	3304      	adds	r3, #4
 8004038:	4618      	mov	r0, r3
 800403a:	f7ff f895 	bl	8003168 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004042:	4b2d      	ldr	r3, [pc, #180]	; (80040f8 <xTaskResumeAll+0x120>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	429a      	cmp	r2, r3
 8004048:	d903      	bls.n	8004052 <xTaskResumeAll+0x7a>
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404e:	4a2a      	ldr	r2, [pc, #168]	; (80040f8 <xTaskResumeAll+0x120>)
 8004050:	6013      	str	r3, [r2, #0]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004056:	4613      	mov	r3, r2
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	4413      	add	r3, r2
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	4a27      	ldr	r2, [pc, #156]	; (80040fc <xTaskResumeAll+0x124>)
 8004060:	441a      	add	r2, r3
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	3304      	adds	r3, #4
 8004066:	4619      	mov	r1, r3
 8004068:	4610      	mov	r0, r2
 800406a:	f7ff f822 	bl	80030b2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004072:	4b23      	ldr	r3, [pc, #140]	; (8004100 <xTaskResumeAll+0x128>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004078:	429a      	cmp	r2, r3
 800407a:	d302      	bcc.n	8004082 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800407c:	4b21      	ldr	r3, [pc, #132]	; (8004104 <xTaskResumeAll+0x12c>)
 800407e:	2201      	movs	r2, #1
 8004080:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004082:	4b1c      	ldr	r3, [pc, #112]	; (80040f4 <xTaskResumeAll+0x11c>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1cb      	bne.n	8004022 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d001      	beq.n	8004094 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004090:	f000 fb4a 	bl	8004728 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004094:	4b1c      	ldr	r3, [pc, #112]	; (8004108 <xTaskResumeAll+0x130>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d010      	beq.n	80040c2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80040a0:	f000 f844 	bl	800412c <xTaskIncrementTick>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d002      	beq.n	80040b0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80040aa:	4b16      	ldr	r3, [pc, #88]	; (8004104 <xTaskResumeAll+0x12c>)
 80040ac:	2201      	movs	r2, #1
 80040ae:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	3b01      	subs	r3, #1
 80040b4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d1f1      	bne.n	80040a0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80040bc:	4b12      	ldr	r3, [pc, #72]	; (8004108 <xTaskResumeAll+0x130>)
 80040be:	2200      	movs	r2, #0
 80040c0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80040c2:	4b10      	ldr	r3, [pc, #64]	; (8004104 <xTaskResumeAll+0x12c>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d009      	beq.n	80040de <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80040ca:	2301      	movs	r3, #1
 80040cc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80040ce:	4b0f      	ldr	r3, [pc, #60]	; (800410c <xTaskResumeAll+0x134>)
 80040d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040d4:	601a      	str	r2, [r3, #0]
 80040d6:	f3bf 8f4f 	dsb	sy
 80040da:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80040de:	f001 f849 	bl	8005174 <vPortExitCritical>

	return xAlreadyYielded;
 80040e2:	68bb      	ldr	r3, [r7, #8]
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3710      	adds	r7, #16
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	20000bec 	.word	0x20000bec
 80040f0:	20000bc4 	.word	0x20000bc4
 80040f4:	20000b84 	.word	0x20000b84
 80040f8:	20000bcc 	.word	0x20000bcc
 80040fc:	200006f4 	.word	0x200006f4
 8004100:	200006f0 	.word	0x200006f0
 8004104:	20000bd8 	.word	0x20000bd8
 8004108:	20000bd4 	.word	0x20000bd4
 800410c:	e000ed04 	.word	0xe000ed04

08004110 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004116:	4b04      	ldr	r3, [pc, #16]	; (8004128 <xTaskGetTickCount+0x18>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800411c:	687b      	ldr	r3, [r7, #4]
}
 800411e:	4618      	mov	r0, r3
 8004120:	370c      	adds	r7, #12
 8004122:	46bd      	mov	sp, r7
 8004124:	bc80      	pop	{r7}
 8004126:	4770      	bx	lr
 8004128:	20000bc8 	.word	0x20000bc8

0800412c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b086      	sub	sp, #24
 8004130:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004132:	2300      	movs	r3, #0
 8004134:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004136:	4b51      	ldr	r3, [pc, #324]	; (800427c <xTaskIncrementTick+0x150>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2b00      	cmp	r3, #0
 800413c:	f040 808d 	bne.w	800425a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004140:	4b4f      	ldr	r3, [pc, #316]	; (8004280 <xTaskIncrementTick+0x154>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	3301      	adds	r3, #1
 8004146:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004148:	4a4d      	ldr	r2, [pc, #308]	; (8004280 <xTaskIncrementTick+0x154>)
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d11f      	bne.n	8004194 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004154:	4b4b      	ldr	r3, [pc, #300]	; (8004284 <xTaskIncrementTick+0x158>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d009      	beq.n	8004172 <xTaskIncrementTick+0x46>
 800415e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004162:	f383 8811 	msr	BASEPRI, r3
 8004166:	f3bf 8f6f 	isb	sy
 800416a:	f3bf 8f4f 	dsb	sy
 800416e:	603b      	str	r3, [r7, #0]
 8004170:	e7fe      	b.n	8004170 <xTaskIncrementTick+0x44>
 8004172:	4b44      	ldr	r3, [pc, #272]	; (8004284 <xTaskIncrementTick+0x158>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	60fb      	str	r3, [r7, #12]
 8004178:	4b43      	ldr	r3, [pc, #268]	; (8004288 <xTaskIncrementTick+0x15c>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a41      	ldr	r2, [pc, #260]	; (8004284 <xTaskIncrementTick+0x158>)
 800417e:	6013      	str	r3, [r2, #0]
 8004180:	4a41      	ldr	r2, [pc, #260]	; (8004288 <xTaskIncrementTick+0x15c>)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6013      	str	r3, [r2, #0]
 8004186:	4b41      	ldr	r3, [pc, #260]	; (800428c <xTaskIncrementTick+0x160>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	3301      	adds	r3, #1
 800418c:	4a3f      	ldr	r2, [pc, #252]	; (800428c <xTaskIncrementTick+0x160>)
 800418e:	6013      	str	r3, [r2, #0]
 8004190:	f000 faca 	bl	8004728 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004194:	4b3e      	ldr	r3, [pc, #248]	; (8004290 <xTaskIncrementTick+0x164>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	693a      	ldr	r2, [r7, #16]
 800419a:	429a      	cmp	r2, r3
 800419c:	d34e      	bcc.n	800423c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800419e:	4b39      	ldr	r3, [pc, #228]	; (8004284 <xTaskIncrementTick+0x158>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d101      	bne.n	80041ac <xTaskIncrementTick+0x80>
 80041a8:	2301      	movs	r3, #1
 80041aa:	e000      	b.n	80041ae <xTaskIncrementTick+0x82>
 80041ac:	2300      	movs	r3, #0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d004      	beq.n	80041bc <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041b2:	4b37      	ldr	r3, [pc, #220]	; (8004290 <xTaskIncrementTick+0x164>)
 80041b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041b8:	601a      	str	r2, [r3, #0]
					break;
 80041ba:	e03f      	b.n	800423c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80041bc:	4b31      	ldr	r3, [pc, #196]	; (8004284 <xTaskIncrementTick+0x158>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80041cc:	693a      	ldr	r2, [r7, #16]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d203      	bcs.n	80041dc <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80041d4:	4a2e      	ldr	r2, [pc, #184]	; (8004290 <xTaskIncrementTick+0x164>)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6013      	str	r3, [r2, #0]
						break;
 80041da:	e02f      	b.n	800423c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	3304      	adds	r3, #4
 80041e0:	4618      	mov	r0, r3
 80041e2:	f7fe ffc1 	bl	8003168 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d004      	beq.n	80041f8 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	3318      	adds	r3, #24
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7fe ffb8 	bl	8003168 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041fc:	4b25      	ldr	r3, [pc, #148]	; (8004294 <xTaskIncrementTick+0x168>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	429a      	cmp	r2, r3
 8004202:	d903      	bls.n	800420c <xTaskIncrementTick+0xe0>
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004208:	4a22      	ldr	r2, [pc, #136]	; (8004294 <xTaskIncrementTick+0x168>)
 800420a:	6013      	str	r3, [r2, #0]
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004210:	4613      	mov	r3, r2
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	4413      	add	r3, r2
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	4a1f      	ldr	r2, [pc, #124]	; (8004298 <xTaskIncrementTick+0x16c>)
 800421a:	441a      	add	r2, r3
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	3304      	adds	r3, #4
 8004220:	4619      	mov	r1, r3
 8004222:	4610      	mov	r0, r2
 8004224:	f7fe ff45 	bl	80030b2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800422c:	4b1b      	ldr	r3, [pc, #108]	; (800429c <xTaskIncrementTick+0x170>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004232:	429a      	cmp	r2, r3
 8004234:	d3b3      	bcc.n	800419e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004236:	2301      	movs	r3, #1
 8004238:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800423a:	e7b0      	b.n	800419e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800423c:	4b17      	ldr	r3, [pc, #92]	; (800429c <xTaskIncrementTick+0x170>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004242:	4915      	ldr	r1, [pc, #84]	; (8004298 <xTaskIncrementTick+0x16c>)
 8004244:	4613      	mov	r3, r2
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	4413      	add	r3, r2
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	440b      	add	r3, r1
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2b01      	cmp	r3, #1
 8004252:	d907      	bls.n	8004264 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004254:	2301      	movs	r3, #1
 8004256:	617b      	str	r3, [r7, #20]
 8004258:	e004      	b.n	8004264 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800425a:	4b11      	ldr	r3, [pc, #68]	; (80042a0 <xTaskIncrementTick+0x174>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	3301      	adds	r3, #1
 8004260:	4a0f      	ldr	r2, [pc, #60]	; (80042a0 <xTaskIncrementTick+0x174>)
 8004262:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004264:	4b0f      	ldr	r3, [pc, #60]	; (80042a4 <xTaskIncrementTick+0x178>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d001      	beq.n	8004270 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800426c:	2301      	movs	r3, #1
 800426e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004270:	697b      	ldr	r3, [r7, #20]
}
 8004272:	4618      	mov	r0, r3
 8004274:	3718      	adds	r7, #24
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	20000bec 	.word	0x20000bec
 8004280:	20000bc8 	.word	0x20000bc8
 8004284:	20000b7c 	.word	0x20000b7c
 8004288:	20000b80 	.word	0x20000b80
 800428c:	20000bdc 	.word	0x20000bdc
 8004290:	20000be4 	.word	0x20000be4
 8004294:	20000bcc 	.word	0x20000bcc
 8004298:	200006f4 	.word	0x200006f4
 800429c:	200006f0 	.word	0x200006f0
 80042a0:	20000bd4 	.word	0x20000bd4
 80042a4:	20000bd8 	.word	0x20000bd8

080042a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80042a8:	b480      	push	{r7}
 80042aa:	b085      	sub	sp, #20
 80042ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80042ae:	4b27      	ldr	r3, [pc, #156]	; (800434c <vTaskSwitchContext+0xa4>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d003      	beq.n	80042be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80042b6:	4b26      	ldr	r3, [pc, #152]	; (8004350 <vTaskSwitchContext+0xa8>)
 80042b8:	2201      	movs	r2, #1
 80042ba:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80042bc:	e040      	b.n	8004340 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80042be:	4b24      	ldr	r3, [pc, #144]	; (8004350 <vTaskSwitchContext+0xa8>)
 80042c0:	2200      	movs	r2, #0
 80042c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80042c4:	4b23      	ldr	r3, [pc, #140]	; (8004354 <vTaskSwitchContext+0xac>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	60fb      	str	r3, [r7, #12]
 80042ca:	e00f      	b.n	80042ec <vTaskSwitchContext+0x44>
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d109      	bne.n	80042e6 <vTaskSwitchContext+0x3e>
 80042d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d6:	f383 8811 	msr	BASEPRI, r3
 80042da:	f3bf 8f6f 	isb	sy
 80042de:	f3bf 8f4f 	dsb	sy
 80042e2:	607b      	str	r3, [r7, #4]
 80042e4:	e7fe      	b.n	80042e4 <vTaskSwitchContext+0x3c>
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	3b01      	subs	r3, #1
 80042ea:	60fb      	str	r3, [r7, #12]
 80042ec:	491a      	ldr	r1, [pc, #104]	; (8004358 <vTaskSwitchContext+0xb0>)
 80042ee:	68fa      	ldr	r2, [r7, #12]
 80042f0:	4613      	mov	r3, r2
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	4413      	add	r3, r2
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	440b      	add	r3, r1
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d0e5      	beq.n	80042cc <vTaskSwitchContext+0x24>
 8004300:	68fa      	ldr	r2, [r7, #12]
 8004302:	4613      	mov	r3, r2
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	4413      	add	r3, r2
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	4a13      	ldr	r2, [pc, #76]	; (8004358 <vTaskSwitchContext+0xb0>)
 800430c:	4413      	add	r3, r2
 800430e:	60bb      	str	r3, [r7, #8]
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	685a      	ldr	r2, [r3, #4]
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	605a      	str	r2, [r3, #4]
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	685a      	ldr	r2, [r3, #4]
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	3308      	adds	r3, #8
 8004322:	429a      	cmp	r2, r3
 8004324:	d104      	bne.n	8004330 <vTaskSwitchContext+0x88>
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	685a      	ldr	r2, [r3, #4]
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	605a      	str	r2, [r3, #4]
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	4a09      	ldr	r2, [pc, #36]	; (800435c <vTaskSwitchContext+0xb4>)
 8004338:	6013      	str	r3, [r2, #0]
 800433a:	4a06      	ldr	r2, [pc, #24]	; (8004354 <vTaskSwitchContext+0xac>)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6013      	str	r3, [r2, #0]
}
 8004340:	bf00      	nop
 8004342:	3714      	adds	r7, #20
 8004344:	46bd      	mov	sp, r7
 8004346:	bc80      	pop	{r7}
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	20000bec 	.word	0x20000bec
 8004350:	20000bd8 	.word	0x20000bd8
 8004354:	20000bcc 	.word	0x20000bcc
 8004358:	200006f4 	.word	0x200006f4
 800435c:	200006f0 	.word	0x200006f0

08004360 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d109      	bne.n	8004384 <vTaskPlaceOnEventList+0x24>
 8004370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004374:	f383 8811 	msr	BASEPRI, r3
 8004378:	f3bf 8f6f 	isb	sy
 800437c:	f3bf 8f4f 	dsb	sy
 8004380:	60fb      	str	r3, [r7, #12]
 8004382:	e7fe      	b.n	8004382 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004384:	4b07      	ldr	r3, [pc, #28]	; (80043a4 <vTaskPlaceOnEventList+0x44>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	3318      	adds	r3, #24
 800438a:	4619      	mov	r1, r3
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f7fe feb3 	bl	80030f8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004392:	2101      	movs	r1, #1
 8004394:	6838      	ldr	r0, [r7, #0]
 8004396:	f000 fa75 	bl	8004884 <prvAddCurrentTaskToDelayedList>
}
 800439a:	bf00      	nop
 800439c:	3710      	adds	r7, #16
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	200006f0 	.word	0x200006f0

080043a8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b086      	sub	sp, #24
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d109      	bne.n	80043ce <vTaskPlaceOnEventListRestricted+0x26>
 80043ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043be:	f383 8811 	msr	BASEPRI, r3
 80043c2:	f3bf 8f6f 	isb	sy
 80043c6:	f3bf 8f4f 	dsb	sy
 80043ca:	617b      	str	r3, [r7, #20]
 80043cc:	e7fe      	b.n	80043cc <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80043ce:	4b0a      	ldr	r3, [pc, #40]	; (80043f8 <vTaskPlaceOnEventListRestricted+0x50>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	3318      	adds	r3, #24
 80043d4:	4619      	mov	r1, r3
 80043d6:	68f8      	ldr	r0, [r7, #12]
 80043d8:	f7fe fe6b 	bl	80030b2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d002      	beq.n	80043e8 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80043e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043e6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80043e8:	6879      	ldr	r1, [r7, #4]
 80043ea:	68b8      	ldr	r0, [r7, #8]
 80043ec:	f000 fa4a 	bl	8004884 <prvAddCurrentTaskToDelayedList>
	}
 80043f0:	bf00      	nop
 80043f2:	3718      	adds	r7, #24
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	200006f0 	.word	0x200006f0

080043fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b086      	sub	sp, #24
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d109      	bne.n	8004426 <xTaskRemoveFromEventList+0x2a>
 8004412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004416:	f383 8811 	msr	BASEPRI, r3
 800441a:	f3bf 8f6f 	isb	sy
 800441e:	f3bf 8f4f 	dsb	sy
 8004422:	60fb      	str	r3, [r7, #12]
 8004424:	e7fe      	b.n	8004424 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	3318      	adds	r3, #24
 800442a:	4618      	mov	r0, r3
 800442c:	f7fe fe9c 	bl	8003168 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004430:	4b1d      	ldr	r3, [pc, #116]	; (80044a8 <xTaskRemoveFromEventList+0xac>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d11d      	bne.n	8004474 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	3304      	adds	r3, #4
 800443c:	4618      	mov	r0, r3
 800443e:	f7fe fe93 	bl	8003168 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004446:	4b19      	ldr	r3, [pc, #100]	; (80044ac <xTaskRemoveFromEventList+0xb0>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	429a      	cmp	r2, r3
 800444c:	d903      	bls.n	8004456 <xTaskRemoveFromEventList+0x5a>
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004452:	4a16      	ldr	r2, [pc, #88]	; (80044ac <xTaskRemoveFromEventList+0xb0>)
 8004454:	6013      	str	r3, [r2, #0]
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800445a:	4613      	mov	r3, r2
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	4413      	add	r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	4a13      	ldr	r2, [pc, #76]	; (80044b0 <xTaskRemoveFromEventList+0xb4>)
 8004464:	441a      	add	r2, r3
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	3304      	adds	r3, #4
 800446a:	4619      	mov	r1, r3
 800446c:	4610      	mov	r0, r2
 800446e:	f7fe fe20 	bl	80030b2 <vListInsertEnd>
 8004472:	e005      	b.n	8004480 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	3318      	adds	r3, #24
 8004478:	4619      	mov	r1, r3
 800447a:	480e      	ldr	r0, [pc, #56]	; (80044b4 <xTaskRemoveFromEventList+0xb8>)
 800447c:	f7fe fe19 	bl	80030b2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004484:	4b0c      	ldr	r3, [pc, #48]	; (80044b8 <xTaskRemoveFromEventList+0xbc>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448a:	429a      	cmp	r2, r3
 800448c:	d905      	bls.n	800449a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800448e:	2301      	movs	r3, #1
 8004490:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004492:	4b0a      	ldr	r3, [pc, #40]	; (80044bc <xTaskRemoveFromEventList+0xc0>)
 8004494:	2201      	movs	r2, #1
 8004496:	601a      	str	r2, [r3, #0]
 8004498:	e001      	b.n	800449e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800449a:	2300      	movs	r3, #0
 800449c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800449e:	697b      	ldr	r3, [r7, #20]
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3718      	adds	r7, #24
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	20000bec 	.word	0x20000bec
 80044ac:	20000bcc 	.word	0x20000bcc
 80044b0:	200006f4 	.word	0x200006f4
 80044b4:	20000b84 	.word	0x20000b84
 80044b8:	200006f0 	.word	0x200006f0
 80044bc:	20000bd8 	.word	0x20000bd8

080044c0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80044c8:	4b06      	ldr	r3, [pc, #24]	; (80044e4 <vTaskInternalSetTimeOutState+0x24>)
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80044d0:	4b05      	ldr	r3, [pc, #20]	; (80044e8 <vTaskInternalSetTimeOutState+0x28>)
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	605a      	str	r2, [r3, #4]
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	bc80      	pop	{r7}
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	20000bdc 	.word	0x20000bdc
 80044e8:	20000bc8 	.word	0x20000bc8

080044ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b088      	sub	sp, #32
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d109      	bne.n	8004510 <xTaskCheckForTimeOut+0x24>
 80044fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004500:	f383 8811 	msr	BASEPRI, r3
 8004504:	f3bf 8f6f 	isb	sy
 8004508:	f3bf 8f4f 	dsb	sy
 800450c:	613b      	str	r3, [r7, #16]
 800450e:	e7fe      	b.n	800450e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d109      	bne.n	800452a <xTaskCheckForTimeOut+0x3e>
 8004516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800451a:	f383 8811 	msr	BASEPRI, r3
 800451e:	f3bf 8f6f 	isb	sy
 8004522:	f3bf 8f4f 	dsb	sy
 8004526:	60fb      	str	r3, [r7, #12]
 8004528:	e7fe      	b.n	8004528 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800452a:	f000 fdf5 	bl	8005118 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800452e:	4b1d      	ldr	r3, [pc, #116]	; (80045a4 <xTaskCheckForTimeOut+0xb8>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	69ba      	ldr	r2, [r7, #24]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004546:	d102      	bne.n	800454e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004548:	2300      	movs	r3, #0
 800454a:	61fb      	str	r3, [r7, #28]
 800454c:	e023      	b.n	8004596 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	4b15      	ldr	r3, [pc, #84]	; (80045a8 <xTaskCheckForTimeOut+0xbc>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	429a      	cmp	r2, r3
 8004558:	d007      	beq.n	800456a <xTaskCheckForTimeOut+0x7e>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	69ba      	ldr	r2, [r7, #24]
 8004560:	429a      	cmp	r2, r3
 8004562:	d302      	bcc.n	800456a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004564:	2301      	movs	r3, #1
 8004566:	61fb      	str	r3, [r7, #28]
 8004568:	e015      	b.n	8004596 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	697a      	ldr	r2, [r7, #20]
 8004570:	429a      	cmp	r2, r3
 8004572:	d20b      	bcs.n	800458c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	1ad2      	subs	r2, r2, r3
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f7ff ff9d 	bl	80044c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004586:	2300      	movs	r3, #0
 8004588:	61fb      	str	r3, [r7, #28]
 800458a:	e004      	b.n	8004596 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	2200      	movs	r2, #0
 8004590:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004592:	2301      	movs	r3, #1
 8004594:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004596:	f000 fded 	bl	8005174 <vPortExitCritical>

	return xReturn;
 800459a:	69fb      	ldr	r3, [r7, #28]
}
 800459c:	4618      	mov	r0, r3
 800459e:	3720      	adds	r7, #32
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	20000bc8 	.word	0x20000bc8
 80045a8:	20000bdc 	.word	0x20000bdc

080045ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80045ac:	b480      	push	{r7}
 80045ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80045b0:	4b03      	ldr	r3, [pc, #12]	; (80045c0 <vTaskMissedYield+0x14>)
 80045b2:	2201      	movs	r2, #1
 80045b4:	601a      	str	r2, [r3, #0]
}
 80045b6:	bf00      	nop
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bc80      	pop	{r7}
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	20000bd8 	.word	0x20000bd8

080045c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b082      	sub	sp, #8
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80045cc:	f000 f852 	bl	8004674 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80045d0:	4b06      	ldr	r3, [pc, #24]	; (80045ec <prvIdleTask+0x28>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d9f9      	bls.n	80045cc <prvIdleTask+0x8>
			{
				taskYIELD();
 80045d8:	4b05      	ldr	r3, [pc, #20]	; (80045f0 <prvIdleTask+0x2c>)
 80045da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045de:	601a      	str	r2, [r3, #0]
 80045e0:	f3bf 8f4f 	dsb	sy
 80045e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80045e8:	e7f0      	b.n	80045cc <prvIdleTask+0x8>
 80045ea:	bf00      	nop
 80045ec:	200006f4 	.word	0x200006f4
 80045f0:	e000ed04 	.word	0xe000ed04

080045f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80045fa:	2300      	movs	r3, #0
 80045fc:	607b      	str	r3, [r7, #4]
 80045fe:	e00c      	b.n	800461a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	4613      	mov	r3, r2
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	4413      	add	r3, r2
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	4a12      	ldr	r2, [pc, #72]	; (8004654 <prvInitialiseTaskLists+0x60>)
 800460c:	4413      	add	r3, r2
 800460e:	4618      	mov	r0, r3
 8004610:	f7fe fd24 	bl	800305c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	3301      	adds	r3, #1
 8004618:	607b      	str	r3, [r7, #4]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2b37      	cmp	r3, #55	; 0x37
 800461e:	d9ef      	bls.n	8004600 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004620:	480d      	ldr	r0, [pc, #52]	; (8004658 <prvInitialiseTaskLists+0x64>)
 8004622:	f7fe fd1b 	bl	800305c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004626:	480d      	ldr	r0, [pc, #52]	; (800465c <prvInitialiseTaskLists+0x68>)
 8004628:	f7fe fd18 	bl	800305c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800462c:	480c      	ldr	r0, [pc, #48]	; (8004660 <prvInitialiseTaskLists+0x6c>)
 800462e:	f7fe fd15 	bl	800305c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004632:	480c      	ldr	r0, [pc, #48]	; (8004664 <prvInitialiseTaskLists+0x70>)
 8004634:	f7fe fd12 	bl	800305c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004638:	480b      	ldr	r0, [pc, #44]	; (8004668 <prvInitialiseTaskLists+0x74>)
 800463a:	f7fe fd0f 	bl	800305c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800463e:	4b0b      	ldr	r3, [pc, #44]	; (800466c <prvInitialiseTaskLists+0x78>)
 8004640:	4a05      	ldr	r2, [pc, #20]	; (8004658 <prvInitialiseTaskLists+0x64>)
 8004642:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004644:	4b0a      	ldr	r3, [pc, #40]	; (8004670 <prvInitialiseTaskLists+0x7c>)
 8004646:	4a05      	ldr	r2, [pc, #20]	; (800465c <prvInitialiseTaskLists+0x68>)
 8004648:	601a      	str	r2, [r3, #0]
}
 800464a:	bf00      	nop
 800464c:	3708      	adds	r7, #8
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	200006f4 	.word	0x200006f4
 8004658:	20000b54 	.word	0x20000b54
 800465c:	20000b68 	.word	0x20000b68
 8004660:	20000b84 	.word	0x20000b84
 8004664:	20000b98 	.word	0x20000b98
 8004668:	20000bb0 	.word	0x20000bb0
 800466c:	20000b7c 	.word	0x20000b7c
 8004670:	20000b80 	.word	0x20000b80

08004674 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800467a:	e019      	b.n	80046b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800467c:	f000 fd4c 	bl	8005118 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004680:	4b0f      	ldr	r3, [pc, #60]	; (80046c0 <prvCheckTasksWaitingTermination+0x4c>)
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	3304      	adds	r3, #4
 800468c:	4618      	mov	r0, r3
 800468e:	f7fe fd6b 	bl	8003168 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004692:	4b0c      	ldr	r3, [pc, #48]	; (80046c4 <prvCheckTasksWaitingTermination+0x50>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	3b01      	subs	r3, #1
 8004698:	4a0a      	ldr	r2, [pc, #40]	; (80046c4 <prvCheckTasksWaitingTermination+0x50>)
 800469a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800469c:	4b0a      	ldr	r3, [pc, #40]	; (80046c8 <prvCheckTasksWaitingTermination+0x54>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	3b01      	subs	r3, #1
 80046a2:	4a09      	ldr	r2, [pc, #36]	; (80046c8 <prvCheckTasksWaitingTermination+0x54>)
 80046a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80046a6:	f000 fd65 	bl	8005174 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f000 f80e 	bl	80046cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80046b0:	4b05      	ldr	r3, [pc, #20]	; (80046c8 <prvCheckTasksWaitingTermination+0x54>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d1e1      	bne.n	800467c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80046b8:	bf00      	nop
 80046ba:	3708      	adds	r7, #8
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	20000b98 	.word	0x20000b98
 80046c4:	20000bc4 	.word	0x20000bc4
 80046c8:	20000bac 	.word	0x20000bac

080046cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d108      	bne.n	80046f0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e2:	4618      	mov	r0, r3
 80046e4:	f000 fed0 	bl	8005488 <vPortFree>
				vPortFree( pxTCB );
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f000 fecd 	bl	8005488 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80046ee:	e017      	b.n	8004720 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d103      	bne.n	8004702 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 fec4 	bl	8005488 <vPortFree>
	}
 8004700:	e00e      	b.n	8004720 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004708:	2b02      	cmp	r3, #2
 800470a:	d009      	beq.n	8004720 <prvDeleteTCB+0x54>
 800470c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004710:	f383 8811 	msr	BASEPRI, r3
 8004714:	f3bf 8f6f 	isb	sy
 8004718:	f3bf 8f4f 	dsb	sy
 800471c:	60fb      	str	r3, [r7, #12]
 800471e:	e7fe      	b.n	800471e <prvDeleteTCB+0x52>
	}
 8004720:	bf00      	nop
 8004722:	3710      	adds	r7, #16
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}

08004728 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800472e:	4b0e      	ldr	r3, [pc, #56]	; (8004768 <prvResetNextTaskUnblockTime+0x40>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d101      	bne.n	800473c <prvResetNextTaskUnblockTime+0x14>
 8004738:	2301      	movs	r3, #1
 800473a:	e000      	b.n	800473e <prvResetNextTaskUnblockTime+0x16>
 800473c:	2300      	movs	r3, #0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d004      	beq.n	800474c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004742:	4b0a      	ldr	r3, [pc, #40]	; (800476c <prvResetNextTaskUnblockTime+0x44>)
 8004744:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004748:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800474a:	e008      	b.n	800475e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800474c:	4b06      	ldr	r3, [pc, #24]	; (8004768 <prvResetNextTaskUnblockTime+0x40>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	4a04      	ldr	r2, [pc, #16]	; (800476c <prvResetNextTaskUnblockTime+0x44>)
 800475c:	6013      	str	r3, [r2, #0]
}
 800475e:	bf00      	nop
 8004760:	370c      	adds	r7, #12
 8004762:	46bd      	mov	sp, r7
 8004764:	bc80      	pop	{r7}
 8004766:	4770      	bx	lr
 8004768:	20000b7c 	.word	0x20000b7c
 800476c:	20000be4 	.word	0x20000be4

08004770 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004770:	b480      	push	{r7}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004776:	4b0b      	ldr	r3, [pc, #44]	; (80047a4 <xTaskGetSchedulerState+0x34>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d102      	bne.n	8004784 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800477e:	2301      	movs	r3, #1
 8004780:	607b      	str	r3, [r7, #4]
 8004782:	e008      	b.n	8004796 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004784:	4b08      	ldr	r3, [pc, #32]	; (80047a8 <xTaskGetSchedulerState+0x38>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d102      	bne.n	8004792 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800478c:	2302      	movs	r3, #2
 800478e:	607b      	str	r3, [r7, #4]
 8004790:	e001      	b.n	8004796 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004792:	2300      	movs	r3, #0
 8004794:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004796:	687b      	ldr	r3, [r7, #4]
	}
 8004798:	4618      	mov	r0, r3
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	bc80      	pop	{r7}
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	20000bd0 	.word	0x20000bd0
 80047a8:	20000bec 	.word	0x20000bec

080047ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b086      	sub	sp, #24
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80047b8:	2300      	movs	r3, #0
 80047ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d054      	beq.n	800486c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80047c2:	4b2d      	ldr	r3, [pc, #180]	; (8004878 <xTaskPriorityDisinherit+0xcc>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	693a      	ldr	r2, [r7, #16]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d009      	beq.n	80047e0 <xTaskPriorityDisinherit+0x34>
 80047cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d0:	f383 8811 	msr	BASEPRI, r3
 80047d4:	f3bf 8f6f 	isb	sy
 80047d8:	f3bf 8f4f 	dsb	sy
 80047dc:	60fb      	str	r3, [r7, #12]
 80047de:	e7fe      	b.n	80047de <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d109      	bne.n	80047fc <xTaskPriorityDisinherit+0x50>
 80047e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ec:	f383 8811 	msr	BASEPRI, r3
 80047f0:	f3bf 8f6f 	isb	sy
 80047f4:	f3bf 8f4f 	dsb	sy
 80047f8:	60bb      	str	r3, [r7, #8]
 80047fa:	e7fe      	b.n	80047fa <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004800:	1e5a      	subs	r2, r3, #1
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800480e:	429a      	cmp	r2, r3
 8004810:	d02c      	beq.n	800486c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004816:	2b00      	cmp	r3, #0
 8004818:	d128      	bne.n	800486c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	3304      	adds	r3, #4
 800481e:	4618      	mov	r0, r3
 8004820:	f7fe fca2 	bl	8003168 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004830:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800483c:	4b0f      	ldr	r3, [pc, #60]	; (800487c <xTaskPriorityDisinherit+0xd0>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	429a      	cmp	r2, r3
 8004842:	d903      	bls.n	800484c <xTaskPriorityDisinherit+0xa0>
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004848:	4a0c      	ldr	r2, [pc, #48]	; (800487c <xTaskPriorityDisinherit+0xd0>)
 800484a:	6013      	str	r3, [r2, #0]
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004850:	4613      	mov	r3, r2
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	4413      	add	r3, r2
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	4a09      	ldr	r2, [pc, #36]	; (8004880 <xTaskPriorityDisinherit+0xd4>)
 800485a:	441a      	add	r2, r3
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	3304      	adds	r3, #4
 8004860:	4619      	mov	r1, r3
 8004862:	4610      	mov	r0, r2
 8004864:	f7fe fc25 	bl	80030b2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004868:	2301      	movs	r3, #1
 800486a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800486c:	697b      	ldr	r3, [r7, #20]
	}
 800486e:	4618      	mov	r0, r3
 8004870:	3718      	adds	r7, #24
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	200006f0 	.word	0x200006f0
 800487c:	20000bcc 	.word	0x20000bcc
 8004880:	200006f4 	.word	0x200006f4

08004884 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800488e:	4b21      	ldr	r3, [pc, #132]	; (8004914 <prvAddCurrentTaskToDelayedList+0x90>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004894:	4b20      	ldr	r3, [pc, #128]	; (8004918 <prvAddCurrentTaskToDelayedList+0x94>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	3304      	adds	r3, #4
 800489a:	4618      	mov	r0, r3
 800489c:	f7fe fc64 	bl	8003168 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048a6:	d10a      	bne.n	80048be <prvAddCurrentTaskToDelayedList+0x3a>
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d007      	beq.n	80048be <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048ae:	4b1a      	ldr	r3, [pc, #104]	; (8004918 <prvAddCurrentTaskToDelayedList+0x94>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	3304      	adds	r3, #4
 80048b4:	4619      	mov	r1, r3
 80048b6:	4819      	ldr	r0, [pc, #100]	; (800491c <prvAddCurrentTaskToDelayedList+0x98>)
 80048b8:	f7fe fbfb 	bl	80030b2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80048bc:	e026      	b.n	800490c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4413      	add	r3, r2
 80048c4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80048c6:	4b14      	ldr	r3, [pc, #80]	; (8004918 <prvAddCurrentTaskToDelayedList+0x94>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	68ba      	ldr	r2, [r7, #8]
 80048cc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80048ce:	68ba      	ldr	r2, [r7, #8]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d209      	bcs.n	80048ea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048d6:	4b12      	ldr	r3, [pc, #72]	; (8004920 <prvAddCurrentTaskToDelayedList+0x9c>)
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	4b0f      	ldr	r3, [pc, #60]	; (8004918 <prvAddCurrentTaskToDelayedList+0x94>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	3304      	adds	r3, #4
 80048e0:	4619      	mov	r1, r3
 80048e2:	4610      	mov	r0, r2
 80048e4:	f7fe fc08 	bl	80030f8 <vListInsert>
}
 80048e8:	e010      	b.n	800490c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048ea:	4b0e      	ldr	r3, [pc, #56]	; (8004924 <prvAddCurrentTaskToDelayedList+0xa0>)
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	4b0a      	ldr	r3, [pc, #40]	; (8004918 <prvAddCurrentTaskToDelayedList+0x94>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	3304      	adds	r3, #4
 80048f4:	4619      	mov	r1, r3
 80048f6:	4610      	mov	r0, r2
 80048f8:	f7fe fbfe 	bl	80030f8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80048fc:	4b0a      	ldr	r3, [pc, #40]	; (8004928 <prvAddCurrentTaskToDelayedList+0xa4>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	68ba      	ldr	r2, [r7, #8]
 8004902:	429a      	cmp	r2, r3
 8004904:	d202      	bcs.n	800490c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004906:	4a08      	ldr	r2, [pc, #32]	; (8004928 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	6013      	str	r3, [r2, #0]
}
 800490c:	bf00      	nop
 800490e:	3710      	adds	r7, #16
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}
 8004914:	20000bc8 	.word	0x20000bc8
 8004918:	200006f0 	.word	0x200006f0
 800491c:	20000bb0 	.word	0x20000bb0
 8004920:	20000b80 	.word	0x20000b80
 8004924:	20000b7c 	.word	0x20000b7c
 8004928:	20000be4 	.word	0x20000be4

0800492c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b08a      	sub	sp, #40	; 0x28
 8004930:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004932:	2300      	movs	r3, #0
 8004934:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004936:	f000 fac3 	bl	8004ec0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800493a:	4b1c      	ldr	r3, [pc, #112]	; (80049ac <xTimerCreateTimerTask+0x80>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d021      	beq.n	8004986 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004942:	2300      	movs	r3, #0
 8004944:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004946:	2300      	movs	r3, #0
 8004948:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800494a:	1d3a      	adds	r2, r7, #4
 800494c:	f107 0108 	add.w	r1, r7, #8
 8004950:	f107 030c 	add.w	r3, r7, #12
 8004954:	4618      	mov	r0, r3
 8004956:	f7fe fb67 	bl	8003028 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800495a:	6879      	ldr	r1, [r7, #4]
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	68fa      	ldr	r2, [r7, #12]
 8004960:	9202      	str	r2, [sp, #8]
 8004962:	9301      	str	r3, [sp, #4]
 8004964:	2302      	movs	r3, #2
 8004966:	9300      	str	r3, [sp, #0]
 8004968:	2300      	movs	r3, #0
 800496a:	460a      	mov	r2, r1
 800496c:	4910      	ldr	r1, [pc, #64]	; (80049b0 <xTimerCreateTimerTask+0x84>)
 800496e:	4811      	ldr	r0, [pc, #68]	; (80049b4 <xTimerCreateTimerTask+0x88>)
 8004970:	f7ff f8f8 	bl	8003b64 <xTaskCreateStatic>
 8004974:	4602      	mov	r2, r0
 8004976:	4b10      	ldr	r3, [pc, #64]	; (80049b8 <xTimerCreateTimerTask+0x8c>)
 8004978:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800497a:	4b0f      	ldr	r3, [pc, #60]	; (80049b8 <xTimerCreateTimerTask+0x8c>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d001      	beq.n	8004986 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004982:	2301      	movs	r3, #1
 8004984:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d109      	bne.n	80049a0 <xTimerCreateTimerTask+0x74>
 800498c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004990:	f383 8811 	msr	BASEPRI, r3
 8004994:	f3bf 8f6f 	isb	sy
 8004998:	f3bf 8f4f 	dsb	sy
 800499c:	613b      	str	r3, [r7, #16]
 800499e:	e7fe      	b.n	800499e <xTimerCreateTimerTask+0x72>
	return xReturn;
 80049a0:	697b      	ldr	r3, [r7, #20]
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3718      	adds	r7, #24
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	20000c20 	.word	0x20000c20
 80049b0:	0800576c 	.word	0x0800576c
 80049b4:	08004ad5 	.word	0x08004ad5
 80049b8:	20000c24 	.word	0x20000c24

080049bc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b08a      	sub	sp, #40	; 0x28
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	607a      	str	r2, [r7, #4]
 80049c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80049ca:	2300      	movs	r3, #0
 80049cc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d109      	bne.n	80049e8 <xTimerGenericCommand+0x2c>
 80049d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d8:	f383 8811 	msr	BASEPRI, r3
 80049dc:	f3bf 8f6f 	isb	sy
 80049e0:	f3bf 8f4f 	dsb	sy
 80049e4:	623b      	str	r3, [r7, #32]
 80049e6:	e7fe      	b.n	80049e6 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80049e8:	4b19      	ldr	r3, [pc, #100]	; (8004a50 <xTimerGenericCommand+0x94>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d02a      	beq.n	8004a46 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	2b05      	cmp	r3, #5
 8004a00:	dc18      	bgt.n	8004a34 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004a02:	f7ff feb5 	bl	8004770 <xTaskGetSchedulerState>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d109      	bne.n	8004a20 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004a0c:	4b10      	ldr	r3, [pc, #64]	; (8004a50 <xTimerGenericCommand+0x94>)
 8004a0e:	6818      	ldr	r0, [r3, #0]
 8004a10:	f107 0110 	add.w	r1, r7, #16
 8004a14:	2300      	movs	r3, #0
 8004a16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a18:	f7fe fcce 	bl	80033b8 <xQueueGenericSend>
 8004a1c:	6278      	str	r0, [r7, #36]	; 0x24
 8004a1e:	e012      	b.n	8004a46 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004a20:	4b0b      	ldr	r3, [pc, #44]	; (8004a50 <xTimerGenericCommand+0x94>)
 8004a22:	6818      	ldr	r0, [r3, #0]
 8004a24:	f107 0110 	add.w	r1, r7, #16
 8004a28:	2300      	movs	r3, #0
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f7fe fcc4 	bl	80033b8 <xQueueGenericSend>
 8004a30:	6278      	str	r0, [r7, #36]	; 0x24
 8004a32:	e008      	b.n	8004a46 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004a34:	4b06      	ldr	r3, [pc, #24]	; (8004a50 <xTimerGenericCommand+0x94>)
 8004a36:	6818      	ldr	r0, [r3, #0]
 8004a38:	f107 0110 	add.w	r1, r7, #16
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	683a      	ldr	r2, [r7, #0]
 8004a40:	f7fe fdb4 	bl	80035ac <xQueueGenericSendFromISR>
 8004a44:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3728      	adds	r7, #40	; 0x28
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	20000c20 	.word	0x20000c20

08004a54 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b088      	sub	sp, #32
 8004a58:	af02      	add	r7, sp, #8
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a5e:	4b1c      	ldr	r3, [pc, #112]	; (8004ad0 <prvProcessExpiredTimer+0x7c>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	3304      	adds	r3, #4
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f7fe fb7b 	bl	8003168 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	69db      	ldr	r3, [r3, #28]
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d121      	bne.n	8004abe <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	699a      	ldr	r2, [r3, #24]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	18d1      	adds	r1, r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	683a      	ldr	r2, [r7, #0]
 8004a86:	6978      	ldr	r0, [r7, #20]
 8004a88:	f000 f8c8 	bl	8004c1c <prvInsertTimerInActiveList>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d015      	beq.n	8004abe <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004a92:	2300      	movs	r3, #0
 8004a94:	9300      	str	r3, [sp, #0]
 8004a96:	2300      	movs	r3, #0
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	2100      	movs	r1, #0
 8004a9c:	6978      	ldr	r0, [r7, #20]
 8004a9e:	f7ff ff8d 	bl	80049bc <xTimerGenericCommand>
 8004aa2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d109      	bne.n	8004abe <prvProcessExpiredTimer+0x6a>
 8004aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aae:	f383 8811 	msr	BASEPRI, r3
 8004ab2:	f3bf 8f6f 	isb	sy
 8004ab6:	f3bf 8f4f 	dsb	sy
 8004aba:	60fb      	str	r3, [r7, #12]
 8004abc:	e7fe      	b.n	8004abc <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac2:	6978      	ldr	r0, [r7, #20]
 8004ac4:	4798      	blx	r3
}
 8004ac6:	bf00      	nop
 8004ac8:	3718      	adds	r7, #24
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	20000c18 	.word	0x20000c18

08004ad4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004adc:	f107 0308 	add.w	r3, r7, #8
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f000 f857 	bl	8004b94 <prvGetNextExpireTime>
 8004ae6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	4619      	mov	r1, r3
 8004aec:	68f8      	ldr	r0, [r7, #12]
 8004aee:	f000 f803 	bl	8004af8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004af2:	f000 f8d5 	bl	8004ca0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004af6:	e7f1      	b.n	8004adc <prvTimerTask+0x8>

08004af8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b084      	sub	sp, #16
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004b02:	f7ff fa5b 	bl	8003fbc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004b06:	f107 0308 	add.w	r3, r7, #8
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f000 f866 	bl	8004bdc <prvSampleTimeNow>
 8004b10:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d130      	bne.n	8004b7a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d10a      	bne.n	8004b34 <prvProcessTimerOrBlockTask+0x3c>
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d806      	bhi.n	8004b34 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004b26:	f7ff fa57 	bl	8003fd8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004b2a:	68f9      	ldr	r1, [r7, #12]
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f7ff ff91 	bl	8004a54 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004b32:	e024      	b.n	8004b7e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d008      	beq.n	8004b4c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004b3a:	4b13      	ldr	r3, [pc, #76]	; (8004b88 <prvProcessTimerOrBlockTask+0x90>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	bf0c      	ite	eq
 8004b44:	2301      	moveq	r3, #1
 8004b46:	2300      	movne	r3, #0
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004b4c:	4b0f      	ldr	r3, [pc, #60]	; (8004b8c <prvProcessTimerOrBlockTask+0x94>)
 8004b4e:	6818      	ldr	r0, [r3, #0]
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	683a      	ldr	r2, [r7, #0]
 8004b58:	4619      	mov	r1, r3
 8004b5a:	f7fe ffcf 	bl	8003afc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004b5e:	f7ff fa3b 	bl	8003fd8 <xTaskResumeAll>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d10a      	bne.n	8004b7e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004b68:	4b09      	ldr	r3, [pc, #36]	; (8004b90 <prvProcessTimerOrBlockTask+0x98>)
 8004b6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b6e:	601a      	str	r2, [r3, #0]
 8004b70:	f3bf 8f4f 	dsb	sy
 8004b74:	f3bf 8f6f 	isb	sy
}
 8004b78:	e001      	b.n	8004b7e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004b7a:	f7ff fa2d 	bl	8003fd8 <xTaskResumeAll>
}
 8004b7e:	bf00      	nop
 8004b80:	3710      	adds	r7, #16
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	20000c1c 	.word	0x20000c1c
 8004b8c:	20000c20 	.word	0x20000c20
 8004b90:	e000ed04 	.word	0xe000ed04

08004b94 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004b94:	b480      	push	{r7}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004b9c:	4b0e      	ldr	r3, [pc, #56]	; (8004bd8 <prvGetNextExpireTime+0x44>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	bf0c      	ite	eq
 8004ba6:	2301      	moveq	r3, #1
 8004ba8:	2300      	movne	r3, #0
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	461a      	mov	r2, r3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d105      	bne.n	8004bc6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004bba:	4b07      	ldr	r3, [pc, #28]	; (8004bd8 <prvGetNextExpireTime+0x44>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	60fb      	str	r3, [r7, #12]
 8004bc4:	e001      	b.n	8004bca <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004bca:	68fb      	ldr	r3, [r7, #12]
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3714      	adds	r7, #20
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bc80      	pop	{r7}
 8004bd4:	4770      	bx	lr
 8004bd6:	bf00      	nop
 8004bd8:	20000c18 	.word	0x20000c18

08004bdc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004be4:	f7ff fa94 	bl	8004110 <xTaskGetTickCount>
 8004be8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004bea:	4b0b      	ldr	r3, [pc, #44]	; (8004c18 <prvSampleTimeNow+0x3c>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d205      	bcs.n	8004c00 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004bf4:	f000 f904 	bl	8004e00 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	601a      	str	r2, [r3, #0]
 8004bfe:	e002      	b.n	8004c06 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004c06:	4a04      	ldr	r2, [pc, #16]	; (8004c18 <prvSampleTimeNow+0x3c>)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3710      	adds	r7, #16
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	20000c28 	.word	0x20000c28

08004c1c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b086      	sub	sp, #24
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	607a      	str	r2, [r7, #4]
 8004c28:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	68ba      	ldr	r2, [r7, #8]
 8004c32:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004c3a:	68ba      	ldr	r2, [r7, #8]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d812      	bhi.n	8004c68 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	1ad2      	subs	r2, r2, r3
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	699b      	ldr	r3, [r3, #24]
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d302      	bcc.n	8004c56 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004c50:	2301      	movs	r3, #1
 8004c52:	617b      	str	r3, [r7, #20]
 8004c54:	e01b      	b.n	8004c8e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004c56:	4b10      	ldr	r3, [pc, #64]	; (8004c98 <prvInsertTimerInActiveList+0x7c>)
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	3304      	adds	r3, #4
 8004c5e:	4619      	mov	r1, r3
 8004c60:	4610      	mov	r0, r2
 8004c62:	f7fe fa49 	bl	80030f8 <vListInsert>
 8004c66:	e012      	b.n	8004c8e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d206      	bcs.n	8004c7e <prvInsertTimerInActiveList+0x62>
 8004c70:	68ba      	ldr	r2, [r7, #8]
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d302      	bcc.n	8004c7e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	617b      	str	r3, [r7, #20]
 8004c7c:	e007      	b.n	8004c8e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004c7e:	4b07      	ldr	r3, [pc, #28]	; (8004c9c <prvInsertTimerInActiveList+0x80>)
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	3304      	adds	r3, #4
 8004c86:	4619      	mov	r1, r3
 8004c88:	4610      	mov	r0, r2
 8004c8a:	f7fe fa35 	bl	80030f8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004c8e:	697b      	ldr	r3, [r7, #20]
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3718      	adds	r7, #24
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	20000c1c 	.word	0x20000c1c
 8004c9c:	20000c18 	.word	0x20000c18

08004ca0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b08e      	sub	sp, #56	; 0x38
 8004ca4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004ca6:	e099      	b.n	8004ddc <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	da17      	bge.n	8004cde <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004cae:	1d3b      	adds	r3, r7, #4
 8004cb0:	3304      	adds	r3, #4
 8004cb2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d109      	bne.n	8004cce <prvProcessReceivedCommands+0x2e>
 8004cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cbe:	f383 8811 	msr	BASEPRI, r3
 8004cc2:	f3bf 8f6f 	isb	sy
 8004cc6:	f3bf 8f4f 	dsb	sy
 8004cca:	61fb      	str	r3, [r7, #28]
 8004ccc:	e7fe      	b.n	8004ccc <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cd4:	6850      	ldr	r0, [r2, #4]
 8004cd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cd8:	6892      	ldr	r2, [r2, #8]
 8004cda:	4611      	mov	r1, r2
 8004cdc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	db7a      	blt.n	8004dda <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cea:	695b      	ldr	r3, [r3, #20]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d004      	beq.n	8004cfa <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf2:	3304      	adds	r3, #4
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f7fe fa37 	bl	8003168 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004cfa:	463b      	mov	r3, r7
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f7ff ff6d 	bl	8004bdc <prvSampleTimeNow>
 8004d02:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2b09      	cmp	r3, #9
 8004d08:	d868      	bhi.n	8004ddc <prvProcessReceivedCommands+0x13c>
 8004d0a:	a201      	add	r2, pc, #4	; (adr r2, 8004d10 <prvProcessReceivedCommands+0x70>)
 8004d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d10:	08004d39 	.word	0x08004d39
 8004d14:	08004d39 	.word	0x08004d39
 8004d18:	08004d39 	.word	0x08004d39
 8004d1c:	08004ddd 	.word	0x08004ddd
 8004d20:	08004d93 	.word	0x08004d93
 8004d24:	08004dc9 	.word	0x08004dc9
 8004d28:	08004d39 	.word	0x08004d39
 8004d2c:	08004d39 	.word	0x08004d39
 8004d30:	08004ddd 	.word	0x08004ddd
 8004d34:	08004d93 	.word	0x08004d93
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004d38:	68ba      	ldr	r2, [r7, #8]
 8004d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d3c:	699b      	ldr	r3, [r3, #24]
 8004d3e:	18d1      	adds	r1, r2, r3
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d46:	f7ff ff69 	bl	8004c1c <prvInsertTimerInActiveList>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d045      	beq.n	8004ddc <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d56:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d5a:	69db      	ldr	r3, [r3, #28]
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d13d      	bne.n	8004ddc <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004d60:	68ba      	ldr	r2, [r7, #8]
 8004d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d64:	699b      	ldr	r3, [r3, #24]
 8004d66:	441a      	add	r2, r3
 8004d68:	2300      	movs	r3, #0
 8004d6a:	9300      	str	r3, [sp, #0]
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	2100      	movs	r1, #0
 8004d70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d72:	f7ff fe23 	bl	80049bc <xTimerGenericCommand>
 8004d76:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004d78:	6a3b      	ldr	r3, [r7, #32]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d12e      	bne.n	8004ddc <prvProcessReceivedCommands+0x13c>
 8004d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d82:	f383 8811 	msr	BASEPRI, r3
 8004d86:	f3bf 8f6f 	isb	sy
 8004d8a:	f3bf 8f4f 	dsb	sy
 8004d8e:	61bb      	str	r3, [r7, #24]
 8004d90:	e7fe      	b.n	8004d90 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004d92:	68ba      	ldr	r2, [r7, #8]
 8004d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d96:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d9a:	699b      	ldr	r3, [r3, #24]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d109      	bne.n	8004db4 <prvProcessReceivedCommands+0x114>
 8004da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da4:	f383 8811 	msr	BASEPRI, r3
 8004da8:	f3bf 8f6f 	isb	sy
 8004dac:	f3bf 8f4f 	dsb	sy
 8004db0:	617b      	str	r3, [r7, #20]
 8004db2:	e7fe      	b.n	8004db2 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db6:	699a      	ldr	r2, [r3, #24]
 8004db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dba:	18d1      	adds	r1, r2, r3
 8004dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dc2:	f7ff ff2b 	bl	8004c1c <prvInsertTimerInActiveList>
					break;
 8004dc6:	e009      	b.n	8004ddc <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d104      	bne.n	8004ddc <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8004dd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dd4:	f000 fb58 	bl	8005488 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004dd8:	e000      	b.n	8004ddc <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004dda:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004ddc:	4b07      	ldr	r3, [pc, #28]	; (8004dfc <prvProcessReceivedCommands+0x15c>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	1d39      	adds	r1, r7, #4
 8004de2:	2200      	movs	r2, #0
 8004de4:	4618      	mov	r0, r3
 8004de6:	f7fe fc75 	bl	80036d4 <xQueueReceive>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	f47f af5b 	bne.w	8004ca8 <prvProcessReceivedCommands+0x8>
	}
}
 8004df2:	bf00      	nop
 8004df4:	3730      	adds	r7, #48	; 0x30
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	20000c20 	.word	0x20000c20

08004e00 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b088      	sub	sp, #32
 8004e04:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e06:	e044      	b.n	8004e92 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e08:	4b2b      	ldr	r3, [pc, #172]	; (8004eb8 <prvSwitchTimerLists+0xb8>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e12:	4b29      	ldr	r3, [pc, #164]	; (8004eb8 <prvSwitchTimerLists+0xb8>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	3304      	adds	r3, #4
 8004e20:	4618      	mov	r0, r3
 8004e22:	f7fe f9a1 	bl	8003168 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2a:	68f8      	ldr	r0, [r7, #12]
 8004e2c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	69db      	ldr	r3, [r3, #28]
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d12d      	bne.n	8004e92 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	699b      	ldr	r3, [r3, #24]
 8004e3a:	693a      	ldr	r2, [r7, #16]
 8004e3c:	4413      	add	r3, r2
 8004e3e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004e40:	68ba      	ldr	r2, [r7, #8]
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d90e      	bls.n	8004e66 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	68ba      	ldr	r2, [r7, #8]
 8004e4c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	68fa      	ldr	r2, [r7, #12]
 8004e52:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004e54:	4b18      	ldr	r3, [pc, #96]	; (8004eb8 <prvSwitchTimerLists+0xb8>)
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	3304      	adds	r3, #4
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	4610      	mov	r0, r2
 8004e60:	f7fe f94a 	bl	80030f8 <vListInsert>
 8004e64:	e015      	b.n	8004e92 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004e66:	2300      	movs	r3, #0
 8004e68:	9300      	str	r3, [sp, #0]
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	693a      	ldr	r2, [r7, #16]
 8004e6e:	2100      	movs	r1, #0
 8004e70:	68f8      	ldr	r0, [r7, #12]
 8004e72:	f7ff fda3 	bl	80049bc <xTimerGenericCommand>
 8004e76:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d109      	bne.n	8004e92 <prvSwitchTimerLists+0x92>
 8004e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e82:	f383 8811 	msr	BASEPRI, r3
 8004e86:	f3bf 8f6f 	isb	sy
 8004e8a:	f3bf 8f4f 	dsb	sy
 8004e8e:	603b      	str	r3, [r7, #0]
 8004e90:	e7fe      	b.n	8004e90 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e92:	4b09      	ldr	r3, [pc, #36]	; (8004eb8 <prvSwitchTimerLists+0xb8>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d1b5      	bne.n	8004e08 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004e9c:	4b06      	ldr	r3, [pc, #24]	; (8004eb8 <prvSwitchTimerLists+0xb8>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004ea2:	4b06      	ldr	r3, [pc, #24]	; (8004ebc <prvSwitchTimerLists+0xbc>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a04      	ldr	r2, [pc, #16]	; (8004eb8 <prvSwitchTimerLists+0xb8>)
 8004ea8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004eaa:	4a04      	ldr	r2, [pc, #16]	; (8004ebc <prvSwitchTimerLists+0xbc>)
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	6013      	str	r3, [r2, #0]
}
 8004eb0:	bf00      	nop
 8004eb2:	3718      	adds	r7, #24
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	20000c18 	.word	0x20000c18
 8004ebc:	20000c1c 	.word	0x20000c1c

08004ec0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b082      	sub	sp, #8
 8004ec4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004ec6:	f000 f927 	bl	8005118 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004eca:	4b15      	ldr	r3, [pc, #84]	; (8004f20 <prvCheckForValidListAndQueue+0x60>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d120      	bne.n	8004f14 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004ed2:	4814      	ldr	r0, [pc, #80]	; (8004f24 <prvCheckForValidListAndQueue+0x64>)
 8004ed4:	f7fe f8c2 	bl	800305c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004ed8:	4813      	ldr	r0, [pc, #76]	; (8004f28 <prvCheckForValidListAndQueue+0x68>)
 8004eda:	f7fe f8bf 	bl	800305c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004ede:	4b13      	ldr	r3, [pc, #76]	; (8004f2c <prvCheckForValidListAndQueue+0x6c>)
 8004ee0:	4a10      	ldr	r2, [pc, #64]	; (8004f24 <prvCheckForValidListAndQueue+0x64>)
 8004ee2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004ee4:	4b12      	ldr	r3, [pc, #72]	; (8004f30 <prvCheckForValidListAndQueue+0x70>)
 8004ee6:	4a10      	ldr	r2, [pc, #64]	; (8004f28 <prvCheckForValidListAndQueue+0x68>)
 8004ee8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004eea:	2300      	movs	r3, #0
 8004eec:	9300      	str	r3, [sp, #0]
 8004eee:	4b11      	ldr	r3, [pc, #68]	; (8004f34 <prvCheckForValidListAndQueue+0x74>)
 8004ef0:	4a11      	ldr	r2, [pc, #68]	; (8004f38 <prvCheckForValidListAndQueue+0x78>)
 8004ef2:	2110      	movs	r1, #16
 8004ef4:	200a      	movs	r0, #10
 8004ef6:	f7fe f9c9 	bl	800328c <xQueueGenericCreateStatic>
 8004efa:	4602      	mov	r2, r0
 8004efc:	4b08      	ldr	r3, [pc, #32]	; (8004f20 <prvCheckForValidListAndQueue+0x60>)
 8004efe:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004f00:	4b07      	ldr	r3, [pc, #28]	; (8004f20 <prvCheckForValidListAndQueue+0x60>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d005      	beq.n	8004f14 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004f08:	4b05      	ldr	r3, [pc, #20]	; (8004f20 <prvCheckForValidListAndQueue+0x60>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	490b      	ldr	r1, [pc, #44]	; (8004f3c <prvCheckForValidListAndQueue+0x7c>)
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f7fe fdcc 	bl	8003aac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004f14:	f000 f92e 	bl	8005174 <vPortExitCritical>
}
 8004f18:	bf00      	nop
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	20000c20 	.word	0x20000c20
 8004f24:	20000bf0 	.word	0x20000bf0
 8004f28:	20000c04 	.word	0x20000c04
 8004f2c:	20000c18 	.word	0x20000c18
 8004f30:	20000c1c 	.word	0x20000c1c
 8004f34:	20000ccc 	.word	0x20000ccc
 8004f38:	20000c2c 	.word	0x20000c2c
 8004f3c:	08005774 	.word	0x08005774

08004f40 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004f40:	b480      	push	{r7}
 8004f42:	b085      	sub	sp, #20
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	3b04      	subs	r3, #4
 8004f50:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004f58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	3b04      	subs	r3, #4
 8004f5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	f023 0201 	bic.w	r2, r3, #1
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	3b04      	subs	r3, #4
 8004f6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004f70:	4a08      	ldr	r2, [pc, #32]	; (8004f94 <pxPortInitialiseStack+0x54>)
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	3b14      	subs	r3, #20
 8004f7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	3b20      	subs	r3, #32
 8004f86:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004f88:	68fb      	ldr	r3, [r7, #12]
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3714      	adds	r7, #20
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bc80      	pop	{r7}
 8004f92:	4770      	bx	lr
 8004f94:	08004f99 	.word	0x08004f99

08004f98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b085      	sub	sp, #20
 8004f9c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004fa2:	4b10      	ldr	r3, [pc, #64]	; (8004fe4 <prvTaskExitError+0x4c>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004faa:	d009      	beq.n	8004fc0 <prvTaskExitError+0x28>
 8004fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb0:	f383 8811 	msr	BASEPRI, r3
 8004fb4:	f3bf 8f6f 	isb	sy
 8004fb8:	f3bf 8f4f 	dsb	sy
 8004fbc:	60fb      	str	r3, [r7, #12]
 8004fbe:	e7fe      	b.n	8004fbe <prvTaskExitError+0x26>
 8004fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc4:	f383 8811 	msr	BASEPRI, r3
 8004fc8:	f3bf 8f6f 	isb	sy
 8004fcc:	f3bf 8f4f 	dsb	sy
 8004fd0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004fd2:	bf00      	nop
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d0fc      	beq.n	8004fd4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004fda:	bf00      	nop
 8004fdc:	3714      	adds	r7, #20
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bc80      	pop	{r7}
 8004fe2:	4770      	bx	lr
 8004fe4:	2000000c 	.word	0x2000000c
	...

08004ff0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004ff0:	4b07      	ldr	r3, [pc, #28]	; (8005010 <pxCurrentTCBConst2>)
 8004ff2:	6819      	ldr	r1, [r3, #0]
 8004ff4:	6808      	ldr	r0, [r1, #0]
 8004ff6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004ffa:	f380 8809 	msr	PSP, r0
 8004ffe:	f3bf 8f6f 	isb	sy
 8005002:	f04f 0000 	mov.w	r0, #0
 8005006:	f380 8811 	msr	BASEPRI, r0
 800500a:	f04e 0e0d 	orr.w	lr, lr, #13
 800500e:	4770      	bx	lr

08005010 <pxCurrentTCBConst2>:
 8005010:	200006f0 	.word	0x200006f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005014:	bf00      	nop
 8005016:	bf00      	nop

08005018 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005018:	4806      	ldr	r0, [pc, #24]	; (8005034 <prvPortStartFirstTask+0x1c>)
 800501a:	6800      	ldr	r0, [r0, #0]
 800501c:	6800      	ldr	r0, [r0, #0]
 800501e:	f380 8808 	msr	MSP, r0
 8005022:	b662      	cpsie	i
 8005024:	b661      	cpsie	f
 8005026:	f3bf 8f4f 	dsb	sy
 800502a:	f3bf 8f6f 	isb	sy
 800502e:	df00      	svc	0
 8005030:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005032:	bf00      	nop
 8005034:	e000ed08 	.word	0xe000ed08

08005038 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800503e:	4b31      	ldr	r3, [pc, #196]	; (8005104 <xPortStartScheduler+0xcc>)
 8005040:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	b2db      	uxtb	r3, r3
 8005048:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	22ff      	movs	r2, #255	; 0xff
 800504e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	b2db      	uxtb	r3, r3
 8005056:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005058:	78fb      	ldrb	r3, [r7, #3]
 800505a:	b2db      	uxtb	r3, r3
 800505c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005060:	b2da      	uxtb	r2, r3
 8005062:	4b29      	ldr	r3, [pc, #164]	; (8005108 <xPortStartScheduler+0xd0>)
 8005064:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005066:	4b29      	ldr	r3, [pc, #164]	; (800510c <xPortStartScheduler+0xd4>)
 8005068:	2207      	movs	r2, #7
 800506a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800506c:	e009      	b.n	8005082 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800506e:	4b27      	ldr	r3, [pc, #156]	; (800510c <xPortStartScheduler+0xd4>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	3b01      	subs	r3, #1
 8005074:	4a25      	ldr	r2, [pc, #148]	; (800510c <xPortStartScheduler+0xd4>)
 8005076:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005078:	78fb      	ldrb	r3, [r7, #3]
 800507a:	b2db      	uxtb	r3, r3
 800507c:	005b      	lsls	r3, r3, #1
 800507e:	b2db      	uxtb	r3, r3
 8005080:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005082:	78fb      	ldrb	r3, [r7, #3]
 8005084:	b2db      	uxtb	r3, r3
 8005086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800508a:	2b80      	cmp	r3, #128	; 0x80
 800508c:	d0ef      	beq.n	800506e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800508e:	4b1f      	ldr	r3, [pc, #124]	; (800510c <xPortStartScheduler+0xd4>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f1c3 0307 	rsb	r3, r3, #7
 8005096:	2b04      	cmp	r3, #4
 8005098:	d009      	beq.n	80050ae <xPortStartScheduler+0x76>
 800509a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800509e:	f383 8811 	msr	BASEPRI, r3
 80050a2:	f3bf 8f6f 	isb	sy
 80050a6:	f3bf 8f4f 	dsb	sy
 80050aa:	60bb      	str	r3, [r7, #8]
 80050ac:	e7fe      	b.n	80050ac <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80050ae:	4b17      	ldr	r3, [pc, #92]	; (800510c <xPortStartScheduler+0xd4>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	021b      	lsls	r3, r3, #8
 80050b4:	4a15      	ldr	r2, [pc, #84]	; (800510c <xPortStartScheduler+0xd4>)
 80050b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80050b8:	4b14      	ldr	r3, [pc, #80]	; (800510c <xPortStartScheduler+0xd4>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80050c0:	4a12      	ldr	r2, [pc, #72]	; (800510c <xPortStartScheduler+0xd4>)
 80050c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	b2da      	uxtb	r2, r3
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80050cc:	4b10      	ldr	r3, [pc, #64]	; (8005110 <xPortStartScheduler+0xd8>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a0f      	ldr	r2, [pc, #60]	; (8005110 <xPortStartScheduler+0xd8>)
 80050d2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80050d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80050d8:	4b0d      	ldr	r3, [pc, #52]	; (8005110 <xPortStartScheduler+0xd8>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a0c      	ldr	r2, [pc, #48]	; (8005110 <xPortStartScheduler+0xd8>)
 80050de:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80050e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80050e4:	f000 f8b0 	bl	8005248 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80050e8:	4b0a      	ldr	r3, [pc, #40]	; (8005114 <xPortStartScheduler+0xdc>)
 80050ea:	2200      	movs	r2, #0
 80050ec:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80050ee:	f7ff ff93 	bl	8005018 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80050f2:	f7ff f8d9 	bl	80042a8 <vTaskSwitchContext>
	prvTaskExitError();
 80050f6:	f7ff ff4f 	bl	8004f98 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80050fa:	2300      	movs	r3, #0
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3710      	adds	r7, #16
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}
 8005104:	e000e400 	.word	0xe000e400
 8005108:	20000d1c 	.word	0x20000d1c
 800510c:	20000d20 	.word	0x20000d20
 8005110:	e000ed20 	.word	0xe000ed20
 8005114:	2000000c 	.word	0x2000000c

08005118 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005122:	f383 8811 	msr	BASEPRI, r3
 8005126:	f3bf 8f6f 	isb	sy
 800512a:	f3bf 8f4f 	dsb	sy
 800512e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005130:	4b0e      	ldr	r3, [pc, #56]	; (800516c <vPortEnterCritical+0x54>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	3301      	adds	r3, #1
 8005136:	4a0d      	ldr	r2, [pc, #52]	; (800516c <vPortEnterCritical+0x54>)
 8005138:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800513a:	4b0c      	ldr	r3, [pc, #48]	; (800516c <vPortEnterCritical+0x54>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2b01      	cmp	r3, #1
 8005140:	d10e      	bne.n	8005160 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005142:	4b0b      	ldr	r3, [pc, #44]	; (8005170 <vPortEnterCritical+0x58>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	b2db      	uxtb	r3, r3
 8005148:	2b00      	cmp	r3, #0
 800514a:	d009      	beq.n	8005160 <vPortEnterCritical+0x48>
 800514c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005150:	f383 8811 	msr	BASEPRI, r3
 8005154:	f3bf 8f6f 	isb	sy
 8005158:	f3bf 8f4f 	dsb	sy
 800515c:	603b      	str	r3, [r7, #0]
 800515e:	e7fe      	b.n	800515e <vPortEnterCritical+0x46>
	}
}
 8005160:	bf00      	nop
 8005162:	370c      	adds	r7, #12
 8005164:	46bd      	mov	sp, r7
 8005166:	bc80      	pop	{r7}
 8005168:	4770      	bx	lr
 800516a:	bf00      	nop
 800516c:	2000000c 	.word	0x2000000c
 8005170:	e000ed04 	.word	0xe000ed04

08005174 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005174:	b480      	push	{r7}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800517a:	4b10      	ldr	r3, [pc, #64]	; (80051bc <vPortExitCritical+0x48>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d109      	bne.n	8005196 <vPortExitCritical+0x22>
 8005182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005186:	f383 8811 	msr	BASEPRI, r3
 800518a:	f3bf 8f6f 	isb	sy
 800518e:	f3bf 8f4f 	dsb	sy
 8005192:	607b      	str	r3, [r7, #4]
 8005194:	e7fe      	b.n	8005194 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005196:	4b09      	ldr	r3, [pc, #36]	; (80051bc <vPortExitCritical+0x48>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	3b01      	subs	r3, #1
 800519c:	4a07      	ldr	r2, [pc, #28]	; (80051bc <vPortExitCritical+0x48>)
 800519e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80051a0:	4b06      	ldr	r3, [pc, #24]	; (80051bc <vPortExitCritical+0x48>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d104      	bne.n	80051b2 <vPortExitCritical+0x3e>
 80051a8:	2300      	movs	r3, #0
 80051aa:	603b      	str	r3, [r7, #0]
	__asm volatile
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80051b2:	bf00      	nop
 80051b4:	370c      	adds	r7, #12
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bc80      	pop	{r7}
 80051ba:	4770      	bx	lr
 80051bc:	2000000c 	.word	0x2000000c

080051c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80051c0:	f3ef 8009 	mrs	r0, PSP
 80051c4:	f3bf 8f6f 	isb	sy
 80051c8:	4b0d      	ldr	r3, [pc, #52]	; (8005200 <pxCurrentTCBConst>)
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80051d0:	6010      	str	r0, [r2, #0]
 80051d2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80051d6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80051da:	f380 8811 	msr	BASEPRI, r0
 80051de:	f7ff f863 	bl	80042a8 <vTaskSwitchContext>
 80051e2:	f04f 0000 	mov.w	r0, #0
 80051e6:	f380 8811 	msr	BASEPRI, r0
 80051ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80051ee:	6819      	ldr	r1, [r3, #0]
 80051f0:	6808      	ldr	r0, [r1, #0]
 80051f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80051f6:	f380 8809 	msr	PSP, r0
 80051fa:	f3bf 8f6f 	isb	sy
 80051fe:	4770      	bx	lr

08005200 <pxCurrentTCBConst>:
 8005200:	200006f0 	.word	0x200006f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005204:	bf00      	nop
 8005206:	bf00      	nop

08005208 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b082      	sub	sp, #8
 800520c:	af00      	add	r7, sp, #0
	__asm volatile
 800520e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005212:	f383 8811 	msr	BASEPRI, r3
 8005216:	f3bf 8f6f 	isb	sy
 800521a:	f3bf 8f4f 	dsb	sy
 800521e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005220:	f7fe ff84 	bl	800412c <xTaskIncrementTick>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d003      	beq.n	8005232 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800522a:	4b06      	ldr	r3, [pc, #24]	; (8005244 <xPortSysTickHandler+0x3c>)
 800522c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005230:	601a      	str	r2, [r3, #0]
 8005232:	2300      	movs	r3, #0
 8005234:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800523c:	bf00      	nop
 800523e:	3708      	adds	r7, #8
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}
 8005244:	e000ed04 	.word	0xe000ed04

08005248 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005248:	b480      	push	{r7}
 800524a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800524c:	4b0a      	ldr	r3, [pc, #40]	; (8005278 <vPortSetupTimerInterrupt+0x30>)
 800524e:	2200      	movs	r2, #0
 8005250:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005252:	4b0a      	ldr	r3, [pc, #40]	; (800527c <vPortSetupTimerInterrupt+0x34>)
 8005254:	2200      	movs	r2, #0
 8005256:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005258:	4b09      	ldr	r3, [pc, #36]	; (8005280 <vPortSetupTimerInterrupt+0x38>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a09      	ldr	r2, [pc, #36]	; (8005284 <vPortSetupTimerInterrupt+0x3c>)
 800525e:	fba2 2303 	umull	r2, r3, r2, r3
 8005262:	099b      	lsrs	r3, r3, #6
 8005264:	4a08      	ldr	r2, [pc, #32]	; (8005288 <vPortSetupTimerInterrupt+0x40>)
 8005266:	3b01      	subs	r3, #1
 8005268:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800526a:	4b03      	ldr	r3, [pc, #12]	; (8005278 <vPortSetupTimerInterrupt+0x30>)
 800526c:	2207      	movs	r2, #7
 800526e:	601a      	str	r2, [r3, #0]
}
 8005270:	bf00      	nop
 8005272:	46bd      	mov	sp, r7
 8005274:	bc80      	pop	{r7}
 8005276:	4770      	bx	lr
 8005278:	e000e010 	.word	0xe000e010
 800527c:	e000e018 	.word	0xe000e018
 8005280:	20000000 	.word	0x20000000
 8005284:	10624dd3 	.word	0x10624dd3
 8005288:	e000e014 	.word	0xe000e014

0800528c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800528c:	b480      	push	{r7}
 800528e:	b085      	sub	sp, #20
 8005290:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005292:	f3ef 8305 	mrs	r3, IPSR
 8005296:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2b0f      	cmp	r3, #15
 800529c:	d913      	bls.n	80052c6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800529e:	4a15      	ldr	r2, [pc, #84]	; (80052f4 <vPortValidateInterruptPriority+0x68>)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	4413      	add	r3, r2
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80052a8:	4b13      	ldr	r3, [pc, #76]	; (80052f8 <vPortValidateInterruptPriority+0x6c>)
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	7afa      	ldrb	r2, [r7, #11]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d209      	bcs.n	80052c6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80052b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b6:	f383 8811 	msr	BASEPRI, r3
 80052ba:	f3bf 8f6f 	isb	sy
 80052be:	f3bf 8f4f 	dsb	sy
 80052c2:	607b      	str	r3, [r7, #4]
 80052c4:	e7fe      	b.n	80052c4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80052c6:	4b0d      	ldr	r3, [pc, #52]	; (80052fc <vPortValidateInterruptPriority+0x70>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80052ce:	4b0c      	ldr	r3, [pc, #48]	; (8005300 <vPortValidateInterruptPriority+0x74>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d909      	bls.n	80052ea <vPortValidateInterruptPriority+0x5e>
 80052d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052da:	f383 8811 	msr	BASEPRI, r3
 80052de:	f3bf 8f6f 	isb	sy
 80052e2:	f3bf 8f4f 	dsb	sy
 80052e6:	603b      	str	r3, [r7, #0]
 80052e8:	e7fe      	b.n	80052e8 <vPortValidateInterruptPriority+0x5c>
	}
 80052ea:	bf00      	nop
 80052ec:	3714      	adds	r7, #20
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bc80      	pop	{r7}
 80052f2:	4770      	bx	lr
 80052f4:	e000e3f0 	.word	0xe000e3f0
 80052f8:	20000d1c 	.word	0x20000d1c
 80052fc:	e000ed0c 	.word	0xe000ed0c
 8005300:	20000d20 	.word	0x20000d20

08005304 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b08a      	sub	sp, #40	; 0x28
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800530c:	2300      	movs	r3, #0
 800530e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005310:	f7fe fe54 	bl	8003fbc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005314:	4b57      	ldr	r3, [pc, #348]	; (8005474 <pvPortMalloc+0x170>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d101      	bne.n	8005320 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800531c:	f000 f90c 	bl	8005538 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005320:	4b55      	ldr	r3, [pc, #340]	; (8005478 <pvPortMalloc+0x174>)
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4013      	ands	r3, r2
 8005328:	2b00      	cmp	r3, #0
 800532a:	f040 808c 	bne.w	8005446 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d01c      	beq.n	800536e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005334:	2208      	movs	r2, #8
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4413      	add	r3, r2
 800533a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f003 0307 	and.w	r3, r3, #7
 8005342:	2b00      	cmp	r3, #0
 8005344:	d013      	beq.n	800536e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f023 0307 	bic.w	r3, r3, #7
 800534c:	3308      	adds	r3, #8
 800534e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f003 0307 	and.w	r3, r3, #7
 8005356:	2b00      	cmp	r3, #0
 8005358:	d009      	beq.n	800536e <pvPortMalloc+0x6a>
 800535a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800535e:	f383 8811 	msr	BASEPRI, r3
 8005362:	f3bf 8f6f 	isb	sy
 8005366:	f3bf 8f4f 	dsb	sy
 800536a:	617b      	str	r3, [r7, #20]
 800536c:	e7fe      	b.n	800536c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d068      	beq.n	8005446 <pvPortMalloc+0x142>
 8005374:	4b41      	ldr	r3, [pc, #260]	; (800547c <pvPortMalloc+0x178>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	429a      	cmp	r2, r3
 800537c:	d863      	bhi.n	8005446 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800537e:	4b40      	ldr	r3, [pc, #256]	; (8005480 <pvPortMalloc+0x17c>)
 8005380:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005382:	4b3f      	ldr	r3, [pc, #252]	; (8005480 <pvPortMalloc+0x17c>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005388:	e004      	b.n	8005394 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800538a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800538e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	429a      	cmp	r2, r3
 800539c:	d903      	bls.n	80053a6 <pvPortMalloc+0xa2>
 800539e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d1f1      	bne.n	800538a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80053a6:	4b33      	ldr	r3, [pc, #204]	; (8005474 <pvPortMalloc+0x170>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d04a      	beq.n	8005446 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80053b0:	6a3b      	ldr	r3, [r7, #32]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2208      	movs	r2, #8
 80053b6:	4413      	add	r3, r2
 80053b8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80053ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	6a3b      	ldr	r3, [r7, #32]
 80053c0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80053c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c4:	685a      	ldr	r2, [r3, #4]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	1ad2      	subs	r2, r2, r3
 80053ca:	2308      	movs	r3, #8
 80053cc:	005b      	lsls	r3, r3, #1
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d91e      	bls.n	8005410 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80053d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4413      	add	r3, r2
 80053d8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80053da:	69bb      	ldr	r3, [r7, #24]
 80053dc:	f003 0307 	and.w	r3, r3, #7
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d009      	beq.n	80053f8 <pvPortMalloc+0xf4>
 80053e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e8:	f383 8811 	msr	BASEPRI, r3
 80053ec:	f3bf 8f6f 	isb	sy
 80053f0:	f3bf 8f4f 	dsb	sy
 80053f4:	613b      	str	r3, [r7, #16]
 80053f6:	e7fe      	b.n	80053f6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80053f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fa:	685a      	ldr	r2, [r3, #4]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	1ad2      	subs	r2, r2, r3
 8005400:	69bb      	ldr	r3, [r7, #24]
 8005402:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800540a:	69b8      	ldr	r0, [r7, #24]
 800540c:	f000 f8f6 	bl	80055fc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005410:	4b1a      	ldr	r3, [pc, #104]	; (800547c <pvPortMalloc+0x178>)
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	4a18      	ldr	r2, [pc, #96]	; (800547c <pvPortMalloc+0x178>)
 800541c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800541e:	4b17      	ldr	r3, [pc, #92]	; (800547c <pvPortMalloc+0x178>)
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	4b18      	ldr	r3, [pc, #96]	; (8005484 <pvPortMalloc+0x180>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	429a      	cmp	r2, r3
 8005428:	d203      	bcs.n	8005432 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800542a:	4b14      	ldr	r3, [pc, #80]	; (800547c <pvPortMalloc+0x178>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a15      	ldr	r2, [pc, #84]	; (8005484 <pvPortMalloc+0x180>)
 8005430:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005434:	685a      	ldr	r2, [r3, #4]
 8005436:	4b10      	ldr	r3, [pc, #64]	; (8005478 <pvPortMalloc+0x174>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	431a      	orrs	r2, r3
 800543c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005442:	2200      	movs	r2, #0
 8005444:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005446:	f7fe fdc7 	bl	8003fd8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	f003 0307 	and.w	r3, r3, #7
 8005450:	2b00      	cmp	r3, #0
 8005452:	d009      	beq.n	8005468 <pvPortMalloc+0x164>
 8005454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005458:	f383 8811 	msr	BASEPRI, r3
 800545c:	f3bf 8f6f 	isb	sy
 8005460:	f3bf 8f4f 	dsb	sy
 8005464:	60fb      	str	r3, [r7, #12]
 8005466:	e7fe      	b.n	8005466 <pvPortMalloc+0x162>
	return pvReturn;
 8005468:	69fb      	ldr	r3, [r7, #28]
}
 800546a:	4618      	mov	r0, r3
 800546c:	3728      	adds	r7, #40	; 0x28
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	2000192c 	.word	0x2000192c
 8005478:	20001938 	.word	0x20001938
 800547c:	20001930 	.word	0x20001930
 8005480:	20001924 	.word	0x20001924
 8005484:	20001934 	.word	0x20001934

08005488 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b086      	sub	sp, #24
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d046      	beq.n	8005528 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800549a:	2308      	movs	r3, #8
 800549c:	425b      	negs	r3, r3
 800549e:	697a      	ldr	r2, [r7, #20]
 80054a0:	4413      	add	r3, r2
 80054a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	685a      	ldr	r2, [r3, #4]
 80054ac:	4b20      	ldr	r3, [pc, #128]	; (8005530 <vPortFree+0xa8>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4013      	ands	r3, r2
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d109      	bne.n	80054ca <vPortFree+0x42>
 80054b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ba:	f383 8811 	msr	BASEPRI, r3
 80054be:	f3bf 8f6f 	isb	sy
 80054c2:	f3bf 8f4f 	dsb	sy
 80054c6:	60fb      	str	r3, [r7, #12]
 80054c8:	e7fe      	b.n	80054c8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d009      	beq.n	80054e6 <vPortFree+0x5e>
 80054d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d6:	f383 8811 	msr	BASEPRI, r3
 80054da:	f3bf 8f6f 	isb	sy
 80054de:	f3bf 8f4f 	dsb	sy
 80054e2:	60bb      	str	r3, [r7, #8]
 80054e4:	e7fe      	b.n	80054e4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	685a      	ldr	r2, [r3, #4]
 80054ea:	4b11      	ldr	r3, [pc, #68]	; (8005530 <vPortFree+0xa8>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4013      	ands	r3, r2
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d019      	beq.n	8005528 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d115      	bne.n	8005528 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	685a      	ldr	r2, [r3, #4]
 8005500:	4b0b      	ldr	r3, [pc, #44]	; (8005530 <vPortFree+0xa8>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	43db      	mvns	r3, r3
 8005506:	401a      	ands	r2, r3
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800550c:	f7fe fd56 	bl	8003fbc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	685a      	ldr	r2, [r3, #4]
 8005514:	4b07      	ldr	r3, [pc, #28]	; (8005534 <vPortFree+0xac>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4413      	add	r3, r2
 800551a:	4a06      	ldr	r2, [pc, #24]	; (8005534 <vPortFree+0xac>)
 800551c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800551e:	6938      	ldr	r0, [r7, #16]
 8005520:	f000 f86c 	bl	80055fc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005524:	f7fe fd58 	bl	8003fd8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005528:	bf00      	nop
 800552a:	3718      	adds	r7, #24
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}
 8005530:	20001938 	.word	0x20001938
 8005534:	20001930 	.word	0x20001930

08005538 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005538:	b480      	push	{r7}
 800553a:	b085      	sub	sp, #20
 800553c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800553e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005542:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005544:	4b27      	ldr	r3, [pc, #156]	; (80055e4 <prvHeapInit+0xac>)
 8005546:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f003 0307 	and.w	r3, r3, #7
 800554e:	2b00      	cmp	r3, #0
 8005550:	d00c      	beq.n	800556c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	3307      	adds	r3, #7
 8005556:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f023 0307 	bic.w	r3, r3, #7
 800555e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005560:	68ba      	ldr	r2, [r7, #8]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	4a1f      	ldr	r2, [pc, #124]	; (80055e4 <prvHeapInit+0xac>)
 8005568:	4413      	add	r3, r2
 800556a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005570:	4a1d      	ldr	r2, [pc, #116]	; (80055e8 <prvHeapInit+0xb0>)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005576:	4b1c      	ldr	r3, [pc, #112]	; (80055e8 <prvHeapInit+0xb0>)
 8005578:	2200      	movs	r2, #0
 800557a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	68ba      	ldr	r2, [r7, #8]
 8005580:	4413      	add	r3, r2
 8005582:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005584:	2208      	movs	r2, #8
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	1a9b      	subs	r3, r3, r2
 800558a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f023 0307 	bic.w	r3, r3, #7
 8005592:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	4a15      	ldr	r2, [pc, #84]	; (80055ec <prvHeapInit+0xb4>)
 8005598:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800559a:	4b14      	ldr	r3, [pc, #80]	; (80055ec <prvHeapInit+0xb4>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2200      	movs	r2, #0
 80055a0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80055a2:	4b12      	ldr	r3, [pc, #72]	; (80055ec <prvHeapInit+0xb4>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2200      	movs	r2, #0
 80055a8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	68fa      	ldr	r2, [r7, #12]
 80055b2:	1ad2      	subs	r2, r2, r3
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80055b8:	4b0c      	ldr	r3, [pc, #48]	; (80055ec <prvHeapInit+0xb4>)
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	4a0a      	ldr	r2, [pc, #40]	; (80055f0 <prvHeapInit+0xb8>)
 80055c6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	4a09      	ldr	r2, [pc, #36]	; (80055f4 <prvHeapInit+0xbc>)
 80055ce:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80055d0:	4b09      	ldr	r3, [pc, #36]	; (80055f8 <prvHeapInit+0xc0>)
 80055d2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80055d6:	601a      	str	r2, [r3, #0]
}
 80055d8:	bf00      	nop
 80055da:	3714      	adds	r7, #20
 80055dc:	46bd      	mov	sp, r7
 80055de:	bc80      	pop	{r7}
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	20000d24 	.word	0x20000d24
 80055e8:	20001924 	.word	0x20001924
 80055ec:	2000192c 	.word	0x2000192c
 80055f0:	20001934 	.word	0x20001934
 80055f4:	20001930 	.word	0x20001930
 80055f8:	20001938 	.word	0x20001938

080055fc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80055fc:	b480      	push	{r7}
 80055fe:	b085      	sub	sp, #20
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005604:	4b27      	ldr	r3, [pc, #156]	; (80056a4 <prvInsertBlockIntoFreeList+0xa8>)
 8005606:	60fb      	str	r3, [r7, #12]
 8005608:	e002      	b.n	8005610 <prvInsertBlockIntoFreeList+0x14>
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	60fb      	str	r3, [r7, #12]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	429a      	cmp	r2, r3
 8005618:	d8f7      	bhi.n	800560a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	68ba      	ldr	r2, [r7, #8]
 8005624:	4413      	add	r3, r2
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	429a      	cmp	r2, r3
 800562a:	d108      	bne.n	800563e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	685a      	ldr	r2, [r3, #4]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	441a      	add	r2, r3
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	68ba      	ldr	r2, [r7, #8]
 8005648:	441a      	add	r2, r3
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	429a      	cmp	r2, r3
 8005650:	d118      	bne.n	8005684 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	4b14      	ldr	r3, [pc, #80]	; (80056a8 <prvInsertBlockIntoFreeList+0xac>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	429a      	cmp	r2, r3
 800565c:	d00d      	beq.n	800567a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	685a      	ldr	r2, [r3, #4]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	441a      	add	r2, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	601a      	str	r2, [r3, #0]
 8005678:	e008      	b.n	800568c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800567a:	4b0b      	ldr	r3, [pc, #44]	; (80056a8 <prvInsertBlockIntoFreeList+0xac>)
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	601a      	str	r2, [r3, #0]
 8005682:	e003      	b.n	800568c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	429a      	cmp	r2, r3
 8005692:	d002      	beq.n	800569a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800569a:	bf00      	nop
 800569c:	3714      	adds	r7, #20
 800569e:	46bd      	mov	sp, r7
 80056a0:	bc80      	pop	{r7}
 80056a2:	4770      	bx	lr
 80056a4:	20001924 	.word	0x20001924
 80056a8:	2000192c 	.word	0x2000192c

080056ac <__libc_init_array>:
 80056ac:	b570      	push	{r4, r5, r6, lr}
 80056ae:	2500      	movs	r5, #0
 80056b0:	4e0c      	ldr	r6, [pc, #48]	; (80056e4 <__libc_init_array+0x38>)
 80056b2:	4c0d      	ldr	r4, [pc, #52]	; (80056e8 <__libc_init_array+0x3c>)
 80056b4:	1ba4      	subs	r4, r4, r6
 80056b6:	10a4      	asrs	r4, r4, #2
 80056b8:	42a5      	cmp	r5, r4
 80056ba:	d109      	bne.n	80056d0 <__libc_init_array+0x24>
 80056bc:	f000 f82e 	bl	800571c <_init>
 80056c0:	2500      	movs	r5, #0
 80056c2:	4e0a      	ldr	r6, [pc, #40]	; (80056ec <__libc_init_array+0x40>)
 80056c4:	4c0a      	ldr	r4, [pc, #40]	; (80056f0 <__libc_init_array+0x44>)
 80056c6:	1ba4      	subs	r4, r4, r6
 80056c8:	10a4      	asrs	r4, r4, #2
 80056ca:	42a5      	cmp	r5, r4
 80056cc:	d105      	bne.n	80056da <__libc_init_array+0x2e>
 80056ce:	bd70      	pop	{r4, r5, r6, pc}
 80056d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80056d4:	4798      	blx	r3
 80056d6:	3501      	adds	r5, #1
 80056d8:	e7ee      	b.n	80056b8 <__libc_init_array+0xc>
 80056da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80056de:	4798      	blx	r3
 80056e0:	3501      	adds	r5, #1
 80056e2:	e7f2      	b.n	80056ca <__libc_init_array+0x1e>
 80056e4:	080057d4 	.word	0x080057d4
 80056e8:	080057d4 	.word	0x080057d4
 80056ec:	080057d4 	.word	0x080057d4
 80056f0:	080057d8 	.word	0x080057d8

080056f4 <memcpy>:
 80056f4:	b510      	push	{r4, lr}
 80056f6:	1e43      	subs	r3, r0, #1
 80056f8:	440a      	add	r2, r1
 80056fa:	4291      	cmp	r1, r2
 80056fc:	d100      	bne.n	8005700 <memcpy+0xc>
 80056fe:	bd10      	pop	{r4, pc}
 8005700:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005704:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005708:	e7f7      	b.n	80056fa <memcpy+0x6>

0800570a <memset>:
 800570a:	4603      	mov	r3, r0
 800570c:	4402      	add	r2, r0
 800570e:	4293      	cmp	r3, r2
 8005710:	d100      	bne.n	8005714 <memset+0xa>
 8005712:	4770      	bx	lr
 8005714:	f803 1b01 	strb.w	r1, [r3], #1
 8005718:	e7f9      	b.n	800570e <memset+0x4>
	...

0800571c <_init>:
 800571c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800571e:	bf00      	nop
 8005720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005722:	bc08      	pop	{r3}
 8005724:	469e      	mov	lr, r3
 8005726:	4770      	bx	lr

08005728 <_fini>:
 8005728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800572a:	bf00      	nop
 800572c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800572e:	bc08      	pop	{r3}
 8005730:	469e      	mov	lr, r3
 8005732:	4770      	bx	lr
