
Curtain_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d04  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08006e14  08006e14  00016e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f7c  08006f7c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08006f7c  08006f7c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006f7c  08006f7c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f7c  08006f7c  00016f7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f80  08006f80  00016f80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006f84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c1c  20000074  08006ff8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c90  08006ff8  00021c90  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b6a8  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003c2f  00000000  00000000  0003b745  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015d0  00000000  00000000  0003f378  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013f8  00000000  00000000  00040948  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018702  00000000  00000000  00041d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000131e9  00000000  00000000  0005a442  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00081c30  00000000  00000000  0006d62b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ef25b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006054  00000000  00000000  000ef2d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08006dfc 	.word	0x08006dfc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08006dfc 	.word	0x08006dfc

08000150 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b084      	sub	sp, #16
 8000154:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000156:	1d3b      	adds	r3, r7, #4
 8000158:	2200      	movs	r2, #0
 800015a:	601a      	str	r2, [r3, #0]
 800015c:	605a      	str	r2, [r3, #4]
 800015e:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000160:	4b20      	ldr	r3, [pc, #128]	; (80001e4 <MX_ADC1_Init+0x94>)
 8000162:	4a21      	ldr	r2, [pc, #132]	; (80001e8 <MX_ADC1_Init+0x98>)
 8000164:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000166:	4b1f      	ldr	r3, [pc, #124]	; (80001e4 <MX_ADC1_Init+0x94>)
 8000168:	f44f 7280 	mov.w	r2, #256	; 0x100
 800016c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800016e:	4b1d      	ldr	r3, [pc, #116]	; (80001e4 <MX_ADC1_Init+0x94>)
 8000170:	2201      	movs	r2, #1
 8000172:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000174:	4b1b      	ldr	r3, [pc, #108]	; (80001e4 <MX_ADC1_Init+0x94>)
 8000176:	2200      	movs	r2, #0
 8000178:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800017a:	4b1a      	ldr	r3, [pc, #104]	; (80001e4 <MX_ADC1_Init+0x94>)
 800017c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000180:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000182:	4b18      	ldr	r3, [pc, #96]	; (80001e4 <MX_ADC1_Init+0x94>)
 8000184:	2200      	movs	r2, #0
 8000186:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000188:	4b16      	ldr	r3, [pc, #88]	; (80001e4 <MX_ADC1_Init+0x94>)
 800018a:	2202      	movs	r2, #2
 800018c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800018e:	4815      	ldr	r0, [pc, #84]	; (80001e4 <MX_ADC1_Init+0x94>)
 8000190:	f000 ff60 	bl	8001054 <HAL_ADC_Init>
 8000194:	4603      	mov	r3, r0
 8000196:	2b00      	cmp	r3, #0
 8000198:	d001      	beq.n	800019e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800019a:	f000 fc25 	bl	80009e8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800019e:	2307      	movs	r3, #7
 80001a0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80001a2:	2301      	movs	r3, #1
 80001a4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80001a6:	2300      	movs	r3, #0
 80001a8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001aa:	1d3b      	adds	r3, r7, #4
 80001ac:	4619      	mov	r1, r3
 80001ae:	480d      	ldr	r0, [pc, #52]	; (80001e4 <MX_ADC1_Init+0x94>)
 80001b0:	f001 f922 	bl	80013f8 <HAL_ADC_ConfigChannel>
 80001b4:	4603      	mov	r3, r0
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d001      	beq.n	80001be <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80001ba:	f000 fc15 	bl	80009e8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80001be:	2308      	movs	r3, #8
 80001c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80001c2:	2302      	movs	r3, #2
 80001c4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001c6:	1d3b      	adds	r3, r7, #4
 80001c8:	4619      	mov	r1, r3
 80001ca:	4806      	ldr	r0, [pc, #24]	; (80001e4 <MX_ADC1_Init+0x94>)
 80001cc:	f001 f914 	bl	80013f8 <HAL_ADC_ConfigChannel>
 80001d0:	4603      	mov	r3, r0
 80001d2:	2b00      	cmp	r3, #0
 80001d4:	d001      	beq.n	80001da <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80001d6:	f000 fc07 	bl	80009e8 <Error_Handler>
  }

}
 80001da:	bf00      	nop
 80001dc:	3710      	adds	r7, #16
 80001de:	46bd      	mov	sp, r7
 80001e0:	bd80      	pop	{r7, pc}
 80001e2:	bf00      	nop
 80001e4:	200019ac 	.word	0x200019ac
 80001e8:	40012400 	.word	0x40012400

080001ec <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b08a      	sub	sp, #40	; 0x28
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001f4:	f107 0318 	add.w	r3, r7, #24
 80001f8:	2200      	movs	r2, #0
 80001fa:	601a      	str	r2, [r3, #0]
 80001fc:	605a      	str	r2, [r3, #4]
 80001fe:	609a      	str	r2, [r3, #8]
 8000200:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	4a33      	ldr	r2, [pc, #204]	; (80002d4 <HAL_ADC_MspInit+0xe8>)
 8000208:	4293      	cmp	r3, r2
 800020a:	d15f      	bne.n	80002cc <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800020c:	4b32      	ldr	r3, [pc, #200]	; (80002d8 <HAL_ADC_MspInit+0xec>)
 800020e:	699b      	ldr	r3, [r3, #24]
 8000210:	4a31      	ldr	r2, [pc, #196]	; (80002d8 <HAL_ADC_MspInit+0xec>)
 8000212:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000216:	6193      	str	r3, [r2, #24]
 8000218:	4b2f      	ldr	r3, [pc, #188]	; (80002d8 <HAL_ADC_MspInit+0xec>)
 800021a:	699b      	ldr	r3, [r3, #24]
 800021c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000220:	617b      	str	r3, [r7, #20]
 8000222:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000224:	4b2c      	ldr	r3, [pc, #176]	; (80002d8 <HAL_ADC_MspInit+0xec>)
 8000226:	699b      	ldr	r3, [r3, #24]
 8000228:	4a2b      	ldr	r2, [pc, #172]	; (80002d8 <HAL_ADC_MspInit+0xec>)
 800022a:	f043 0304 	orr.w	r3, r3, #4
 800022e:	6193      	str	r3, [r2, #24]
 8000230:	4b29      	ldr	r3, [pc, #164]	; (80002d8 <HAL_ADC_MspInit+0xec>)
 8000232:	699b      	ldr	r3, [r3, #24]
 8000234:	f003 0304 	and.w	r3, r3, #4
 8000238:	613b      	str	r3, [r7, #16]
 800023a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800023c:	4b26      	ldr	r3, [pc, #152]	; (80002d8 <HAL_ADC_MspInit+0xec>)
 800023e:	699b      	ldr	r3, [r3, #24]
 8000240:	4a25      	ldr	r2, [pc, #148]	; (80002d8 <HAL_ADC_MspInit+0xec>)
 8000242:	f043 0308 	orr.w	r3, r3, #8
 8000246:	6193      	str	r3, [r2, #24]
 8000248:	4b23      	ldr	r3, [pc, #140]	; (80002d8 <HAL_ADC_MspInit+0xec>)
 800024a:	699b      	ldr	r3, [r3, #24]
 800024c:	f003 0308 	and.w	r3, r3, #8
 8000250:	60fb      	str	r3, [r7, #12]
 8000252:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = ADC1_Pin;
 8000254:	2380      	movs	r3, #128	; 0x80
 8000256:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000258:	2303      	movs	r3, #3
 800025a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_GPIO_Port, &GPIO_InitStruct);
 800025c:	f107 0318 	add.w	r3, r7, #24
 8000260:	4619      	mov	r1, r3
 8000262:	481e      	ldr	r0, [pc, #120]	; (80002dc <HAL_ADC_MspInit+0xf0>)
 8000264:	f001 fdae 	bl	8001dc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC2_Pin;
 8000268:	2301      	movs	r3, #1
 800026a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800026c:	2303      	movs	r3, #3
 800026e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC2_GPIO_Port, &GPIO_InitStruct);
 8000270:	f107 0318 	add.w	r3, r7, #24
 8000274:	4619      	mov	r1, r3
 8000276:	481a      	ldr	r0, [pc, #104]	; (80002e0 <HAL_ADC_MspInit+0xf4>)
 8000278:	f001 fda4 	bl	8001dc4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800027c:	4b19      	ldr	r3, [pc, #100]	; (80002e4 <HAL_ADC_MspInit+0xf8>)
 800027e:	4a1a      	ldr	r2, [pc, #104]	; (80002e8 <HAL_ADC_MspInit+0xfc>)
 8000280:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000282:	4b18      	ldr	r3, [pc, #96]	; (80002e4 <HAL_ADC_MspInit+0xf8>)
 8000284:	2200      	movs	r2, #0
 8000286:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000288:	4b16      	ldr	r3, [pc, #88]	; (80002e4 <HAL_ADC_MspInit+0xf8>)
 800028a:	2200      	movs	r2, #0
 800028c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800028e:	4b15      	ldr	r3, [pc, #84]	; (80002e4 <HAL_ADC_MspInit+0xf8>)
 8000290:	2280      	movs	r2, #128	; 0x80
 8000292:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000294:	4b13      	ldr	r3, [pc, #76]	; (80002e4 <HAL_ADC_MspInit+0xf8>)
 8000296:	f44f 7200 	mov.w	r2, #512	; 0x200
 800029a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800029c:	4b11      	ldr	r3, [pc, #68]	; (80002e4 <HAL_ADC_MspInit+0xf8>)
 800029e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80002a2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80002a4:	4b0f      	ldr	r3, [pc, #60]	; (80002e4 <HAL_ADC_MspInit+0xf8>)
 80002a6:	2220      	movs	r2, #32
 80002a8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80002aa:	4b0e      	ldr	r3, [pc, #56]	; (80002e4 <HAL_ADC_MspInit+0xf8>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80002b0:	480c      	ldr	r0, [pc, #48]	; (80002e4 <HAL_ADC_MspInit+0xf8>)
 80002b2:	f001 fb99 	bl	80019e8 <HAL_DMA_Init>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d001      	beq.n	80002c0 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 80002bc:	f000 fb94 	bl	80009e8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	4a08      	ldr	r2, [pc, #32]	; (80002e4 <HAL_ADC_MspInit+0xf8>)
 80002c4:	621a      	str	r2, [r3, #32]
 80002c6:	4a07      	ldr	r2, [pc, #28]	; (80002e4 <HAL_ADC_MspInit+0xf8>)
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80002cc:	bf00      	nop
 80002ce:	3728      	adds	r7, #40	; 0x28
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	40012400 	.word	0x40012400
 80002d8:	40021000 	.word	0x40021000
 80002dc:	40010800 	.word	0x40010800
 80002e0:	40010c00 	.word	0x40010c00
 80002e4:	200019dc 	.word	0x200019dc
 80002e8:	40020008 	.word	0x40020008

080002ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b082      	sub	sp, #8
 80002f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002f2:	4b0c      	ldr	r3, [pc, #48]	; (8000324 <MX_DMA_Init+0x38>)
 80002f4:	695b      	ldr	r3, [r3, #20]
 80002f6:	4a0b      	ldr	r2, [pc, #44]	; (8000324 <MX_DMA_Init+0x38>)
 80002f8:	f043 0301 	orr.w	r3, r3, #1
 80002fc:	6153      	str	r3, [r2, #20]
 80002fe:	4b09      	ldr	r3, [pc, #36]	; (8000324 <MX_DMA_Init+0x38>)
 8000300:	695b      	ldr	r3, [r3, #20]
 8000302:	f003 0301 	and.w	r3, r3, #1
 8000306:	607b      	str	r3, [r7, #4]
 8000308:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800030a:	2200      	movs	r2, #0
 800030c:	2100      	movs	r1, #0
 800030e:	200b      	movs	r0, #11
 8000310:	f001 fb33 	bl	800197a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000314:	200b      	movs	r0, #11
 8000316:	f001 fb4c 	bl	80019b2 <HAL_NVIC_EnableIRQ>

}
 800031a:	bf00      	nop
 800031c:	3708      	adds	r7, #8
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	40021000 	.word	0x40021000

08000328 <HAL_GPIO_EXTI_Callback>:

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0
 800032e:	4603      	mov	r3, r0
 8000330:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 8000332:	88fb      	ldrh	r3, [r7, #6]
 8000334:	2b10      	cmp	r3, #16
 8000336:	d012      	beq.n	800035e <HAL_GPIO_EXTI_Callback+0x36>
 8000338:	2b10      	cmp	r3, #16
 800033a:	dc02      	bgt.n	8000342 <HAL_GPIO_EXTI_Callback+0x1a>
 800033c:	2b08      	cmp	r3, #8
 800033e:	d005      	beq.n	800034c <HAL_GPIO_EXTI_Callback+0x24>
	case GPIO_PIN_6:
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); //PC13 Led
		buttom_flag = 4;
		break;
	}
}
 8000340:	e028      	b.n	8000394 <HAL_GPIO_EXTI_Callback+0x6c>
	switch (GPIO_Pin) {
 8000342:	2b20      	cmp	r3, #32
 8000344:	d014      	beq.n	8000370 <HAL_GPIO_EXTI_Callback+0x48>
 8000346:	2b40      	cmp	r3, #64	; 0x40
 8000348:	d01b      	beq.n	8000382 <HAL_GPIO_EXTI_Callback+0x5a>
}
 800034a:	e023      	b.n	8000394 <HAL_GPIO_EXTI_Callback+0x6c>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); //PC13 Led
 800034c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000350:	4812      	ldr	r0, [pc, #72]	; (800039c <HAL_GPIO_EXTI_Callback+0x74>)
 8000352:	f001 fea9 	bl	80020a8 <HAL_GPIO_TogglePin>
		buttom_flag = 1;
 8000356:	4b12      	ldr	r3, [pc, #72]	; (80003a0 <HAL_GPIO_EXTI_Callback+0x78>)
 8000358:	2201      	movs	r2, #1
 800035a:	601a      	str	r2, [r3, #0]
		break;
 800035c:	e01a      	b.n	8000394 <HAL_GPIO_EXTI_Callback+0x6c>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); //PC13 Led
 800035e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000362:	480e      	ldr	r0, [pc, #56]	; (800039c <HAL_GPIO_EXTI_Callback+0x74>)
 8000364:	f001 fea0 	bl	80020a8 <HAL_GPIO_TogglePin>
		buttom_flag = 2;
 8000368:	4b0d      	ldr	r3, [pc, #52]	; (80003a0 <HAL_GPIO_EXTI_Callback+0x78>)
 800036a:	2202      	movs	r2, #2
 800036c:	601a      	str	r2, [r3, #0]
		break;
 800036e:	e011      	b.n	8000394 <HAL_GPIO_EXTI_Callback+0x6c>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); //PC13 Led
 8000370:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000374:	4809      	ldr	r0, [pc, #36]	; (800039c <HAL_GPIO_EXTI_Callback+0x74>)
 8000376:	f001 fe97 	bl	80020a8 <HAL_GPIO_TogglePin>
		buttom_flag = 3;
 800037a:	4b09      	ldr	r3, [pc, #36]	; (80003a0 <HAL_GPIO_EXTI_Callback+0x78>)
 800037c:	2203      	movs	r2, #3
 800037e:	601a      	str	r2, [r3, #0]
		break;
 8000380:	e008      	b.n	8000394 <HAL_GPIO_EXTI_Callback+0x6c>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); //PC13 Led
 8000382:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000386:	4805      	ldr	r0, [pc, #20]	; (800039c <HAL_GPIO_EXTI_Callback+0x74>)
 8000388:	f001 fe8e 	bl	80020a8 <HAL_GPIO_TogglePin>
		buttom_flag = 4;
 800038c:	4b04      	ldr	r3, [pc, #16]	; (80003a0 <HAL_GPIO_EXTI_Callback+0x78>)
 800038e:	2204      	movs	r2, #4
 8000390:	601a      	str	r2, [r3, #0]
		break;
 8000392:	bf00      	nop
}
 8000394:	bf00      	nop
 8000396:	3708      	adds	r7, #8
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}
 800039c:	40011000 	.word	0x40011000
 80003a0:	20000094 	.word	0x20000094

080003a4 <zheng_zhuan>:

void zheng_zhuan(void) {
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MC_1_GPIO_Port, MC_1_Pin, GPIO_PIN_RESET);
 80003a8:	2200      	movs	r2, #0
 80003aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003ae:	4805      	ldr	r0, [pc, #20]	; (80003c4 <zheng_zhuan+0x20>)
 80003b0:	f001 fe62 	bl	8002078 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MC_2_GPIO_Port, MC_2_Pin, GPIO_PIN_SET);
 80003b4:	2201      	movs	r2, #1
 80003b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003ba:	4802      	ldr	r0, [pc, #8]	; (80003c4 <zheng_zhuan+0x20>)
 80003bc:	f001 fe5c 	bl	8002078 <HAL_GPIO_WritePin>
}
 80003c0:	bf00      	nop
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	40010800 	.word	0x40010800

080003c8 <fan_zhuan>:
void fan_zhuan(void) {
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MC_1_GPIO_Port, MC_1_Pin, GPIO_PIN_SET);
 80003cc:	2201      	movs	r2, #1
 80003ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003d2:	4805      	ldr	r0, [pc, #20]	; (80003e8 <fan_zhuan+0x20>)
 80003d4:	f001 fe50 	bl	8002078 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MC_2_GPIO_Port, MC_2_Pin, GPIO_PIN_RESET);
 80003d8:	2200      	movs	r2, #0
 80003da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003de:	4802      	ldr	r0, [pc, #8]	; (80003e8 <fan_zhuan+0x20>)
 80003e0:	f001 fe4a 	bl	8002078 <HAL_GPIO_WritePin>
}
 80003e4:	bf00      	nop
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	40010800 	.word	0x40010800

080003ec <stop_motor>:
void stop_motor(void) {
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MC_1_GPIO_Port, MC_1_Pin, GPIO_PIN_RESET);
 80003f0:	2200      	movs	r2, #0
 80003f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003f6:	4808      	ldr	r0, [pc, #32]	; (8000418 <stop_motor+0x2c>)
 80003f8:	f001 fe3e 	bl	8002078 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MC_2_GPIO_Port, MC_2_Pin, GPIO_PIN_RESET);
 80003fc:	2200      	movs	r2, #0
 80003fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000402:	4805      	ldr	r0, [pc, #20]	; (8000418 <stop_motor+0x2c>)
 8000404:	f001 fe38 	bl	8002078 <HAL_GPIO_WritePin>
	user_pwm_setvalue_1(0);
 8000408:	2000      	movs	r0, #0
 800040a:	f000 fceb 	bl	8000de4 <user_pwm_setvalue_1>
	user_pwm_setvalue_2(0);
 800040e:	2000      	movs	r0, #0
 8000410:	f000 fd06 	bl	8000e20 <user_pwm_setvalue_2>
}
 8000414:	bf00      	nop
 8000416:	bd80      	pop	{r7, pc}
 8000418:	40010800 	.word	0x40010800

0800041c <turn_on_motor>:
	HAL_GPIO_WritePin(MC_1_GPIO_Port, MC_1_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(MC_2_GPIO_Port, MC_2_Pin, GPIO_PIN_SET);
	user_pwm_setvalue_1(0);
	user_pwm_setvalue_2(0);
}
void turn_on_motor(int slow_time, int time, int slow_pwm, int pwm) {
 800041c:	b580      	push	{r7, lr}
 800041e:	b086      	sub	sp, #24
 8000420:	af02      	add	r7, sp, #8
 8000422:	60f8      	str	r0, [r7, #12]
 8000424:	60b9      	str	r1, [r7, #8]
 8000426:	607a      	str	r2, [r7, #4]
 8000428:	603b      	str	r3, [r7, #0]
	zheng_zhuan();
 800042a:	f7ff ffbb 	bl	80003a4 <zheng_zhuan>
	smoothPWM(1, 0, slow_pwm, 10, slow_time);
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	9300      	str	r3, [sp, #0]
 8000432:	230a      	movs	r3, #10
 8000434:	687a      	ldr	r2, [r7, #4]
 8000436:	2100      	movs	r1, #0
 8000438:	2001      	movs	r0, #1
 800043a:	f000 f847 	bl	80004cc <smoothPWM>
	//user_pwm_setvalue_1(slow_pwm);
	user_pwm_setvalue_1(pwm);
 800043e:	683b      	ldr	r3, [r7, #0]
 8000440:	b29b      	uxth	r3, r3
 8000442:	4618      	mov	r0, r3
 8000444:	f000 fcce 	bl	8000de4 <user_pwm_setvalue_1>
	osDelay(time);
 8000448:	68bb      	ldr	r3, [r7, #8]
 800044a:	4618      	mov	r0, r3
 800044c:	f003 f9be 	bl	80037cc <osDelay>
	smoothPWM(1, slow_pwm, 0, 10, slow_time);
 8000450:	68fb      	ldr	r3, [r7, #12]
 8000452:	9300      	str	r3, [sp, #0]
 8000454:	230a      	movs	r3, #10
 8000456:	2200      	movs	r2, #0
 8000458:	6879      	ldr	r1, [r7, #4]
 800045a:	2001      	movs	r0, #1
 800045c:	f000 f836 	bl	80004cc <smoothPWM>
	//user_pwm_setvalue_1(slow_pwm);
	osDelay(slow_time);
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	4618      	mov	r0, r3
 8000464:	f003 f9b2 	bl	80037cc <osDelay>
	stop_motor();
 8000468:	f7ff ffc0 	bl	80003ec <stop_motor>

}
 800046c:	bf00      	nop
 800046e:	3710      	adds	r7, #16
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}

08000474 <turn_off_motor>:

void turn_off_motor(int slow_time, int time, int slow_pwm, int pwm) {
 8000474:	b580      	push	{r7, lr}
 8000476:	b086      	sub	sp, #24
 8000478:	af02      	add	r7, sp, #8
 800047a:	60f8      	str	r0, [r7, #12]
 800047c:	60b9      	str	r1, [r7, #8]
 800047e:	607a      	str	r2, [r7, #4]
 8000480:	603b      	str	r3, [r7, #0]
	fan_zhuan();
 8000482:	f7ff ffa1 	bl	80003c8 <fan_zhuan>
	smoothPWM(2, 0, slow_pwm, 10, slow_time);
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	9300      	str	r3, [sp, #0]
 800048a:	230a      	movs	r3, #10
 800048c:	687a      	ldr	r2, [r7, #4]
 800048e:	2100      	movs	r1, #0
 8000490:	2002      	movs	r0, #2
 8000492:	f000 f81b 	bl	80004cc <smoothPWM>
	//user_pwm_setvalue_2(slow_pwm);
	user_pwm_setvalue_2(pwm);
 8000496:	683b      	ldr	r3, [r7, #0]
 8000498:	b29b      	uxth	r3, r3
 800049a:	4618      	mov	r0, r3
 800049c:	f000 fcc0 	bl	8000e20 <user_pwm_setvalue_2>
	osDelay(time);
 80004a0:	68bb      	ldr	r3, [r7, #8]
 80004a2:	4618      	mov	r0, r3
 80004a4:	f003 f992 	bl	80037cc <osDelay>
	smoothPWM(2, slow_pwm, 0, 10, slow_time);
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	9300      	str	r3, [sp, #0]
 80004ac:	230a      	movs	r3, #10
 80004ae:	2200      	movs	r2, #0
 80004b0:	6879      	ldr	r1, [r7, #4]
 80004b2:	2002      	movs	r0, #2
 80004b4:	f000 f80a 	bl	80004cc <smoothPWM>
	//user_pwm_setvalue_2(slow_pwm);
	osDelay(slow_time);
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	4618      	mov	r0, r3
 80004bc:	f003 f986 	bl	80037cc <osDelay>
	stop_motor();
 80004c0:	f7ff ff94 	bl	80003ec <stop_motor>

}
 80004c4:	bf00      	nop
 80004c6:	3710      	adds	r7, #16
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}

080004cc <smoothPWM>:

void smoothPWM(int channel, int start_val, int end_val, int step_size,
		int step_time) {
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	60f8      	str	r0, [r7, #12]
 80004d4:	60b9      	str	r1, [r7, #8]
 80004d6:	607a      	str	r2, [r7, #4]
 80004d8:	603b      	str	r3, [r7, #0]
	switch (channel) {
 80004da:	68fb      	ldr	r3, [r7, #12]
 80004dc:	2b01      	cmp	r3, #1
 80004de:	d002      	beq.n	80004e6 <smoothPWM+0x1a>
 80004e0:	2b02      	cmp	r3, #2
 80004e2:	d029      	beq.n	8000538 <smoothPWM+0x6c>
				start_val = start_val - step_size;
			}
		}
		break;
	default:
		break;
 80004e4:	e051      	b.n	800058a <smoothPWM+0xbe>
		if (start_val < end_val) {
 80004e6:	68ba      	ldr	r2, [r7, #8]
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	429a      	cmp	r2, r3
 80004ec:	da1f      	bge.n	800052e <smoothPWM+0x62>
			while (start_val <= end_val) {
 80004ee:	e00c      	b.n	800050a <smoothPWM+0x3e>
				user_pwm_setvalue_1(start_val);
 80004f0:	68bb      	ldr	r3, [r7, #8]
 80004f2:	b29b      	uxth	r3, r3
 80004f4:	4618      	mov	r0, r3
 80004f6:	f000 fc75 	bl	8000de4 <user_pwm_setvalue_1>
				osDelay(step_time);
 80004fa:	69bb      	ldr	r3, [r7, #24]
 80004fc:	4618      	mov	r0, r3
 80004fe:	f003 f965 	bl	80037cc <osDelay>
				start_val = start_val + step_size;
 8000502:	68ba      	ldr	r2, [r7, #8]
 8000504:	683b      	ldr	r3, [r7, #0]
 8000506:	4413      	add	r3, r2
 8000508:	60bb      	str	r3, [r7, #8]
			while (start_val <= end_val) {
 800050a:	68ba      	ldr	r2, [r7, #8]
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	429a      	cmp	r2, r3
 8000510:	ddee      	ble.n	80004f0 <smoothPWM+0x24>
		break;
 8000512:	e03a      	b.n	800058a <smoothPWM+0xbe>
				user_pwm_setvalue_1(start_val);
 8000514:	68bb      	ldr	r3, [r7, #8]
 8000516:	b29b      	uxth	r3, r3
 8000518:	4618      	mov	r0, r3
 800051a:	f000 fc63 	bl	8000de4 <user_pwm_setvalue_1>
				osDelay(step_time);
 800051e:	69bb      	ldr	r3, [r7, #24]
 8000520:	4618      	mov	r0, r3
 8000522:	f003 f953 	bl	80037cc <osDelay>
				start_val = start_val - step_size;
 8000526:	68ba      	ldr	r2, [r7, #8]
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	1ad3      	subs	r3, r2, r3
 800052c:	60bb      	str	r3, [r7, #8]
			while (start_val >= end_val) {
 800052e:	68ba      	ldr	r2, [r7, #8]
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	429a      	cmp	r2, r3
 8000534:	daee      	bge.n	8000514 <smoothPWM+0x48>
		break;
 8000536:	e028      	b.n	800058a <smoothPWM+0xbe>
		if (start_val < end_val) {
 8000538:	68ba      	ldr	r2, [r7, #8]
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	429a      	cmp	r2, r3
 800053e:	da1f      	bge.n	8000580 <smoothPWM+0xb4>
			while (start_val <= end_val) {
 8000540:	e00c      	b.n	800055c <smoothPWM+0x90>
				user_pwm_setvalue_2(start_val);
 8000542:	68bb      	ldr	r3, [r7, #8]
 8000544:	b29b      	uxth	r3, r3
 8000546:	4618      	mov	r0, r3
 8000548:	f000 fc6a 	bl	8000e20 <user_pwm_setvalue_2>
				osDelay(step_time);
 800054c:	69bb      	ldr	r3, [r7, #24]
 800054e:	4618      	mov	r0, r3
 8000550:	f003 f93c 	bl	80037cc <osDelay>
				start_val = start_val + step_size;
 8000554:	68ba      	ldr	r2, [r7, #8]
 8000556:	683b      	ldr	r3, [r7, #0]
 8000558:	4413      	add	r3, r2
 800055a:	60bb      	str	r3, [r7, #8]
			while (start_val <= end_val) {
 800055c:	68ba      	ldr	r2, [r7, #8]
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	429a      	cmp	r2, r3
 8000562:	ddee      	ble.n	8000542 <smoothPWM+0x76>
		break;
 8000564:	e010      	b.n	8000588 <smoothPWM+0xbc>
				user_pwm_setvalue_2(start_val);
 8000566:	68bb      	ldr	r3, [r7, #8]
 8000568:	b29b      	uxth	r3, r3
 800056a:	4618      	mov	r0, r3
 800056c:	f000 fc58 	bl	8000e20 <user_pwm_setvalue_2>
				osDelay(step_time);
 8000570:	69bb      	ldr	r3, [r7, #24]
 8000572:	4618      	mov	r0, r3
 8000574:	f003 f92a 	bl	80037cc <osDelay>
				start_val = start_val - step_size;
 8000578:	68ba      	ldr	r2, [r7, #8]
 800057a:	683b      	ldr	r3, [r7, #0]
 800057c:	1ad3      	subs	r3, r2, r3
 800057e:	60bb      	str	r3, [r7, #8]
			while (start_val >= end_val) {
 8000580:	68ba      	ldr	r2, [r7, #8]
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	429a      	cmp	r2, r3
 8000586:	daee      	bge.n	8000566 <smoothPWM+0x9a>
		break;
 8000588:	bf00      	nop
	}
}
 800058a:	bf00      	nop
 800058c:	3710      	adds	r7, #16
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
	...

08000594 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	stop_motor();
 8000598:	f7ff ff28 	bl	80003ec <stop_motor>
	printf("Helloworld!\n");
 800059c:	480a      	ldr	r0, [pc, #40]	; (80005c8 <MX_FREERTOS_Init+0x34>)
 800059e:	f005 fd4f 	bl	8006040 <puts>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005a2:	4a0a      	ldr	r2, [pc, #40]	; (80005cc <MX_FREERTOS_Init+0x38>)
 80005a4:	2100      	movs	r1, #0
 80005a6:	480a      	ldr	r0, [pc, #40]	; (80005d0 <MX_FREERTOS_Init+0x3c>)
 80005a8:	f003 f866 	bl	8003678 <osThreadNew>
 80005ac:	4602      	mov	r2, r0
 80005ae:	4b09      	ldr	r3, [pc, #36]	; (80005d4 <MX_FREERTOS_Init+0x40>)
 80005b0:	601a      	str	r2, [r3, #0]

  /* creation of myTaskoutput */
  myTaskoutputHandle = osThreadNew(StartTask02, NULL, &myTaskoutput_attributes);
 80005b2:	4a09      	ldr	r2, [pc, #36]	; (80005d8 <MX_FREERTOS_Init+0x44>)
 80005b4:	2100      	movs	r1, #0
 80005b6:	4809      	ldr	r0, [pc, #36]	; (80005dc <MX_FREERTOS_Init+0x48>)
 80005b8:	f003 f85e 	bl	8003678 <osThreadNew>
 80005bc:	4602      	mov	r2, r0
 80005be:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <MX_FREERTOS_Init+0x4c>)
 80005c0:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	08006e30 	.word	0x08006e30
 80005cc:	08006e84 	.word	0x08006e84
 80005d0:	080005e5 	.word	0x080005e5
 80005d4:	20001a20 	.word	0x20001a20
 80005d8:	08006ea8 	.word	0x08006ea8
 80005dc:	08000681 	.word	0x08000681
 80005e0:	20001a24 	.word	0x20001a24

080005e4 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	/* Infinite loop */
	for (;;) {

		if (buttom_flag == 1) { //按下1按鈕
 80005ec:	4b1f      	ldr	r3, [pc, #124]	; (800066c <StartDefaultTask+0x88>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	2b01      	cmp	r3, #1
 80005f2:	d113      	bne.n	800061c <StartDefaultTask+0x38>
			 * 第二個數值時間					預設5000 = 5秒
			 * 第三個緩請動最大輸出值			預設500
			 * 第四個正常常模式下功率 			預設100%
			 */
			//turn_on_motor(50, 5000, 500, 1000);
			turn_on_motor(real_adc1 / 50, 5000, real_adc1, 2000);
 80005f4:	4b1e      	ldr	r3, [pc, #120]	; (8000670 <StartDefaultTask+0x8c>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a1e      	ldr	r2, [pc, #120]	; (8000674 <StartDefaultTask+0x90>)
 80005fa:	fba2 2303 	umull	r2, r3, r2, r3
 80005fe:	091b      	lsrs	r3, r3, #4
 8000600:	4618      	mov	r0, r3
 8000602:	4b1b      	ldr	r3, [pc, #108]	; (8000670 <StartDefaultTask+0x8c>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	461a      	mov	r2, r3
 8000608:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800060c:	f241 3188 	movw	r1, #5000	; 0x1388
 8000610:	f7ff ff04 	bl	800041c <turn_on_motor>
			buttom_flag = 0;
 8000614:	4b15      	ldr	r3, [pc, #84]	; (800066c <StartDefaultTask+0x88>)
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	e022      	b.n	8000662 <StartDefaultTask+0x7e>
		} else if (buttom_flag == 2) { //按下2按鈕
 800061c:	4b13      	ldr	r3, [pc, #76]	; (800066c <StartDefaultTask+0x88>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	2b02      	cmp	r3, #2
 8000622:	d113      	bne.n	800064c <StartDefaultTask+0x68>
			 * 第二個數值時間					預設5000 = 5秒
			 * 第三個緩請動最大輸出值			預設500
			 * 第四個正常常模式下功率 			預設100%
			 */
			//turn_off_motor(50, 5000, 500, 1000);
			turn_off_motor(real_adc1 / 50, 5000, real_adc1, 2000);
 8000624:	4b12      	ldr	r3, [pc, #72]	; (8000670 <StartDefaultTask+0x8c>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a12      	ldr	r2, [pc, #72]	; (8000674 <StartDefaultTask+0x90>)
 800062a:	fba2 2303 	umull	r2, r3, r2, r3
 800062e:	091b      	lsrs	r3, r3, #4
 8000630:	4618      	mov	r0, r3
 8000632:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <StartDefaultTask+0x8c>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	461a      	mov	r2, r3
 8000638:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800063c:	f241 3188 	movw	r1, #5000	; 0x1388
 8000640:	f7ff ff18 	bl	8000474 <turn_off_motor>
			buttom_flag = 0;
 8000644:	4b09      	ldr	r3, [pc, #36]	; (800066c <StartDefaultTask+0x88>)
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	e00a      	b.n	8000662 <StartDefaultTask+0x7e>
		} else if (buttom_flag == 3) { //按鈕3
 800064c:	4b07      	ldr	r3, [pc, #28]	; (800066c <StartDefaultTask+0x88>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	2b03      	cmp	r3, #3
 8000652:	d106      	bne.n	8000662 <StartDefaultTask+0x7e>
			HAL_UART_Transmit(&huart2, "test", sizeof("test"), 1000);
 8000654:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000658:	2205      	movs	r2, #5
 800065a:	4907      	ldr	r1, [pc, #28]	; (8000678 <StartDefaultTask+0x94>)
 800065c:	4807      	ldr	r0, [pc, #28]	; (800067c <StartDefaultTask+0x98>)
 800065e:	f002 fde8 	bl	8003232 <HAL_UART_Transmit>
		} else if (buttom_flag == 4) { //按鈕4

		}
		osDelay(1);
 8000662:	2001      	movs	r0, #1
 8000664:	f003 f8b2 	bl	80037cc <osDelay>
		if (buttom_flag == 1) { //按下1按鈕
 8000668:	e7c0      	b.n	80005ec <StartDefaultTask+0x8>
 800066a:	bf00      	nop
 800066c:	20000094 	.word	0x20000094
 8000670:	20001bc4 	.word	0x20001bc4
 8000674:	51eb851f 	.word	0x51eb851f
 8000678:	08006e3c 	.word	0x08006e3c
 800067c:	20001c08 	.word	0x20001c08

08000680 <StartTask02>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &ADC_Value, 100);
 8000688:	2264      	movs	r2, #100	; 0x64
 800068a:	4925      	ldr	r1, [pc, #148]	; (8000720 <StartTask02+0xa0>)
 800068c:	4825      	ldr	r0, [pc, #148]	; (8000724 <StartTask02+0xa4>)
 800068e:	f000 fdb9 	bl	8001204 <HAL_ADC_Start_DMA>
	/* Infinite loop */
	for (;;) {
		for (i = 0, ad1 = 0, ad2 = 0; i < 100;) {
 8000692:	4b25      	ldr	r3, [pc, #148]	; (8000728 <StartTask02+0xa8>)
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	4b24      	ldr	r3, [pc, #144]	; (800072c <StartTask02+0xac>)
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	4b24      	ldr	r3, [pc, #144]	; (8000730 <StartTask02+0xb0>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	e01c      	b.n	80006e0 <StartTask02+0x60>
			ad1 += ADC_Value[i++];
 80006a6:	4b20      	ldr	r3, [pc, #128]	; (8000728 <StartTask02+0xa8>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	1c5a      	adds	r2, r3, #1
 80006ac:	491e      	ldr	r1, [pc, #120]	; (8000728 <StartTask02+0xa8>)
 80006ae:	600a      	str	r2, [r1, #0]
 80006b0:	4a1b      	ldr	r2, [pc, #108]	; (8000720 <StartTask02+0xa0>)
 80006b2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006b6:	4b1d      	ldr	r3, [pc, #116]	; (800072c <StartTask02+0xac>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4413      	add	r3, r2
 80006bc:	4a1b      	ldr	r2, [pc, #108]	; (800072c <StartTask02+0xac>)
 80006be:	6013      	str	r3, [r2, #0]
			ad2 += ADC_Value[i++];
 80006c0:	4b19      	ldr	r3, [pc, #100]	; (8000728 <StartTask02+0xa8>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	1c5a      	adds	r2, r3, #1
 80006c6:	4918      	ldr	r1, [pc, #96]	; (8000728 <StartTask02+0xa8>)
 80006c8:	600a      	str	r2, [r1, #0]
 80006ca:	4a15      	ldr	r2, [pc, #84]	; (8000720 <StartTask02+0xa0>)
 80006cc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006d0:	4b17      	ldr	r3, [pc, #92]	; (8000730 <StartTask02+0xb0>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4413      	add	r3, r2
 80006d6:	4a16      	ldr	r2, [pc, #88]	; (8000730 <StartTask02+0xb0>)
 80006d8:	6013      	str	r3, [r2, #0]
			osDelay(10);
 80006da:	200a      	movs	r0, #10
 80006dc:	f003 f876 	bl	80037cc <osDelay>
		for (i = 0, ad1 = 0, ad2 = 0; i < 100;) {
 80006e0:	4b11      	ldr	r3, [pc, #68]	; (8000728 <StartTask02+0xa8>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	2b63      	cmp	r3, #99	; 0x63
 80006e6:	ddde      	ble.n	80006a6 <StartTask02+0x26>
		}
		real_adc1 = ad1 / 50;
 80006e8:	4b10      	ldr	r3, [pc, #64]	; (800072c <StartTask02+0xac>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a11      	ldr	r2, [pc, #68]	; (8000734 <StartTask02+0xb4>)
 80006ee:	fba2 2303 	umull	r2, r3, r2, r3
 80006f2:	091b      	lsrs	r3, r3, #4
 80006f4:	4a10      	ldr	r2, [pc, #64]	; (8000738 <StartTask02+0xb8>)
 80006f6:	6013      	str	r3, [r2, #0]
		real_adc2 = ad2 / 50;
 80006f8:	4b0d      	ldr	r3, [pc, #52]	; (8000730 <StartTask02+0xb0>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a0d      	ldr	r2, [pc, #52]	; (8000734 <StartTask02+0xb4>)
 80006fe:	fba2 2303 	umull	r2, r3, r2, r3
 8000702:	091b      	lsrs	r3, r3, #4
 8000704:	4a0d      	ldr	r2, [pc, #52]	; (800073c <StartTask02+0xbc>)
 8000706:	6013      	str	r3, [r2, #0]
		printf("ADC:%d\n",real_adc1);
 8000708:	4b0b      	ldr	r3, [pc, #44]	; (8000738 <StartTask02+0xb8>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4619      	mov	r1, r3
 800070e:	480c      	ldr	r0, [pc, #48]	; (8000740 <StartTask02+0xc0>)
 8000710:	f005 fc22 	bl	8005f58 <iprintf>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000714:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000718:	480a      	ldr	r0, [pc, #40]	; (8000744 <StartTask02+0xc4>)
 800071a:	f001 fcc5 	bl	80020a8 <HAL_GPIO_TogglePin>
		for (i = 0, ad1 = 0, ad2 = 0; i < 100;) {
 800071e:	e7b8      	b.n	8000692 <StartTask02+0x12>
 8000720:	20001a2c 	.word	0x20001a2c
 8000724:	200019ac 	.word	0x200019ac
 8000728:	20000090 	.word	0x20000090
 800072c:	20001bbc 	.word	0x20001bbc
 8000730:	20001bc0 	.word	0x20001bc0
 8000734:	51eb851f 	.word	0x51eb851f
 8000738:	20001bc4 	.word	0x20001bc4
 800073c:	20001a28 	.word	0x20001a28
 8000740:	08006e44 	.word	0x08006e44
 8000744:	40011000 	.word	0x40011000

08000748 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b088      	sub	sp, #32
 800074c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074e:	f107 0310 	add.w	r3, r7, #16
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800075c:	4b45      	ldr	r3, [pc, #276]	; (8000874 <MX_GPIO_Init+0x12c>)
 800075e:	699b      	ldr	r3, [r3, #24]
 8000760:	4a44      	ldr	r2, [pc, #272]	; (8000874 <MX_GPIO_Init+0x12c>)
 8000762:	f043 0310 	orr.w	r3, r3, #16
 8000766:	6193      	str	r3, [r2, #24]
 8000768:	4b42      	ldr	r3, [pc, #264]	; (8000874 <MX_GPIO_Init+0x12c>)
 800076a:	699b      	ldr	r3, [r3, #24]
 800076c:	f003 0310 	and.w	r3, r3, #16
 8000770:	60fb      	str	r3, [r7, #12]
 8000772:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000774:	4b3f      	ldr	r3, [pc, #252]	; (8000874 <MX_GPIO_Init+0x12c>)
 8000776:	699b      	ldr	r3, [r3, #24]
 8000778:	4a3e      	ldr	r2, [pc, #248]	; (8000874 <MX_GPIO_Init+0x12c>)
 800077a:	f043 0304 	orr.w	r3, r3, #4
 800077e:	6193      	str	r3, [r2, #24]
 8000780:	4b3c      	ldr	r3, [pc, #240]	; (8000874 <MX_GPIO_Init+0x12c>)
 8000782:	699b      	ldr	r3, [r3, #24]
 8000784:	f003 0304 	and.w	r3, r3, #4
 8000788:	60bb      	str	r3, [r7, #8]
 800078a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078c:	4b39      	ldr	r3, [pc, #228]	; (8000874 <MX_GPIO_Init+0x12c>)
 800078e:	699b      	ldr	r3, [r3, #24]
 8000790:	4a38      	ldr	r2, [pc, #224]	; (8000874 <MX_GPIO_Init+0x12c>)
 8000792:	f043 0308 	orr.w	r3, r3, #8
 8000796:	6193      	str	r3, [r2, #24]
 8000798:	4b36      	ldr	r3, [pc, #216]	; (8000874 <MX_GPIO_Init+0x12c>)
 800079a:	699b      	ldr	r3, [r3, #24]
 800079c:	f003 0308 	and.w	r3, r3, #8
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80007a4:	2200      	movs	r2, #0
 80007a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007aa:	4833      	ldr	r0, [pc, #204]	; (8000878 <MX_GPIO_Init+0x130>)
 80007ac:	f001 fc64 	bl	8002078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MC_4_Pin|MC_3_Pin, GPIO_PIN_RESET);
 80007b0:	2200      	movs	r2, #0
 80007b2:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80007b6:	4831      	ldr	r0, [pc, #196]	; (800087c <MX_GPIO_Init+0x134>)
 80007b8:	f001 fc5e 	bl	8002078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MC_2_Pin|MC_1_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 80007bc:	2200      	movs	r2, #0
 80007be:	f44f 51d8 	mov.w	r1, #6912	; 0x1b00
 80007c2:	482f      	ldr	r0, [pc, #188]	; (8000880 <MX_GPIO_Init+0x138>)
 80007c4:	f001 fc58 	bl	8002078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80007c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ce:	2301      	movs	r3, #1
 80007d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d6:	2302      	movs	r3, #2
 80007d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80007da:	f107 0310 	add.w	r3, r7, #16
 80007de:	4619      	mov	r1, r3
 80007e0:	4825      	ldr	r0, [pc, #148]	; (8000878 <MX_GPIO_Init+0x130>)
 80007e2:	f001 faef 	bl	8001dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = MC_4_Pin|MC_3_Pin;
 80007e6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80007ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ec:	2301      	movs	r3, #1
 80007ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f4:	2302      	movs	r3, #2
 80007f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f8:	f107 0310 	add.w	r3, r7, #16
 80007fc:	4619      	mov	r1, r3
 80007fe:	481f      	ldr	r0, [pc, #124]	; (800087c <MX_GPIO_Init+0x134>)
 8000800:	f001 fae0 	bl	8001dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = MC_2_Pin|MC_1_Pin|LED2_Pin|LED1_Pin;
 8000804:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8000808:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080a:	2301      	movs	r3, #1
 800080c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000812:	2302      	movs	r3, #2
 8000814:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000816:	f107 0310 	add.w	r3, r7, #16
 800081a:	4619      	mov	r1, r3
 800081c:	4818      	ldr	r0, [pc, #96]	; (8000880 <MX_GPIO_Init+0x138>)
 800081e:	f001 fad1 	bl	8001dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BUTTOM1_Pin|BUTTON2_Pin|BUTTON3_Pin|BUTTON4_Pin;
 8000822:	2378      	movs	r3, #120	; 0x78
 8000824:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000826:	4b17      	ldr	r3, [pc, #92]	; (8000884 <MX_GPIO_Init+0x13c>)
 8000828:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800082a:	2302      	movs	r3, #2
 800082c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082e:	f107 0310 	add.w	r3, r7, #16
 8000832:	4619      	mov	r1, r3
 8000834:	4811      	ldr	r0, [pc, #68]	; (800087c <MX_GPIO_Init+0x134>)
 8000836:	f001 fac5 	bl	8001dc4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800083a:	2200      	movs	r2, #0
 800083c:	2100      	movs	r1, #0
 800083e:	2009      	movs	r0, #9
 8000840:	f001 f89b 	bl	800197a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000844:	2009      	movs	r0, #9
 8000846:	f001 f8b4 	bl	80019b2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800084a:	2200      	movs	r2, #0
 800084c:	2100      	movs	r1, #0
 800084e:	200a      	movs	r0, #10
 8000850:	f001 f893 	bl	800197a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000854:	200a      	movs	r0, #10
 8000856:	f001 f8ac 	bl	80019b2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800085a:	2200      	movs	r2, #0
 800085c:	2100      	movs	r1, #0
 800085e:	2017      	movs	r0, #23
 8000860:	f001 f88b 	bl	800197a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000864:	2017      	movs	r0, #23
 8000866:	f001 f8a4 	bl	80019b2 <HAL_NVIC_EnableIRQ>

}
 800086a:	bf00      	nop
 800086c:	3720      	adds	r7, #32
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40021000 	.word	0x40021000
 8000878:	40011000 	.word	0x40011000
 800087c:	40010c00 	.word	0x40010c00
 8000880:	40010800 	.word	0x40010800
 8000884:	10110000 	.word	0x10110000

08000888 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000890:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000894:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000898:	f003 0301 	and.w	r3, r3, #1
 800089c:	2b00      	cmp	r3, #0
 800089e:	d013      	beq.n	80008c8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80008a0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80008a4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80008a8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d00b      	beq.n	80008c8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80008b0:	e000      	b.n	80008b4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80008b2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80008b4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d0f9      	beq.n	80008b2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80008be:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80008c2:	687a      	ldr	r2, [r7, #4]
 80008c4:	b2d2      	uxtb	r2, r2
 80008c6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80008c8:	687b      	ldr	r3, [r7, #4]
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	370c      	adds	r7, #12
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bc80      	pop	{r7}
 80008d2:	4770      	bx	lr

080008d4 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int remote_flag=0;
int _write(int file , char *ptr,int len)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b086      	sub	sp, #24
 80008d8:	af00      	add	r7, sp, #0
 80008da:	60f8      	str	r0, [r7, #12]
 80008dc:	60b9      	str	r1, [r7, #8]
 80008de:	607a      	str	r2, [r7, #4]
    int i = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	617b      	str	r3, [r7, #20]
    for(i = 0;i<len;i++)
 80008e4:	2300      	movs	r3, #0
 80008e6:	617b      	str	r3, [r7, #20]
 80008e8:	e009      	b.n	80008fe <_write+0x2a>
        ITM_SendChar((*ptr++));
 80008ea:	68bb      	ldr	r3, [r7, #8]
 80008ec:	1c5a      	adds	r2, r3, #1
 80008ee:	60ba      	str	r2, [r7, #8]
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	4618      	mov	r0, r3
 80008f4:	f7ff ffc8 	bl	8000888 <ITM_SendChar>
    for(i = 0;i<len;i++)
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	3301      	adds	r3, #1
 80008fc:	617b      	str	r3, [r7, #20]
 80008fe:	697a      	ldr	r2, [r7, #20]
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	429a      	cmp	r2, r3
 8000904:	dbf1      	blt.n	80008ea <_write+0x16>
    return len;
 8000906:	687b      	ldr	r3, [r7, #4]
}
 8000908:	4618      	mov	r0, r3
 800090a:	3718      	adds	r7, #24
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}

08000910 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000914:	f000 fb3c 	bl	8000f90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000918:	f000 f816 	bl	8000948 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800091c:	f7ff ff14 	bl	8000748 <MX_GPIO_Init>
  MX_DMA_Init();
 8000920:	f7ff fce4 	bl	80002ec <MX_DMA_Init>
  MX_ADC1_Init();
 8000924:	f7ff fc14 	bl	8000150 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000928:	f000 f996 	bl	8000c58 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800092c:	f000 fa96 	bl	8000e5c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("testestset\n");
 8000930:	4804      	ldr	r0, [pc, #16]	; (8000944 <main+0x34>)
 8000932:	f005 fb85 	bl	8006040 <puts>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000936:	f002 fe39 	bl	80035ac <osKernelInitialize>
  MX_FREERTOS_Init();
 800093a:	f7ff fe2b 	bl	8000594 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800093e:	f002 fe67 	bl	8003610 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000942:	e7fe      	b.n	8000942 <main+0x32>
 8000944:	08006e4c 	.word	0x08006e4c

08000948 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b094      	sub	sp, #80	; 0x50
 800094c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800094e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000952:	2228      	movs	r2, #40	; 0x28
 8000954:	2100      	movs	r1, #0
 8000956:	4618      	mov	r0, r3
 8000958:	f005 faf5 	bl	8005f46 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800095c:	f107 0314 	add.w	r3, r7, #20
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	60da      	str	r2, [r3, #12]
 800096a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800096c:	1d3b      	adds	r3, r7, #4
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	605a      	str	r2, [r3, #4]
 8000974:	609a      	str	r2, [r3, #8]
 8000976:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000978:	2302      	movs	r3, #2
 800097a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800097c:	2301      	movs	r3, #1
 800097e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000980:	2310      	movs	r3, #16
 8000982:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000984:	2300      	movs	r3, #0
 8000986:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000988:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800098c:	4618      	mov	r0, r3
 800098e:	f001 fbbb 	bl	8002108 <HAL_RCC_OscConfig>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000998:	f000 f826 	bl	80009e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800099c:	230f      	movs	r3, #15
 800099e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009a0:	2300      	movs	r3, #0
 80009a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009a4:	2300      	movs	r3, #0
 80009a6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009a8:	2300      	movs	r3, #0
 80009aa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009ac:	2300      	movs	r3, #0
 80009ae:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	2100      	movs	r1, #0
 80009b6:	4618      	mov	r0, r3
 80009b8:	f001 fe26 	bl	8002608 <HAL_RCC_ClockConfig>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80009c2:	f000 f811 	bl	80009e8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80009c6:	2302      	movs	r3, #2
 80009c8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80009ca:	2300      	movs	r3, #0
 80009cc:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	4618      	mov	r0, r3
 80009d2:	f001 ffb5 	bl	8002940 <HAL_RCCEx_PeriphCLKConfig>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80009dc:	f000 f804 	bl	80009e8 <Error_Handler>
  }
}
 80009e0:	bf00      	nop
 80009e2:	3750      	adds	r7, #80	; 0x50
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bc80      	pop	{r7}
 80009f2:	4770      	bx	lr

080009f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b085      	sub	sp, #20
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009fa:	4b15      	ldr	r3, [pc, #84]	; (8000a50 <HAL_MspInit+0x5c>)
 80009fc:	699b      	ldr	r3, [r3, #24]
 80009fe:	4a14      	ldr	r2, [pc, #80]	; (8000a50 <HAL_MspInit+0x5c>)
 8000a00:	f043 0301 	orr.w	r3, r3, #1
 8000a04:	6193      	str	r3, [r2, #24]
 8000a06:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <HAL_MspInit+0x5c>)
 8000a08:	699b      	ldr	r3, [r3, #24]
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	60bb      	str	r3, [r7, #8]
 8000a10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a12:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <HAL_MspInit+0x5c>)
 8000a14:	69db      	ldr	r3, [r3, #28]
 8000a16:	4a0e      	ldr	r2, [pc, #56]	; (8000a50 <HAL_MspInit+0x5c>)
 8000a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a1c:	61d3      	str	r3, [r2, #28]
 8000a1e:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <HAL_MspInit+0x5c>)
 8000a20:	69db      	ldr	r3, [r3, #28]
 8000a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a2a:	4b0a      	ldr	r3, [pc, #40]	; (8000a54 <HAL_MspInit+0x60>)
 8000a2c:	685b      	ldr	r3, [r3, #4]
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	4a04      	ldr	r2, [pc, #16]	; (8000a54 <HAL_MspInit+0x60>)
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a46:	bf00      	nop
 8000a48:	3714      	adds	r7, #20
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bc80      	pop	{r7}
 8000a4e:	4770      	bx	lr
 8000a50:	40021000 	.word	0x40021000
 8000a54:	40010000 	.word	0x40010000

08000a58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bc80      	pop	{r7}
 8000a62:	4770      	bx	lr

08000a64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <HardFault_Handler+0x4>

08000a6a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a6e:	e7fe      	b.n	8000a6e <MemManage_Handler+0x4>

08000a70 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <BusFault_Handler+0x4>

08000a76 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a7a:	e7fe      	b.n	8000a7a <UsageFault_Handler+0x4>

08000a7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a80:	bf00      	nop
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bc80      	pop	{r7}
 8000a86:	4770      	bx	lr

08000a88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a8c:	f000 fac6 	bl	800101c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000a90:	f004 fa86 	bl	8004fa0 <xTaskGetSchedulerState>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	d001      	beq.n	8000a9e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000a9a:	f004 ffcd 	bl	8005a38 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000aa6:	2008      	movs	r0, #8
 8000aa8:	f001 fb16 	bl	80020d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000ab4:	2010      	movs	r0, #16
 8000ab6:	f001 fb0f 	bl	80020d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
	...

08000ac0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ac4:	4802      	ldr	r0, [pc, #8]	; (8000ad0 <DMA1_Channel1_IRQHandler+0x10>)
 8000ac6:	f001 f849 	bl	8001b5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	200019dc 	.word	0x200019dc

08000ad4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

	//speed_flag=speed_flag+100;
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000ad8:	2020      	movs	r0, #32
 8000ada:	f001 fafd 	bl	80020d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000ade:	2040      	movs	r0, #64	; 0x40
 8000ae0:	f001 fafa 	bl	80020d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b086      	sub	sp, #24
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	60b9      	str	r1, [r7, #8]
 8000af2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af4:	2300      	movs	r3, #0
 8000af6:	617b      	str	r3, [r7, #20]
 8000af8:	e00a      	b.n	8000b10 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000afa:	f3af 8000 	nop.w
 8000afe:	4601      	mov	r1, r0
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	1c5a      	adds	r2, r3, #1
 8000b04:	60ba      	str	r2, [r7, #8]
 8000b06:	b2ca      	uxtb	r2, r1
 8000b08:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	617b      	str	r3, [r7, #20]
 8000b10:	697a      	ldr	r2, [r7, #20]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	dbf0      	blt.n	8000afa <_read+0x12>
	}

return len;
 8000b18:	687b      	ldr	r3, [r7, #4]
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3718      	adds	r7, #24
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000b22:	b480      	push	{r7}
 8000b24:	b083      	sub	sp, #12
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	6078      	str	r0, [r7, #4]
	return -1;
 8000b2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	370c      	adds	r7, #12
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bc80      	pop	{r7}
 8000b36:	4770      	bx	lr

08000b38 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b48:	605a      	str	r2, [r3, #4]
	return 0;
 8000b4a:	2300      	movs	r3, #0
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bc80      	pop	{r7}
 8000b54:	4770      	bx	lr

08000b56 <_isatty>:

int _isatty(int file)
{
 8000b56:	b480      	push	{r7}
 8000b58:	b083      	sub	sp, #12
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
	return 1;
 8000b5e:	2301      	movs	r3, #1
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bc80      	pop	{r7}
 8000b68:	4770      	bx	lr

08000b6a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	b085      	sub	sp, #20
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	60f8      	str	r0, [r7, #12]
 8000b72:	60b9      	str	r1, [r7, #8]
 8000b74:	607a      	str	r2, [r7, #4]
	return 0;
 8000b76:	2300      	movs	r3, #0
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3714      	adds	r7, #20
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bc80      	pop	{r7}
 8000b80:	4770      	bx	lr
	...

08000b84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b8c:	4a14      	ldr	r2, [pc, #80]	; (8000be0 <_sbrk+0x5c>)
 8000b8e:	4b15      	ldr	r3, [pc, #84]	; (8000be4 <_sbrk+0x60>)
 8000b90:	1ad3      	subs	r3, r2, r3
 8000b92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b98:	4b13      	ldr	r3, [pc, #76]	; (8000be8 <_sbrk+0x64>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d102      	bne.n	8000ba6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ba0:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <_sbrk+0x64>)
 8000ba2:	4a12      	ldr	r2, [pc, #72]	; (8000bec <_sbrk+0x68>)
 8000ba4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ba6:	4b10      	ldr	r3, [pc, #64]	; (8000be8 <_sbrk+0x64>)
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4413      	add	r3, r2
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	d207      	bcs.n	8000bc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bb4:	f005 f992 	bl	8005edc <__errno>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	230c      	movs	r3, #12
 8000bbc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000bbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bc2:	e009      	b.n	8000bd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bc4:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <_sbrk+0x64>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bca:	4b07      	ldr	r3, [pc, #28]	; (8000be8 <_sbrk+0x64>)
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	4a05      	ldr	r2, [pc, #20]	; (8000be8 <_sbrk+0x64>)
 8000bd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bd6:	68fb      	ldr	r3, [r7, #12]
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3718      	adds	r7, #24
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	20005000 	.word	0x20005000
 8000be4:	00000400 	.word	0x00000400
 8000be8:	20000098 	.word	0x20000098
 8000bec:	20001c90 	.word	0x20001c90

08000bf0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000bf4:	4b15      	ldr	r3, [pc, #84]	; (8000c4c <SystemInit+0x5c>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a14      	ldr	r2, [pc, #80]	; (8000c4c <SystemInit+0x5c>)
 8000bfa:	f043 0301 	orr.w	r3, r3, #1
 8000bfe:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000c00:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <SystemInit+0x5c>)
 8000c02:	685a      	ldr	r2, [r3, #4]
 8000c04:	4911      	ldr	r1, [pc, #68]	; (8000c4c <SystemInit+0x5c>)
 8000c06:	4b12      	ldr	r3, [pc, #72]	; (8000c50 <SystemInit+0x60>)
 8000c08:	4013      	ands	r3, r2
 8000c0a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000c0c:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <SystemInit+0x5c>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a0e      	ldr	r2, [pc, #56]	; (8000c4c <SystemInit+0x5c>)
 8000c12:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000c16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c1a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c1c:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <SystemInit+0x5c>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a0a      	ldr	r2, [pc, #40]	; (8000c4c <SystemInit+0x5c>)
 8000c22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c26:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000c28:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <SystemInit+0x5c>)
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	4a07      	ldr	r2, [pc, #28]	; (8000c4c <SystemInit+0x5c>)
 8000c2e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000c32:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000c34:	4b05      	ldr	r3, [pc, #20]	; (8000c4c <SystemInit+0x5c>)
 8000c36:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000c3a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000c3c:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <SystemInit+0x64>)
 8000c3e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c42:	609a      	str	r2, [r3, #8]
#endif 
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bc80      	pop	{r7}
 8000c4a:	4770      	bx	lr
 8000c4c:	40021000 	.word	0x40021000
 8000c50:	f8ff0000 	.word	0xf8ff0000
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08a      	sub	sp, #40	; 0x28
 8000c5c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c5e:	f107 0320 	add.w	r3, r7, #32
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c68:	1d3b      	adds	r3, r7, #4
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	605a      	str	r2, [r3, #4]
 8000c70:	609a      	str	r2, [r3, #8]
 8000c72:	60da      	str	r2, [r3, #12]
 8000c74:	611a      	str	r2, [r3, #16]
 8000c76:	615a      	str	r2, [r3, #20]
 8000c78:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8000c7a:	4b28      	ldr	r3, [pc, #160]	; (8000d1c <MX_TIM2_Init+0xc4>)
 8000c7c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c80:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c82:	4b26      	ldr	r3, [pc, #152]	; (8000d1c <MX_TIM2_Init+0xc4>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c88:	4b24      	ldr	r3, [pc, #144]	; (8000d1c <MX_TIM2_Init+0xc4>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8000c8e:	4b23      	ldr	r3, [pc, #140]	; (8000d1c <MX_TIM2_Init+0xc4>)
 8000c90:	f242 720f 	movw	r2, #9999	; 0x270f
 8000c94:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c96:	4b21      	ldr	r3, [pc, #132]	; (8000d1c <MX_TIM2_Init+0xc4>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c9c:	4b1f      	ldr	r3, [pc, #124]	; (8000d1c <MX_TIM2_Init+0xc4>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ca2:	481e      	ldr	r0, [pc, #120]	; (8000d1c <MX_TIM2_Init+0xc4>)
 8000ca4:	f001 ff02 	bl	8002aac <HAL_TIM_PWM_Init>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000cae:	f7ff fe9b 	bl	80009e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cba:	f107 0320 	add.w	r3, r7, #32
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4816      	ldr	r0, [pc, #88]	; (8000d1c <MX_TIM2_Init+0xc4>)
 8000cc2:	f002 fa25 	bl	8003110 <HAL_TIMEx_MasterConfigSynchronization>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000ccc:	f7ff fe8c 	bl	80009e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cd0:	2360      	movs	r3, #96	; 0x60
 8000cd2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ce0:	1d3b      	adds	r3, r7, #4
 8000ce2:	2208      	movs	r2, #8
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	480d      	ldr	r0, [pc, #52]	; (8000d1c <MX_TIM2_Init+0xc4>)
 8000ce8:	f001 ff3e 	bl	8002b68 <HAL_TIM_PWM_ConfigChannel>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000cf2:	f7ff fe79 	bl	80009e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000cf6:	1d3b      	adds	r3, r7, #4
 8000cf8:	220c      	movs	r2, #12
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4807      	ldr	r0, [pc, #28]	; (8000d1c <MX_TIM2_Init+0xc4>)
 8000cfe:	f001 ff33 	bl	8002b68 <HAL_TIM_PWM_ConfigChannel>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000d08:	f7ff fe6e 	bl	80009e8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8000d0c:	4803      	ldr	r0, [pc, #12]	; (8000d1c <MX_TIM2_Init+0xc4>)
 8000d0e:	f000 f823 	bl	8000d58 <HAL_TIM_MspPostInit>

}
 8000d12:	bf00      	nop
 8000d14:	3728      	adds	r7, #40	; 0x28
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20001bc8 	.word	0x20001bc8

08000d20 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d30:	d10b      	bne.n	8000d4a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d32:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <HAL_TIM_PWM_MspInit+0x34>)
 8000d34:	69db      	ldr	r3, [r3, #28]
 8000d36:	4a07      	ldr	r2, [pc, #28]	; (8000d54 <HAL_TIM_PWM_MspInit+0x34>)
 8000d38:	f043 0301 	orr.w	r3, r3, #1
 8000d3c:	61d3      	str	r3, [r2, #28]
 8000d3e:	4b05      	ldr	r3, [pc, #20]	; (8000d54 <HAL_TIM_PWM_MspInit+0x34>)
 8000d40:	69db      	ldr	r3, [r3, #28]
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000d4a:	bf00      	nop
 8000d4c:	3714      	adds	r7, #20
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bc80      	pop	{r7}
 8000d52:	4770      	bx	lr
 8000d54:	40021000 	.word	0x40021000

08000d58 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b088      	sub	sp, #32
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d60:	f107 030c 	add.w	r3, r7, #12
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d76:	d12a      	bne.n	8000dce <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d78:	4b17      	ldr	r3, [pc, #92]	; (8000dd8 <HAL_TIM_MspPostInit+0x80>)
 8000d7a:	699b      	ldr	r3, [r3, #24]
 8000d7c:	4a16      	ldr	r2, [pc, #88]	; (8000dd8 <HAL_TIM_MspPostInit+0x80>)
 8000d7e:	f043 0308 	orr.w	r3, r3, #8
 8000d82:	6193      	str	r3, [r2, #24]
 8000d84:	4b14      	ldr	r3, [pc, #80]	; (8000dd8 <HAL_TIM_MspPostInit+0x80>)
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	f003 0308 	and.w	r3, r3, #8
 8000d8c:	60bb      	str	r3, [r7, #8]
 8000d8e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = PWM1_Pin|PWM2_Pin;
 8000d90:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d94:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d96:	2302      	movs	r3, #2
 8000d98:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d9e:	f107 030c 	add.w	r3, r7, #12
 8000da2:	4619      	mov	r1, r3
 8000da4:	480d      	ldr	r0, [pc, #52]	; (8000ddc <HAL_TIM_MspPostInit+0x84>)
 8000da6:	f001 f80d 	bl	8001dc4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8000daa:	4b0d      	ldr	r3, [pc, #52]	; (8000de0 <HAL_TIM_MspPostInit+0x88>)
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	61fb      	str	r3, [r7, #28]
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000db6:	61fb      	str	r3, [r7, #28]
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000dbe:	61fb      	str	r3, [r7, #28]
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dc6:	61fb      	str	r3, [r7, #28]
 8000dc8:	4a05      	ldr	r2, [pc, #20]	; (8000de0 <HAL_TIM_MspPostInit+0x88>)
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000dce:	bf00      	nop
 8000dd0:	3720      	adds	r7, #32
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40021000 	.word	0x40021000
 8000ddc:	40010c00 	.word	0x40010c00
 8000de0:	40010000 	.word	0x40010000

08000de4 <user_pwm_setvalue_1>:

/* USER CODE BEGIN 1 */


void user_pwm_setvalue_1(uint16_t value)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b08a      	sub	sp, #40	; 0x28
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	80fb      	strh	r3, [r7, #6]
    TIM_OC_InitTypeDef sConfigOC;

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dee:	2360      	movs	r3, #96	; 0x60
 8000df0:	60fb      	str	r3, [r7, #12]
    sConfigOC.Pulse = value;
 8000df2:	88fb      	ldrh	r3, [r7, #6]
 8000df4:	613b      	str	r3, [r7, #16]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000df6:	2300      	movs	r3, #0
 8000df8:	617b      	str	r3, [r7, #20]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61fb      	str	r3, [r7, #28]
    HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3);
 8000dfe:	f107 030c 	add.w	r3, r7, #12
 8000e02:	2208      	movs	r2, #8
 8000e04:	4619      	mov	r1, r3
 8000e06:	4805      	ldr	r0, [pc, #20]	; (8000e1c <user_pwm_setvalue_1+0x38>)
 8000e08:	f001 feae 	bl	8002b68 <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000e0c:	2108      	movs	r1, #8
 8000e0e:	4803      	ldr	r0, [pc, #12]	; (8000e1c <user_pwm_setvalue_1+0x38>)
 8000e10:	f001 fe78 	bl	8002b04 <HAL_TIM_PWM_Start>
    //HAL_TIM_MspPostInit(&htim2);
}
 8000e14:	bf00      	nop
 8000e16:	3728      	adds	r7, #40	; 0x28
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	20001bc8 	.word	0x20001bc8

08000e20 <user_pwm_setvalue_2>:
void user_pwm_setvalue_2(uint16_t value)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08a      	sub	sp, #40	; 0x28
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	80fb      	strh	r3, [r7, #6]
    TIM_OC_InitTypeDef sConfigOC;

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e2a:	2360      	movs	r3, #96	; 0x60
 8000e2c:	60fb      	str	r3, [r7, #12]
    sConfigOC.Pulse = value;
 8000e2e:	88fb      	ldrh	r3, [r7, #6]
 8000e30:	613b      	str	r3, [r7, #16]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e32:	2300      	movs	r3, #0
 8000e34:	617b      	str	r3, [r7, #20]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e36:	2300      	movs	r3, #0
 8000e38:	61fb      	str	r3, [r7, #28]
    HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4);
 8000e3a:	f107 030c 	add.w	r3, r7, #12
 8000e3e:	220c      	movs	r2, #12
 8000e40:	4619      	mov	r1, r3
 8000e42:	4805      	ldr	r0, [pc, #20]	; (8000e58 <user_pwm_setvalue_2+0x38>)
 8000e44:	f001 fe90 	bl	8002b68 <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000e48:	210c      	movs	r1, #12
 8000e4a:	4803      	ldr	r0, [pc, #12]	; (8000e58 <user_pwm_setvalue_2+0x38>)
 8000e4c:	f001 fe5a 	bl	8002b04 <HAL_TIM_PWM_Start>
   // HAL_TIM_MspPostInit(&htim2);
}
 8000e50:	bf00      	nop
 8000e52:	3728      	adds	r7, #40	; 0x28
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	20001bc8 	.word	0x20001bc8

08000e5c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000e60:	4b11      	ldr	r3, [pc, #68]	; (8000ea8 <MX_USART2_UART_Init+0x4c>)
 8000e62:	4a12      	ldr	r2, [pc, #72]	; (8000eac <MX_USART2_UART_Init+0x50>)
 8000e64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e66:	4b10      	ldr	r3, [pc, #64]	; (8000ea8 <MX_USART2_UART_Init+0x4c>)
 8000e68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ea8 <MX_USART2_UART_Init+0x4c>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e74:	4b0c      	ldr	r3, [pc, #48]	; (8000ea8 <MX_USART2_UART_Init+0x4c>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ea8 <MX_USART2_UART_Init+0x4c>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e80:	4b09      	ldr	r3, [pc, #36]	; (8000ea8 <MX_USART2_UART_Init+0x4c>)
 8000e82:	220c      	movs	r2, #12
 8000e84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e86:	4b08      	ldr	r3, [pc, #32]	; (8000ea8 <MX_USART2_UART_Init+0x4c>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e8c:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <MX_USART2_UART_Init+0x4c>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e92:	4805      	ldr	r0, [pc, #20]	; (8000ea8 <MX_USART2_UART_Init+0x4c>)
 8000e94:	f002 f980 	bl	8003198 <HAL_UART_Init>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e9e:	f7ff fda3 	bl	80009e8 <Error_Handler>
  }

}
 8000ea2:	bf00      	nop
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	20001c08 	.word	0x20001c08
 8000eac:	40004400 	.word	0x40004400

08000eb0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b088      	sub	sp, #32
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb8:	f107 0310 	add.w	r3, r7, #16
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a1b      	ldr	r2, [pc, #108]	; (8000f38 <HAL_UART_MspInit+0x88>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d12f      	bne.n	8000f30 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ed0:	4b1a      	ldr	r3, [pc, #104]	; (8000f3c <HAL_UART_MspInit+0x8c>)
 8000ed2:	69db      	ldr	r3, [r3, #28]
 8000ed4:	4a19      	ldr	r2, [pc, #100]	; (8000f3c <HAL_UART_MspInit+0x8c>)
 8000ed6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eda:	61d3      	str	r3, [r2, #28]
 8000edc:	4b17      	ldr	r3, [pc, #92]	; (8000f3c <HAL_UART_MspInit+0x8c>)
 8000ede:	69db      	ldr	r3, [r3, #28]
 8000ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee8:	4b14      	ldr	r3, [pc, #80]	; (8000f3c <HAL_UART_MspInit+0x8c>)
 8000eea:	699b      	ldr	r3, [r3, #24]
 8000eec:	4a13      	ldr	r2, [pc, #76]	; (8000f3c <HAL_UART_MspInit+0x8c>)
 8000eee:	f043 0304 	orr.w	r3, r3, #4
 8000ef2:	6193      	str	r3, [r2, #24]
 8000ef4:	4b11      	ldr	r3, [pc, #68]	; (8000f3c <HAL_UART_MspInit+0x8c>)
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	f003 0304 	and.w	r3, r3, #4
 8000efc:	60bb      	str	r3, [r7, #8]
 8000efe:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f00:	2304      	movs	r3, #4
 8000f02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f04:	2302      	movs	r3, #2
 8000f06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f0c:	f107 0310 	add.w	r3, r7, #16
 8000f10:	4619      	mov	r1, r3
 8000f12:	480b      	ldr	r0, [pc, #44]	; (8000f40 <HAL_UART_MspInit+0x90>)
 8000f14:	f000 ff56 	bl	8001dc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f18:	2308      	movs	r3, #8
 8000f1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f24:	f107 0310 	add.w	r3, r7, #16
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4805      	ldr	r0, [pc, #20]	; (8000f40 <HAL_UART_MspInit+0x90>)
 8000f2c:	f000 ff4a 	bl	8001dc4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000f30:	bf00      	nop
 8000f32:	3720      	adds	r7, #32
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40004400 	.word	0x40004400
 8000f3c:	40021000 	.word	0x40021000
 8000f40:	40010800 	.word	0x40010800

08000f44 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000f44:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000f46:	e003      	b.n	8000f50 <LoopCopyDataInit>

08000f48 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000f48:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000f4a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000f4c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000f4e:	3104      	adds	r1, #4

08000f50 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000f50:	480a      	ldr	r0, [pc, #40]	; (8000f7c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000f52:	4b0b      	ldr	r3, [pc, #44]	; (8000f80 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000f54:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000f56:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000f58:	d3f6      	bcc.n	8000f48 <CopyDataInit>
  ldr r2, =_sbss
 8000f5a:	4a0a      	ldr	r2, [pc, #40]	; (8000f84 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000f5c:	e002      	b.n	8000f64 <LoopFillZerobss>

08000f5e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000f5e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000f60:	f842 3b04 	str.w	r3, [r2], #4

08000f64 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000f64:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000f66:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000f68:	d3f9      	bcc.n	8000f5e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f6a:	f7ff fe41 	bl	8000bf0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f6e:	f004 ffbb 	bl	8005ee8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f72:	f7ff fccd 	bl	8000910 <main>
  bx lr
 8000f76:	4770      	bx	lr
  ldr r3, =_sidata
 8000f78:	08006f84 	.word	0x08006f84
  ldr r0, =_sdata
 8000f7c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000f80:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8000f84:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8000f88:	20001c90 	.word	0x20001c90

08000f8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f8c:	e7fe      	b.n	8000f8c <ADC1_2_IRQHandler>
	...

08000f90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f94:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <HAL_Init+0x28>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a07      	ldr	r2, [pc, #28]	; (8000fb8 <HAL_Init+0x28>)
 8000f9a:	f043 0310 	orr.w	r3, r3, #16
 8000f9e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa0:	2003      	movs	r0, #3
 8000fa2:	f000 fcdf 	bl	8001964 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fa6:	2000      	movs	r0, #0
 8000fa8:	f000 f808 	bl	8000fbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fac:	f7ff fd22 	bl	80009f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40022000 	.word	0x40022000

08000fbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fc4:	4b12      	ldr	r3, [pc, #72]	; (8001010 <HAL_InitTick+0x54>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	4b12      	ldr	r3, [pc, #72]	; (8001014 <HAL_InitTick+0x58>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	4619      	mov	r1, r3
 8000fce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f000 fcf7 	bl	80019ce <HAL_SYSTICK_Config>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e00e      	b.n	8001008 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2b0f      	cmp	r3, #15
 8000fee:	d80a      	bhi.n	8001006 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	6879      	ldr	r1, [r7, #4]
 8000ff4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ff8:	f000 fcbf 	bl	800197a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ffc:	4a06      	ldr	r2, [pc, #24]	; (8001018 <HAL_InitTick+0x5c>)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001002:	2300      	movs	r3, #0
 8001004:	e000      	b.n	8001008 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
}
 8001008:	4618      	mov	r0, r3
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	20000000 	.word	0x20000000
 8001014:	20000008 	.word	0x20000008
 8001018:	20000004 	.word	0x20000004

0800101c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001020:	4b05      	ldr	r3, [pc, #20]	; (8001038 <HAL_IncTick+0x1c>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	461a      	mov	r2, r3
 8001026:	4b05      	ldr	r3, [pc, #20]	; (800103c <HAL_IncTick+0x20>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4413      	add	r3, r2
 800102c:	4a03      	ldr	r2, [pc, #12]	; (800103c <HAL_IncTick+0x20>)
 800102e:	6013      	str	r3, [r2, #0]
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr
 8001038:	20000008 	.word	0x20000008
 800103c:	20001c48 	.word	0x20001c48

08001040 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  return uwTick;
 8001044:	4b02      	ldr	r3, [pc, #8]	; (8001050 <HAL_GetTick+0x10>)
 8001046:	681b      	ldr	r3, [r3, #0]
}
 8001048:	4618      	mov	r0, r3
 800104a:	46bd      	mov	sp, r7
 800104c:	bc80      	pop	{r7}
 800104e:	4770      	bx	lr
 8001050:	20001c48 	.word	0x20001c48

08001054 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b086      	sub	sp, #24
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800105c:	2300      	movs	r3, #0
 800105e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001060:	2300      	movs	r3, #0
 8001062:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001064:	2300      	movs	r3, #0
 8001066:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001068:	2300      	movs	r3, #0
 800106a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d101      	bne.n	8001076 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e0be      	b.n	80011f4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001080:	2b00      	cmp	r3, #0
 8001082:	d109      	bne.n	8001098 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2200      	movs	r2, #0
 800108e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f7ff f8aa 	bl	80001ec <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f000 faf7 	bl	800168c <ADC_ConversionStop_Disable>
 800109e:	4603      	mov	r3, r0
 80010a0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010a6:	f003 0310 	and.w	r3, r3, #16
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	f040 8099 	bne.w	80011e2 <HAL_ADC_Init+0x18e>
 80010b0:	7dfb      	ldrb	r3, [r7, #23]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	f040 8095 	bne.w	80011e2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010bc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010c0:	f023 0302 	bic.w	r3, r3, #2
 80010c4:	f043 0202 	orr.w	r2, r3, #2
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80010d4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	7b1b      	ldrb	r3, [r3, #12]
 80010da:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80010dc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80010de:	68ba      	ldr	r2, [r7, #8]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010ec:	d003      	beq.n	80010f6 <HAL_ADC_Init+0xa2>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d102      	bne.n	80010fc <HAL_ADC_Init+0xa8>
 80010f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010fa:	e000      	b.n	80010fe <HAL_ADC_Init+0xaa>
 80010fc:	2300      	movs	r3, #0
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	4313      	orrs	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	7d1b      	ldrb	r3, [r3, #20]
 8001108:	2b01      	cmp	r3, #1
 800110a:	d119      	bne.n	8001140 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	7b1b      	ldrb	r3, [r3, #12]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d109      	bne.n	8001128 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	699b      	ldr	r3, [r3, #24]
 8001118:	3b01      	subs	r3, #1
 800111a:	035a      	lsls	r2, r3, #13
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	4313      	orrs	r3, r2
 8001120:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001124:	613b      	str	r3, [r7, #16]
 8001126:	e00b      	b.n	8001140 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800112c:	f043 0220 	orr.w	r2, r3, #32
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001138:	f043 0201 	orr.w	r2, r3, #1
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	430a      	orrs	r2, r1
 8001152:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	689a      	ldr	r2, [r3, #8]
 800115a:	4b28      	ldr	r3, [pc, #160]	; (80011fc <HAL_ADC_Init+0x1a8>)
 800115c:	4013      	ands	r3, r2
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	6812      	ldr	r2, [r2, #0]
 8001162:	68b9      	ldr	r1, [r7, #8]
 8001164:	430b      	orrs	r3, r1
 8001166:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001170:	d003      	beq.n	800117a <HAL_ADC_Init+0x126>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	2b01      	cmp	r3, #1
 8001178:	d104      	bne.n	8001184 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	691b      	ldr	r3, [r3, #16]
 800117e:	3b01      	subs	r3, #1
 8001180:	051b      	lsls	r3, r3, #20
 8001182:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800118a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	68fa      	ldr	r2, [r7, #12]
 8001194:	430a      	orrs	r2, r1
 8001196:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	689a      	ldr	r2, [r3, #8]
 800119e:	4b18      	ldr	r3, [pc, #96]	; (8001200 <HAL_ADC_Init+0x1ac>)
 80011a0:	4013      	ands	r3, r2
 80011a2:	68ba      	ldr	r2, [r7, #8]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d10b      	bne.n	80011c0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2200      	movs	r2, #0
 80011ac:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011b2:	f023 0303 	bic.w	r3, r3, #3
 80011b6:	f043 0201 	orr.w	r2, r3, #1
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80011be:	e018      	b.n	80011f2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011c4:	f023 0312 	bic.w	r3, r3, #18
 80011c8:	f043 0210 	orr.w	r2, r3, #16
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011d4:	f043 0201 	orr.w	r2, r3, #1
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80011dc:	2301      	movs	r3, #1
 80011de:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80011e0:	e007      	b.n	80011f2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011e6:	f043 0210 	orr.w	r2, r3, #16
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80011f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3718      	adds	r7, #24
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	ffe1f7fd 	.word	0xffe1f7fd
 8001200:	ff1f0efe 	.word	0xff1f0efe

08001204 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001210:	2300      	movs	r3, #0
 8001212:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a64      	ldr	r2, [pc, #400]	; (80013ac <HAL_ADC_Start_DMA+0x1a8>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d004      	beq.n	8001228 <HAL_ADC_Start_DMA+0x24>
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a63      	ldr	r2, [pc, #396]	; (80013b0 <HAL_ADC_Start_DMA+0x1ac>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d106      	bne.n	8001236 <HAL_ADC_Start_DMA+0x32>
 8001228:	4b60      	ldr	r3, [pc, #384]	; (80013ac <HAL_ADC_Start_DMA+0x1a8>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001230:	2b00      	cmp	r3, #0
 8001232:	f040 80b3 	bne.w	800139c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800123c:	2b01      	cmp	r3, #1
 800123e:	d101      	bne.n	8001244 <HAL_ADC_Start_DMA+0x40>
 8001240:	2302      	movs	r3, #2
 8001242:	e0ae      	b.n	80013a2 <HAL_ADC_Start_DMA+0x19e>
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	2201      	movs	r2, #1
 8001248:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800124c:	68f8      	ldr	r0, [r7, #12]
 800124e:	f000 f9cb 	bl	80015e8 <ADC_Enable>
 8001252:	4603      	mov	r3, r0
 8001254:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001256:	7dfb      	ldrb	r3, [r7, #23]
 8001258:	2b00      	cmp	r3, #0
 800125a:	f040 809a 	bne.w	8001392 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001262:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001266:	f023 0301 	bic.w	r3, r3, #1
 800126a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a4e      	ldr	r2, [pc, #312]	; (80013b0 <HAL_ADC_Start_DMA+0x1ac>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d105      	bne.n	8001288 <HAL_ADC_Start_DMA+0x84>
 800127c:	4b4b      	ldr	r3, [pc, #300]	; (80013ac <HAL_ADC_Start_DMA+0x1a8>)
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d115      	bne.n	80012b4 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800128c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d026      	beq.n	80012f0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012a6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012aa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80012b2:	e01d      	b.n	80012f0 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a39      	ldr	r2, [pc, #228]	; (80013ac <HAL_ADC_Start_DMA+0x1a8>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d004      	beq.n	80012d4 <HAL_ADC_Start_DMA+0xd0>
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a38      	ldr	r2, [pc, #224]	; (80013b0 <HAL_ADC_Start_DMA+0x1ac>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d10d      	bne.n	80012f0 <HAL_ADC_Start_DMA+0xec>
 80012d4:	4b35      	ldr	r3, [pc, #212]	; (80013ac <HAL_ADC_Start_DMA+0x1a8>)
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d007      	beq.n	80012f0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012e4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012e8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d006      	beq.n	800130a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001300:	f023 0206 	bic.w	r2, r3, #6
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	62da      	str	r2, [r3, #44]	; 0x2c
 8001308:	e002      	b.n	8001310 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	2200      	movs	r2, #0
 800130e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	2200      	movs	r2, #0
 8001314:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	6a1b      	ldr	r3, [r3, #32]
 800131c:	4a25      	ldr	r2, [pc, #148]	; (80013b4 <HAL_ADC_Start_DMA+0x1b0>)
 800131e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	6a1b      	ldr	r3, [r3, #32]
 8001324:	4a24      	ldr	r2, [pc, #144]	; (80013b8 <HAL_ADC_Start_DMA+0x1b4>)
 8001326:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	6a1b      	ldr	r3, [r3, #32]
 800132c:	4a23      	ldr	r2, [pc, #140]	; (80013bc <HAL_ADC_Start_DMA+0x1b8>)
 800132e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f06f 0202 	mvn.w	r2, #2
 8001338:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	689a      	ldr	r2, [r3, #8]
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001348:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	6a18      	ldr	r0, [r3, #32]
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	334c      	adds	r3, #76	; 0x4c
 8001354:	4619      	mov	r1, r3
 8001356:	68ba      	ldr	r2, [r7, #8]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f000 fb9f 	bl	8001a9c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001368:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800136c:	d108      	bne.n	8001380 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	689a      	ldr	r2, [r3, #8]
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800137c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800137e:	e00f      	b.n	80013a0 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	689a      	ldr	r2, [r3, #8]
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800138e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001390:	e006      	b.n	80013a0 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	2200      	movs	r2, #0
 8001396:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800139a:	e001      	b.n	80013a0 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80013a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3718      	adds	r7, #24
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40012400 	.word	0x40012400
 80013b0:	40012800 	.word	0x40012800
 80013b4:	08001701 	.word	0x08001701
 80013b8:	0800177d 	.word	0x0800177d
 80013bc:	08001799 	.word	0x08001799

080013c0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bc80      	pop	{r7}
 80013d0:	4770      	bx	lr

080013d2 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80013d2:	b480      	push	{r7}
 80013d4:	b083      	sub	sp, #12
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr

080013e4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80013ec:	bf00      	nop
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bc80      	pop	{r7}
 80013f4:	4770      	bx	lr
	...

080013f8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001402:	2300      	movs	r3, #0
 8001404:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001406:	2300      	movs	r3, #0
 8001408:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001410:	2b01      	cmp	r3, #1
 8001412:	d101      	bne.n	8001418 <HAL_ADC_ConfigChannel+0x20>
 8001414:	2302      	movs	r3, #2
 8001416:	e0dc      	b.n	80015d2 <HAL_ADC_ConfigChannel+0x1da>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2201      	movs	r2, #1
 800141c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	2b06      	cmp	r3, #6
 8001426:	d81c      	bhi.n	8001462 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685a      	ldr	r2, [r3, #4]
 8001432:	4613      	mov	r3, r2
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	4413      	add	r3, r2
 8001438:	3b05      	subs	r3, #5
 800143a:	221f      	movs	r2, #31
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	43db      	mvns	r3, r3
 8001442:	4019      	ands	r1, r3
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	6818      	ldr	r0, [r3, #0]
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685a      	ldr	r2, [r3, #4]
 800144c:	4613      	mov	r3, r2
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	4413      	add	r3, r2
 8001452:	3b05      	subs	r3, #5
 8001454:	fa00 f203 	lsl.w	r2, r0, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	430a      	orrs	r2, r1
 800145e:	635a      	str	r2, [r3, #52]	; 0x34
 8001460:	e03c      	b.n	80014dc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	2b0c      	cmp	r3, #12
 8001468:	d81c      	bhi.n	80014a4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685a      	ldr	r2, [r3, #4]
 8001474:	4613      	mov	r3, r2
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	4413      	add	r3, r2
 800147a:	3b23      	subs	r3, #35	; 0x23
 800147c:	221f      	movs	r2, #31
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	43db      	mvns	r3, r3
 8001484:	4019      	ands	r1, r3
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	6818      	ldr	r0, [r3, #0]
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685a      	ldr	r2, [r3, #4]
 800148e:	4613      	mov	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4413      	add	r3, r2
 8001494:	3b23      	subs	r3, #35	; 0x23
 8001496:	fa00 f203 	lsl.w	r2, r0, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	430a      	orrs	r2, r1
 80014a0:	631a      	str	r2, [r3, #48]	; 0x30
 80014a2:	e01b      	b.n	80014dc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685a      	ldr	r2, [r3, #4]
 80014ae:	4613      	mov	r3, r2
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	4413      	add	r3, r2
 80014b4:	3b41      	subs	r3, #65	; 0x41
 80014b6:	221f      	movs	r2, #31
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	43db      	mvns	r3, r3
 80014be:	4019      	ands	r1, r3
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	6818      	ldr	r0, [r3, #0]
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685a      	ldr	r2, [r3, #4]
 80014c8:	4613      	mov	r3, r2
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	4413      	add	r3, r2
 80014ce:	3b41      	subs	r3, #65	; 0x41
 80014d0:	fa00 f203 	lsl.w	r2, r0, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	430a      	orrs	r2, r1
 80014da:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2b09      	cmp	r3, #9
 80014e2:	d91c      	bls.n	800151e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	68d9      	ldr	r1, [r3, #12]
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	4613      	mov	r3, r2
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	4413      	add	r3, r2
 80014f4:	3b1e      	subs	r3, #30
 80014f6:	2207      	movs	r2, #7
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	43db      	mvns	r3, r3
 80014fe:	4019      	ands	r1, r3
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	6898      	ldr	r0, [r3, #8]
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	4613      	mov	r3, r2
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	4413      	add	r3, r2
 800150e:	3b1e      	subs	r3, #30
 8001510:	fa00 f203 	lsl.w	r2, r0, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	430a      	orrs	r2, r1
 800151a:	60da      	str	r2, [r3, #12]
 800151c:	e019      	b.n	8001552 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	6919      	ldr	r1, [r3, #16]
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	4613      	mov	r3, r2
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	4413      	add	r3, r2
 800152e:	2207      	movs	r2, #7
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	43db      	mvns	r3, r3
 8001536:	4019      	ands	r1, r3
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	6898      	ldr	r0, [r3, #8]
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	4613      	mov	r3, r2
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	4413      	add	r3, r2
 8001546:	fa00 f203 	lsl.w	r2, r0, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	430a      	orrs	r2, r1
 8001550:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2b10      	cmp	r3, #16
 8001558:	d003      	beq.n	8001562 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800155e:	2b11      	cmp	r3, #17
 8001560:	d132      	bne.n	80015c8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a1d      	ldr	r2, [pc, #116]	; (80015dc <HAL_ADC_ConfigChannel+0x1e4>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d125      	bne.n	80015b8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d126      	bne.n	80015c8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	689a      	ldr	r2, [r3, #8]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001588:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2b10      	cmp	r3, #16
 8001590:	d11a      	bne.n	80015c8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001592:	4b13      	ldr	r3, [pc, #76]	; (80015e0 <HAL_ADC_ConfigChannel+0x1e8>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a13      	ldr	r2, [pc, #76]	; (80015e4 <HAL_ADC_ConfigChannel+0x1ec>)
 8001598:	fba2 2303 	umull	r2, r3, r2, r3
 800159c:	0c9a      	lsrs	r2, r3, #18
 800159e:	4613      	mov	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4413      	add	r3, r2
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80015a8:	e002      	b.n	80015b0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	3b01      	subs	r3, #1
 80015ae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1f9      	bne.n	80015aa <HAL_ADC_ConfigChannel+0x1b2>
 80015b6:	e007      	b.n	80015c8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015bc:	f043 0220 	orr.w	r2, r3, #32
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2200      	movs	r2, #0
 80015cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80015d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3714      	adds	r7, #20
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc80      	pop	{r7}
 80015da:	4770      	bx	lr
 80015dc:	40012400 	.word	0x40012400
 80015e0:	20000000 	.word	0x20000000
 80015e4:	431bde83 	.word	0x431bde83

080015e8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80015f0:	2300      	movs	r3, #0
 80015f2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80015f4:	2300      	movs	r3, #0
 80015f6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	2b01      	cmp	r3, #1
 8001604:	d039      	beq.n	800167a <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	689a      	ldr	r2, [r3, #8]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f042 0201 	orr.w	r2, r2, #1
 8001614:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001616:	4b1b      	ldr	r3, [pc, #108]	; (8001684 <ADC_Enable+0x9c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a1b      	ldr	r2, [pc, #108]	; (8001688 <ADC_Enable+0xa0>)
 800161c:	fba2 2303 	umull	r2, r3, r2, r3
 8001620:	0c9b      	lsrs	r3, r3, #18
 8001622:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001624:	e002      	b.n	800162c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	3b01      	subs	r3, #1
 800162a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1f9      	bne.n	8001626 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001632:	f7ff fd05 	bl	8001040 <HAL_GetTick>
 8001636:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001638:	e018      	b.n	800166c <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800163a:	f7ff fd01 	bl	8001040 <HAL_GetTick>
 800163e:	4602      	mov	r2, r0
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	2b02      	cmp	r3, #2
 8001646:	d911      	bls.n	800166c <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800164c:	f043 0210 	orr.w	r2, r3, #16
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001658:	f043 0201 	orr.w	r2, r3, #1
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2200      	movs	r2, #0
 8001664:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e007      	b.n	800167c <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	2b01      	cmp	r3, #1
 8001678:	d1df      	bne.n	800163a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800167a:	2300      	movs	r3, #0
}
 800167c:	4618      	mov	r0, r3
 800167e:	3710      	adds	r7, #16
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	20000000 	.word	0x20000000
 8001688:	431bde83 	.word	0x431bde83

0800168c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001694:	2300      	movs	r3, #0
 8001696:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d127      	bne.n	80016f6 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	689a      	ldr	r2, [r3, #8]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f022 0201 	bic.w	r2, r2, #1
 80016b4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80016b6:	f7ff fcc3 	bl	8001040 <HAL_GetTick>
 80016ba:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80016bc:	e014      	b.n	80016e8 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80016be:	f7ff fcbf 	bl	8001040 <HAL_GetTick>
 80016c2:	4602      	mov	r2, r0
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d90d      	bls.n	80016e8 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d0:	f043 0210 	orr.w	r2, r3, #16
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016dc:	f043 0201 	orr.w	r2, r3, #1
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e007      	b.n	80016f8 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d0e3      	beq.n	80016be <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80016f6:	2300      	movs	r3, #0
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3710      	adds	r7, #16
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}

08001700 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170c:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001712:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001716:	2b00      	cmp	r3, #0
 8001718:	d127      	bne.n	800176a <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800171e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001730:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001734:	d115      	bne.n	8001762 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800173a:	2b00      	cmp	r3, #0
 800173c:	d111      	bne.n	8001762 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001742:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800174e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d105      	bne.n	8001762 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800175a:	f043 0201 	orr.w	r2, r3, #1
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001762:	68f8      	ldr	r0, [r7, #12]
 8001764:	f7ff fe2c 	bl	80013c0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001768:	e004      	b.n	8001774 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	6a1b      	ldr	r3, [r3, #32]
 800176e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	4798      	blx	r3
}
 8001774:	bf00      	nop
 8001776:	3710      	adds	r7, #16
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001788:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800178a:	68f8      	ldr	r0, [r7, #12]
 800178c:	f7ff fe21 	bl	80013d2 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001790:	bf00      	nop
 8001792:	3710      	adds	r7, #16
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}

08001798 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a4:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b6:	f043 0204 	orr.w	r2, r3, #4
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80017be:	68f8      	ldr	r0, [r7, #12]
 80017c0:	f7ff fe10 	bl	80013e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80017c4:	bf00      	nop
 80017c6:	3710      	adds	r7, #16
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <__NVIC_SetPriorityGrouping>:
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f003 0307 	and.w	r3, r3, #7
 80017da:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017dc:	4b0c      	ldr	r3, [pc, #48]	; (8001810 <__NVIC_SetPriorityGrouping+0x44>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017e2:	68ba      	ldr	r2, [r7, #8]
 80017e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017e8:	4013      	ands	r3, r2
 80017ea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017fe:	4a04      	ldr	r2, [pc, #16]	; (8001810 <__NVIC_SetPriorityGrouping+0x44>)
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	60d3      	str	r3, [r2, #12]
}
 8001804:	bf00      	nop
 8001806:	3714      	adds	r7, #20
 8001808:	46bd      	mov	sp, r7
 800180a:	bc80      	pop	{r7}
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	e000ed00 	.word	0xe000ed00

08001814 <__NVIC_GetPriorityGrouping>:
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001818:	4b04      	ldr	r3, [pc, #16]	; (800182c <__NVIC_GetPriorityGrouping+0x18>)
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	0a1b      	lsrs	r3, r3, #8
 800181e:	f003 0307 	and.w	r3, r3, #7
}
 8001822:	4618      	mov	r0, r3
 8001824:	46bd      	mov	sp, r7
 8001826:	bc80      	pop	{r7}
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	e000ed00 	.word	0xe000ed00

08001830 <__NVIC_EnableIRQ>:
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800183a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183e:	2b00      	cmp	r3, #0
 8001840:	db0b      	blt.n	800185a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001842:	79fb      	ldrb	r3, [r7, #7]
 8001844:	f003 021f 	and.w	r2, r3, #31
 8001848:	4906      	ldr	r1, [pc, #24]	; (8001864 <__NVIC_EnableIRQ+0x34>)
 800184a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184e:	095b      	lsrs	r3, r3, #5
 8001850:	2001      	movs	r0, #1
 8001852:	fa00 f202 	lsl.w	r2, r0, r2
 8001856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800185a:	bf00      	nop
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	bc80      	pop	{r7}
 8001862:	4770      	bx	lr
 8001864:	e000e100 	.word	0xe000e100

08001868 <__NVIC_SetPriority>:
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	6039      	str	r1, [r7, #0]
 8001872:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001878:	2b00      	cmp	r3, #0
 800187a:	db0a      	blt.n	8001892 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	b2da      	uxtb	r2, r3
 8001880:	490c      	ldr	r1, [pc, #48]	; (80018b4 <__NVIC_SetPriority+0x4c>)
 8001882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001886:	0112      	lsls	r2, r2, #4
 8001888:	b2d2      	uxtb	r2, r2
 800188a:	440b      	add	r3, r1
 800188c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001890:	e00a      	b.n	80018a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	b2da      	uxtb	r2, r3
 8001896:	4908      	ldr	r1, [pc, #32]	; (80018b8 <__NVIC_SetPriority+0x50>)
 8001898:	79fb      	ldrb	r3, [r7, #7]
 800189a:	f003 030f 	and.w	r3, r3, #15
 800189e:	3b04      	subs	r3, #4
 80018a0:	0112      	lsls	r2, r2, #4
 80018a2:	b2d2      	uxtb	r2, r2
 80018a4:	440b      	add	r3, r1
 80018a6:	761a      	strb	r2, [r3, #24]
}
 80018a8:	bf00      	nop
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bc80      	pop	{r7}
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	e000e100 	.word	0xe000e100
 80018b8:	e000ed00 	.word	0xe000ed00

080018bc <NVIC_EncodePriority>:
{
 80018bc:	b480      	push	{r7}
 80018be:	b089      	sub	sp, #36	; 0x24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	60b9      	str	r1, [r7, #8]
 80018c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	f1c3 0307 	rsb	r3, r3, #7
 80018d6:	2b04      	cmp	r3, #4
 80018d8:	bf28      	it	cs
 80018da:	2304      	movcs	r3, #4
 80018dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	3304      	adds	r3, #4
 80018e2:	2b06      	cmp	r3, #6
 80018e4:	d902      	bls.n	80018ec <NVIC_EncodePriority+0x30>
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	3b03      	subs	r3, #3
 80018ea:	e000      	b.n	80018ee <NVIC_EncodePriority+0x32>
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	43da      	mvns	r2, r3
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	401a      	ands	r2, r3
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001904:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	fa01 f303 	lsl.w	r3, r1, r3
 800190e:	43d9      	mvns	r1, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001914:	4313      	orrs	r3, r2
}
 8001916:	4618      	mov	r0, r3
 8001918:	3724      	adds	r7, #36	; 0x24
 800191a:	46bd      	mov	sp, r7
 800191c:	bc80      	pop	{r7}
 800191e:	4770      	bx	lr

08001920 <SysTick_Config>:
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	3b01      	subs	r3, #1
 800192c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001930:	d301      	bcc.n	8001936 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001932:	2301      	movs	r3, #1
 8001934:	e00f      	b.n	8001956 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001936:	4a0a      	ldr	r2, [pc, #40]	; (8001960 <SysTick_Config+0x40>)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3b01      	subs	r3, #1
 800193c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800193e:	210f      	movs	r1, #15
 8001940:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001944:	f7ff ff90 	bl	8001868 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001948:	4b05      	ldr	r3, [pc, #20]	; (8001960 <SysTick_Config+0x40>)
 800194a:	2200      	movs	r2, #0
 800194c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800194e:	4b04      	ldr	r3, [pc, #16]	; (8001960 <SysTick_Config+0x40>)
 8001950:	2207      	movs	r2, #7
 8001952:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	e000e010 	.word	0xe000e010

08001964 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f7ff ff2d 	bl	80017cc <__NVIC_SetPriorityGrouping>
}
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800197a:	b580      	push	{r7, lr}
 800197c:	b086      	sub	sp, #24
 800197e:	af00      	add	r7, sp, #0
 8001980:	4603      	mov	r3, r0
 8001982:	60b9      	str	r1, [r7, #8]
 8001984:	607a      	str	r2, [r7, #4]
 8001986:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001988:	2300      	movs	r3, #0
 800198a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800198c:	f7ff ff42 	bl	8001814 <__NVIC_GetPriorityGrouping>
 8001990:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	68b9      	ldr	r1, [r7, #8]
 8001996:	6978      	ldr	r0, [r7, #20]
 8001998:	f7ff ff90 	bl	80018bc <NVIC_EncodePriority>
 800199c:	4602      	mov	r2, r0
 800199e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019a2:	4611      	mov	r1, r2
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff ff5f 	bl	8001868 <__NVIC_SetPriority>
}
 80019aa:	bf00      	nop
 80019ac:	3718      	adds	r7, #24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b082      	sub	sp, #8
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	4603      	mov	r3, r0
 80019ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff ff35 	bl	8001830 <__NVIC_EnableIRQ>
}
 80019c6:	bf00      	nop
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b082      	sub	sp, #8
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f7ff ffa2 	bl	8001920 <SysTick_Config>
 80019dc:	4603      	mov	r3, r0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
	...

080019e8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80019f0:	2300      	movs	r3, #0
 80019f2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d101      	bne.n	80019fe <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e043      	b.n	8001a86 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	461a      	mov	r2, r3
 8001a04:	4b22      	ldr	r3, [pc, #136]	; (8001a90 <HAL_DMA_Init+0xa8>)
 8001a06:	4413      	add	r3, r2
 8001a08:	4a22      	ldr	r2, [pc, #136]	; (8001a94 <HAL_DMA_Init+0xac>)
 8001a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a0e:	091b      	lsrs	r3, r3, #4
 8001a10:	009a      	lsls	r2, r3, #2
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a1f      	ldr	r2, [pc, #124]	; (8001a98 <HAL_DMA_Init+0xb0>)
 8001a1a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2202      	movs	r2, #2
 8001a20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001a32:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001a36:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001a40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	695b      	ldr	r3, [r3, #20]
 8001a52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	69db      	ldr	r3, [r3, #28]
 8001a5e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001a60:	68fa      	ldr	r2, [r7, #12]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	68fa      	ldr	r2, [r7, #12]
 8001a6c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3714      	adds	r7, #20
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bc80      	pop	{r7}
 8001a8e:	4770      	bx	lr
 8001a90:	bffdfff8 	.word	0xbffdfff8
 8001a94:	cccccccd 	.word	0xcccccccd
 8001a98:	40020000 	.word	0x40020000

08001a9c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
 8001aa8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d101      	bne.n	8001abc <HAL_DMA_Start_IT+0x20>
 8001ab8:	2302      	movs	r3, #2
 8001aba:	e04a      	b.n	8001b52 <HAL_DMA_Start_IT+0xb6>
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d13a      	bne.n	8001b44 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2202      	movs	r2, #2
 8001ad2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f022 0201 	bic.w	r2, r2, #1
 8001aea:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	68b9      	ldr	r1, [r7, #8]
 8001af2:	68f8      	ldr	r0, [r7, #12]
 8001af4:	f000 f938 	bl	8001d68 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d008      	beq.n	8001b12 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f042 020e 	orr.w	r2, r2, #14
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	e00f      	b.n	8001b32 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f022 0204 	bic.w	r2, r2, #4
 8001b20:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f042 020a 	orr.w	r2, r2, #10
 8001b30:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f042 0201 	orr.w	r2, r2, #1
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	e005      	b.n	8001b50 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001b50:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3718      	adds	r7, #24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
	...

08001b5c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b78:	2204      	movs	r2, #4
 8001b7a:	409a      	lsls	r2, r3
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d04f      	beq.n	8001c24 <HAL_DMA_IRQHandler+0xc8>
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	f003 0304 	and.w	r3, r3, #4
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d04a      	beq.n	8001c24 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0320 	and.w	r3, r3, #32
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d107      	bne.n	8001bac <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f022 0204 	bic.w	r2, r2, #4
 8001baa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a66      	ldr	r2, [pc, #408]	; (8001d4c <HAL_DMA_IRQHandler+0x1f0>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d029      	beq.n	8001c0a <HAL_DMA_IRQHandler+0xae>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a65      	ldr	r2, [pc, #404]	; (8001d50 <HAL_DMA_IRQHandler+0x1f4>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d022      	beq.n	8001c06 <HAL_DMA_IRQHandler+0xaa>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a63      	ldr	r2, [pc, #396]	; (8001d54 <HAL_DMA_IRQHandler+0x1f8>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d01a      	beq.n	8001c00 <HAL_DMA_IRQHandler+0xa4>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a62      	ldr	r2, [pc, #392]	; (8001d58 <HAL_DMA_IRQHandler+0x1fc>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d012      	beq.n	8001bfa <HAL_DMA_IRQHandler+0x9e>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a60      	ldr	r2, [pc, #384]	; (8001d5c <HAL_DMA_IRQHandler+0x200>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d00a      	beq.n	8001bf4 <HAL_DMA_IRQHandler+0x98>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a5f      	ldr	r2, [pc, #380]	; (8001d60 <HAL_DMA_IRQHandler+0x204>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d102      	bne.n	8001bee <HAL_DMA_IRQHandler+0x92>
 8001be8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001bec:	e00e      	b.n	8001c0c <HAL_DMA_IRQHandler+0xb0>
 8001bee:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001bf2:	e00b      	b.n	8001c0c <HAL_DMA_IRQHandler+0xb0>
 8001bf4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001bf8:	e008      	b.n	8001c0c <HAL_DMA_IRQHandler+0xb0>
 8001bfa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001bfe:	e005      	b.n	8001c0c <HAL_DMA_IRQHandler+0xb0>
 8001c00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c04:	e002      	b.n	8001c0c <HAL_DMA_IRQHandler+0xb0>
 8001c06:	2340      	movs	r3, #64	; 0x40
 8001c08:	e000      	b.n	8001c0c <HAL_DMA_IRQHandler+0xb0>
 8001c0a:	2304      	movs	r3, #4
 8001c0c:	4a55      	ldr	r2, [pc, #340]	; (8001d64 <HAL_DMA_IRQHandler+0x208>)
 8001c0e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	f000 8094 	beq.w	8001d42 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001c22:	e08e      	b.n	8001d42 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c28:	2202      	movs	r2, #2
 8001c2a:	409a      	lsls	r2, r3
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d056      	beq.n	8001ce2 <HAL_DMA_IRQHandler+0x186>
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d051      	beq.n	8001ce2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0320 	and.w	r3, r3, #32
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d10b      	bne.n	8001c64 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f022 020a 	bic.w	r2, r2, #10
 8001c5a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a38      	ldr	r2, [pc, #224]	; (8001d4c <HAL_DMA_IRQHandler+0x1f0>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d029      	beq.n	8001cc2 <HAL_DMA_IRQHandler+0x166>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a37      	ldr	r2, [pc, #220]	; (8001d50 <HAL_DMA_IRQHandler+0x1f4>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d022      	beq.n	8001cbe <HAL_DMA_IRQHandler+0x162>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a35      	ldr	r2, [pc, #212]	; (8001d54 <HAL_DMA_IRQHandler+0x1f8>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d01a      	beq.n	8001cb8 <HAL_DMA_IRQHandler+0x15c>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a34      	ldr	r2, [pc, #208]	; (8001d58 <HAL_DMA_IRQHandler+0x1fc>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d012      	beq.n	8001cb2 <HAL_DMA_IRQHandler+0x156>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a32      	ldr	r2, [pc, #200]	; (8001d5c <HAL_DMA_IRQHandler+0x200>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d00a      	beq.n	8001cac <HAL_DMA_IRQHandler+0x150>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a31      	ldr	r2, [pc, #196]	; (8001d60 <HAL_DMA_IRQHandler+0x204>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d102      	bne.n	8001ca6 <HAL_DMA_IRQHandler+0x14a>
 8001ca0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001ca4:	e00e      	b.n	8001cc4 <HAL_DMA_IRQHandler+0x168>
 8001ca6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001caa:	e00b      	b.n	8001cc4 <HAL_DMA_IRQHandler+0x168>
 8001cac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cb0:	e008      	b.n	8001cc4 <HAL_DMA_IRQHandler+0x168>
 8001cb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cb6:	e005      	b.n	8001cc4 <HAL_DMA_IRQHandler+0x168>
 8001cb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cbc:	e002      	b.n	8001cc4 <HAL_DMA_IRQHandler+0x168>
 8001cbe:	2320      	movs	r3, #32
 8001cc0:	e000      	b.n	8001cc4 <HAL_DMA_IRQHandler+0x168>
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	4a27      	ldr	r2, [pc, #156]	; (8001d64 <HAL_DMA_IRQHandler+0x208>)
 8001cc6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d034      	beq.n	8001d42 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001ce0:	e02f      	b.n	8001d42 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	2208      	movs	r2, #8
 8001ce8:	409a      	lsls	r2, r3
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	4013      	ands	r3, r2
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d028      	beq.n	8001d44 <HAL_DMA_IRQHandler+0x1e8>
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	f003 0308 	and.w	r3, r3, #8
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d023      	beq.n	8001d44 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f022 020e 	bic.w	r2, r2, #14
 8001d0a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d14:	2101      	movs	r1, #1
 8001d16:	fa01 f202 	lsl.w	r2, r1, r2
 8001d1a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2201      	movs	r2, #1
 8001d26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d004      	beq.n	8001d44 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	4798      	blx	r3
    }
  }
  return;
 8001d42:	bf00      	nop
 8001d44:	bf00      	nop
}
 8001d46:	3710      	adds	r7, #16
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	40020008 	.word	0x40020008
 8001d50:	4002001c 	.word	0x4002001c
 8001d54:	40020030 	.word	0x40020030
 8001d58:	40020044 	.word	0x40020044
 8001d5c:	40020058 	.word	0x40020058
 8001d60:	4002006c 	.word	0x4002006c
 8001d64:	40020000 	.word	0x40020000

08001d68 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
 8001d74:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d7e:	2101      	movs	r1, #1
 8001d80:	fa01 f202 	lsl.w	r2, r1, r2
 8001d84:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	683a      	ldr	r2, [r7, #0]
 8001d8c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	2b10      	cmp	r3, #16
 8001d94:	d108      	bne.n	8001da8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	68ba      	ldr	r2, [r7, #8]
 8001da4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001da6:	e007      	b.n	8001db8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	68ba      	ldr	r2, [r7, #8]
 8001dae:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	60da      	str	r2, [r3, #12]
}
 8001db8:	bf00      	nop
 8001dba:	3714      	adds	r7, #20
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bc80      	pop	{r7}
 8001dc0:	4770      	bx	lr
	...

08001dc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b08b      	sub	sp, #44	; 0x2c
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dd6:	e127      	b.n	8002028 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001dd8:	2201      	movs	r2, #1
 8001dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	69fa      	ldr	r2, [r7, #28]
 8001de8:	4013      	ands	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	f040 8116 	bne.w	8002022 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	2b12      	cmp	r3, #18
 8001dfc:	d034      	beq.n	8001e68 <HAL_GPIO_Init+0xa4>
 8001dfe:	2b12      	cmp	r3, #18
 8001e00:	d80d      	bhi.n	8001e1e <HAL_GPIO_Init+0x5a>
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d02b      	beq.n	8001e5e <HAL_GPIO_Init+0x9a>
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d804      	bhi.n	8001e14 <HAL_GPIO_Init+0x50>
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d031      	beq.n	8001e72 <HAL_GPIO_Init+0xae>
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d01c      	beq.n	8001e4c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e12:	e048      	b.n	8001ea6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001e14:	2b03      	cmp	r3, #3
 8001e16:	d043      	beq.n	8001ea0 <HAL_GPIO_Init+0xdc>
 8001e18:	2b11      	cmp	r3, #17
 8001e1a:	d01b      	beq.n	8001e54 <HAL_GPIO_Init+0x90>
          break;
 8001e1c:	e043      	b.n	8001ea6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001e1e:	4a89      	ldr	r2, [pc, #548]	; (8002044 <HAL_GPIO_Init+0x280>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d026      	beq.n	8001e72 <HAL_GPIO_Init+0xae>
 8001e24:	4a87      	ldr	r2, [pc, #540]	; (8002044 <HAL_GPIO_Init+0x280>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d806      	bhi.n	8001e38 <HAL_GPIO_Init+0x74>
 8001e2a:	4a87      	ldr	r2, [pc, #540]	; (8002048 <HAL_GPIO_Init+0x284>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d020      	beq.n	8001e72 <HAL_GPIO_Init+0xae>
 8001e30:	4a86      	ldr	r2, [pc, #536]	; (800204c <HAL_GPIO_Init+0x288>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d01d      	beq.n	8001e72 <HAL_GPIO_Init+0xae>
          break;
 8001e36:	e036      	b.n	8001ea6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001e38:	4a85      	ldr	r2, [pc, #532]	; (8002050 <HAL_GPIO_Init+0x28c>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d019      	beq.n	8001e72 <HAL_GPIO_Init+0xae>
 8001e3e:	4a85      	ldr	r2, [pc, #532]	; (8002054 <HAL_GPIO_Init+0x290>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d016      	beq.n	8001e72 <HAL_GPIO_Init+0xae>
 8001e44:	4a84      	ldr	r2, [pc, #528]	; (8002058 <HAL_GPIO_Init+0x294>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d013      	beq.n	8001e72 <HAL_GPIO_Init+0xae>
          break;
 8001e4a:	e02c      	b.n	8001ea6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	623b      	str	r3, [r7, #32]
          break;
 8001e52:	e028      	b.n	8001ea6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	3304      	adds	r3, #4
 8001e5a:	623b      	str	r3, [r7, #32]
          break;
 8001e5c:	e023      	b.n	8001ea6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	3308      	adds	r3, #8
 8001e64:	623b      	str	r3, [r7, #32]
          break;
 8001e66:	e01e      	b.n	8001ea6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	330c      	adds	r3, #12
 8001e6e:	623b      	str	r3, [r7, #32]
          break;
 8001e70:	e019      	b.n	8001ea6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d102      	bne.n	8001e80 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e7a:	2304      	movs	r3, #4
 8001e7c:	623b      	str	r3, [r7, #32]
          break;
 8001e7e:	e012      	b.n	8001ea6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d105      	bne.n	8001e94 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e88:	2308      	movs	r3, #8
 8001e8a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	69fa      	ldr	r2, [r7, #28]
 8001e90:	611a      	str	r2, [r3, #16]
          break;
 8001e92:	e008      	b.n	8001ea6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e94:	2308      	movs	r3, #8
 8001e96:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	69fa      	ldr	r2, [r7, #28]
 8001e9c:	615a      	str	r2, [r3, #20]
          break;
 8001e9e:	e002      	b.n	8001ea6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	623b      	str	r3, [r7, #32]
          break;
 8001ea4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	2bff      	cmp	r3, #255	; 0xff
 8001eaa:	d801      	bhi.n	8001eb0 <HAL_GPIO_Init+0xec>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	e001      	b.n	8001eb4 <HAL_GPIO_Init+0xf0>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	3304      	adds	r3, #4
 8001eb4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	2bff      	cmp	r3, #255	; 0xff
 8001eba:	d802      	bhi.n	8001ec2 <HAL_GPIO_Init+0xfe>
 8001ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	e002      	b.n	8001ec8 <HAL_GPIO_Init+0x104>
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec4:	3b08      	subs	r3, #8
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	210f      	movs	r1, #15
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	401a      	ands	r2, r3
 8001eda:	6a39      	ldr	r1, [r7, #32]
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee2:	431a      	orrs	r2, r3
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	f000 8096 	beq.w	8002022 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ef6:	4b59      	ldr	r3, [pc, #356]	; (800205c <HAL_GPIO_Init+0x298>)
 8001ef8:	699b      	ldr	r3, [r3, #24]
 8001efa:	4a58      	ldr	r2, [pc, #352]	; (800205c <HAL_GPIO_Init+0x298>)
 8001efc:	f043 0301 	orr.w	r3, r3, #1
 8001f00:	6193      	str	r3, [r2, #24]
 8001f02:	4b56      	ldr	r3, [pc, #344]	; (800205c <HAL_GPIO_Init+0x298>)
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	60bb      	str	r3, [r7, #8]
 8001f0c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f0e:	4a54      	ldr	r2, [pc, #336]	; (8002060 <HAL_GPIO_Init+0x29c>)
 8001f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f12:	089b      	lsrs	r3, r3, #2
 8001f14:	3302      	adds	r3, #2
 8001f16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f1a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1e:	f003 0303 	and.w	r3, r3, #3
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	220f      	movs	r2, #15
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a4b      	ldr	r2, [pc, #300]	; (8002064 <HAL_GPIO_Init+0x2a0>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d013      	beq.n	8001f62 <HAL_GPIO_Init+0x19e>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a4a      	ldr	r2, [pc, #296]	; (8002068 <HAL_GPIO_Init+0x2a4>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d00d      	beq.n	8001f5e <HAL_GPIO_Init+0x19a>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a49      	ldr	r2, [pc, #292]	; (800206c <HAL_GPIO_Init+0x2a8>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d007      	beq.n	8001f5a <HAL_GPIO_Init+0x196>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a48      	ldr	r2, [pc, #288]	; (8002070 <HAL_GPIO_Init+0x2ac>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d101      	bne.n	8001f56 <HAL_GPIO_Init+0x192>
 8001f52:	2303      	movs	r3, #3
 8001f54:	e006      	b.n	8001f64 <HAL_GPIO_Init+0x1a0>
 8001f56:	2304      	movs	r3, #4
 8001f58:	e004      	b.n	8001f64 <HAL_GPIO_Init+0x1a0>
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	e002      	b.n	8001f64 <HAL_GPIO_Init+0x1a0>
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e000      	b.n	8001f64 <HAL_GPIO_Init+0x1a0>
 8001f62:	2300      	movs	r3, #0
 8001f64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f66:	f002 0203 	and.w	r2, r2, #3
 8001f6a:	0092      	lsls	r2, r2, #2
 8001f6c:	4093      	lsls	r3, r2
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f74:	493a      	ldr	r1, [pc, #232]	; (8002060 <HAL_GPIO_Init+0x29c>)
 8001f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f78:	089b      	lsrs	r3, r3, #2
 8001f7a:	3302      	adds	r3, #2
 8001f7c:	68fa      	ldr	r2, [r7, #12]
 8001f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d006      	beq.n	8001f9c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f8e:	4b39      	ldr	r3, [pc, #228]	; (8002074 <HAL_GPIO_Init+0x2b0>)
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	4938      	ldr	r1, [pc, #224]	; (8002074 <HAL_GPIO_Init+0x2b0>)
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	600b      	str	r3, [r1, #0]
 8001f9a:	e006      	b.n	8001faa <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f9c:	4b35      	ldr	r3, [pc, #212]	; (8002074 <HAL_GPIO_Init+0x2b0>)
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	43db      	mvns	r3, r3
 8001fa4:	4933      	ldr	r1, [pc, #204]	; (8002074 <HAL_GPIO_Init+0x2b0>)
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d006      	beq.n	8001fc4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001fb6:	4b2f      	ldr	r3, [pc, #188]	; (8002074 <HAL_GPIO_Init+0x2b0>)
 8001fb8:	685a      	ldr	r2, [r3, #4]
 8001fba:	492e      	ldr	r1, [pc, #184]	; (8002074 <HAL_GPIO_Init+0x2b0>)
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	604b      	str	r3, [r1, #4]
 8001fc2:	e006      	b.n	8001fd2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001fc4:	4b2b      	ldr	r3, [pc, #172]	; (8002074 <HAL_GPIO_Init+0x2b0>)
 8001fc6:	685a      	ldr	r2, [r3, #4]
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	43db      	mvns	r3, r3
 8001fcc:	4929      	ldr	r1, [pc, #164]	; (8002074 <HAL_GPIO_Init+0x2b0>)
 8001fce:	4013      	ands	r3, r2
 8001fd0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d006      	beq.n	8001fec <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fde:	4b25      	ldr	r3, [pc, #148]	; (8002074 <HAL_GPIO_Init+0x2b0>)
 8001fe0:	689a      	ldr	r2, [r3, #8]
 8001fe2:	4924      	ldr	r1, [pc, #144]	; (8002074 <HAL_GPIO_Init+0x2b0>)
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	608b      	str	r3, [r1, #8]
 8001fea:	e006      	b.n	8001ffa <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fec:	4b21      	ldr	r3, [pc, #132]	; (8002074 <HAL_GPIO_Init+0x2b0>)
 8001fee:	689a      	ldr	r2, [r3, #8]
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	491f      	ldr	r1, [pc, #124]	; (8002074 <HAL_GPIO_Init+0x2b0>)
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d006      	beq.n	8002014 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002006:	4b1b      	ldr	r3, [pc, #108]	; (8002074 <HAL_GPIO_Init+0x2b0>)
 8002008:	68da      	ldr	r2, [r3, #12]
 800200a:	491a      	ldr	r1, [pc, #104]	; (8002074 <HAL_GPIO_Init+0x2b0>)
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	4313      	orrs	r3, r2
 8002010:	60cb      	str	r3, [r1, #12]
 8002012:	e006      	b.n	8002022 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002014:	4b17      	ldr	r3, [pc, #92]	; (8002074 <HAL_GPIO_Init+0x2b0>)
 8002016:	68da      	ldr	r2, [r3, #12]
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	43db      	mvns	r3, r3
 800201c:	4915      	ldr	r1, [pc, #84]	; (8002074 <HAL_GPIO_Init+0x2b0>)
 800201e:	4013      	ands	r3, r2
 8002020:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002024:	3301      	adds	r3, #1
 8002026:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202e:	fa22 f303 	lsr.w	r3, r2, r3
 8002032:	2b00      	cmp	r3, #0
 8002034:	f47f aed0 	bne.w	8001dd8 <HAL_GPIO_Init+0x14>
  }
}
 8002038:	bf00      	nop
 800203a:	372c      	adds	r7, #44	; 0x2c
 800203c:	46bd      	mov	sp, r7
 800203e:	bc80      	pop	{r7}
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	10210000 	.word	0x10210000
 8002048:	10110000 	.word	0x10110000
 800204c:	10120000 	.word	0x10120000
 8002050:	10310000 	.word	0x10310000
 8002054:	10320000 	.word	0x10320000
 8002058:	10220000 	.word	0x10220000
 800205c:	40021000 	.word	0x40021000
 8002060:	40010000 	.word	0x40010000
 8002064:	40010800 	.word	0x40010800
 8002068:	40010c00 	.word	0x40010c00
 800206c:	40011000 	.word	0x40011000
 8002070:	40011400 	.word	0x40011400
 8002074:	40010400 	.word	0x40010400

08002078 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	460b      	mov	r3, r1
 8002082:	807b      	strh	r3, [r7, #2]
 8002084:	4613      	mov	r3, r2
 8002086:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002088:	787b      	ldrb	r3, [r7, #1]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d003      	beq.n	8002096 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800208e:	887a      	ldrh	r2, [r7, #2]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002094:	e003      	b.n	800209e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002096:	887b      	ldrh	r3, [r7, #2]
 8002098:	041a      	lsls	r2, r3, #16
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	611a      	str	r2, [r3, #16]
}
 800209e:	bf00      	nop
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bc80      	pop	{r7}
 80020a6:	4770      	bx	lr

080020a8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	460b      	mov	r3, r1
 80020b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	68da      	ldr	r2, [r3, #12]
 80020b8:	887b      	ldrh	r3, [r7, #2]
 80020ba:	4013      	ands	r3, r2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d003      	beq.n	80020c8 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020c0:	887a      	ldrh	r2, [r7, #2]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80020c6:	e002      	b.n	80020ce <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020c8:	887a      	ldrh	r2, [r7, #2]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	611a      	str	r2, [r3, #16]
}
 80020ce:	bf00      	nop
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bc80      	pop	{r7}
 80020d6:	4770      	bx	lr

080020d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	4603      	mov	r3, r0
 80020e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80020e2:	4b08      	ldr	r3, [pc, #32]	; (8002104 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020e4:	695a      	ldr	r2, [r3, #20]
 80020e6:	88fb      	ldrh	r3, [r7, #6]
 80020e8:	4013      	ands	r3, r2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d006      	beq.n	80020fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020ee:	4a05      	ldr	r2, [pc, #20]	; (8002104 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020f0:	88fb      	ldrh	r3, [r7, #6]
 80020f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020f4:	88fb      	ldrh	r3, [r7, #6]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7fe f916 	bl	8000328 <HAL_GPIO_EXTI_Callback>
  }
}
 80020fc:	bf00      	nop
 80020fe:	3708      	adds	r7, #8
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	40010400 	.word	0x40010400

08002108 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e26c      	b.n	80025f4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	2b00      	cmp	r3, #0
 8002124:	f000 8087 	beq.w	8002236 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002128:	4b92      	ldr	r3, [pc, #584]	; (8002374 <HAL_RCC_OscConfig+0x26c>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f003 030c 	and.w	r3, r3, #12
 8002130:	2b04      	cmp	r3, #4
 8002132:	d00c      	beq.n	800214e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002134:	4b8f      	ldr	r3, [pc, #572]	; (8002374 <HAL_RCC_OscConfig+0x26c>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f003 030c 	and.w	r3, r3, #12
 800213c:	2b08      	cmp	r3, #8
 800213e:	d112      	bne.n	8002166 <HAL_RCC_OscConfig+0x5e>
 8002140:	4b8c      	ldr	r3, [pc, #560]	; (8002374 <HAL_RCC_OscConfig+0x26c>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800214c:	d10b      	bne.n	8002166 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800214e:	4b89      	ldr	r3, [pc, #548]	; (8002374 <HAL_RCC_OscConfig+0x26c>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d06c      	beq.n	8002234 <HAL_RCC_OscConfig+0x12c>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d168      	bne.n	8002234 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e246      	b.n	80025f4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800216e:	d106      	bne.n	800217e <HAL_RCC_OscConfig+0x76>
 8002170:	4b80      	ldr	r3, [pc, #512]	; (8002374 <HAL_RCC_OscConfig+0x26c>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a7f      	ldr	r2, [pc, #508]	; (8002374 <HAL_RCC_OscConfig+0x26c>)
 8002176:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800217a:	6013      	str	r3, [r2, #0]
 800217c:	e02e      	b.n	80021dc <HAL_RCC_OscConfig+0xd4>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d10c      	bne.n	80021a0 <HAL_RCC_OscConfig+0x98>
 8002186:	4b7b      	ldr	r3, [pc, #492]	; (8002374 <HAL_RCC_OscConfig+0x26c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a7a      	ldr	r2, [pc, #488]	; (8002374 <HAL_RCC_OscConfig+0x26c>)
 800218c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002190:	6013      	str	r3, [r2, #0]
 8002192:	4b78      	ldr	r3, [pc, #480]	; (8002374 <HAL_RCC_OscConfig+0x26c>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a77      	ldr	r2, [pc, #476]	; (8002374 <HAL_RCC_OscConfig+0x26c>)
 8002198:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800219c:	6013      	str	r3, [r2, #0]
 800219e:	e01d      	b.n	80021dc <HAL_RCC_OscConfig+0xd4>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021a8:	d10c      	bne.n	80021c4 <HAL_RCC_OscConfig+0xbc>
 80021aa:	4b72      	ldr	r3, [pc, #456]	; (8002374 <HAL_RCC_OscConfig+0x26c>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a71      	ldr	r2, [pc, #452]	; (8002374 <HAL_RCC_OscConfig+0x26c>)
 80021b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021b4:	6013      	str	r3, [r2, #0]
 80021b6:	4b6f      	ldr	r3, [pc, #444]	; (8002374 <HAL_RCC_OscConfig+0x26c>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a6e      	ldr	r2, [pc, #440]	; (8002374 <HAL_RCC_OscConfig+0x26c>)
 80021bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021c0:	6013      	str	r3, [r2, #0]
 80021c2:	e00b      	b.n	80021dc <HAL_RCC_OscConfig+0xd4>
 80021c4:	4b6b      	ldr	r3, [pc, #428]	; (8002374 <HAL_RCC_OscConfig+0x26c>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a6a      	ldr	r2, [pc, #424]	; (8002374 <HAL_RCC_OscConfig+0x26c>)
 80021ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021ce:	6013      	str	r3, [r2, #0]
 80021d0:	4b68      	ldr	r3, [pc, #416]	; (8002374 <HAL_RCC_OscConfig+0x26c>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a67      	ldr	r2, [pc, #412]	; (8002374 <HAL_RCC_OscConfig+0x26c>)
 80021d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d013      	beq.n	800220c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e4:	f7fe ff2c 	bl	8001040 <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021ec:	f7fe ff28 	bl	8001040 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b64      	cmp	r3, #100	; 0x64
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e1fa      	b.n	80025f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021fe:	4b5d      	ldr	r3, [pc, #372]	; (8002374 <HAL_RCC_OscConfig+0x26c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d0f0      	beq.n	80021ec <HAL_RCC_OscConfig+0xe4>
 800220a:	e014      	b.n	8002236 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220c:	f7fe ff18 	bl	8001040 <HAL_GetTick>
 8002210:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002214:	f7fe ff14 	bl	8001040 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b64      	cmp	r3, #100	; 0x64
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e1e6      	b.n	80025f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002226:	4b53      	ldr	r3, [pc, #332]	; (8002374 <HAL_RCC_OscConfig+0x26c>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d1f0      	bne.n	8002214 <HAL_RCC_OscConfig+0x10c>
 8002232:	e000      	b.n	8002236 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002234:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	2b00      	cmp	r3, #0
 8002240:	d063      	beq.n	800230a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002242:	4b4c      	ldr	r3, [pc, #304]	; (8002374 <HAL_RCC_OscConfig+0x26c>)
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f003 030c 	and.w	r3, r3, #12
 800224a:	2b00      	cmp	r3, #0
 800224c:	d00b      	beq.n	8002266 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800224e:	4b49      	ldr	r3, [pc, #292]	; (8002374 <HAL_RCC_OscConfig+0x26c>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f003 030c 	and.w	r3, r3, #12
 8002256:	2b08      	cmp	r3, #8
 8002258:	d11c      	bne.n	8002294 <HAL_RCC_OscConfig+0x18c>
 800225a:	4b46      	ldr	r3, [pc, #280]	; (8002374 <HAL_RCC_OscConfig+0x26c>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d116      	bne.n	8002294 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002266:	4b43      	ldr	r3, [pc, #268]	; (8002374 <HAL_RCC_OscConfig+0x26c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d005      	beq.n	800227e <HAL_RCC_OscConfig+0x176>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d001      	beq.n	800227e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e1ba      	b.n	80025f4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800227e:	4b3d      	ldr	r3, [pc, #244]	; (8002374 <HAL_RCC_OscConfig+0x26c>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	695b      	ldr	r3, [r3, #20]
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	4939      	ldr	r1, [pc, #228]	; (8002374 <HAL_RCC_OscConfig+0x26c>)
 800228e:	4313      	orrs	r3, r2
 8002290:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002292:	e03a      	b.n	800230a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	691b      	ldr	r3, [r3, #16]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d020      	beq.n	80022de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800229c:	4b36      	ldr	r3, [pc, #216]	; (8002378 <HAL_RCC_OscConfig+0x270>)
 800229e:	2201      	movs	r2, #1
 80022a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a2:	f7fe fecd 	bl	8001040 <HAL_GetTick>
 80022a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a8:	e008      	b.n	80022bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022aa:	f7fe fec9 	bl	8001040 <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d901      	bls.n	80022bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	e19b      	b.n	80025f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022bc:	4b2d      	ldr	r3, [pc, #180]	; (8002374 <HAL_RCC_OscConfig+0x26c>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0302 	and.w	r3, r3, #2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d0f0      	beq.n	80022aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022c8:	4b2a      	ldr	r3, [pc, #168]	; (8002374 <HAL_RCC_OscConfig+0x26c>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	695b      	ldr	r3, [r3, #20]
 80022d4:	00db      	lsls	r3, r3, #3
 80022d6:	4927      	ldr	r1, [pc, #156]	; (8002374 <HAL_RCC_OscConfig+0x26c>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	600b      	str	r3, [r1, #0]
 80022dc:	e015      	b.n	800230a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022de:	4b26      	ldr	r3, [pc, #152]	; (8002378 <HAL_RCC_OscConfig+0x270>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e4:	f7fe feac 	bl	8001040 <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ea:	e008      	b.n	80022fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022ec:	f7fe fea8 	bl	8001040 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e17a      	b.n	80025f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022fe:	4b1d      	ldr	r3, [pc, #116]	; (8002374 <HAL_RCC_OscConfig+0x26c>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1f0      	bne.n	80022ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0308 	and.w	r3, r3, #8
 8002312:	2b00      	cmp	r3, #0
 8002314:	d03a      	beq.n	800238c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	699b      	ldr	r3, [r3, #24]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d019      	beq.n	8002352 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800231e:	4b17      	ldr	r3, [pc, #92]	; (800237c <HAL_RCC_OscConfig+0x274>)
 8002320:	2201      	movs	r2, #1
 8002322:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002324:	f7fe fe8c 	bl	8001040 <HAL_GetTick>
 8002328:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800232a:	e008      	b.n	800233e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800232c:	f7fe fe88 	bl	8001040 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e15a      	b.n	80025f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800233e:	4b0d      	ldr	r3, [pc, #52]	; (8002374 <HAL_RCC_OscConfig+0x26c>)
 8002340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d0f0      	beq.n	800232c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800234a:	2001      	movs	r0, #1
 800234c:	f000 fada 	bl	8002904 <RCC_Delay>
 8002350:	e01c      	b.n	800238c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002352:	4b0a      	ldr	r3, [pc, #40]	; (800237c <HAL_RCC_OscConfig+0x274>)
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002358:	f7fe fe72 	bl	8001040 <HAL_GetTick>
 800235c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800235e:	e00f      	b.n	8002380 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002360:	f7fe fe6e 	bl	8001040 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b02      	cmp	r3, #2
 800236c:	d908      	bls.n	8002380 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e140      	b.n	80025f4 <HAL_RCC_OscConfig+0x4ec>
 8002372:	bf00      	nop
 8002374:	40021000 	.word	0x40021000
 8002378:	42420000 	.word	0x42420000
 800237c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002380:	4b9e      	ldr	r3, [pc, #632]	; (80025fc <HAL_RCC_OscConfig+0x4f4>)
 8002382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002384:	f003 0302 	and.w	r3, r3, #2
 8002388:	2b00      	cmp	r3, #0
 800238a:	d1e9      	bne.n	8002360 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0304 	and.w	r3, r3, #4
 8002394:	2b00      	cmp	r3, #0
 8002396:	f000 80a6 	beq.w	80024e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800239a:	2300      	movs	r3, #0
 800239c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800239e:	4b97      	ldr	r3, [pc, #604]	; (80025fc <HAL_RCC_OscConfig+0x4f4>)
 80023a0:	69db      	ldr	r3, [r3, #28]
 80023a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d10d      	bne.n	80023c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023aa:	4b94      	ldr	r3, [pc, #592]	; (80025fc <HAL_RCC_OscConfig+0x4f4>)
 80023ac:	69db      	ldr	r3, [r3, #28]
 80023ae:	4a93      	ldr	r2, [pc, #588]	; (80025fc <HAL_RCC_OscConfig+0x4f4>)
 80023b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023b4:	61d3      	str	r3, [r2, #28]
 80023b6:	4b91      	ldr	r3, [pc, #580]	; (80025fc <HAL_RCC_OscConfig+0x4f4>)
 80023b8:	69db      	ldr	r3, [r3, #28]
 80023ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023be:	60bb      	str	r3, [r7, #8]
 80023c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023c2:	2301      	movs	r3, #1
 80023c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c6:	4b8e      	ldr	r3, [pc, #568]	; (8002600 <HAL_RCC_OscConfig+0x4f8>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d118      	bne.n	8002404 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023d2:	4b8b      	ldr	r3, [pc, #556]	; (8002600 <HAL_RCC_OscConfig+0x4f8>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a8a      	ldr	r2, [pc, #552]	; (8002600 <HAL_RCC_OscConfig+0x4f8>)
 80023d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023de:	f7fe fe2f 	bl	8001040 <HAL_GetTick>
 80023e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e4:	e008      	b.n	80023f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023e6:	f7fe fe2b 	bl	8001040 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	2b64      	cmp	r3, #100	; 0x64
 80023f2:	d901      	bls.n	80023f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e0fd      	b.n	80025f4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f8:	4b81      	ldr	r3, [pc, #516]	; (8002600 <HAL_RCC_OscConfig+0x4f8>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002400:	2b00      	cmp	r3, #0
 8002402:	d0f0      	beq.n	80023e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d106      	bne.n	800241a <HAL_RCC_OscConfig+0x312>
 800240c:	4b7b      	ldr	r3, [pc, #492]	; (80025fc <HAL_RCC_OscConfig+0x4f4>)
 800240e:	6a1b      	ldr	r3, [r3, #32]
 8002410:	4a7a      	ldr	r2, [pc, #488]	; (80025fc <HAL_RCC_OscConfig+0x4f4>)
 8002412:	f043 0301 	orr.w	r3, r3, #1
 8002416:	6213      	str	r3, [r2, #32]
 8002418:	e02d      	b.n	8002476 <HAL_RCC_OscConfig+0x36e>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d10c      	bne.n	800243c <HAL_RCC_OscConfig+0x334>
 8002422:	4b76      	ldr	r3, [pc, #472]	; (80025fc <HAL_RCC_OscConfig+0x4f4>)
 8002424:	6a1b      	ldr	r3, [r3, #32]
 8002426:	4a75      	ldr	r2, [pc, #468]	; (80025fc <HAL_RCC_OscConfig+0x4f4>)
 8002428:	f023 0301 	bic.w	r3, r3, #1
 800242c:	6213      	str	r3, [r2, #32]
 800242e:	4b73      	ldr	r3, [pc, #460]	; (80025fc <HAL_RCC_OscConfig+0x4f4>)
 8002430:	6a1b      	ldr	r3, [r3, #32]
 8002432:	4a72      	ldr	r2, [pc, #456]	; (80025fc <HAL_RCC_OscConfig+0x4f4>)
 8002434:	f023 0304 	bic.w	r3, r3, #4
 8002438:	6213      	str	r3, [r2, #32]
 800243a:	e01c      	b.n	8002476 <HAL_RCC_OscConfig+0x36e>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	2b05      	cmp	r3, #5
 8002442:	d10c      	bne.n	800245e <HAL_RCC_OscConfig+0x356>
 8002444:	4b6d      	ldr	r3, [pc, #436]	; (80025fc <HAL_RCC_OscConfig+0x4f4>)
 8002446:	6a1b      	ldr	r3, [r3, #32]
 8002448:	4a6c      	ldr	r2, [pc, #432]	; (80025fc <HAL_RCC_OscConfig+0x4f4>)
 800244a:	f043 0304 	orr.w	r3, r3, #4
 800244e:	6213      	str	r3, [r2, #32]
 8002450:	4b6a      	ldr	r3, [pc, #424]	; (80025fc <HAL_RCC_OscConfig+0x4f4>)
 8002452:	6a1b      	ldr	r3, [r3, #32]
 8002454:	4a69      	ldr	r2, [pc, #420]	; (80025fc <HAL_RCC_OscConfig+0x4f4>)
 8002456:	f043 0301 	orr.w	r3, r3, #1
 800245a:	6213      	str	r3, [r2, #32]
 800245c:	e00b      	b.n	8002476 <HAL_RCC_OscConfig+0x36e>
 800245e:	4b67      	ldr	r3, [pc, #412]	; (80025fc <HAL_RCC_OscConfig+0x4f4>)
 8002460:	6a1b      	ldr	r3, [r3, #32]
 8002462:	4a66      	ldr	r2, [pc, #408]	; (80025fc <HAL_RCC_OscConfig+0x4f4>)
 8002464:	f023 0301 	bic.w	r3, r3, #1
 8002468:	6213      	str	r3, [r2, #32]
 800246a:	4b64      	ldr	r3, [pc, #400]	; (80025fc <HAL_RCC_OscConfig+0x4f4>)
 800246c:	6a1b      	ldr	r3, [r3, #32]
 800246e:	4a63      	ldr	r2, [pc, #396]	; (80025fc <HAL_RCC_OscConfig+0x4f4>)
 8002470:	f023 0304 	bic.w	r3, r3, #4
 8002474:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d015      	beq.n	80024aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800247e:	f7fe fddf 	bl	8001040 <HAL_GetTick>
 8002482:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002484:	e00a      	b.n	800249c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002486:	f7fe fddb 	bl	8001040 <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	f241 3288 	movw	r2, #5000	; 0x1388
 8002494:	4293      	cmp	r3, r2
 8002496:	d901      	bls.n	800249c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e0ab      	b.n	80025f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800249c:	4b57      	ldr	r3, [pc, #348]	; (80025fc <HAL_RCC_OscConfig+0x4f4>)
 800249e:	6a1b      	ldr	r3, [r3, #32]
 80024a0:	f003 0302 	and.w	r3, r3, #2
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d0ee      	beq.n	8002486 <HAL_RCC_OscConfig+0x37e>
 80024a8:	e014      	b.n	80024d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024aa:	f7fe fdc9 	bl	8001040 <HAL_GetTick>
 80024ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024b0:	e00a      	b.n	80024c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024b2:	f7fe fdc5 	bl	8001040 <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e095      	b.n	80025f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024c8:	4b4c      	ldr	r3, [pc, #304]	; (80025fc <HAL_RCC_OscConfig+0x4f4>)
 80024ca:	6a1b      	ldr	r3, [r3, #32]
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d1ee      	bne.n	80024b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024d4:	7dfb      	ldrb	r3, [r7, #23]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d105      	bne.n	80024e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024da:	4b48      	ldr	r3, [pc, #288]	; (80025fc <HAL_RCC_OscConfig+0x4f4>)
 80024dc:	69db      	ldr	r3, [r3, #28]
 80024de:	4a47      	ldr	r2, [pc, #284]	; (80025fc <HAL_RCC_OscConfig+0x4f4>)
 80024e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	69db      	ldr	r3, [r3, #28]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f000 8081 	beq.w	80025f2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024f0:	4b42      	ldr	r3, [pc, #264]	; (80025fc <HAL_RCC_OscConfig+0x4f4>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f003 030c 	and.w	r3, r3, #12
 80024f8:	2b08      	cmp	r3, #8
 80024fa:	d061      	beq.n	80025c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	69db      	ldr	r3, [r3, #28]
 8002500:	2b02      	cmp	r3, #2
 8002502:	d146      	bne.n	8002592 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002504:	4b3f      	ldr	r3, [pc, #252]	; (8002604 <HAL_RCC_OscConfig+0x4fc>)
 8002506:	2200      	movs	r2, #0
 8002508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800250a:	f7fe fd99 	bl	8001040 <HAL_GetTick>
 800250e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002510:	e008      	b.n	8002524 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002512:	f7fe fd95 	bl	8001040 <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d901      	bls.n	8002524 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e067      	b.n	80025f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002524:	4b35      	ldr	r3, [pc, #212]	; (80025fc <HAL_RCC_OscConfig+0x4f4>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d1f0      	bne.n	8002512 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a1b      	ldr	r3, [r3, #32]
 8002534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002538:	d108      	bne.n	800254c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800253a:	4b30      	ldr	r3, [pc, #192]	; (80025fc <HAL_RCC_OscConfig+0x4f4>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	492d      	ldr	r1, [pc, #180]	; (80025fc <HAL_RCC_OscConfig+0x4f4>)
 8002548:	4313      	orrs	r3, r2
 800254a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800254c:	4b2b      	ldr	r3, [pc, #172]	; (80025fc <HAL_RCC_OscConfig+0x4f4>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a19      	ldr	r1, [r3, #32]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255c:	430b      	orrs	r3, r1
 800255e:	4927      	ldr	r1, [pc, #156]	; (80025fc <HAL_RCC_OscConfig+0x4f4>)
 8002560:	4313      	orrs	r3, r2
 8002562:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002564:	4b27      	ldr	r3, [pc, #156]	; (8002604 <HAL_RCC_OscConfig+0x4fc>)
 8002566:	2201      	movs	r2, #1
 8002568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800256a:	f7fe fd69 	bl	8001040 <HAL_GetTick>
 800256e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002570:	e008      	b.n	8002584 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002572:	f7fe fd65 	bl	8001040 <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	2b02      	cmp	r3, #2
 800257e:	d901      	bls.n	8002584 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e037      	b.n	80025f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002584:	4b1d      	ldr	r3, [pc, #116]	; (80025fc <HAL_RCC_OscConfig+0x4f4>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d0f0      	beq.n	8002572 <HAL_RCC_OscConfig+0x46a>
 8002590:	e02f      	b.n	80025f2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002592:	4b1c      	ldr	r3, [pc, #112]	; (8002604 <HAL_RCC_OscConfig+0x4fc>)
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002598:	f7fe fd52 	bl	8001040 <HAL_GetTick>
 800259c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800259e:	e008      	b.n	80025b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025a0:	f7fe fd4e 	bl	8001040 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e020      	b.n	80025f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025b2:	4b12      	ldr	r3, [pc, #72]	; (80025fc <HAL_RCC_OscConfig+0x4f4>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d1f0      	bne.n	80025a0 <HAL_RCC_OscConfig+0x498>
 80025be:	e018      	b.n	80025f2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	69db      	ldr	r3, [r3, #28]
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d101      	bne.n	80025cc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e013      	b.n	80025f4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025cc:	4b0b      	ldr	r3, [pc, #44]	; (80025fc <HAL_RCC_OscConfig+0x4f4>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a1b      	ldr	r3, [r3, #32]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d106      	bne.n	80025ee <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d001      	beq.n	80025f2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e000      	b.n	80025f4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3718      	adds	r7, #24
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	40021000 	.word	0x40021000
 8002600:	40007000 	.word	0x40007000
 8002604:	42420060 	.word	0x42420060

08002608 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d101      	bne.n	800261c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e0d0      	b.n	80027be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800261c:	4b6a      	ldr	r3, [pc, #424]	; (80027c8 <HAL_RCC_ClockConfig+0x1c0>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0307 	and.w	r3, r3, #7
 8002624:	683a      	ldr	r2, [r7, #0]
 8002626:	429a      	cmp	r2, r3
 8002628:	d910      	bls.n	800264c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800262a:	4b67      	ldr	r3, [pc, #412]	; (80027c8 <HAL_RCC_ClockConfig+0x1c0>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f023 0207 	bic.w	r2, r3, #7
 8002632:	4965      	ldr	r1, [pc, #404]	; (80027c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	4313      	orrs	r3, r2
 8002638:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800263a:	4b63      	ldr	r3, [pc, #396]	; (80027c8 <HAL_RCC_ClockConfig+0x1c0>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0307 	and.w	r3, r3, #7
 8002642:	683a      	ldr	r2, [r7, #0]
 8002644:	429a      	cmp	r2, r3
 8002646:	d001      	beq.n	800264c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e0b8      	b.n	80027be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d020      	beq.n	800269a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0304 	and.w	r3, r3, #4
 8002660:	2b00      	cmp	r3, #0
 8002662:	d005      	beq.n	8002670 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002664:	4b59      	ldr	r3, [pc, #356]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	4a58      	ldr	r2, [pc, #352]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 800266a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800266e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0308 	and.w	r3, r3, #8
 8002678:	2b00      	cmp	r3, #0
 800267a:	d005      	beq.n	8002688 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800267c:	4b53      	ldr	r3, [pc, #332]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	4a52      	ldr	r2, [pc, #328]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 8002682:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002686:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002688:	4b50      	ldr	r3, [pc, #320]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	494d      	ldr	r1, [pc, #308]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 8002696:	4313      	orrs	r3, r2
 8002698:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d040      	beq.n	8002728 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d107      	bne.n	80026be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ae:	4b47      	ldr	r3, [pc, #284]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d115      	bne.n	80026e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e07f      	b.n	80027be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d107      	bne.n	80026d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026c6:	4b41      	ldr	r3, [pc, #260]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d109      	bne.n	80026e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e073      	b.n	80027be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026d6:	4b3d      	ldr	r3, [pc, #244]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d101      	bne.n	80026e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e06b      	b.n	80027be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026e6:	4b39      	ldr	r3, [pc, #228]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f023 0203 	bic.w	r2, r3, #3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	4936      	ldr	r1, [pc, #216]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026f8:	f7fe fca2 	bl	8001040 <HAL_GetTick>
 80026fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026fe:	e00a      	b.n	8002716 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002700:	f7fe fc9e 	bl	8001040 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	f241 3288 	movw	r2, #5000	; 0x1388
 800270e:	4293      	cmp	r3, r2
 8002710:	d901      	bls.n	8002716 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e053      	b.n	80027be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002716:	4b2d      	ldr	r3, [pc, #180]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f003 020c 	and.w	r2, r3, #12
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	429a      	cmp	r2, r3
 8002726:	d1eb      	bne.n	8002700 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002728:	4b27      	ldr	r3, [pc, #156]	; (80027c8 <HAL_RCC_ClockConfig+0x1c0>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0307 	and.w	r3, r3, #7
 8002730:	683a      	ldr	r2, [r7, #0]
 8002732:	429a      	cmp	r2, r3
 8002734:	d210      	bcs.n	8002758 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002736:	4b24      	ldr	r3, [pc, #144]	; (80027c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f023 0207 	bic.w	r2, r3, #7
 800273e:	4922      	ldr	r1, [pc, #136]	; (80027c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	4313      	orrs	r3, r2
 8002744:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002746:	4b20      	ldr	r3, [pc, #128]	; (80027c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0307 	and.w	r3, r3, #7
 800274e:	683a      	ldr	r2, [r7, #0]
 8002750:	429a      	cmp	r2, r3
 8002752:	d001      	beq.n	8002758 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e032      	b.n	80027be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0304 	and.w	r3, r3, #4
 8002760:	2b00      	cmp	r3, #0
 8002762:	d008      	beq.n	8002776 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002764:	4b19      	ldr	r3, [pc, #100]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	4916      	ldr	r1, [pc, #88]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 8002772:	4313      	orrs	r3, r2
 8002774:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0308 	and.w	r3, r3, #8
 800277e:	2b00      	cmp	r3, #0
 8002780:	d009      	beq.n	8002796 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002782:	4b12      	ldr	r3, [pc, #72]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	490e      	ldr	r1, [pc, #56]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 8002792:	4313      	orrs	r3, r2
 8002794:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002796:	f000 f821 	bl	80027dc <HAL_RCC_GetSysClockFreq>
 800279a:	4601      	mov	r1, r0
 800279c:	4b0b      	ldr	r3, [pc, #44]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	091b      	lsrs	r3, r3, #4
 80027a2:	f003 030f 	and.w	r3, r3, #15
 80027a6:	4a0a      	ldr	r2, [pc, #40]	; (80027d0 <HAL_RCC_ClockConfig+0x1c8>)
 80027a8:	5cd3      	ldrb	r3, [r2, r3]
 80027aa:	fa21 f303 	lsr.w	r3, r1, r3
 80027ae:	4a09      	ldr	r2, [pc, #36]	; (80027d4 <HAL_RCC_ClockConfig+0x1cc>)
 80027b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027b2:	4b09      	ldr	r3, [pc, #36]	; (80027d8 <HAL_RCC_ClockConfig+0x1d0>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7fe fc00 	bl	8000fbc <HAL_InitTick>

  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3710      	adds	r7, #16
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	40022000 	.word	0x40022000
 80027cc:	40021000 	.word	0x40021000
 80027d0:	08006ecc 	.word	0x08006ecc
 80027d4:	20000000 	.word	0x20000000
 80027d8:	20000004 	.word	0x20000004

080027dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027dc:	b490      	push	{r4, r7}
 80027de:	b08a      	sub	sp, #40	; 0x28
 80027e0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80027e2:	4b2a      	ldr	r3, [pc, #168]	; (800288c <HAL_RCC_GetSysClockFreq+0xb0>)
 80027e4:	1d3c      	adds	r4, r7, #4
 80027e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80027ec:	4b28      	ldr	r3, [pc, #160]	; (8002890 <HAL_RCC_GetSysClockFreq+0xb4>)
 80027ee:	881b      	ldrh	r3, [r3, #0]
 80027f0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027f2:	2300      	movs	r3, #0
 80027f4:	61fb      	str	r3, [r7, #28]
 80027f6:	2300      	movs	r3, #0
 80027f8:	61bb      	str	r3, [r7, #24]
 80027fa:	2300      	movs	r3, #0
 80027fc:	627b      	str	r3, [r7, #36]	; 0x24
 80027fe:	2300      	movs	r3, #0
 8002800:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002802:	2300      	movs	r3, #0
 8002804:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002806:	4b23      	ldr	r3, [pc, #140]	; (8002894 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	f003 030c 	and.w	r3, r3, #12
 8002812:	2b04      	cmp	r3, #4
 8002814:	d002      	beq.n	800281c <HAL_RCC_GetSysClockFreq+0x40>
 8002816:	2b08      	cmp	r3, #8
 8002818:	d003      	beq.n	8002822 <HAL_RCC_GetSysClockFreq+0x46>
 800281a:	e02d      	b.n	8002878 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800281c:	4b1e      	ldr	r3, [pc, #120]	; (8002898 <HAL_RCC_GetSysClockFreq+0xbc>)
 800281e:	623b      	str	r3, [r7, #32]
      break;
 8002820:	e02d      	b.n	800287e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	0c9b      	lsrs	r3, r3, #18
 8002826:	f003 030f 	and.w	r3, r3, #15
 800282a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800282e:	4413      	add	r3, r2
 8002830:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002834:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d013      	beq.n	8002868 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002840:	4b14      	ldr	r3, [pc, #80]	; (8002894 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	0c5b      	lsrs	r3, r3, #17
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800284e:	4413      	add	r3, r2
 8002850:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002854:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	4a0f      	ldr	r2, [pc, #60]	; (8002898 <HAL_RCC_GetSysClockFreq+0xbc>)
 800285a:	fb02 f203 	mul.w	r2, r2, r3
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	fbb2 f3f3 	udiv	r3, r2, r3
 8002864:	627b      	str	r3, [r7, #36]	; 0x24
 8002866:	e004      	b.n	8002872 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	4a0c      	ldr	r2, [pc, #48]	; (800289c <HAL_RCC_GetSysClockFreq+0xc0>)
 800286c:	fb02 f303 	mul.w	r3, r2, r3
 8002870:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002874:	623b      	str	r3, [r7, #32]
      break;
 8002876:	e002      	b.n	800287e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002878:	4b07      	ldr	r3, [pc, #28]	; (8002898 <HAL_RCC_GetSysClockFreq+0xbc>)
 800287a:	623b      	str	r3, [r7, #32]
      break;
 800287c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800287e:	6a3b      	ldr	r3, [r7, #32]
}
 8002880:	4618      	mov	r0, r3
 8002882:	3728      	adds	r7, #40	; 0x28
 8002884:	46bd      	mov	sp, r7
 8002886:	bc90      	pop	{r4, r7}
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	08006e58 	.word	0x08006e58
 8002890:	08006e68 	.word	0x08006e68
 8002894:	40021000 	.word	0x40021000
 8002898:	007a1200 	.word	0x007a1200
 800289c:	003d0900 	.word	0x003d0900

080028a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028a4:	4b02      	ldr	r3, [pc, #8]	; (80028b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80028a6:	681b      	ldr	r3, [r3, #0]
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bc80      	pop	{r7}
 80028ae:	4770      	bx	lr
 80028b0:	20000000 	.word	0x20000000

080028b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028b8:	f7ff fff2 	bl	80028a0 <HAL_RCC_GetHCLKFreq>
 80028bc:	4601      	mov	r1, r0
 80028be:	4b05      	ldr	r3, [pc, #20]	; (80028d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	0a1b      	lsrs	r3, r3, #8
 80028c4:	f003 0307 	and.w	r3, r3, #7
 80028c8:	4a03      	ldr	r2, [pc, #12]	; (80028d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028ca:	5cd3      	ldrb	r3, [r2, r3]
 80028cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	40021000 	.word	0x40021000
 80028d8:	08006edc 	.word	0x08006edc

080028dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028e0:	f7ff ffde 	bl	80028a0 <HAL_RCC_GetHCLKFreq>
 80028e4:	4601      	mov	r1, r0
 80028e6:	4b05      	ldr	r3, [pc, #20]	; (80028fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	0adb      	lsrs	r3, r3, #11
 80028ec:	f003 0307 	and.w	r3, r3, #7
 80028f0:	4a03      	ldr	r2, [pc, #12]	; (8002900 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028f2:	5cd3      	ldrb	r3, [r2, r3]
 80028f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	40021000 	.word	0x40021000
 8002900:	08006edc 	.word	0x08006edc

08002904 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002904:	b480      	push	{r7}
 8002906:	b085      	sub	sp, #20
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800290c:	4b0a      	ldr	r3, [pc, #40]	; (8002938 <RCC_Delay+0x34>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a0a      	ldr	r2, [pc, #40]	; (800293c <RCC_Delay+0x38>)
 8002912:	fba2 2303 	umull	r2, r3, r2, r3
 8002916:	0a5b      	lsrs	r3, r3, #9
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	fb02 f303 	mul.w	r3, r2, r3
 800291e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002920:	bf00      	nop
  }
  while (Delay --);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	1e5a      	subs	r2, r3, #1
 8002926:	60fa      	str	r2, [r7, #12]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d1f9      	bne.n	8002920 <RCC_Delay+0x1c>
}
 800292c:	bf00      	nop
 800292e:	3714      	adds	r7, #20
 8002930:	46bd      	mov	sp, r7
 8002932:	bc80      	pop	{r7}
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	20000000 	.word	0x20000000
 800293c:	10624dd3 	.word	0x10624dd3

08002940 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002948:	2300      	movs	r3, #0
 800294a:	613b      	str	r3, [r7, #16]
 800294c:	2300      	movs	r3, #0
 800294e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0301 	and.w	r3, r3, #1
 8002958:	2b00      	cmp	r3, #0
 800295a:	d07d      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800295c:	2300      	movs	r3, #0
 800295e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002960:	4b4f      	ldr	r3, [pc, #316]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002962:	69db      	ldr	r3, [r3, #28]
 8002964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d10d      	bne.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800296c:	4b4c      	ldr	r3, [pc, #304]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800296e:	69db      	ldr	r3, [r3, #28]
 8002970:	4a4b      	ldr	r2, [pc, #300]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002972:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002976:	61d3      	str	r3, [r2, #28]
 8002978:	4b49      	ldr	r3, [pc, #292]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800297a:	69db      	ldr	r3, [r3, #28]
 800297c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002980:	60bb      	str	r3, [r7, #8]
 8002982:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002984:	2301      	movs	r3, #1
 8002986:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002988:	4b46      	ldr	r3, [pc, #280]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002990:	2b00      	cmp	r3, #0
 8002992:	d118      	bne.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002994:	4b43      	ldr	r3, [pc, #268]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a42      	ldr	r2, [pc, #264]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800299a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800299e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029a0:	f7fe fb4e 	bl	8001040 <HAL_GetTick>
 80029a4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029a6:	e008      	b.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029a8:	f7fe fb4a 	bl	8001040 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b64      	cmp	r3, #100	; 0x64
 80029b4:	d901      	bls.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e06d      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ba:	4b3a      	ldr	r3, [pc, #232]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d0f0      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029c6:	4b36      	ldr	r3, [pc, #216]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029ce:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d02e      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029de:	68fa      	ldr	r2, [r7, #12]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d027      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029e4:	4b2e      	ldr	r3, [pc, #184]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029e6:	6a1b      	ldr	r3, [r3, #32]
 80029e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029ec:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029ee:	4b2e      	ldr	r3, [pc, #184]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80029f0:	2201      	movs	r2, #1
 80029f2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029f4:	4b2c      	ldr	r3, [pc, #176]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80029fa:	4a29      	ldr	r2, [pc, #164]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d014      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a0a:	f7fe fb19 	bl	8001040 <HAL_GetTick>
 8002a0e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a10:	e00a      	b.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a12:	f7fe fb15 	bl	8001040 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d901      	bls.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e036      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a28:	4b1d      	ldr	r3, [pc, #116]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a2a:	6a1b      	ldr	r3, [r3, #32]
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d0ee      	beq.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a34:	4b1a      	ldr	r3, [pc, #104]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a36:	6a1b      	ldr	r3, [r3, #32]
 8002a38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	4917      	ldr	r1, [pc, #92]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a46:	7dfb      	ldrb	r3, [r7, #23]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d105      	bne.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a4c:	4b14      	ldr	r3, [pc, #80]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a4e:	69db      	ldr	r3, [r3, #28]
 8002a50:	4a13      	ldr	r2, [pc, #76]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a56:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0302 	and.w	r3, r3, #2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d008      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a64:	4b0e      	ldr	r3, [pc, #56]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	490b      	ldr	r1, [pc, #44]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0310 	and.w	r3, r3, #16
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d008      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a82:	4b07      	ldr	r3, [pc, #28]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	4904      	ldr	r1, [pc, #16]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3718      	adds	r7, #24
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	40007000 	.word	0x40007000
 8002aa8:	42420440 	.word	0x42420440

08002aac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e01d      	b.n	8002afa <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d106      	bne.n	8002ad8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f7fe f924 	bl	8000d20 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2202      	movs	r2, #2
 8002adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	3304      	adds	r3, #4
 8002ae8:	4619      	mov	r1, r3
 8002aea:	4610      	mov	r0, r2
 8002aec:	f000 f902 	bl	8002cf4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
	...

08002b04 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2201      	movs	r2, #1
 8002b14:	6839      	ldr	r1, [r7, #0]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f000 fad6 	bl	80030c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a10      	ldr	r2, [pc, #64]	; (8002b64 <HAL_TIM_PWM_Start+0x60>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d107      	bne.n	8002b36 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b34:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f003 0307 	and.w	r3, r3, #7
 8002b40:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2b06      	cmp	r3, #6
 8002b46:	d007      	beq.n	8002b58 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f042 0201 	orr.w	r2, r2, #1
 8002b56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3710      	adds	r7, #16
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	40012c00 	.word	0x40012c00

08002b68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d101      	bne.n	8002b82 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002b7e:	2302      	movs	r3, #2
 8002b80:	e0b4      	b.n	8002cec <HAL_TIM_PWM_ConfigChannel+0x184>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2201      	movs	r2, #1
 8002b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2202      	movs	r2, #2
 8002b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2b0c      	cmp	r3, #12
 8002b96:	f200 809f 	bhi.w	8002cd8 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002b9a:	a201      	add	r2, pc, #4	; (adr r2, 8002ba0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ba0:	08002bd5 	.word	0x08002bd5
 8002ba4:	08002cd9 	.word	0x08002cd9
 8002ba8:	08002cd9 	.word	0x08002cd9
 8002bac:	08002cd9 	.word	0x08002cd9
 8002bb0:	08002c15 	.word	0x08002c15
 8002bb4:	08002cd9 	.word	0x08002cd9
 8002bb8:	08002cd9 	.word	0x08002cd9
 8002bbc:	08002cd9 	.word	0x08002cd9
 8002bc0:	08002c57 	.word	0x08002c57
 8002bc4:	08002cd9 	.word	0x08002cd9
 8002bc8:	08002cd9 	.word	0x08002cd9
 8002bcc:	08002cd9 	.word	0x08002cd9
 8002bd0:	08002c97 	.word	0x08002c97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68b9      	ldr	r1, [r7, #8]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f000 f8ec 	bl	8002db8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	699a      	ldr	r2, [r3, #24]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f042 0208 	orr.w	r2, r2, #8
 8002bee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	699a      	ldr	r2, [r3, #24]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f022 0204 	bic.w	r2, r2, #4
 8002bfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6999      	ldr	r1, [r3, #24]
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	691a      	ldr	r2, [r3, #16]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	619a      	str	r2, [r3, #24]
      break;
 8002c12:	e062      	b.n	8002cda <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	68b9      	ldr	r1, [r7, #8]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f000 f932 	bl	8002e84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	699a      	ldr	r2, [r3, #24]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	699a      	ldr	r2, [r3, #24]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	6999      	ldr	r1, [r3, #24]
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	021a      	lsls	r2, r3, #8
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	430a      	orrs	r2, r1
 8002c52:	619a      	str	r2, [r3, #24]
      break;
 8002c54:	e041      	b.n	8002cda <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68b9      	ldr	r1, [r7, #8]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f000 f97b 	bl	8002f58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	69da      	ldr	r2, [r3, #28]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f042 0208 	orr.w	r2, r2, #8
 8002c70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	69da      	ldr	r2, [r3, #28]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f022 0204 	bic.w	r2, r2, #4
 8002c80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	69d9      	ldr	r1, [r3, #28]
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	691a      	ldr	r2, [r3, #16]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	430a      	orrs	r2, r1
 8002c92:	61da      	str	r2, [r3, #28]
      break;
 8002c94:	e021      	b.n	8002cda <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68b9      	ldr	r1, [r7, #8]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f000 f9c5 	bl	800302c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	69da      	ldr	r2, [r3, #28]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	69da      	ldr	r2, [r3, #28]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	69d9      	ldr	r1, [r3, #28]
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	691b      	ldr	r3, [r3, #16]
 8002ccc:	021a      	lsls	r2, r3, #8
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	61da      	str	r2, [r3, #28]
      break;
 8002cd6:	e000      	b.n	8002cda <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002cd8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002cea:	2300      	movs	r3, #0
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3710      	adds	r7, #16
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4a29      	ldr	r2, [pc, #164]	; (8002dac <TIM_Base_SetConfig+0xb8>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d00b      	beq.n	8002d24 <TIM_Base_SetConfig+0x30>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d12:	d007      	beq.n	8002d24 <TIM_Base_SetConfig+0x30>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a26      	ldr	r2, [pc, #152]	; (8002db0 <TIM_Base_SetConfig+0xbc>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d003      	beq.n	8002d24 <TIM_Base_SetConfig+0x30>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a25      	ldr	r2, [pc, #148]	; (8002db4 <TIM_Base_SetConfig+0xc0>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d108      	bne.n	8002d36 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a1c      	ldr	r2, [pc, #112]	; (8002dac <TIM_Base_SetConfig+0xb8>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d00b      	beq.n	8002d56 <TIM_Base_SetConfig+0x62>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d44:	d007      	beq.n	8002d56 <TIM_Base_SetConfig+0x62>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a19      	ldr	r2, [pc, #100]	; (8002db0 <TIM_Base_SetConfig+0xbc>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d003      	beq.n	8002d56 <TIM_Base_SetConfig+0x62>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a18      	ldr	r2, [pc, #96]	; (8002db4 <TIM_Base_SetConfig+0xc0>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d108      	bne.n	8002d68 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	68fa      	ldr	r2, [r7, #12]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	68fa      	ldr	r2, [r7, #12]
 8002d7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	689a      	ldr	r2, [r3, #8]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a07      	ldr	r2, [pc, #28]	; (8002dac <TIM_Base_SetConfig+0xb8>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d103      	bne.n	8002d9c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	691a      	ldr	r2, [r3, #16]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	615a      	str	r2, [r3, #20]
}
 8002da2:	bf00      	nop
 8002da4:	3714      	adds	r7, #20
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bc80      	pop	{r7}
 8002daa:	4770      	bx	lr
 8002dac:	40012c00 	.word	0x40012c00
 8002db0:	40000400 	.word	0x40000400
 8002db4:	40000800 	.word	0x40000800

08002db8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b087      	sub	sp, #28
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a1b      	ldr	r3, [r3, #32]
 8002dc6:	f023 0201 	bic.w	r2, r3, #1
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a1b      	ldr	r3, [r3, #32]
 8002dd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002de6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f023 0303 	bic.w	r3, r3, #3
 8002dee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68fa      	ldr	r2, [r7, #12]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	f023 0302 	bic.w	r3, r3, #2
 8002e00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	697a      	ldr	r2, [r7, #20]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4a1c      	ldr	r2, [pc, #112]	; (8002e80 <TIM_OC1_SetConfig+0xc8>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d10c      	bne.n	8002e2e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	f023 0308 	bic.w	r3, r3, #8
 8002e1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	697a      	ldr	r2, [r7, #20]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	f023 0304 	bic.w	r3, r3, #4
 8002e2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a13      	ldr	r2, [pc, #76]	; (8002e80 <TIM_OC1_SetConfig+0xc8>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d111      	bne.n	8002e5a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	693a      	ldr	r2, [r7, #16]
 8002e5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	685a      	ldr	r2, [r3, #4]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	621a      	str	r2, [r3, #32]
}
 8002e74:	bf00      	nop
 8002e76:	371c      	adds	r7, #28
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bc80      	pop	{r7}
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	40012c00 	.word	0x40012c00

08002e84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b087      	sub	sp, #28
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a1b      	ldr	r3, [r3, #32]
 8002e92:	f023 0210 	bic.w	r2, r3, #16
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002eb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	021b      	lsls	r3, r3, #8
 8002ec2:	68fa      	ldr	r2, [r7, #12]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	f023 0320 	bic.w	r3, r3, #32
 8002ece:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	011b      	lsls	r3, r3, #4
 8002ed6:	697a      	ldr	r2, [r7, #20]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a1d      	ldr	r2, [pc, #116]	; (8002f54 <TIM_OC2_SetConfig+0xd0>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d10d      	bne.n	8002f00 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002eea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	011b      	lsls	r3, r3, #4
 8002ef2:	697a      	ldr	r2, [r7, #20]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002efe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4a14      	ldr	r2, [pc, #80]	; (8002f54 <TIM_OC2_SetConfig+0xd0>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d113      	bne.n	8002f30 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	695b      	ldr	r3, [r3, #20]
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	693a      	ldr	r2, [r7, #16]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	693a      	ldr	r2, [r7, #16]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685a      	ldr	r2, [r3, #4]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	697a      	ldr	r2, [r7, #20]
 8002f48:	621a      	str	r2, [r3, #32]
}
 8002f4a:	bf00      	nop
 8002f4c:	371c      	adds	r7, #28
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bc80      	pop	{r7}
 8002f52:	4770      	bx	lr
 8002f54:	40012c00 	.word	0x40012c00

08002f58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b087      	sub	sp, #28
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a1b      	ldr	r3, [r3, #32]
 8002f66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a1b      	ldr	r3, [r3, #32]
 8002f72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	69db      	ldr	r3, [r3, #28]
 8002f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f023 0303 	bic.w	r3, r3, #3
 8002f8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68fa      	ldr	r2, [r7, #12]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002fa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	021b      	lsls	r3, r3, #8
 8002fa8:	697a      	ldr	r2, [r7, #20]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a1d      	ldr	r2, [pc, #116]	; (8003028 <TIM_OC3_SetConfig+0xd0>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d10d      	bne.n	8002fd2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002fbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	021b      	lsls	r3, r3, #8
 8002fc4:	697a      	ldr	r2, [r7, #20]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002fd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a14      	ldr	r2, [pc, #80]	; (8003028 <TIM_OC3_SetConfig+0xd0>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d113      	bne.n	8003002 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002fe0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002fe8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	011b      	lsls	r3, r3, #4
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	011b      	lsls	r3, r3, #4
 8002ffc:	693a      	ldr	r2, [r7, #16]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	693a      	ldr	r2, [r7, #16]
 8003006:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685a      	ldr	r2, [r3, #4]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	697a      	ldr	r2, [r7, #20]
 800301a:	621a      	str	r2, [r3, #32]
}
 800301c:	bf00      	nop
 800301e:	371c      	adds	r7, #28
 8003020:	46bd      	mov	sp, r7
 8003022:	bc80      	pop	{r7}
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	40012c00 	.word	0x40012c00

0800302c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800302c:	b480      	push	{r7}
 800302e:	b087      	sub	sp, #28
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a1b      	ldr	r3, [r3, #32]
 800303a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a1b      	ldr	r3, [r3, #32]
 8003046:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	69db      	ldr	r3, [r3, #28]
 8003052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800305a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003062:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	021b      	lsls	r3, r3, #8
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	4313      	orrs	r3, r2
 800306e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003076:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	031b      	lsls	r3, r3, #12
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	4313      	orrs	r3, r2
 8003082:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4a0f      	ldr	r2, [pc, #60]	; (80030c4 <TIM_OC4_SetConfig+0x98>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d109      	bne.n	80030a0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003092:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	695b      	ldr	r3, [r3, #20]
 8003098:	019b      	lsls	r3, r3, #6
 800309a:	697a      	ldr	r2, [r7, #20]
 800309c:	4313      	orrs	r3, r2
 800309e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685a      	ldr	r2, [r3, #4]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	693a      	ldr	r2, [r7, #16]
 80030b8:	621a      	str	r2, [r3, #32]
}
 80030ba:	bf00      	nop
 80030bc:	371c      	adds	r7, #28
 80030be:	46bd      	mov	sp, r7
 80030c0:	bc80      	pop	{r7}
 80030c2:	4770      	bx	lr
 80030c4:	40012c00 	.word	0x40012c00

080030c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b087      	sub	sp, #28
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	f003 031f 	and.w	r3, r3, #31
 80030da:	2201      	movs	r2, #1
 80030dc:	fa02 f303 	lsl.w	r3, r2, r3
 80030e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6a1a      	ldr	r2, [r3, #32]
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	43db      	mvns	r3, r3
 80030ea:	401a      	ands	r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6a1a      	ldr	r2, [r3, #32]
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	f003 031f 	and.w	r3, r3, #31
 80030fa:	6879      	ldr	r1, [r7, #4]
 80030fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003100:	431a      	orrs	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	621a      	str	r2, [r3, #32]
}
 8003106:	bf00      	nop
 8003108:	371c      	adds	r7, #28
 800310a:	46bd      	mov	sp, r7
 800310c:	bc80      	pop	{r7}
 800310e:	4770      	bx	lr

08003110 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003110:	b480      	push	{r7}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003120:	2b01      	cmp	r3, #1
 8003122:	d101      	bne.n	8003128 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003124:	2302      	movs	r3, #2
 8003126:	e032      	b.n	800318e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2202      	movs	r2, #2
 8003134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800314e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	68fa      	ldr	r2, [r7, #12]
 8003156:	4313      	orrs	r3, r2
 8003158:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003160:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	68ba      	ldr	r2, [r7, #8]
 8003168:	4313      	orrs	r3, r2
 800316a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	68ba      	ldr	r2, [r7, #8]
 800317a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3714      	adds	r7, #20
 8003192:	46bd      	mov	sp, r7
 8003194:	bc80      	pop	{r7}
 8003196:	4770      	bx	lr

08003198 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e03f      	b.n	800322a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d106      	bne.n	80031c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f7fd fe76 	bl	8000eb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2224      	movs	r2, #36	; 0x24
 80031c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68da      	ldr	r2, [r3, #12]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f000 f90b 	bl	80033f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	691a      	ldr	r2, [r3, #16]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	695a      	ldr	r2, [r3, #20]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003200:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68da      	ldr	r2, [r3, #12]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003210:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2220      	movs	r2, #32
 800321c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2220      	movs	r2, #32
 8003224:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003232:	b580      	push	{r7, lr}
 8003234:	b088      	sub	sp, #32
 8003236:	af02      	add	r7, sp, #8
 8003238:	60f8      	str	r0, [r7, #12]
 800323a:	60b9      	str	r1, [r7, #8]
 800323c:	603b      	str	r3, [r7, #0]
 800323e:	4613      	mov	r3, r2
 8003240:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003242:	2300      	movs	r3, #0
 8003244:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b20      	cmp	r3, #32
 8003250:	f040 8083 	bne.w	800335a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d002      	beq.n	8003260 <HAL_UART_Transmit+0x2e>
 800325a:	88fb      	ldrh	r3, [r7, #6]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d101      	bne.n	8003264 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e07b      	b.n	800335c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800326a:	2b01      	cmp	r3, #1
 800326c:	d101      	bne.n	8003272 <HAL_UART_Transmit+0x40>
 800326e:	2302      	movs	r3, #2
 8003270:	e074      	b.n	800335c <HAL_UART_Transmit+0x12a>
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2201      	movs	r2, #1
 8003276:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2221      	movs	r2, #33	; 0x21
 8003284:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003288:	f7fd feda 	bl	8001040 <HAL_GetTick>
 800328c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	88fa      	ldrh	r2, [r7, #6]
 8003292:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	88fa      	ldrh	r2, [r7, #6]
 8003298:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800329a:	e042      	b.n	8003322 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	3b01      	subs	r3, #1
 80032a4:	b29a      	uxth	r2, r3
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032b2:	d122      	bne.n	80032fa <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	9300      	str	r3, [sp, #0]
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	2200      	movs	r2, #0
 80032bc:	2180      	movs	r1, #128	; 0x80
 80032be:	68f8      	ldr	r0, [r7, #12]
 80032c0:	f000 f850 	bl	8003364 <UART_WaitOnFlagUntilTimeout>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e046      	b.n	800335c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	881b      	ldrh	r3, [r3, #0]
 80032d6:	461a      	mov	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032e0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d103      	bne.n	80032f2 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	3302      	adds	r3, #2
 80032ee:	60bb      	str	r3, [r7, #8]
 80032f0:	e017      	b.n	8003322 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	3301      	adds	r3, #1
 80032f6:	60bb      	str	r3, [r7, #8]
 80032f8:	e013      	b.n	8003322 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	9300      	str	r3, [sp, #0]
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	2200      	movs	r2, #0
 8003302:	2180      	movs	r1, #128	; 0x80
 8003304:	68f8      	ldr	r0, [r7, #12]
 8003306:	f000 f82d 	bl	8003364 <UART_WaitOnFlagUntilTimeout>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d001      	beq.n	8003314 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e023      	b.n	800335c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	1c5a      	adds	r2, r3, #1
 8003318:	60ba      	str	r2, [r7, #8]
 800331a:	781a      	ldrb	r2, [r3, #0]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003326:	b29b      	uxth	r3, r3
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1b7      	bne.n	800329c <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	9300      	str	r3, [sp, #0]
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	2200      	movs	r2, #0
 8003334:	2140      	movs	r1, #64	; 0x40
 8003336:	68f8      	ldr	r0, [r7, #12]
 8003338:	f000 f814 	bl	8003364 <UART_WaitOnFlagUntilTimeout>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e00a      	b.n	800335c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2220      	movs	r2, #32
 800334a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003356:	2300      	movs	r3, #0
 8003358:	e000      	b.n	800335c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800335a:	2302      	movs	r3, #2
  }
}
 800335c:	4618      	mov	r0, r3
 800335e:	3718      	adds	r7, #24
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	603b      	str	r3, [r7, #0]
 8003370:	4613      	mov	r3, r2
 8003372:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003374:	e02c      	b.n	80033d0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800337c:	d028      	beq.n	80033d0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d007      	beq.n	8003394 <UART_WaitOnFlagUntilTimeout+0x30>
 8003384:	f7fd fe5c 	bl	8001040 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	69ba      	ldr	r2, [r7, #24]
 8003390:	429a      	cmp	r2, r3
 8003392:	d21d      	bcs.n	80033d0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	68da      	ldr	r2, [r3, #12]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80033a2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	695a      	ldr	r2, [r3, #20]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f022 0201 	bic.w	r2, r2, #1
 80033b2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2220      	movs	r2, #32
 80033b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2220      	movs	r2, #32
 80033c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e00f      	b.n	80033f0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	4013      	ands	r3, r2
 80033da:	68ba      	ldr	r2, [r7, #8]
 80033dc:	429a      	cmp	r2, r3
 80033de:	bf0c      	ite	eq
 80033e0:	2301      	moveq	r3, #1
 80033e2:	2300      	movne	r3, #0
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	461a      	mov	r2, r3
 80033e8:	79fb      	ldrb	r3, [r7, #7]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d0c3      	beq.n	8003376 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033ee:	2300      	movs	r3, #0
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3710      	adds	r7, #16
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	68da      	ldr	r2, [r3, #12]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	430a      	orrs	r2, r1
 8003414:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	689a      	ldr	r2, [r3, #8]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	431a      	orrs	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	695b      	ldr	r3, [r3, #20]
 8003424:	4313      	orrs	r3, r2
 8003426:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003432:	f023 030c 	bic.w	r3, r3, #12
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	6812      	ldr	r2, [r2, #0]
 800343a:	68f9      	ldr	r1, [r7, #12]
 800343c:	430b      	orrs	r3, r1
 800343e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	699a      	ldr	r2, [r3, #24]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	430a      	orrs	r2, r1
 8003454:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a52      	ldr	r2, [pc, #328]	; (80035a4 <UART_SetConfig+0x1ac>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d14e      	bne.n	80034fe <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003460:	f7ff fa3c 	bl	80028dc <HAL_RCC_GetPCLK2Freq>
 8003464:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003466:	68ba      	ldr	r2, [r7, #8]
 8003468:	4613      	mov	r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	4413      	add	r3, r2
 800346e:	009a      	lsls	r2, r3, #2
 8003470:	441a      	add	r2, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	fbb2 f3f3 	udiv	r3, r2, r3
 800347c:	4a4a      	ldr	r2, [pc, #296]	; (80035a8 <UART_SetConfig+0x1b0>)
 800347e:	fba2 2303 	umull	r2, r3, r2, r3
 8003482:	095b      	lsrs	r3, r3, #5
 8003484:	0119      	lsls	r1, r3, #4
 8003486:	68ba      	ldr	r2, [r7, #8]
 8003488:	4613      	mov	r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	4413      	add	r3, r2
 800348e:	009a      	lsls	r2, r3, #2
 8003490:	441a      	add	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	fbb2 f2f3 	udiv	r2, r2, r3
 800349c:	4b42      	ldr	r3, [pc, #264]	; (80035a8 <UART_SetConfig+0x1b0>)
 800349e:	fba3 0302 	umull	r0, r3, r3, r2
 80034a2:	095b      	lsrs	r3, r3, #5
 80034a4:	2064      	movs	r0, #100	; 0x64
 80034a6:	fb00 f303 	mul.w	r3, r0, r3
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	011b      	lsls	r3, r3, #4
 80034ae:	3332      	adds	r3, #50	; 0x32
 80034b0:	4a3d      	ldr	r2, [pc, #244]	; (80035a8 <UART_SetConfig+0x1b0>)
 80034b2:	fba2 2303 	umull	r2, r3, r2, r3
 80034b6:	095b      	lsrs	r3, r3, #5
 80034b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034bc:	4419      	add	r1, r3
 80034be:	68ba      	ldr	r2, [r7, #8]
 80034c0:	4613      	mov	r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	4413      	add	r3, r2
 80034c6:	009a      	lsls	r2, r3, #2
 80034c8:	441a      	add	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80034d4:	4b34      	ldr	r3, [pc, #208]	; (80035a8 <UART_SetConfig+0x1b0>)
 80034d6:	fba3 0302 	umull	r0, r3, r3, r2
 80034da:	095b      	lsrs	r3, r3, #5
 80034dc:	2064      	movs	r0, #100	; 0x64
 80034de:	fb00 f303 	mul.w	r3, r0, r3
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	011b      	lsls	r3, r3, #4
 80034e6:	3332      	adds	r3, #50	; 0x32
 80034e8:	4a2f      	ldr	r2, [pc, #188]	; (80035a8 <UART_SetConfig+0x1b0>)
 80034ea:	fba2 2303 	umull	r2, r3, r2, r3
 80034ee:	095b      	lsrs	r3, r3, #5
 80034f0:	f003 020f 	and.w	r2, r3, #15
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	440a      	add	r2, r1
 80034fa:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80034fc:	e04d      	b.n	800359a <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80034fe:	f7ff f9d9 	bl	80028b4 <HAL_RCC_GetPCLK1Freq>
 8003502:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003504:	68ba      	ldr	r2, [r7, #8]
 8003506:	4613      	mov	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	4413      	add	r3, r2
 800350c:	009a      	lsls	r2, r3, #2
 800350e:	441a      	add	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	fbb2 f3f3 	udiv	r3, r2, r3
 800351a:	4a23      	ldr	r2, [pc, #140]	; (80035a8 <UART_SetConfig+0x1b0>)
 800351c:	fba2 2303 	umull	r2, r3, r2, r3
 8003520:	095b      	lsrs	r3, r3, #5
 8003522:	0119      	lsls	r1, r3, #4
 8003524:	68ba      	ldr	r2, [r7, #8]
 8003526:	4613      	mov	r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	4413      	add	r3, r2
 800352c:	009a      	lsls	r2, r3, #2
 800352e:	441a      	add	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	fbb2 f2f3 	udiv	r2, r2, r3
 800353a:	4b1b      	ldr	r3, [pc, #108]	; (80035a8 <UART_SetConfig+0x1b0>)
 800353c:	fba3 0302 	umull	r0, r3, r3, r2
 8003540:	095b      	lsrs	r3, r3, #5
 8003542:	2064      	movs	r0, #100	; 0x64
 8003544:	fb00 f303 	mul.w	r3, r0, r3
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	011b      	lsls	r3, r3, #4
 800354c:	3332      	adds	r3, #50	; 0x32
 800354e:	4a16      	ldr	r2, [pc, #88]	; (80035a8 <UART_SetConfig+0x1b0>)
 8003550:	fba2 2303 	umull	r2, r3, r2, r3
 8003554:	095b      	lsrs	r3, r3, #5
 8003556:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800355a:	4419      	add	r1, r3
 800355c:	68ba      	ldr	r2, [r7, #8]
 800355e:	4613      	mov	r3, r2
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	4413      	add	r3, r2
 8003564:	009a      	lsls	r2, r3, #2
 8003566:	441a      	add	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003572:	4b0d      	ldr	r3, [pc, #52]	; (80035a8 <UART_SetConfig+0x1b0>)
 8003574:	fba3 0302 	umull	r0, r3, r3, r2
 8003578:	095b      	lsrs	r3, r3, #5
 800357a:	2064      	movs	r0, #100	; 0x64
 800357c:	fb00 f303 	mul.w	r3, r0, r3
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	011b      	lsls	r3, r3, #4
 8003584:	3332      	adds	r3, #50	; 0x32
 8003586:	4a08      	ldr	r2, [pc, #32]	; (80035a8 <UART_SetConfig+0x1b0>)
 8003588:	fba2 2303 	umull	r2, r3, r2, r3
 800358c:	095b      	lsrs	r3, r3, #5
 800358e:	f003 020f 	and.w	r2, r3, #15
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	440a      	add	r2, r1
 8003598:	609a      	str	r2, [r3, #8]
}
 800359a:	bf00      	nop
 800359c:	3710      	adds	r7, #16
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	40013800 	.word	0x40013800
 80035a8:	51eb851f 	.word	0x51eb851f

080035ac <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80035ac:	b480      	push	{r7}
 80035ae:	b085      	sub	sp, #20
 80035b0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80035b2:	f3ef 8305 	mrs	r3, IPSR
 80035b6:	60bb      	str	r3, [r7, #8]
  return(result);
 80035b8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d10f      	bne.n	80035de <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035be:	f3ef 8310 	mrs	r3, PRIMASK
 80035c2:	607b      	str	r3, [r7, #4]
  return(result);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d109      	bne.n	80035de <osKernelInitialize+0x32>
 80035ca:	4b10      	ldr	r3, [pc, #64]	; (800360c <osKernelInitialize+0x60>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d109      	bne.n	80035e6 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80035d2:	f3ef 8311 	mrs	r3, BASEPRI
 80035d6:	603b      	str	r3, [r7, #0]
  return(result);
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d003      	beq.n	80035e6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80035de:	f06f 0305 	mvn.w	r3, #5
 80035e2:	60fb      	str	r3, [r7, #12]
 80035e4:	e00c      	b.n	8003600 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80035e6:	4b09      	ldr	r3, [pc, #36]	; (800360c <osKernelInitialize+0x60>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d105      	bne.n	80035fa <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80035ee:	4b07      	ldr	r3, [pc, #28]	; (800360c <osKernelInitialize+0x60>)
 80035f0:	2201      	movs	r2, #1
 80035f2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80035f4:	2300      	movs	r3, #0
 80035f6:	60fb      	str	r3, [r7, #12]
 80035f8:	e002      	b.n	8003600 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80035fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80035fe:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003600:	68fb      	ldr	r3, [r7, #12]
}
 8003602:	4618      	mov	r0, r3
 8003604:	3714      	adds	r7, #20
 8003606:	46bd      	mov	sp, r7
 8003608:	bc80      	pop	{r7}
 800360a:	4770      	bx	lr
 800360c:	2000009c 	.word	0x2000009c

08003610 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003616:	f3ef 8305 	mrs	r3, IPSR
 800361a:	60bb      	str	r3, [r7, #8]
  return(result);
 800361c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800361e:	2b00      	cmp	r3, #0
 8003620:	d10f      	bne.n	8003642 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003622:	f3ef 8310 	mrs	r3, PRIMASK
 8003626:	607b      	str	r3, [r7, #4]
  return(result);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d109      	bne.n	8003642 <osKernelStart+0x32>
 800362e:	4b11      	ldr	r3, [pc, #68]	; (8003674 <osKernelStart+0x64>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2b02      	cmp	r3, #2
 8003634:	d109      	bne.n	800364a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003636:	f3ef 8311 	mrs	r3, BASEPRI
 800363a:	603b      	str	r3, [r7, #0]
  return(result);
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d003      	beq.n	800364a <osKernelStart+0x3a>
    stat = osErrorISR;
 8003642:	f06f 0305 	mvn.w	r3, #5
 8003646:	60fb      	str	r3, [r7, #12]
 8003648:	e00e      	b.n	8003668 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800364a:	4b0a      	ldr	r3, [pc, #40]	; (8003674 <osKernelStart+0x64>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2b01      	cmp	r3, #1
 8003650:	d107      	bne.n	8003662 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8003652:	4b08      	ldr	r3, [pc, #32]	; (8003674 <osKernelStart+0x64>)
 8003654:	2202      	movs	r2, #2
 8003656:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003658:	f001 f864 	bl	8004724 <vTaskStartScheduler>
      stat = osOK;
 800365c:	2300      	movs	r3, #0
 800365e:	60fb      	str	r3, [r7, #12]
 8003660:	e002      	b.n	8003668 <osKernelStart+0x58>
    } else {
      stat = osError;
 8003662:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003666:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003668:	68fb      	ldr	r3, [r7, #12]
}
 800366a:	4618      	mov	r0, r3
 800366c:	3710      	adds	r7, #16
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	2000009c 	.word	0x2000009c

08003678 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003678:	b580      	push	{r7, lr}
 800367a:	b092      	sub	sp, #72	; 0x48
 800367c:	af04      	add	r7, sp, #16
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003684:	2300      	movs	r3, #0
 8003686:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003688:	f3ef 8305 	mrs	r3, IPSR
 800368c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800368e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003690:	2b00      	cmp	r3, #0
 8003692:	f040 8094 	bne.w	80037be <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003696:	f3ef 8310 	mrs	r3, PRIMASK
 800369a:	623b      	str	r3, [r7, #32]
  return(result);
 800369c:	6a3b      	ldr	r3, [r7, #32]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	f040 808d 	bne.w	80037be <osThreadNew+0x146>
 80036a4:	4b48      	ldr	r3, [pc, #288]	; (80037c8 <osThreadNew+0x150>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d106      	bne.n	80036ba <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80036ac:	f3ef 8311 	mrs	r3, BASEPRI
 80036b0:	61fb      	str	r3, [r7, #28]
  return(result);
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f040 8082 	bne.w	80037be <osThreadNew+0x146>
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d07e      	beq.n	80037be <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80036c0:	2380      	movs	r3, #128	; 0x80
 80036c2:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80036c4:	2318      	movs	r3, #24
 80036c6:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80036c8:	2300      	movs	r3, #0
 80036ca:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80036cc:	f107 031b 	add.w	r3, r7, #27
 80036d0:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80036d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80036d6:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d045      	beq.n	800376a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d002      	beq.n	80036ec <osThreadNew+0x74>
        name = attr->name;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	699b      	ldr	r3, [r3, #24]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d002      	beq.n	80036fa <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80036fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d008      	beq.n	8003712 <osThreadNew+0x9a>
 8003700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003702:	2b38      	cmp	r3, #56	; 0x38
 8003704:	d805      	bhi.n	8003712 <osThreadNew+0x9a>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	f003 0301 	and.w	r3, r3, #1
 800370e:	2b00      	cmp	r3, #0
 8003710:	d001      	beq.n	8003716 <osThreadNew+0x9e>
        return (NULL);
 8003712:	2300      	movs	r3, #0
 8003714:	e054      	b.n	80037c0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d003      	beq.n	8003726 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	089b      	lsrs	r3, r3, #2
 8003724:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00e      	beq.n	800374c <osThreadNew+0xd4>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	2b5b      	cmp	r3, #91	; 0x5b
 8003734:	d90a      	bls.n	800374c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800373a:	2b00      	cmp	r3, #0
 800373c:	d006      	beq.n	800374c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	695b      	ldr	r3, [r3, #20]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d002      	beq.n	800374c <osThreadNew+0xd4>
        mem = 1;
 8003746:	2301      	movs	r3, #1
 8003748:	62bb      	str	r3, [r7, #40]	; 0x28
 800374a:	e010      	b.n	800376e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d10c      	bne.n	800376e <osThreadNew+0xf6>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d108      	bne.n	800376e <osThreadNew+0xf6>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d104      	bne.n	800376e <osThreadNew+0xf6>
          mem = 0;
 8003764:	2300      	movs	r3, #0
 8003766:	62bb      	str	r3, [r7, #40]	; 0x28
 8003768:	e001      	b.n	800376e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800376a:	2300      	movs	r3, #0
 800376c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800376e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003770:	2b01      	cmp	r3, #1
 8003772:	d110      	bne.n	8003796 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800377c:	9202      	str	r2, [sp, #8]
 800377e:	9301      	str	r3, [sp, #4]
 8003780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003782:	9300      	str	r3, [sp, #0]
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003788:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800378a:	68f8      	ldr	r0, [r7, #12]
 800378c:	f000 fe02 	bl	8004394 <xTaskCreateStatic>
 8003790:	4603      	mov	r3, r0
 8003792:	617b      	str	r3, [r7, #20]
 8003794:	e013      	b.n	80037be <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8003796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003798:	2b00      	cmp	r3, #0
 800379a:	d110      	bne.n	80037be <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800379c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800379e:	b29a      	uxth	r2, r3
 80037a0:	f107 0314 	add.w	r3, r7, #20
 80037a4:	9301      	str	r3, [sp, #4]
 80037a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a8:	9300      	str	r3, [sp, #0]
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80037ae:	68f8      	ldr	r0, [r7, #12]
 80037b0:	f000 fe49 	bl	8004446 <xTaskCreate>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d001      	beq.n	80037be <osThreadNew+0x146>
          hTask = NULL;
 80037ba:	2300      	movs	r3, #0
 80037bc:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80037be:	697b      	ldr	r3, [r7, #20]
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3738      	adds	r7, #56	; 0x38
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	2000009c 	.word	0x2000009c

080037cc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b086      	sub	sp, #24
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80037d4:	f3ef 8305 	mrs	r3, IPSR
 80037d8:	613b      	str	r3, [r7, #16]
  return(result);
 80037da:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d10f      	bne.n	8003800 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037e0:	f3ef 8310 	mrs	r3, PRIMASK
 80037e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d109      	bne.n	8003800 <osDelay+0x34>
 80037ec:	4b0d      	ldr	r3, [pc, #52]	; (8003824 <osDelay+0x58>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d109      	bne.n	8003808 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80037f4:	f3ef 8311 	mrs	r3, BASEPRI
 80037f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d003      	beq.n	8003808 <osDelay+0x3c>
    stat = osErrorISR;
 8003800:	f06f 0305 	mvn.w	r3, #5
 8003804:	617b      	str	r3, [r7, #20]
 8003806:	e007      	b.n	8003818 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003808:	2300      	movs	r3, #0
 800380a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d002      	beq.n	8003818 <osDelay+0x4c>
      vTaskDelay(ticks);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 ff52 	bl	80046bc <vTaskDelay>
    }
  }

  return (stat);
 8003818:	697b      	ldr	r3, [r7, #20]
}
 800381a:	4618      	mov	r0, r3
 800381c:	3718      	adds	r7, #24
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	2000009c 	.word	0x2000009c

08003828 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003828:	b480      	push	{r7}
 800382a:	b085      	sub	sp, #20
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	4a06      	ldr	r2, [pc, #24]	; (8003850 <vApplicationGetIdleTaskMemory+0x28>)
 8003838:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	4a05      	ldr	r2, [pc, #20]	; (8003854 <vApplicationGetIdleTaskMemory+0x2c>)
 800383e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2280      	movs	r2, #128	; 0x80
 8003844:	601a      	str	r2, [r3, #0]
}
 8003846:	bf00      	nop
 8003848:	3714      	adds	r7, #20
 800384a:	46bd      	mov	sp, r7
 800384c:	bc80      	pop	{r7}
 800384e:	4770      	bx	lr
 8003850:	200000a0 	.word	0x200000a0
 8003854:	200000fc 	.word	0x200000fc

08003858 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003858:	b480      	push	{r7}
 800385a:	b085      	sub	sp, #20
 800385c:	af00      	add	r7, sp, #0
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	4a07      	ldr	r2, [pc, #28]	; (8003884 <vApplicationGetTimerTaskMemory+0x2c>)
 8003868:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	4a06      	ldr	r2, [pc, #24]	; (8003888 <vApplicationGetTimerTaskMemory+0x30>)
 800386e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003876:	601a      	str	r2, [r3, #0]
}
 8003878:	bf00      	nop
 800387a:	3714      	adds	r7, #20
 800387c:	46bd      	mov	sp, r7
 800387e:	bc80      	pop	{r7}
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	200002fc 	.word	0x200002fc
 8003888:	20000358 	.word	0x20000358

0800388c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f103 0208 	add.w	r2, r3, #8
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80038a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f103 0208 	add.w	r2, r3, #8
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f103 0208 	add.w	r2, r3, #8
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bc80      	pop	{r7}
 80038c8:	4770      	bx	lr

080038ca <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80038ca:	b480      	push	{r7}
 80038cc:	b083      	sub	sp, #12
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80038d8:	bf00      	nop
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	bc80      	pop	{r7}
 80038e0:	4770      	bx	lr

080038e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80038e2:	b480      	push	{r7}
 80038e4:	b085      	sub	sp, #20
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
 80038ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	689a      	ldr	r2, [r3, #8]
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	683a      	ldr	r2, [r7, #0]
 8003906:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	683a      	ldr	r2, [r7, #0]
 800390c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	1c5a      	adds	r2, r3, #1
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	601a      	str	r2, [r3, #0]
}
 800391e:	bf00      	nop
 8003920:	3714      	adds	r7, #20
 8003922:	46bd      	mov	sp, r7
 8003924:	bc80      	pop	{r7}
 8003926:	4770      	bx	lr

08003928 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003928:	b480      	push	{r7}
 800392a:	b085      	sub	sp, #20
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800393e:	d103      	bne.n	8003948 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	60fb      	str	r3, [r7, #12]
 8003946:	e00c      	b.n	8003962 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	3308      	adds	r3, #8
 800394c:	60fb      	str	r3, [r7, #12]
 800394e:	e002      	b.n	8003956 <vListInsert+0x2e>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	60fb      	str	r3, [r7, #12]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68ba      	ldr	r2, [r7, #8]
 800395e:	429a      	cmp	r2, r3
 8003960:	d2f6      	bcs.n	8003950 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	685a      	ldr	r2, [r3, #4]
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	683a      	ldr	r2, [r7, #0]
 8003970:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	68fa      	ldr	r2, [r7, #12]
 8003976:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	683a      	ldr	r2, [r7, #0]
 800397c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	1c5a      	adds	r2, r3, #1
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	601a      	str	r2, [r3, #0]
}
 800398e:	bf00      	nop
 8003990:	3714      	adds	r7, #20
 8003992:	46bd      	mov	sp, r7
 8003994:	bc80      	pop	{r7}
 8003996:	4770      	bx	lr

08003998 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003998:	b480      	push	{r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	6892      	ldr	r2, [r2, #8]
 80039ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	6852      	ldr	r2, [r2, #4]
 80039b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d103      	bne.n	80039cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	689a      	ldr	r2, [r3, #8]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	1e5a      	subs	r2, r3, #1
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3714      	adds	r7, #20
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bc80      	pop	{r7}
 80039e8:	4770      	bx	lr
	...

080039ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d109      	bne.n	8003a14 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a04:	f383 8811 	msr	BASEPRI, r3
 8003a08:	f3bf 8f6f 	isb	sy
 8003a0c:	f3bf 8f4f 	dsb	sy
 8003a10:	60bb      	str	r3, [r7, #8]
 8003a12:	e7fe      	b.n	8003a12 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003a14:	f001 ff98 	bl	8005948 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a20:	68f9      	ldr	r1, [r7, #12]
 8003a22:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003a24:	fb01 f303 	mul.w	r3, r1, r3
 8003a28:	441a      	add	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a44:	3b01      	subs	r3, #1
 8003a46:	68f9      	ldr	r1, [r7, #12]
 8003a48:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003a4a:	fb01 f303 	mul.w	r3, r1, r3
 8003a4e:	441a      	add	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	22ff      	movs	r2, #255	; 0xff
 8003a58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	22ff      	movs	r2, #255	; 0xff
 8003a60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d114      	bne.n	8003a94 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d01a      	beq.n	8003aa8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	3310      	adds	r3, #16
 8003a76:	4618      	mov	r0, r3
 8003a78:	f001 f8d8 	bl	8004c2c <xTaskRemoveFromEventList>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d012      	beq.n	8003aa8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003a82:	4b0d      	ldr	r3, [pc, #52]	; (8003ab8 <xQueueGenericReset+0xcc>)
 8003a84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a88:	601a      	str	r2, [r3, #0]
 8003a8a:	f3bf 8f4f 	dsb	sy
 8003a8e:	f3bf 8f6f 	isb	sy
 8003a92:	e009      	b.n	8003aa8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	3310      	adds	r3, #16
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7ff fef7 	bl	800388c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	3324      	adds	r3, #36	; 0x24
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7ff fef2 	bl	800388c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003aa8:	f001 ff7c 	bl	80059a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003aac:	2301      	movs	r3, #1
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3710      	adds	r7, #16
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	e000ed04 	.word	0xe000ed04

08003abc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b08e      	sub	sp, #56	; 0x38
 8003ac0:	af02      	add	r7, sp, #8
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]
 8003ac8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d109      	bne.n	8003ae4 <xQueueGenericCreateStatic+0x28>
 8003ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad4:	f383 8811 	msr	BASEPRI, r3
 8003ad8:	f3bf 8f6f 	isb	sy
 8003adc:	f3bf 8f4f 	dsb	sy
 8003ae0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ae2:	e7fe      	b.n	8003ae2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d109      	bne.n	8003afe <xQueueGenericCreateStatic+0x42>
 8003aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aee:	f383 8811 	msr	BASEPRI, r3
 8003af2:	f3bf 8f6f 	isb	sy
 8003af6:	f3bf 8f4f 	dsb	sy
 8003afa:	627b      	str	r3, [r7, #36]	; 0x24
 8003afc:	e7fe      	b.n	8003afc <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d002      	beq.n	8003b0a <xQueueGenericCreateStatic+0x4e>
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d001      	beq.n	8003b0e <xQueueGenericCreateStatic+0x52>
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e000      	b.n	8003b10 <xQueueGenericCreateStatic+0x54>
 8003b0e:	2300      	movs	r3, #0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d109      	bne.n	8003b28 <xQueueGenericCreateStatic+0x6c>
 8003b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b18:	f383 8811 	msr	BASEPRI, r3
 8003b1c:	f3bf 8f6f 	isb	sy
 8003b20:	f3bf 8f4f 	dsb	sy
 8003b24:	623b      	str	r3, [r7, #32]
 8003b26:	e7fe      	b.n	8003b26 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d102      	bne.n	8003b34 <xQueueGenericCreateStatic+0x78>
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d101      	bne.n	8003b38 <xQueueGenericCreateStatic+0x7c>
 8003b34:	2301      	movs	r3, #1
 8003b36:	e000      	b.n	8003b3a <xQueueGenericCreateStatic+0x7e>
 8003b38:	2300      	movs	r3, #0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d109      	bne.n	8003b52 <xQueueGenericCreateStatic+0x96>
 8003b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b42:	f383 8811 	msr	BASEPRI, r3
 8003b46:	f3bf 8f6f 	isb	sy
 8003b4a:	f3bf 8f4f 	dsb	sy
 8003b4e:	61fb      	str	r3, [r7, #28]
 8003b50:	e7fe      	b.n	8003b50 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003b52:	2350      	movs	r3, #80	; 0x50
 8003b54:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	2b50      	cmp	r3, #80	; 0x50
 8003b5a:	d009      	beq.n	8003b70 <xQueueGenericCreateStatic+0xb4>
 8003b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b60:	f383 8811 	msr	BASEPRI, r3
 8003b64:	f3bf 8f6f 	isb	sy
 8003b68:	f3bf 8f4f 	dsb	sy
 8003b6c:	61bb      	str	r3, [r7, #24]
 8003b6e:	e7fe      	b.n	8003b6e <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00d      	beq.n	8003b96 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003b82:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b88:	9300      	str	r3, [sp, #0]
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	68b9      	ldr	r1, [r7, #8]
 8003b90:	68f8      	ldr	r0, [r7, #12]
 8003b92:	f000 f805 	bl	8003ba0 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3730      	adds	r7, #48	; 0x30
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	60b9      	str	r1, [r7, #8]
 8003baa:	607a      	str	r2, [r7, #4]
 8003bac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d103      	bne.n	8003bbc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	69ba      	ldr	r2, [r7, #24]
 8003bb8:	601a      	str	r2, [r3, #0]
 8003bba:	e002      	b.n	8003bc2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	68fa      	ldr	r2, [r7, #12]
 8003bc6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	68ba      	ldr	r2, [r7, #8]
 8003bcc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003bce:	2101      	movs	r1, #1
 8003bd0:	69b8      	ldr	r0, [r7, #24]
 8003bd2:	f7ff ff0b 	bl	80039ec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	78fa      	ldrb	r2, [r7, #3]
 8003bda:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003bde:	bf00      	nop
 8003be0:	3710      	adds	r7, #16
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
	...

08003be8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b08e      	sub	sp, #56	; 0x38
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
 8003bf4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d109      	bne.n	8003c18 <xQueueGenericSend+0x30>
 8003c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c08:	f383 8811 	msr	BASEPRI, r3
 8003c0c:	f3bf 8f6f 	isb	sy
 8003c10:	f3bf 8f4f 	dsb	sy
 8003c14:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c16:	e7fe      	b.n	8003c16 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d103      	bne.n	8003c26 <xQueueGenericSend+0x3e>
 8003c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d101      	bne.n	8003c2a <xQueueGenericSend+0x42>
 8003c26:	2301      	movs	r3, #1
 8003c28:	e000      	b.n	8003c2c <xQueueGenericSend+0x44>
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d109      	bne.n	8003c44 <xQueueGenericSend+0x5c>
 8003c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c34:	f383 8811 	msr	BASEPRI, r3
 8003c38:	f3bf 8f6f 	isb	sy
 8003c3c:	f3bf 8f4f 	dsb	sy
 8003c40:	627b      	str	r3, [r7, #36]	; 0x24
 8003c42:	e7fe      	b.n	8003c42 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d103      	bne.n	8003c52 <xQueueGenericSend+0x6a>
 8003c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d101      	bne.n	8003c56 <xQueueGenericSend+0x6e>
 8003c52:	2301      	movs	r3, #1
 8003c54:	e000      	b.n	8003c58 <xQueueGenericSend+0x70>
 8003c56:	2300      	movs	r3, #0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d109      	bne.n	8003c70 <xQueueGenericSend+0x88>
 8003c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c60:	f383 8811 	msr	BASEPRI, r3
 8003c64:	f3bf 8f6f 	isb	sy
 8003c68:	f3bf 8f4f 	dsb	sy
 8003c6c:	623b      	str	r3, [r7, #32]
 8003c6e:	e7fe      	b.n	8003c6e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c70:	f001 f996 	bl	8004fa0 <xTaskGetSchedulerState>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d102      	bne.n	8003c80 <xQueueGenericSend+0x98>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d101      	bne.n	8003c84 <xQueueGenericSend+0x9c>
 8003c80:	2301      	movs	r3, #1
 8003c82:	e000      	b.n	8003c86 <xQueueGenericSend+0x9e>
 8003c84:	2300      	movs	r3, #0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d109      	bne.n	8003c9e <xQueueGenericSend+0xb6>
 8003c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c8e:	f383 8811 	msr	BASEPRI, r3
 8003c92:	f3bf 8f6f 	isb	sy
 8003c96:	f3bf 8f4f 	dsb	sy
 8003c9a:	61fb      	str	r3, [r7, #28]
 8003c9c:	e7fe      	b.n	8003c9c <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c9e:	f001 fe53 	bl	8005948 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d302      	bcc.n	8003cb4 <xQueueGenericSend+0xcc>
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d129      	bne.n	8003d08 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003cb4:	683a      	ldr	r2, [r7, #0]
 8003cb6:	68b9      	ldr	r1, [r7, #8]
 8003cb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003cba:	f000 f9ff 	bl	80040bc <prvCopyDataToQueue>
 8003cbe:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d010      	beq.n	8003cea <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cca:	3324      	adds	r3, #36	; 0x24
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f000 ffad 	bl	8004c2c <xTaskRemoveFromEventList>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d013      	beq.n	8003d00 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003cd8:	4b3f      	ldr	r3, [pc, #252]	; (8003dd8 <xQueueGenericSend+0x1f0>)
 8003cda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cde:	601a      	str	r2, [r3, #0]
 8003ce0:	f3bf 8f4f 	dsb	sy
 8003ce4:	f3bf 8f6f 	isb	sy
 8003ce8:	e00a      	b.n	8003d00 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d007      	beq.n	8003d00 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003cf0:	4b39      	ldr	r3, [pc, #228]	; (8003dd8 <xQueueGenericSend+0x1f0>)
 8003cf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cf6:	601a      	str	r2, [r3, #0]
 8003cf8:	f3bf 8f4f 	dsb	sy
 8003cfc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003d00:	f001 fe50 	bl	80059a4 <vPortExitCritical>
				return pdPASS;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e063      	b.n	8003dd0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d103      	bne.n	8003d16 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003d0e:	f001 fe49 	bl	80059a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003d12:	2300      	movs	r3, #0
 8003d14:	e05c      	b.n	8003dd0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d106      	bne.n	8003d2a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003d1c:	f107 0314 	add.w	r3, r7, #20
 8003d20:	4618      	mov	r0, r3
 8003d22:	f000 ffe5 	bl	8004cf0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d26:	2301      	movs	r3, #1
 8003d28:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003d2a:	f001 fe3b 	bl	80059a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003d2e:	f000 fd5d 	bl	80047ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d32:	f001 fe09 	bl	8005948 <vPortEnterCritical>
 8003d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d3c:	b25b      	sxtb	r3, r3
 8003d3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d42:	d103      	bne.n	8003d4c <xQueueGenericSend+0x164>
 8003d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d52:	b25b      	sxtb	r3, r3
 8003d54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d58:	d103      	bne.n	8003d62 <xQueueGenericSend+0x17a>
 8003d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d62:	f001 fe1f 	bl	80059a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d66:	1d3a      	adds	r2, r7, #4
 8003d68:	f107 0314 	add.w	r3, r7, #20
 8003d6c:	4611      	mov	r1, r2
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f000 ffd4 	bl	8004d1c <xTaskCheckForTimeOut>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d124      	bne.n	8003dc4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003d7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d7c:	f000 fa96 	bl	80042ac <prvIsQueueFull>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d018      	beq.n	8003db8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d88:	3310      	adds	r3, #16
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	4611      	mov	r1, r2
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f000 fefe 	bl	8004b90 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003d94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d96:	f000 fa21 	bl	80041dc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003d9a:	f000 fd35 	bl	8004808 <xTaskResumeAll>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	f47f af7c 	bne.w	8003c9e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003da6:	4b0c      	ldr	r3, [pc, #48]	; (8003dd8 <xQueueGenericSend+0x1f0>)
 8003da8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dac:	601a      	str	r2, [r3, #0]
 8003dae:	f3bf 8f4f 	dsb	sy
 8003db2:	f3bf 8f6f 	isb	sy
 8003db6:	e772      	b.n	8003c9e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003db8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003dba:	f000 fa0f 	bl	80041dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003dbe:	f000 fd23 	bl	8004808 <xTaskResumeAll>
 8003dc2:	e76c      	b.n	8003c9e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003dc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003dc6:	f000 fa09 	bl	80041dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003dca:	f000 fd1d 	bl	8004808 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003dce:	2300      	movs	r3, #0
		}
	}
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3738      	adds	r7, #56	; 0x38
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	e000ed04 	.word	0xe000ed04

08003ddc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b08e      	sub	sp, #56	; 0x38
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]
 8003de8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d109      	bne.n	8003e08 <xQueueGenericSendFromISR+0x2c>
 8003df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df8:	f383 8811 	msr	BASEPRI, r3
 8003dfc:	f3bf 8f6f 	isb	sy
 8003e00:	f3bf 8f4f 	dsb	sy
 8003e04:	627b      	str	r3, [r7, #36]	; 0x24
 8003e06:	e7fe      	b.n	8003e06 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d103      	bne.n	8003e16 <xQueueGenericSendFromISR+0x3a>
 8003e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d101      	bne.n	8003e1a <xQueueGenericSendFromISR+0x3e>
 8003e16:	2301      	movs	r3, #1
 8003e18:	e000      	b.n	8003e1c <xQueueGenericSendFromISR+0x40>
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d109      	bne.n	8003e34 <xQueueGenericSendFromISR+0x58>
 8003e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e24:	f383 8811 	msr	BASEPRI, r3
 8003e28:	f3bf 8f6f 	isb	sy
 8003e2c:	f3bf 8f4f 	dsb	sy
 8003e30:	623b      	str	r3, [r7, #32]
 8003e32:	e7fe      	b.n	8003e32 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d103      	bne.n	8003e42 <xQueueGenericSendFromISR+0x66>
 8003e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d101      	bne.n	8003e46 <xQueueGenericSendFromISR+0x6a>
 8003e42:	2301      	movs	r3, #1
 8003e44:	e000      	b.n	8003e48 <xQueueGenericSendFromISR+0x6c>
 8003e46:	2300      	movs	r3, #0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d109      	bne.n	8003e60 <xQueueGenericSendFromISR+0x84>
 8003e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e50:	f383 8811 	msr	BASEPRI, r3
 8003e54:	f3bf 8f6f 	isb	sy
 8003e58:	f3bf 8f4f 	dsb	sy
 8003e5c:	61fb      	str	r3, [r7, #28]
 8003e5e:	e7fe      	b.n	8003e5e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003e60:	f001 fe2c 	bl	8005abc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003e64:	f3ef 8211 	mrs	r2, BASEPRI
 8003e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e6c:	f383 8811 	msr	BASEPRI, r3
 8003e70:	f3bf 8f6f 	isb	sy
 8003e74:	f3bf 8f4f 	dsb	sy
 8003e78:	61ba      	str	r2, [r7, #24]
 8003e7a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003e7c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d302      	bcc.n	8003e92 <xQueueGenericSendFromISR+0xb6>
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d12c      	bne.n	8003eec <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003e9c:	683a      	ldr	r2, [r7, #0]
 8003e9e:	68b9      	ldr	r1, [r7, #8]
 8003ea0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ea2:	f000 f90b 	bl	80040bc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003ea6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003eaa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003eae:	d112      	bne.n	8003ed6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d016      	beq.n	8003ee6 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eba:	3324      	adds	r3, #36	; 0x24
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f000 feb5 	bl	8004c2c <xTaskRemoveFromEventList>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d00e      	beq.n	8003ee6 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00b      	beq.n	8003ee6 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	601a      	str	r2, [r3, #0]
 8003ed4:	e007      	b.n	8003ee6 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003ed6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003eda:	3301      	adds	r3, #1
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	b25a      	sxtb	r2, r3
 8003ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003eea:	e001      	b.n	8003ef0 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003eec:	2300      	movs	r3, #0
 8003eee:	637b      	str	r3, [r7, #52]	; 0x34
 8003ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3738      	adds	r7, #56	; 0x38
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b08c      	sub	sp, #48	; 0x30
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003f10:	2300      	movs	r3, #0
 8003f12:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d109      	bne.n	8003f32 <xQueueReceive+0x2e>
	__asm volatile
 8003f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f22:	f383 8811 	msr	BASEPRI, r3
 8003f26:	f3bf 8f6f 	isb	sy
 8003f2a:	f3bf 8f4f 	dsb	sy
 8003f2e:	623b      	str	r3, [r7, #32]
 8003f30:	e7fe      	b.n	8003f30 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d103      	bne.n	8003f40 <xQueueReceive+0x3c>
 8003f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d101      	bne.n	8003f44 <xQueueReceive+0x40>
 8003f40:	2301      	movs	r3, #1
 8003f42:	e000      	b.n	8003f46 <xQueueReceive+0x42>
 8003f44:	2300      	movs	r3, #0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d109      	bne.n	8003f5e <xQueueReceive+0x5a>
 8003f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f4e:	f383 8811 	msr	BASEPRI, r3
 8003f52:	f3bf 8f6f 	isb	sy
 8003f56:	f3bf 8f4f 	dsb	sy
 8003f5a:	61fb      	str	r3, [r7, #28]
 8003f5c:	e7fe      	b.n	8003f5c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f5e:	f001 f81f 	bl	8004fa0 <xTaskGetSchedulerState>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d102      	bne.n	8003f6e <xQueueReceive+0x6a>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d101      	bne.n	8003f72 <xQueueReceive+0x6e>
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e000      	b.n	8003f74 <xQueueReceive+0x70>
 8003f72:	2300      	movs	r3, #0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d109      	bne.n	8003f8c <xQueueReceive+0x88>
 8003f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f7c:	f383 8811 	msr	BASEPRI, r3
 8003f80:	f3bf 8f6f 	isb	sy
 8003f84:	f3bf 8f4f 	dsb	sy
 8003f88:	61bb      	str	r3, [r7, #24]
 8003f8a:	e7fe      	b.n	8003f8a <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003f8c:	f001 fcdc 	bl	8005948 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f94:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d01f      	beq.n	8003fdc <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003f9c:	68b9      	ldr	r1, [r7, #8]
 8003f9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003fa0:	f000 f8f6 	bl	8004190 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa6:	1e5a      	subs	r2, r3, #1
 8003fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003faa:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d00f      	beq.n	8003fd4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb6:	3310      	adds	r3, #16
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f000 fe37 	bl	8004c2c <xTaskRemoveFromEventList>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d007      	beq.n	8003fd4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003fc4:	4b3c      	ldr	r3, [pc, #240]	; (80040b8 <xQueueReceive+0x1b4>)
 8003fc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fca:	601a      	str	r2, [r3, #0]
 8003fcc:	f3bf 8f4f 	dsb	sy
 8003fd0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003fd4:	f001 fce6 	bl	80059a4 <vPortExitCritical>
				return pdPASS;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e069      	b.n	80040b0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d103      	bne.n	8003fea <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003fe2:	f001 fcdf 	bl	80059a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	e062      	b.n	80040b0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d106      	bne.n	8003ffe <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ff0:	f107 0310 	add.w	r3, r7, #16
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f000 fe7b 	bl	8004cf0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ffe:	f001 fcd1 	bl	80059a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004002:	f000 fbf3 	bl	80047ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004006:	f001 fc9f 	bl	8005948 <vPortEnterCritical>
 800400a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800400c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004010:	b25b      	sxtb	r3, r3
 8004012:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004016:	d103      	bne.n	8004020 <xQueueReceive+0x11c>
 8004018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800401a:	2200      	movs	r2, #0
 800401c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004022:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004026:	b25b      	sxtb	r3, r3
 8004028:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800402c:	d103      	bne.n	8004036 <xQueueReceive+0x132>
 800402e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004030:	2200      	movs	r2, #0
 8004032:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004036:	f001 fcb5 	bl	80059a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800403a:	1d3a      	adds	r2, r7, #4
 800403c:	f107 0310 	add.w	r3, r7, #16
 8004040:	4611      	mov	r1, r2
 8004042:	4618      	mov	r0, r3
 8004044:	f000 fe6a 	bl	8004d1c <xTaskCheckForTimeOut>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d123      	bne.n	8004096 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800404e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004050:	f000 f916 	bl	8004280 <prvIsQueueEmpty>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d017      	beq.n	800408a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800405a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800405c:	3324      	adds	r3, #36	; 0x24
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	4611      	mov	r1, r2
 8004062:	4618      	mov	r0, r3
 8004064:	f000 fd94 	bl	8004b90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004068:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800406a:	f000 f8b7 	bl	80041dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800406e:	f000 fbcb 	bl	8004808 <xTaskResumeAll>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d189      	bne.n	8003f8c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004078:	4b0f      	ldr	r3, [pc, #60]	; (80040b8 <xQueueReceive+0x1b4>)
 800407a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800407e:	601a      	str	r2, [r3, #0]
 8004080:	f3bf 8f4f 	dsb	sy
 8004084:	f3bf 8f6f 	isb	sy
 8004088:	e780      	b.n	8003f8c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800408a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800408c:	f000 f8a6 	bl	80041dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004090:	f000 fbba 	bl	8004808 <xTaskResumeAll>
 8004094:	e77a      	b.n	8003f8c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004096:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004098:	f000 f8a0 	bl	80041dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800409c:	f000 fbb4 	bl	8004808 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80040a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040a2:	f000 f8ed 	bl	8004280 <prvIsQueueEmpty>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	f43f af6f 	beq.w	8003f8c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80040ae:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3730      	adds	r7, #48	; 0x30
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	e000ed04 	.word	0xe000ed04

080040bc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b086      	sub	sp, #24
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80040c8:	2300      	movs	r3, #0
 80040ca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d10d      	bne.n	80040f6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d14d      	bne.n	800417e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	4618      	mov	r0, r3
 80040e8:	f000 ff78 	bl	8004fdc <xTaskPriorityDisinherit>
 80040ec:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2200      	movs	r2, #0
 80040f2:	605a      	str	r2, [r3, #4]
 80040f4:	e043      	b.n	800417e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d119      	bne.n	8004130 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6898      	ldr	r0, [r3, #8]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004104:	461a      	mov	r2, r3
 8004106:	68b9      	ldr	r1, [r7, #8]
 8004108:	f001 ff12 	bl	8005f30 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	689a      	ldr	r2, [r3, #8]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004114:	441a      	add	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	689a      	ldr	r2, [r3, #8]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	429a      	cmp	r2, r3
 8004124:	d32b      	bcc.n	800417e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	609a      	str	r2, [r3, #8]
 800412e:	e026      	b.n	800417e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	68d8      	ldr	r0, [r3, #12]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004138:	461a      	mov	r2, r3
 800413a:	68b9      	ldr	r1, [r7, #8]
 800413c:	f001 fef8 	bl	8005f30 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	68da      	ldr	r2, [r3, #12]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004148:	425b      	negs	r3, r3
 800414a:	441a      	add	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	68da      	ldr	r2, [r3, #12]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	429a      	cmp	r2, r3
 800415a:	d207      	bcs.n	800416c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	685a      	ldr	r2, [r3, #4]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004164:	425b      	negs	r3, r3
 8004166:	441a      	add	r2, r3
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2b02      	cmp	r3, #2
 8004170:	d105      	bne.n	800417e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d002      	beq.n	800417e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	3b01      	subs	r3, #1
 800417c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	1c5a      	adds	r2, r3, #1
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004186:	697b      	ldr	r3, [r7, #20]
}
 8004188:	4618      	mov	r0, r3
 800418a:	3718      	adds	r7, #24
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d018      	beq.n	80041d4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	68da      	ldr	r2, [r3, #12]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041aa:	441a      	add	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	68da      	ldr	r2, [r3, #12]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d303      	bcc.n	80041c4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	68d9      	ldr	r1, [r3, #12]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041cc:	461a      	mov	r2, r3
 80041ce:	6838      	ldr	r0, [r7, #0]
 80041d0:	f001 feae 	bl	8005f30 <memcpy>
	}
}
 80041d4:	bf00      	nop
 80041d6:	3708      	adds	r7, #8
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80041e4:	f001 fbb0 	bl	8005948 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041ee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80041f0:	e011      	b.n	8004216 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d012      	beq.n	8004220 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	3324      	adds	r3, #36	; 0x24
 80041fe:	4618      	mov	r0, r3
 8004200:	f000 fd14 	bl	8004c2c <xTaskRemoveFromEventList>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d001      	beq.n	800420e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800420a:	f000 fde7 	bl	8004ddc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800420e:	7bfb      	ldrb	r3, [r7, #15]
 8004210:	3b01      	subs	r3, #1
 8004212:	b2db      	uxtb	r3, r3
 8004214:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004216:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800421a:	2b00      	cmp	r3, #0
 800421c:	dce9      	bgt.n	80041f2 <prvUnlockQueue+0x16>
 800421e:	e000      	b.n	8004222 <prvUnlockQueue+0x46>
					break;
 8004220:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	22ff      	movs	r2, #255	; 0xff
 8004226:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800422a:	f001 fbbb 	bl	80059a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800422e:	f001 fb8b 	bl	8005948 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004238:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800423a:	e011      	b.n	8004260 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	691b      	ldr	r3, [r3, #16]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d012      	beq.n	800426a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	3310      	adds	r3, #16
 8004248:	4618      	mov	r0, r3
 800424a:	f000 fcef 	bl	8004c2c <xTaskRemoveFromEventList>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d001      	beq.n	8004258 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004254:	f000 fdc2 	bl	8004ddc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004258:	7bbb      	ldrb	r3, [r7, #14]
 800425a:	3b01      	subs	r3, #1
 800425c:	b2db      	uxtb	r3, r3
 800425e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004260:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004264:	2b00      	cmp	r3, #0
 8004266:	dce9      	bgt.n	800423c <prvUnlockQueue+0x60>
 8004268:	e000      	b.n	800426c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800426a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	22ff      	movs	r2, #255	; 0xff
 8004270:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004274:	f001 fb96 	bl	80059a4 <vPortExitCritical>
}
 8004278:	bf00      	nop
 800427a:	3710      	adds	r7, #16
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004288:	f001 fb5e 	bl	8005948 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004290:	2b00      	cmp	r3, #0
 8004292:	d102      	bne.n	800429a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004294:	2301      	movs	r3, #1
 8004296:	60fb      	str	r3, [r7, #12]
 8004298:	e001      	b.n	800429e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800429a:	2300      	movs	r3, #0
 800429c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800429e:	f001 fb81 	bl	80059a4 <vPortExitCritical>

	return xReturn;
 80042a2:	68fb      	ldr	r3, [r7, #12]
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3710      	adds	r7, #16
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80042b4:	f001 fb48 	bl	8005948 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d102      	bne.n	80042ca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80042c4:	2301      	movs	r3, #1
 80042c6:	60fb      	str	r3, [r7, #12]
 80042c8:	e001      	b.n	80042ce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80042ca:	2300      	movs	r3, #0
 80042cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80042ce:	f001 fb69 	bl	80059a4 <vPortExitCritical>

	return xReturn;
 80042d2:	68fb      	ldr	r3, [r7, #12]
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3710      	adds	r7, #16
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80042dc:	b480      	push	{r7}
 80042de:	b085      	sub	sp, #20
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80042e6:	2300      	movs	r3, #0
 80042e8:	60fb      	str	r3, [r7, #12]
 80042ea:	e014      	b.n	8004316 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80042ec:	4a0e      	ldr	r2, [pc, #56]	; (8004328 <vQueueAddToRegistry+0x4c>)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d10b      	bne.n	8004310 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80042f8:	490b      	ldr	r1, [pc, #44]	; (8004328 <vQueueAddToRegistry+0x4c>)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	683a      	ldr	r2, [r7, #0]
 80042fe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004302:	4a09      	ldr	r2, [pc, #36]	; (8004328 <vQueueAddToRegistry+0x4c>)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	00db      	lsls	r3, r3, #3
 8004308:	4413      	add	r3, r2
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800430e:	e005      	b.n	800431c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	3301      	adds	r3, #1
 8004314:	60fb      	str	r3, [r7, #12]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2b07      	cmp	r3, #7
 800431a:	d9e7      	bls.n	80042ec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800431c:	bf00      	nop
 800431e:	3714      	adds	r7, #20
 8004320:	46bd      	mov	sp, r7
 8004322:	bc80      	pop	{r7}
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	20001c4c 	.word	0x20001c4c

0800432c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800432c:	b580      	push	{r7, lr}
 800432e:	b086      	sub	sp, #24
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800433c:	f001 fb04 	bl	8005948 <vPortEnterCritical>
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004346:	b25b      	sxtb	r3, r3
 8004348:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800434c:	d103      	bne.n	8004356 <vQueueWaitForMessageRestricted+0x2a>
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800435c:	b25b      	sxtb	r3, r3
 800435e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004362:	d103      	bne.n	800436c <vQueueWaitForMessageRestricted+0x40>
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	2200      	movs	r2, #0
 8004368:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800436c:	f001 fb1a 	bl	80059a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004374:	2b00      	cmp	r3, #0
 8004376:	d106      	bne.n	8004386 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	3324      	adds	r3, #36	; 0x24
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	68b9      	ldr	r1, [r7, #8]
 8004380:	4618      	mov	r0, r3
 8004382:	f000 fc29 	bl	8004bd8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004386:	6978      	ldr	r0, [r7, #20]
 8004388:	f7ff ff28 	bl	80041dc <prvUnlockQueue>
	}
 800438c:	bf00      	nop
 800438e:	3718      	adds	r7, #24
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004394:	b580      	push	{r7, lr}
 8004396:	b08e      	sub	sp, #56	; 0x38
 8004398:	af04      	add	r7, sp, #16
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	60b9      	str	r1, [r7, #8]
 800439e:	607a      	str	r2, [r7, #4]
 80043a0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80043a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d109      	bne.n	80043bc <xTaskCreateStatic+0x28>
 80043a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ac:	f383 8811 	msr	BASEPRI, r3
 80043b0:	f3bf 8f6f 	isb	sy
 80043b4:	f3bf 8f4f 	dsb	sy
 80043b8:	623b      	str	r3, [r7, #32]
 80043ba:	e7fe      	b.n	80043ba <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80043bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d109      	bne.n	80043d6 <xTaskCreateStatic+0x42>
 80043c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c6:	f383 8811 	msr	BASEPRI, r3
 80043ca:	f3bf 8f6f 	isb	sy
 80043ce:	f3bf 8f4f 	dsb	sy
 80043d2:	61fb      	str	r3, [r7, #28]
 80043d4:	e7fe      	b.n	80043d4 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80043d6:	235c      	movs	r3, #92	; 0x5c
 80043d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	2b5c      	cmp	r3, #92	; 0x5c
 80043de:	d009      	beq.n	80043f4 <xTaskCreateStatic+0x60>
 80043e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e4:	f383 8811 	msr	BASEPRI, r3
 80043e8:	f3bf 8f6f 	isb	sy
 80043ec:	f3bf 8f4f 	dsb	sy
 80043f0:	61bb      	str	r3, [r7, #24]
 80043f2:	e7fe      	b.n	80043f2 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80043f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d01e      	beq.n	8004438 <xTaskCreateStatic+0xa4>
 80043fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d01b      	beq.n	8004438 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004402:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004406:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004408:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800440a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440c:	2202      	movs	r2, #2
 800440e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004412:	2300      	movs	r3, #0
 8004414:	9303      	str	r3, [sp, #12]
 8004416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004418:	9302      	str	r3, [sp, #8]
 800441a:	f107 0314 	add.w	r3, r7, #20
 800441e:	9301      	str	r3, [sp, #4]
 8004420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004422:	9300      	str	r3, [sp, #0]
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	68b9      	ldr	r1, [r7, #8]
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f000 f850 	bl	80044d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004430:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004432:	f000 f8d3 	bl	80045dc <prvAddNewTaskToReadyList>
 8004436:	e001      	b.n	800443c <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8004438:	2300      	movs	r3, #0
 800443a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800443c:	697b      	ldr	r3, [r7, #20]
	}
 800443e:	4618      	mov	r0, r3
 8004440:	3728      	adds	r7, #40	; 0x28
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}

08004446 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004446:	b580      	push	{r7, lr}
 8004448:	b08c      	sub	sp, #48	; 0x30
 800444a:	af04      	add	r7, sp, #16
 800444c:	60f8      	str	r0, [r7, #12]
 800444e:	60b9      	str	r1, [r7, #8]
 8004450:	603b      	str	r3, [r7, #0]
 8004452:	4613      	mov	r3, r2
 8004454:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004456:	88fb      	ldrh	r3, [r7, #6]
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	4618      	mov	r0, r3
 800445c:	f001 fb6a 	bl	8005b34 <pvPortMalloc>
 8004460:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d00e      	beq.n	8004486 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004468:	205c      	movs	r0, #92	; 0x5c
 800446a:	f001 fb63 	bl	8005b34 <pvPortMalloc>
 800446e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d003      	beq.n	800447e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	697a      	ldr	r2, [r7, #20]
 800447a:	631a      	str	r2, [r3, #48]	; 0x30
 800447c:	e005      	b.n	800448a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800447e:	6978      	ldr	r0, [r7, #20]
 8004480:	f001 fc1a 	bl	8005cb8 <vPortFree>
 8004484:	e001      	b.n	800448a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004486:	2300      	movs	r3, #0
 8004488:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d017      	beq.n	80044c0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	2200      	movs	r2, #0
 8004494:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004498:	88fa      	ldrh	r2, [r7, #6]
 800449a:	2300      	movs	r3, #0
 800449c:	9303      	str	r3, [sp, #12]
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	9302      	str	r3, [sp, #8]
 80044a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044a4:	9301      	str	r3, [sp, #4]
 80044a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a8:	9300      	str	r3, [sp, #0]
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	68b9      	ldr	r1, [r7, #8]
 80044ae:	68f8      	ldr	r0, [r7, #12]
 80044b0:	f000 f80e 	bl	80044d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80044b4:	69f8      	ldr	r0, [r7, #28]
 80044b6:	f000 f891 	bl	80045dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80044ba:	2301      	movs	r3, #1
 80044bc:	61bb      	str	r3, [r7, #24]
 80044be:	e002      	b.n	80044c6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80044c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80044c4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80044c6:	69bb      	ldr	r3, [r7, #24]
	}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3720      	adds	r7, #32
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b088      	sub	sp, #32
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	607a      	str	r2, [r7, #4]
 80044dc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80044de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	461a      	mov	r2, r3
 80044e8:	21a5      	movs	r1, #165	; 0xa5
 80044ea:	f001 fd2c 	bl	8005f46 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80044ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80044f8:	3b01      	subs	r3, #1
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	4413      	add	r3, r2
 80044fe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	f023 0307 	bic.w	r3, r3, #7
 8004506:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	f003 0307 	and.w	r3, r3, #7
 800450e:	2b00      	cmp	r3, #0
 8004510:	d009      	beq.n	8004526 <prvInitialiseNewTask+0x56>
 8004512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004516:	f383 8811 	msr	BASEPRI, r3
 800451a:	f3bf 8f6f 	isb	sy
 800451e:	f3bf 8f4f 	dsb	sy
 8004522:	617b      	str	r3, [r7, #20]
 8004524:	e7fe      	b.n	8004524 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004526:	2300      	movs	r3, #0
 8004528:	61fb      	str	r3, [r7, #28]
 800452a:	e012      	b.n	8004552 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800452c:	68ba      	ldr	r2, [r7, #8]
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	4413      	add	r3, r2
 8004532:	7819      	ldrb	r1, [r3, #0]
 8004534:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	4413      	add	r3, r2
 800453a:	3334      	adds	r3, #52	; 0x34
 800453c:	460a      	mov	r2, r1
 800453e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004540:	68ba      	ldr	r2, [r7, #8]
 8004542:	69fb      	ldr	r3, [r7, #28]
 8004544:	4413      	add	r3, r2
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d006      	beq.n	800455a <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	3301      	adds	r3, #1
 8004550:	61fb      	str	r3, [r7, #28]
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	2b0f      	cmp	r3, #15
 8004556:	d9e9      	bls.n	800452c <prvInitialiseNewTask+0x5c>
 8004558:	e000      	b.n	800455c <prvInitialiseNewTask+0x8c>
		{
			break;
 800455a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800455c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455e:	2200      	movs	r2, #0
 8004560:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004566:	2b37      	cmp	r3, #55	; 0x37
 8004568:	d901      	bls.n	800456e <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800456a:	2337      	movs	r3, #55	; 0x37
 800456c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800456e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004570:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004572:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004576:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004578:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800457a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457c:	2200      	movs	r2, #0
 800457e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004582:	3304      	adds	r3, #4
 8004584:	4618      	mov	r0, r3
 8004586:	f7ff f9a0 	bl	80038ca <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800458a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800458c:	3318      	adds	r3, #24
 800458e:	4618      	mov	r0, r3
 8004590:	f7ff f99b 	bl	80038ca <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004596:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004598:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800459a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800459c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80045a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80045a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045a8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80045aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ac:	2200      	movs	r2, #0
 80045ae:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80045b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80045b8:	683a      	ldr	r2, [r7, #0]
 80045ba:	68f9      	ldr	r1, [r7, #12]
 80045bc:	69b8      	ldr	r0, [r7, #24]
 80045be:	f001 f8d7 	bl	8005770 <pxPortInitialiseStack>
 80045c2:	4602      	mov	r2, r0
 80045c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80045c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d002      	beq.n	80045d4 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80045ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045d2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045d4:	bf00      	nop
 80045d6:	3720      	adds	r7, #32
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80045e4:	f001 f9b0 	bl	8005948 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80045e8:	4b2d      	ldr	r3, [pc, #180]	; (80046a0 <prvAddNewTaskToReadyList+0xc4>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	3301      	adds	r3, #1
 80045ee:	4a2c      	ldr	r2, [pc, #176]	; (80046a0 <prvAddNewTaskToReadyList+0xc4>)
 80045f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80045f2:	4b2c      	ldr	r3, [pc, #176]	; (80046a4 <prvAddNewTaskToReadyList+0xc8>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d109      	bne.n	800460e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80045fa:	4a2a      	ldr	r2, [pc, #168]	; (80046a4 <prvAddNewTaskToReadyList+0xc8>)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004600:	4b27      	ldr	r3, [pc, #156]	; (80046a0 <prvAddNewTaskToReadyList+0xc4>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2b01      	cmp	r3, #1
 8004606:	d110      	bne.n	800462a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004608:	f000 fc0c 	bl	8004e24 <prvInitialiseTaskLists>
 800460c:	e00d      	b.n	800462a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800460e:	4b26      	ldr	r3, [pc, #152]	; (80046a8 <prvAddNewTaskToReadyList+0xcc>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d109      	bne.n	800462a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004616:	4b23      	ldr	r3, [pc, #140]	; (80046a4 <prvAddNewTaskToReadyList+0xc8>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004620:	429a      	cmp	r2, r3
 8004622:	d802      	bhi.n	800462a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004624:	4a1f      	ldr	r2, [pc, #124]	; (80046a4 <prvAddNewTaskToReadyList+0xc8>)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800462a:	4b20      	ldr	r3, [pc, #128]	; (80046ac <prvAddNewTaskToReadyList+0xd0>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	3301      	adds	r3, #1
 8004630:	4a1e      	ldr	r2, [pc, #120]	; (80046ac <prvAddNewTaskToReadyList+0xd0>)
 8004632:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004634:	4b1d      	ldr	r3, [pc, #116]	; (80046ac <prvAddNewTaskToReadyList+0xd0>)
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004640:	4b1b      	ldr	r3, [pc, #108]	; (80046b0 <prvAddNewTaskToReadyList+0xd4>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	429a      	cmp	r2, r3
 8004646:	d903      	bls.n	8004650 <prvAddNewTaskToReadyList+0x74>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464c:	4a18      	ldr	r2, [pc, #96]	; (80046b0 <prvAddNewTaskToReadyList+0xd4>)
 800464e:	6013      	str	r3, [r2, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004654:	4613      	mov	r3, r2
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	4413      	add	r3, r2
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	4a15      	ldr	r2, [pc, #84]	; (80046b4 <prvAddNewTaskToReadyList+0xd8>)
 800465e:	441a      	add	r2, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	3304      	adds	r3, #4
 8004664:	4619      	mov	r1, r3
 8004666:	4610      	mov	r0, r2
 8004668:	f7ff f93b 	bl	80038e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800466c:	f001 f99a 	bl	80059a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004670:	4b0d      	ldr	r3, [pc, #52]	; (80046a8 <prvAddNewTaskToReadyList+0xcc>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d00e      	beq.n	8004696 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004678:	4b0a      	ldr	r3, [pc, #40]	; (80046a4 <prvAddNewTaskToReadyList+0xc8>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004682:	429a      	cmp	r2, r3
 8004684:	d207      	bcs.n	8004696 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004686:	4b0c      	ldr	r3, [pc, #48]	; (80046b8 <prvAddNewTaskToReadyList+0xdc>)
 8004688:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800468c:	601a      	str	r2, [r3, #0]
 800468e:	f3bf 8f4f 	dsb	sy
 8004692:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004696:	bf00      	nop
 8004698:	3708      	adds	r7, #8
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	20000c2c 	.word	0x20000c2c
 80046a4:	20000758 	.word	0x20000758
 80046a8:	20000c38 	.word	0x20000c38
 80046ac:	20000c48 	.word	0x20000c48
 80046b0:	20000c34 	.word	0x20000c34
 80046b4:	2000075c 	.word	0x2000075c
 80046b8:	e000ed04 	.word	0xe000ed04

080046bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80046c4:	2300      	movs	r3, #0
 80046c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d016      	beq.n	80046fc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80046ce:	4b13      	ldr	r3, [pc, #76]	; (800471c <vTaskDelay+0x60>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d009      	beq.n	80046ea <vTaskDelay+0x2e>
 80046d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046da:	f383 8811 	msr	BASEPRI, r3
 80046de:	f3bf 8f6f 	isb	sy
 80046e2:	f3bf 8f4f 	dsb	sy
 80046e6:	60bb      	str	r3, [r7, #8]
 80046e8:	e7fe      	b.n	80046e8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80046ea:	f000 f87f 	bl	80047ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80046ee:	2100      	movs	r1, #0
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f000 fcdf 	bl	80050b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80046f6:	f000 f887 	bl	8004808 <xTaskResumeAll>
 80046fa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d107      	bne.n	8004712 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004702:	4b07      	ldr	r3, [pc, #28]	; (8004720 <vTaskDelay+0x64>)
 8004704:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004708:	601a      	str	r2, [r3, #0]
 800470a:	f3bf 8f4f 	dsb	sy
 800470e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004712:	bf00      	nop
 8004714:	3710      	adds	r7, #16
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	20000c54 	.word	0x20000c54
 8004720:	e000ed04 	.word	0xe000ed04

08004724 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b08a      	sub	sp, #40	; 0x28
 8004728:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800472a:	2300      	movs	r3, #0
 800472c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800472e:	2300      	movs	r3, #0
 8004730:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004732:	463a      	mov	r2, r7
 8004734:	1d39      	adds	r1, r7, #4
 8004736:	f107 0308 	add.w	r3, r7, #8
 800473a:	4618      	mov	r0, r3
 800473c:	f7ff f874 	bl	8003828 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004740:	6839      	ldr	r1, [r7, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	68ba      	ldr	r2, [r7, #8]
 8004746:	9202      	str	r2, [sp, #8]
 8004748:	9301      	str	r3, [sp, #4]
 800474a:	2300      	movs	r3, #0
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	2300      	movs	r3, #0
 8004750:	460a      	mov	r2, r1
 8004752:	4920      	ldr	r1, [pc, #128]	; (80047d4 <vTaskStartScheduler+0xb0>)
 8004754:	4820      	ldr	r0, [pc, #128]	; (80047d8 <vTaskStartScheduler+0xb4>)
 8004756:	f7ff fe1d 	bl	8004394 <xTaskCreateStatic>
 800475a:	4602      	mov	r2, r0
 800475c:	4b1f      	ldr	r3, [pc, #124]	; (80047dc <vTaskStartScheduler+0xb8>)
 800475e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004760:	4b1e      	ldr	r3, [pc, #120]	; (80047dc <vTaskStartScheduler+0xb8>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d002      	beq.n	800476e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004768:	2301      	movs	r3, #1
 800476a:	617b      	str	r3, [r7, #20]
 800476c:	e001      	b.n	8004772 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800476e:	2300      	movs	r3, #0
 8004770:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	2b01      	cmp	r3, #1
 8004776:	d102      	bne.n	800477e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004778:	f000 fcf0 	bl	800515c <xTimerCreateTimerTask>
 800477c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	2b01      	cmp	r3, #1
 8004782:	d115      	bne.n	80047b0 <vTaskStartScheduler+0x8c>
 8004784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004788:	f383 8811 	msr	BASEPRI, r3
 800478c:	f3bf 8f6f 	isb	sy
 8004790:	f3bf 8f4f 	dsb	sy
 8004794:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004796:	4b12      	ldr	r3, [pc, #72]	; (80047e0 <vTaskStartScheduler+0xbc>)
 8004798:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800479c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800479e:	4b11      	ldr	r3, [pc, #68]	; (80047e4 <vTaskStartScheduler+0xc0>)
 80047a0:	2201      	movs	r2, #1
 80047a2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80047a4:	4b10      	ldr	r3, [pc, #64]	; (80047e8 <vTaskStartScheduler+0xc4>)
 80047a6:	2200      	movs	r2, #0
 80047a8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80047aa:	f001 f85d 	bl	8005868 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80047ae:	e00d      	b.n	80047cc <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047b6:	d109      	bne.n	80047cc <vTaskStartScheduler+0xa8>
 80047b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047bc:	f383 8811 	msr	BASEPRI, r3
 80047c0:	f3bf 8f6f 	isb	sy
 80047c4:	f3bf 8f4f 	dsb	sy
 80047c8:	60fb      	str	r3, [r7, #12]
 80047ca:	e7fe      	b.n	80047ca <vTaskStartScheduler+0xa6>
}
 80047cc:	bf00      	nop
 80047ce:	3718      	adds	r7, #24
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	08006e6c 	.word	0x08006e6c
 80047d8:	08004df5 	.word	0x08004df5
 80047dc:	20000c50 	.word	0x20000c50
 80047e0:	20000c4c 	.word	0x20000c4c
 80047e4:	20000c38 	.word	0x20000c38
 80047e8:	20000c30 	.word	0x20000c30

080047ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80047ec:	b480      	push	{r7}
 80047ee:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80047f0:	4b04      	ldr	r3, [pc, #16]	; (8004804 <vTaskSuspendAll+0x18>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	3301      	adds	r3, #1
 80047f6:	4a03      	ldr	r2, [pc, #12]	; (8004804 <vTaskSuspendAll+0x18>)
 80047f8:	6013      	str	r3, [r2, #0]
}
 80047fa:	bf00      	nop
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bc80      	pop	{r7}
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	20000c54 	.word	0x20000c54

08004808 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800480e:	2300      	movs	r3, #0
 8004810:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004812:	2300      	movs	r3, #0
 8004814:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004816:	4b41      	ldr	r3, [pc, #260]	; (800491c <xTaskResumeAll+0x114>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d109      	bne.n	8004832 <xTaskResumeAll+0x2a>
 800481e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004822:	f383 8811 	msr	BASEPRI, r3
 8004826:	f3bf 8f6f 	isb	sy
 800482a:	f3bf 8f4f 	dsb	sy
 800482e:	603b      	str	r3, [r7, #0]
 8004830:	e7fe      	b.n	8004830 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004832:	f001 f889 	bl	8005948 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004836:	4b39      	ldr	r3, [pc, #228]	; (800491c <xTaskResumeAll+0x114>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	3b01      	subs	r3, #1
 800483c:	4a37      	ldr	r2, [pc, #220]	; (800491c <xTaskResumeAll+0x114>)
 800483e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004840:	4b36      	ldr	r3, [pc, #216]	; (800491c <xTaskResumeAll+0x114>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d162      	bne.n	800490e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004848:	4b35      	ldr	r3, [pc, #212]	; (8004920 <xTaskResumeAll+0x118>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d05e      	beq.n	800490e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004850:	e02f      	b.n	80048b2 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004852:	4b34      	ldr	r3, [pc, #208]	; (8004924 <xTaskResumeAll+0x11c>)
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	3318      	adds	r3, #24
 800485e:	4618      	mov	r0, r3
 8004860:	f7ff f89a 	bl	8003998 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	3304      	adds	r3, #4
 8004868:	4618      	mov	r0, r3
 800486a:	f7ff f895 	bl	8003998 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004872:	4b2d      	ldr	r3, [pc, #180]	; (8004928 <xTaskResumeAll+0x120>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	429a      	cmp	r2, r3
 8004878:	d903      	bls.n	8004882 <xTaskResumeAll+0x7a>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800487e:	4a2a      	ldr	r2, [pc, #168]	; (8004928 <xTaskResumeAll+0x120>)
 8004880:	6013      	str	r3, [r2, #0]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004886:	4613      	mov	r3, r2
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	4413      	add	r3, r2
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	4a27      	ldr	r2, [pc, #156]	; (800492c <xTaskResumeAll+0x124>)
 8004890:	441a      	add	r2, r3
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	3304      	adds	r3, #4
 8004896:	4619      	mov	r1, r3
 8004898:	4610      	mov	r0, r2
 800489a:	f7ff f822 	bl	80038e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048a2:	4b23      	ldr	r3, [pc, #140]	; (8004930 <xTaskResumeAll+0x128>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d302      	bcc.n	80048b2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80048ac:	4b21      	ldr	r3, [pc, #132]	; (8004934 <xTaskResumeAll+0x12c>)
 80048ae:	2201      	movs	r2, #1
 80048b0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80048b2:	4b1c      	ldr	r3, [pc, #112]	; (8004924 <xTaskResumeAll+0x11c>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d1cb      	bne.n	8004852 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d001      	beq.n	80048c4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80048c0:	f000 fb4a 	bl	8004f58 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80048c4:	4b1c      	ldr	r3, [pc, #112]	; (8004938 <xTaskResumeAll+0x130>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d010      	beq.n	80048f2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80048d0:	f000 f844 	bl	800495c <xTaskIncrementTick>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d002      	beq.n	80048e0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80048da:	4b16      	ldr	r3, [pc, #88]	; (8004934 <xTaskResumeAll+0x12c>)
 80048dc:	2201      	movs	r2, #1
 80048de:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	3b01      	subs	r3, #1
 80048e4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d1f1      	bne.n	80048d0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80048ec:	4b12      	ldr	r3, [pc, #72]	; (8004938 <xTaskResumeAll+0x130>)
 80048ee:	2200      	movs	r2, #0
 80048f0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80048f2:	4b10      	ldr	r3, [pc, #64]	; (8004934 <xTaskResumeAll+0x12c>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d009      	beq.n	800490e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80048fa:	2301      	movs	r3, #1
 80048fc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80048fe:	4b0f      	ldr	r3, [pc, #60]	; (800493c <xTaskResumeAll+0x134>)
 8004900:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004904:	601a      	str	r2, [r3, #0]
 8004906:	f3bf 8f4f 	dsb	sy
 800490a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800490e:	f001 f849 	bl	80059a4 <vPortExitCritical>

	return xAlreadyYielded;
 8004912:	68bb      	ldr	r3, [r7, #8]
}
 8004914:	4618      	mov	r0, r3
 8004916:	3710      	adds	r7, #16
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}
 800491c:	20000c54 	.word	0x20000c54
 8004920:	20000c2c 	.word	0x20000c2c
 8004924:	20000bec 	.word	0x20000bec
 8004928:	20000c34 	.word	0x20000c34
 800492c:	2000075c 	.word	0x2000075c
 8004930:	20000758 	.word	0x20000758
 8004934:	20000c40 	.word	0x20000c40
 8004938:	20000c3c 	.word	0x20000c3c
 800493c:	e000ed04 	.word	0xe000ed04

08004940 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004946:	4b04      	ldr	r3, [pc, #16]	; (8004958 <xTaskGetTickCount+0x18>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800494c:	687b      	ldr	r3, [r7, #4]
}
 800494e:	4618      	mov	r0, r3
 8004950:	370c      	adds	r7, #12
 8004952:	46bd      	mov	sp, r7
 8004954:	bc80      	pop	{r7}
 8004956:	4770      	bx	lr
 8004958:	20000c30 	.word	0x20000c30

0800495c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b086      	sub	sp, #24
 8004960:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004962:	2300      	movs	r3, #0
 8004964:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004966:	4b51      	ldr	r3, [pc, #324]	; (8004aac <xTaskIncrementTick+0x150>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2b00      	cmp	r3, #0
 800496c:	f040 808d 	bne.w	8004a8a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004970:	4b4f      	ldr	r3, [pc, #316]	; (8004ab0 <xTaskIncrementTick+0x154>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	3301      	adds	r3, #1
 8004976:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004978:	4a4d      	ldr	r2, [pc, #308]	; (8004ab0 <xTaskIncrementTick+0x154>)
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d11f      	bne.n	80049c4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004984:	4b4b      	ldr	r3, [pc, #300]	; (8004ab4 <xTaskIncrementTick+0x158>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d009      	beq.n	80049a2 <xTaskIncrementTick+0x46>
 800498e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004992:	f383 8811 	msr	BASEPRI, r3
 8004996:	f3bf 8f6f 	isb	sy
 800499a:	f3bf 8f4f 	dsb	sy
 800499e:	603b      	str	r3, [r7, #0]
 80049a0:	e7fe      	b.n	80049a0 <xTaskIncrementTick+0x44>
 80049a2:	4b44      	ldr	r3, [pc, #272]	; (8004ab4 <xTaskIncrementTick+0x158>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	60fb      	str	r3, [r7, #12]
 80049a8:	4b43      	ldr	r3, [pc, #268]	; (8004ab8 <xTaskIncrementTick+0x15c>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a41      	ldr	r2, [pc, #260]	; (8004ab4 <xTaskIncrementTick+0x158>)
 80049ae:	6013      	str	r3, [r2, #0]
 80049b0:	4a41      	ldr	r2, [pc, #260]	; (8004ab8 <xTaskIncrementTick+0x15c>)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6013      	str	r3, [r2, #0]
 80049b6:	4b41      	ldr	r3, [pc, #260]	; (8004abc <xTaskIncrementTick+0x160>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	3301      	adds	r3, #1
 80049bc:	4a3f      	ldr	r2, [pc, #252]	; (8004abc <xTaskIncrementTick+0x160>)
 80049be:	6013      	str	r3, [r2, #0]
 80049c0:	f000 faca 	bl	8004f58 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80049c4:	4b3e      	ldr	r3, [pc, #248]	; (8004ac0 <xTaskIncrementTick+0x164>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d34e      	bcc.n	8004a6c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049ce:	4b39      	ldr	r3, [pc, #228]	; (8004ab4 <xTaskIncrementTick+0x158>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d101      	bne.n	80049dc <xTaskIncrementTick+0x80>
 80049d8:	2301      	movs	r3, #1
 80049da:	e000      	b.n	80049de <xTaskIncrementTick+0x82>
 80049dc:	2300      	movs	r3, #0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d004      	beq.n	80049ec <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049e2:	4b37      	ldr	r3, [pc, #220]	; (8004ac0 <xTaskIncrementTick+0x164>)
 80049e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80049e8:	601a      	str	r2, [r3, #0]
					break;
 80049ea:	e03f      	b.n	8004a6c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80049ec:	4b31      	ldr	r3, [pc, #196]	; (8004ab4 <xTaskIncrementTick+0x158>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80049fc:	693a      	ldr	r2, [r7, #16]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d203      	bcs.n	8004a0c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004a04:	4a2e      	ldr	r2, [pc, #184]	; (8004ac0 <xTaskIncrementTick+0x164>)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6013      	str	r3, [r2, #0]
						break;
 8004a0a:	e02f      	b.n	8004a6c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	3304      	adds	r3, #4
 8004a10:	4618      	mov	r0, r3
 8004a12:	f7fe ffc1 	bl	8003998 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d004      	beq.n	8004a28 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	3318      	adds	r3, #24
 8004a22:	4618      	mov	r0, r3
 8004a24:	f7fe ffb8 	bl	8003998 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a2c:	4b25      	ldr	r3, [pc, #148]	; (8004ac4 <xTaskIncrementTick+0x168>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d903      	bls.n	8004a3c <xTaskIncrementTick+0xe0>
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a38:	4a22      	ldr	r2, [pc, #136]	; (8004ac4 <xTaskIncrementTick+0x168>)
 8004a3a:	6013      	str	r3, [r2, #0]
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a40:	4613      	mov	r3, r2
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	4413      	add	r3, r2
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	4a1f      	ldr	r2, [pc, #124]	; (8004ac8 <xTaskIncrementTick+0x16c>)
 8004a4a:	441a      	add	r2, r3
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	3304      	adds	r3, #4
 8004a50:	4619      	mov	r1, r3
 8004a52:	4610      	mov	r0, r2
 8004a54:	f7fe ff45 	bl	80038e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a5c:	4b1b      	ldr	r3, [pc, #108]	; (8004acc <xTaskIncrementTick+0x170>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d3b3      	bcc.n	80049ce <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004a66:	2301      	movs	r3, #1
 8004a68:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a6a:	e7b0      	b.n	80049ce <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004a6c:	4b17      	ldr	r3, [pc, #92]	; (8004acc <xTaskIncrementTick+0x170>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a72:	4915      	ldr	r1, [pc, #84]	; (8004ac8 <xTaskIncrementTick+0x16c>)
 8004a74:	4613      	mov	r3, r2
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	4413      	add	r3, r2
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	440b      	add	r3, r1
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d907      	bls.n	8004a94 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004a84:	2301      	movs	r3, #1
 8004a86:	617b      	str	r3, [r7, #20]
 8004a88:	e004      	b.n	8004a94 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004a8a:	4b11      	ldr	r3, [pc, #68]	; (8004ad0 <xTaskIncrementTick+0x174>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	3301      	adds	r3, #1
 8004a90:	4a0f      	ldr	r2, [pc, #60]	; (8004ad0 <xTaskIncrementTick+0x174>)
 8004a92:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004a94:	4b0f      	ldr	r3, [pc, #60]	; (8004ad4 <xTaskIncrementTick+0x178>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d001      	beq.n	8004aa0 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004aa0:	697b      	ldr	r3, [r7, #20]
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3718      	adds	r7, #24
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	20000c54 	.word	0x20000c54
 8004ab0:	20000c30 	.word	0x20000c30
 8004ab4:	20000be4 	.word	0x20000be4
 8004ab8:	20000be8 	.word	0x20000be8
 8004abc:	20000c44 	.word	0x20000c44
 8004ac0:	20000c4c 	.word	0x20000c4c
 8004ac4:	20000c34 	.word	0x20000c34
 8004ac8:	2000075c 	.word	0x2000075c
 8004acc:	20000758 	.word	0x20000758
 8004ad0:	20000c3c 	.word	0x20000c3c
 8004ad4:	20000c40 	.word	0x20000c40

08004ad8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004ade:	4b27      	ldr	r3, [pc, #156]	; (8004b7c <vTaskSwitchContext+0xa4>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d003      	beq.n	8004aee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004ae6:	4b26      	ldr	r3, [pc, #152]	; (8004b80 <vTaskSwitchContext+0xa8>)
 8004ae8:	2201      	movs	r2, #1
 8004aea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004aec:	e040      	b.n	8004b70 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004aee:	4b24      	ldr	r3, [pc, #144]	; (8004b80 <vTaskSwitchContext+0xa8>)
 8004af0:	2200      	movs	r2, #0
 8004af2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004af4:	4b23      	ldr	r3, [pc, #140]	; (8004b84 <vTaskSwitchContext+0xac>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	60fb      	str	r3, [r7, #12]
 8004afa:	e00f      	b.n	8004b1c <vTaskSwitchContext+0x44>
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d109      	bne.n	8004b16 <vTaskSwitchContext+0x3e>
 8004b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b06:	f383 8811 	msr	BASEPRI, r3
 8004b0a:	f3bf 8f6f 	isb	sy
 8004b0e:	f3bf 8f4f 	dsb	sy
 8004b12:	607b      	str	r3, [r7, #4]
 8004b14:	e7fe      	b.n	8004b14 <vTaskSwitchContext+0x3c>
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	3b01      	subs	r3, #1
 8004b1a:	60fb      	str	r3, [r7, #12]
 8004b1c:	491a      	ldr	r1, [pc, #104]	; (8004b88 <vTaskSwitchContext+0xb0>)
 8004b1e:	68fa      	ldr	r2, [r7, #12]
 8004b20:	4613      	mov	r3, r2
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	4413      	add	r3, r2
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	440b      	add	r3, r1
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d0e5      	beq.n	8004afc <vTaskSwitchContext+0x24>
 8004b30:	68fa      	ldr	r2, [r7, #12]
 8004b32:	4613      	mov	r3, r2
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	4413      	add	r3, r2
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	4a13      	ldr	r2, [pc, #76]	; (8004b88 <vTaskSwitchContext+0xb0>)
 8004b3c:	4413      	add	r3, r2
 8004b3e:	60bb      	str	r3, [r7, #8]
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	685a      	ldr	r2, [r3, #4]
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	605a      	str	r2, [r3, #4]
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	685a      	ldr	r2, [r3, #4]
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	3308      	adds	r3, #8
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d104      	bne.n	8004b60 <vTaskSwitchContext+0x88>
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	685a      	ldr	r2, [r3, #4]
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	605a      	str	r2, [r3, #4]
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	4a09      	ldr	r2, [pc, #36]	; (8004b8c <vTaskSwitchContext+0xb4>)
 8004b68:	6013      	str	r3, [r2, #0]
 8004b6a:	4a06      	ldr	r2, [pc, #24]	; (8004b84 <vTaskSwitchContext+0xac>)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6013      	str	r3, [r2, #0]
}
 8004b70:	bf00      	nop
 8004b72:	3714      	adds	r7, #20
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bc80      	pop	{r7}
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop
 8004b7c:	20000c54 	.word	0x20000c54
 8004b80:	20000c40 	.word	0x20000c40
 8004b84:	20000c34 	.word	0x20000c34
 8004b88:	2000075c 	.word	0x2000075c
 8004b8c:	20000758 	.word	0x20000758

08004b90 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d109      	bne.n	8004bb4 <vTaskPlaceOnEventList+0x24>
 8004ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba4:	f383 8811 	msr	BASEPRI, r3
 8004ba8:	f3bf 8f6f 	isb	sy
 8004bac:	f3bf 8f4f 	dsb	sy
 8004bb0:	60fb      	str	r3, [r7, #12]
 8004bb2:	e7fe      	b.n	8004bb2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004bb4:	4b07      	ldr	r3, [pc, #28]	; (8004bd4 <vTaskPlaceOnEventList+0x44>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	3318      	adds	r3, #24
 8004bba:	4619      	mov	r1, r3
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f7fe feb3 	bl	8003928 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004bc2:	2101      	movs	r1, #1
 8004bc4:	6838      	ldr	r0, [r7, #0]
 8004bc6:	f000 fa75 	bl	80050b4 <prvAddCurrentTaskToDelayedList>
}
 8004bca:	bf00      	nop
 8004bcc:	3710      	adds	r7, #16
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	20000758 	.word	0x20000758

08004bd8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b086      	sub	sp, #24
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d109      	bne.n	8004bfe <vTaskPlaceOnEventListRestricted+0x26>
 8004bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bee:	f383 8811 	msr	BASEPRI, r3
 8004bf2:	f3bf 8f6f 	isb	sy
 8004bf6:	f3bf 8f4f 	dsb	sy
 8004bfa:	617b      	str	r3, [r7, #20]
 8004bfc:	e7fe      	b.n	8004bfc <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004bfe:	4b0a      	ldr	r3, [pc, #40]	; (8004c28 <vTaskPlaceOnEventListRestricted+0x50>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	3318      	adds	r3, #24
 8004c04:	4619      	mov	r1, r3
 8004c06:	68f8      	ldr	r0, [r7, #12]
 8004c08:	f7fe fe6b 	bl	80038e2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d002      	beq.n	8004c18 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8004c12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c16:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004c18:	6879      	ldr	r1, [r7, #4]
 8004c1a:	68b8      	ldr	r0, [r7, #8]
 8004c1c:	f000 fa4a 	bl	80050b4 <prvAddCurrentTaskToDelayedList>
	}
 8004c20:	bf00      	nop
 8004c22:	3718      	adds	r7, #24
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	20000758 	.word	0x20000758

08004c2c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b086      	sub	sp, #24
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d109      	bne.n	8004c56 <xTaskRemoveFromEventList+0x2a>
 8004c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c46:	f383 8811 	msr	BASEPRI, r3
 8004c4a:	f3bf 8f6f 	isb	sy
 8004c4e:	f3bf 8f4f 	dsb	sy
 8004c52:	60fb      	str	r3, [r7, #12]
 8004c54:	e7fe      	b.n	8004c54 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	3318      	adds	r3, #24
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f7fe fe9c 	bl	8003998 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c60:	4b1d      	ldr	r3, [pc, #116]	; (8004cd8 <xTaskRemoveFromEventList+0xac>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d11d      	bne.n	8004ca4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	3304      	adds	r3, #4
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f7fe fe93 	bl	8003998 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c76:	4b19      	ldr	r3, [pc, #100]	; (8004cdc <xTaskRemoveFromEventList+0xb0>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d903      	bls.n	8004c86 <xTaskRemoveFromEventList+0x5a>
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c82:	4a16      	ldr	r2, [pc, #88]	; (8004cdc <xTaskRemoveFromEventList+0xb0>)
 8004c84:	6013      	str	r3, [r2, #0]
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c8a:	4613      	mov	r3, r2
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	4413      	add	r3, r2
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	4a13      	ldr	r2, [pc, #76]	; (8004ce0 <xTaskRemoveFromEventList+0xb4>)
 8004c94:	441a      	add	r2, r3
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	3304      	adds	r3, #4
 8004c9a:	4619      	mov	r1, r3
 8004c9c:	4610      	mov	r0, r2
 8004c9e:	f7fe fe20 	bl	80038e2 <vListInsertEnd>
 8004ca2:	e005      	b.n	8004cb0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	3318      	adds	r3, #24
 8004ca8:	4619      	mov	r1, r3
 8004caa:	480e      	ldr	r0, [pc, #56]	; (8004ce4 <xTaskRemoveFromEventList+0xb8>)
 8004cac:	f7fe fe19 	bl	80038e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cb4:	4b0c      	ldr	r3, [pc, #48]	; (8004ce8 <xTaskRemoveFromEventList+0xbc>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d905      	bls.n	8004cca <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004cc2:	4b0a      	ldr	r3, [pc, #40]	; (8004cec <xTaskRemoveFromEventList+0xc0>)
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	601a      	str	r2, [r3, #0]
 8004cc8:	e001      	b.n	8004cce <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004cce:	697b      	ldr	r3, [r7, #20]
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3718      	adds	r7, #24
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	20000c54 	.word	0x20000c54
 8004cdc:	20000c34 	.word	0x20000c34
 8004ce0:	2000075c 	.word	0x2000075c
 8004ce4:	20000bec 	.word	0x20000bec
 8004ce8:	20000758 	.word	0x20000758
 8004cec:	20000c40 	.word	0x20000c40

08004cf0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004cf8:	4b06      	ldr	r3, [pc, #24]	; (8004d14 <vTaskInternalSetTimeOutState+0x24>)
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004d00:	4b05      	ldr	r3, [pc, #20]	; (8004d18 <vTaskInternalSetTimeOutState+0x28>)
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	605a      	str	r2, [r3, #4]
}
 8004d08:	bf00      	nop
 8004d0a:	370c      	adds	r7, #12
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bc80      	pop	{r7}
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	20000c44 	.word	0x20000c44
 8004d18:	20000c30 	.word	0x20000c30

08004d1c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b088      	sub	sp, #32
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d109      	bne.n	8004d40 <xTaskCheckForTimeOut+0x24>
 8004d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d30:	f383 8811 	msr	BASEPRI, r3
 8004d34:	f3bf 8f6f 	isb	sy
 8004d38:	f3bf 8f4f 	dsb	sy
 8004d3c:	613b      	str	r3, [r7, #16]
 8004d3e:	e7fe      	b.n	8004d3e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d109      	bne.n	8004d5a <xTaskCheckForTimeOut+0x3e>
 8004d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d4a:	f383 8811 	msr	BASEPRI, r3
 8004d4e:	f3bf 8f6f 	isb	sy
 8004d52:	f3bf 8f4f 	dsb	sy
 8004d56:	60fb      	str	r3, [r7, #12]
 8004d58:	e7fe      	b.n	8004d58 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004d5a:	f000 fdf5 	bl	8005948 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004d5e:	4b1d      	ldr	r3, [pc, #116]	; (8004dd4 <xTaskCheckForTimeOut+0xb8>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	69ba      	ldr	r2, [r7, #24]
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d76:	d102      	bne.n	8004d7e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	61fb      	str	r3, [r7, #28]
 8004d7c:	e023      	b.n	8004dc6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	4b15      	ldr	r3, [pc, #84]	; (8004dd8 <xTaskCheckForTimeOut+0xbc>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d007      	beq.n	8004d9a <xTaskCheckForTimeOut+0x7e>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	69ba      	ldr	r2, [r7, #24]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d302      	bcc.n	8004d9a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004d94:	2301      	movs	r3, #1
 8004d96:	61fb      	str	r3, [r7, #28]
 8004d98:	e015      	b.n	8004dc6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	697a      	ldr	r2, [r7, #20]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d20b      	bcs.n	8004dbc <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	1ad2      	subs	r2, r2, r3
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f7ff ff9d 	bl	8004cf0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004db6:	2300      	movs	r3, #0
 8004db8:	61fb      	str	r3, [r7, #28]
 8004dba:	e004      	b.n	8004dc6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004dc6:	f000 fded 	bl	80059a4 <vPortExitCritical>

	return xReturn;
 8004dca:	69fb      	ldr	r3, [r7, #28]
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3720      	adds	r7, #32
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	20000c30 	.word	0x20000c30
 8004dd8:	20000c44 	.word	0x20000c44

08004ddc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004ddc:	b480      	push	{r7}
 8004dde:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004de0:	4b03      	ldr	r3, [pc, #12]	; (8004df0 <vTaskMissedYield+0x14>)
 8004de2:	2201      	movs	r2, #1
 8004de4:	601a      	str	r2, [r3, #0]
}
 8004de6:	bf00      	nop
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bc80      	pop	{r7}
 8004dec:	4770      	bx	lr
 8004dee:	bf00      	nop
 8004df0:	20000c40 	.word	0x20000c40

08004df4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b082      	sub	sp, #8
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004dfc:	f000 f852 	bl	8004ea4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004e00:	4b06      	ldr	r3, [pc, #24]	; (8004e1c <prvIdleTask+0x28>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d9f9      	bls.n	8004dfc <prvIdleTask+0x8>
			{
				taskYIELD();
 8004e08:	4b05      	ldr	r3, [pc, #20]	; (8004e20 <prvIdleTask+0x2c>)
 8004e0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e0e:	601a      	str	r2, [r3, #0]
 8004e10:	f3bf 8f4f 	dsb	sy
 8004e14:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004e18:	e7f0      	b.n	8004dfc <prvIdleTask+0x8>
 8004e1a:	bf00      	nop
 8004e1c:	2000075c 	.word	0x2000075c
 8004e20:	e000ed04 	.word	0xe000ed04

08004e24 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	607b      	str	r3, [r7, #4]
 8004e2e:	e00c      	b.n	8004e4a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	4613      	mov	r3, r2
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	4413      	add	r3, r2
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	4a12      	ldr	r2, [pc, #72]	; (8004e84 <prvInitialiseTaskLists+0x60>)
 8004e3c:	4413      	add	r3, r2
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f7fe fd24 	bl	800388c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	3301      	adds	r3, #1
 8004e48:	607b      	str	r3, [r7, #4]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2b37      	cmp	r3, #55	; 0x37
 8004e4e:	d9ef      	bls.n	8004e30 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004e50:	480d      	ldr	r0, [pc, #52]	; (8004e88 <prvInitialiseTaskLists+0x64>)
 8004e52:	f7fe fd1b 	bl	800388c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004e56:	480d      	ldr	r0, [pc, #52]	; (8004e8c <prvInitialiseTaskLists+0x68>)
 8004e58:	f7fe fd18 	bl	800388c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004e5c:	480c      	ldr	r0, [pc, #48]	; (8004e90 <prvInitialiseTaskLists+0x6c>)
 8004e5e:	f7fe fd15 	bl	800388c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004e62:	480c      	ldr	r0, [pc, #48]	; (8004e94 <prvInitialiseTaskLists+0x70>)
 8004e64:	f7fe fd12 	bl	800388c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004e68:	480b      	ldr	r0, [pc, #44]	; (8004e98 <prvInitialiseTaskLists+0x74>)
 8004e6a:	f7fe fd0f 	bl	800388c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004e6e:	4b0b      	ldr	r3, [pc, #44]	; (8004e9c <prvInitialiseTaskLists+0x78>)
 8004e70:	4a05      	ldr	r2, [pc, #20]	; (8004e88 <prvInitialiseTaskLists+0x64>)
 8004e72:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004e74:	4b0a      	ldr	r3, [pc, #40]	; (8004ea0 <prvInitialiseTaskLists+0x7c>)
 8004e76:	4a05      	ldr	r2, [pc, #20]	; (8004e8c <prvInitialiseTaskLists+0x68>)
 8004e78:	601a      	str	r2, [r3, #0]
}
 8004e7a:	bf00      	nop
 8004e7c:	3708      	adds	r7, #8
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	2000075c 	.word	0x2000075c
 8004e88:	20000bbc 	.word	0x20000bbc
 8004e8c:	20000bd0 	.word	0x20000bd0
 8004e90:	20000bec 	.word	0x20000bec
 8004e94:	20000c00 	.word	0x20000c00
 8004e98:	20000c18 	.word	0x20000c18
 8004e9c:	20000be4 	.word	0x20000be4
 8004ea0:	20000be8 	.word	0x20000be8

08004ea4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b082      	sub	sp, #8
 8004ea8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004eaa:	e019      	b.n	8004ee0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004eac:	f000 fd4c 	bl	8005948 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004eb0:	4b0f      	ldr	r3, [pc, #60]	; (8004ef0 <prvCheckTasksWaitingTermination+0x4c>)
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	3304      	adds	r3, #4
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f7fe fd6b 	bl	8003998 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004ec2:	4b0c      	ldr	r3, [pc, #48]	; (8004ef4 <prvCheckTasksWaitingTermination+0x50>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	4a0a      	ldr	r2, [pc, #40]	; (8004ef4 <prvCheckTasksWaitingTermination+0x50>)
 8004eca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004ecc:	4b0a      	ldr	r3, [pc, #40]	; (8004ef8 <prvCheckTasksWaitingTermination+0x54>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	3b01      	subs	r3, #1
 8004ed2:	4a09      	ldr	r2, [pc, #36]	; (8004ef8 <prvCheckTasksWaitingTermination+0x54>)
 8004ed4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004ed6:	f000 fd65 	bl	80059a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 f80e 	bl	8004efc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ee0:	4b05      	ldr	r3, [pc, #20]	; (8004ef8 <prvCheckTasksWaitingTermination+0x54>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1e1      	bne.n	8004eac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004ee8:	bf00      	nop
 8004eea:	3708      	adds	r7, #8
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	20000c00 	.word	0x20000c00
 8004ef4:	20000c2c 	.word	0x20000c2c
 8004ef8:	20000c14 	.word	0x20000c14

08004efc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d108      	bne.n	8004f20 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f12:	4618      	mov	r0, r3
 8004f14:	f000 fed0 	bl	8005cb8 <vPortFree>
				vPortFree( pxTCB );
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f000 fecd 	bl	8005cb8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004f1e:	e017      	b.n	8004f50 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d103      	bne.n	8004f32 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 fec4 	bl	8005cb8 <vPortFree>
	}
 8004f30:	e00e      	b.n	8004f50 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d009      	beq.n	8004f50 <prvDeleteTCB+0x54>
 8004f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f40:	f383 8811 	msr	BASEPRI, r3
 8004f44:	f3bf 8f6f 	isb	sy
 8004f48:	f3bf 8f4f 	dsb	sy
 8004f4c:	60fb      	str	r3, [r7, #12]
 8004f4e:	e7fe      	b.n	8004f4e <prvDeleteTCB+0x52>
	}
 8004f50:	bf00      	nop
 8004f52:	3710      	adds	r7, #16
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f5e:	4b0e      	ldr	r3, [pc, #56]	; (8004f98 <prvResetNextTaskUnblockTime+0x40>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d101      	bne.n	8004f6c <prvResetNextTaskUnblockTime+0x14>
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e000      	b.n	8004f6e <prvResetNextTaskUnblockTime+0x16>
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d004      	beq.n	8004f7c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004f72:	4b0a      	ldr	r3, [pc, #40]	; (8004f9c <prvResetNextTaskUnblockTime+0x44>)
 8004f74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f78:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004f7a:	e008      	b.n	8004f8e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004f7c:	4b06      	ldr	r3, [pc, #24]	; (8004f98 <prvResetNextTaskUnblockTime+0x40>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	4a04      	ldr	r2, [pc, #16]	; (8004f9c <prvResetNextTaskUnblockTime+0x44>)
 8004f8c:	6013      	str	r3, [r2, #0]
}
 8004f8e:	bf00      	nop
 8004f90:	370c      	adds	r7, #12
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bc80      	pop	{r7}
 8004f96:	4770      	bx	lr
 8004f98:	20000be4 	.word	0x20000be4
 8004f9c:	20000c4c 	.word	0x20000c4c

08004fa0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004fa6:	4b0b      	ldr	r3, [pc, #44]	; (8004fd4 <xTaskGetSchedulerState+0x34>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d102      	bne.n	8004fb4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	607b      	str	r3, [r7, #4]
 8004fb2:	e008      	b.n	8004fc6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fb4:	4b08      	ldr	r3, [pc, #32]	; (8004fd8 <xTaskGetSchedulerState+0x38>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d102      	bne.n	8004fc2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004fbc:	2302      	movs	r3, #2
 8004fbe:	607b      	str	r3, [r7, #4]
 8004fc0:	e001      	b.n	8004fc6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004fc6:	687b      	ldr	r3, [r7, #4]
	}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	370c      	adds	r7, #12
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bc80      	pop	{r7}
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	20000c38 	.word	0x20000c38
 8004fd8:	20000c54 	.word	0x20000c54

08004fdc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b086      	sub	sp, #24
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d054      	beq.n	800509c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004ff2:	4b2d      	ldr	r3, [pc, #180]	; (80050a8 <xTaskPriorityDisinherit+0xcc>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	693a      	ldr	r2, [r7, #16]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d009      	beq.n	8005010 <xTaskPriorityDisinherit+0x34>
 8004ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005000:	f383 8811 	msr	BASEPRI, r3
 8005004:	f3bf 8f6f 	isb	sy
 8005008:	f3bf 8f4f 	dsb	sy
 800500c:	60fb      	str	r3, [r7, #12]
 800500e:	e7fe      	b.n	800500e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005014:	2b00      	cmp	r3, #0
 8005016:	d109      	bne.n	800502c <xTaskPriorityDisinherit+0x50>
 8005018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800501c:	f383 8811 	msr	BASEPRI, r3
 8005020:	f3bf 8f6f 	isb	sy
 8005024:	f3bf 8f4f 	dsb	sy
 8005028:	60bb      	str	r3, [r7, #8]
 800502a:	e7fe      	b.n	800502a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005030:	1e5a      	subs	r2, r3, #1
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800503e:	429a      	cmp	r2, r3
 8005040:	d02c      	beq.n	800509c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005046:	2b00      	cmp	r3, #0
 8005048:	d128      	bne.n	800509c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	3304      	adds	r3, #4
 800504e:	4618      	mov	r0, r3
 8005050:	f7fe fca2 	bl	8003998 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005060:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800506c:	4b0f      	ldr	r3, [pc, #60]	; (80050ac <xTaskPriorityDisinherit+0xd0>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	429a      	cmp	r2, r3
 8005072:	d903      	bls.n	800507c <xTaskPriorityDisinherit+0xa0>
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005078:	4a0c      	ldr	r2, [pc, #48]	; (80050ac <xTaskPriorityDisinherit+0xd0>)
 800507a:	6013      	str	r3, [r2, #0]
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005080:	4613      	mov	r3, r2
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	4413      	add	r3, r2
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	4a09      	ldr	r2, [pc, #36]	; (80050b0 <xTaskPriorityDisinherit+0xd4>)
 800508a:	441a      	add	r2, r3
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	3304      	adds	r3, #4
 8005090:	4619      	mov	r1, r3
 8005092:	4610      	mov	r0, r2
 8005094:	f7fe fc25 	bl	80038e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005098:	2301      	movs	r3, #1
 800509a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800509c:	697b      	ldr	r3, [r7, #20]
	}
 800509e:	4618      	mov	r0, r3
 80050a0:	3718      	adds	r7, #24
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	20000758 	.word	0x20000758
 80050ac:	20000c34 	.word	0x20000c34
 80050b0:	2000075c 	.word	0x2000075c

080050b4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80050be:	4b21      	ldr	r3, [pc, #132]	; (8005144 <prvAddCurrentTaskToDelayedList+0x90>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80050c4:	4b20      	ldr	r3, [pc, #128]	; (8005148 <prvAddCurrentTaskToDelayedList+0x94>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	3304      	adds	r3, #4
 80050ca:	4618      	mov	r0, r3
 80050cc:	f7fe fc64 	bl	8003998 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050d6:	d10a      	bne.n	80050ee <prvAddCurrentTaskToDelayedList+0x3a>
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d007      	beq.n	80050ee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050de:	4b1a      	ldr	r3, [pc, #104]	; (8005148 <prvAddCurrentTaskToDelayedList+0x94>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	3304      	adds	r3, #4
 80050e4:	4619      	mov	r1, r3
 80050e6:	4819      	ldr	r0, [pc, #100]	; (800514c <prvAddCurrentTaskToDelayedList+0x98>)
 80050e8:	f7fe fbfb 	bl	80038e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80050ec:	e026      	b.n	800513c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4413      	add	r3, r2
 80050f4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80050f6:	4b14      	ldr	r3, [pc, #80]	; (8005148 <prvAddCurrentTaskToDelayedList+0x94>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	68ba      	ldr	r2, [r7, #8]
 80050fc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80050fe:	68ba      	ldr	r2, [r7, #8]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	429a      	cmp	r2, r3
 8005104:	d209      	bcs.n	800511a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005106:	4b12      	ldr	r3, [pc, #72]	; (8005150 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	4b0f      	ldr	r3, [pc, #60]	; (8005148 <prvAddCurrentTaskToDelayedList+0x94>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	3304      	adds	r3, #4
 8005110:	4619      	mov	r1, r3
 8005112:	4610      	mov	r0, r2
 8005114:	f7fe fc08 	bl	8003928 <vListInsert>
}
 8005118:	e010      	b.n	800513c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800511a:	4b0e      	ldr	r3, [pc, #56]	; (8005154 <prvAddCurrentTaskToDelayedList+0xa0>)
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	4b0a      	ldr	r3, [pc, #40]	; (8005148 <prvAddCurrentTaskToDelayedList+0x94>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	3304      	adds	r3, #4
 8005124:	4619      	mov	r1, r3
 8005126:	4610      	mov	r0, r2
 8005128:	f7fe fbfe 	bl	8003928 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800512c:	4b0a      	ldr	r3, [pc, #40]	; (8005158 <prvAddCurrentTaskToDelayedList+0xa4>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	68ba      	ldr	r2, [r7, #8]
 8005132:	429a      	cmp	r2, r3
 8005134:	d202      	bcs.n	800513c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005136:	4a08      	ldr	r2, [pc, #32]	; (8005158 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	6013      	str	r3, [r2, #0]
}
 800513c:	bf00      	nop
 800513e:	3710      	adds	r7, #16
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}
 8005144:	20000c30 	.word	0x20000c30
 8005148:	20000758 	.word	0x20000758
 800514c:	20000c18 	.word	0x20000c18
 8005150:	20000be8 	.word	0x20000be8
 8005154:	20000be4 	.word	0x20000be4
 8005158:	20000c4c 	.word	0x20000c4c

0800515c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b08a      	sub	sp, #40	; 0x28
 8005160:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005162:	2300      	movs	r3, #0
 8005164:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005166:	f000 fac3 	bl	80056f0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800516a:	4b1c      	ldr	r3, [pc, #112]	; (80051dc <xTimerCreateTimerTask+0x80>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d021      	beq.n	80051b6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005172:	2300      	movs	r3, #0
 8005174:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005176:	2300      	movs	r3, #0
 8005178:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800517a:	1d3a      	adds	r2, r7, #4
 800517c:	f107 0108 	add.w	r1, r7, #8
 8005180:	f107 030c 	add.w	r3, r7, #12
 8005184:	4618      	mov	r0, r3
 8005186:	f7fe fb67 	bl	8003858 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800518a:	6879      	ldr	r1, [r7, #4]
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	68fa      	ldr	r2, [r7, #12]
 8005190:	9202      	str	r2, [sp, #8]
 8005192:	9301      	str	r3, [sp, #4]
 8005194:	2302      	movs	r3, #2
 8005196:	9300      	str	r3, [sp, #0]
 8005198:	2300      	movs	r3, #0
 800519a:	460a      	mov	r2, r1
 800519c:	4910      	ldr	r1, [pc, #64]	; (80051e0 <xTimerCreateTimerTask+0x84>)
 800519e:	4811      	ldr	r0, [pc, #68]	; (80051e4 <xTimerCreateTimerTask+0x88>)
 80051a0:	f7ff f8f8 	bl	8004394 <xTaskCreateStatic>
 80051a4:	4602      	mov	r2, r0
 80051a6:	4b10      	ldr	r3, [pc, #64]	; (80051e8 <xTimerCreateTimerTask+0x8c>)
 80051a8:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80051aa:	4b0f      	ldr	r3, [pc, #60]	; (80051e8 <xTimerCreateTimerTask+0x8c>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d001      	beq.n	80051b6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80051b2:	2301      	movs	r3, #1
 80051b4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d109      	bne.n	80051d0 <xTimerCreateTimerTask+0x74>
 80051bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c0:	f383 8811 	msr	BASEPRI, r3
 80051c4:	f3bf 8f6f 	isb	sy
 80051c8:	f3bf 8f4f 	dsb	sy
 80051cc:	613b      	str	r3, [r7, #16]
 80051ce:	e7fe      	b.n	80051ce <xTimerCreateTimerTask+0x72>
	return xReturn;
 80051d0:	697b      	ldr	r3, [r7, #20]
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3718      	adds	r7, #24
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	bf00      	nop
 80051dc:	20000c88 	.word	0x20000c88
 80051e0:	08006e74 	.word	0x08006e74
 80051e4:	08005305 	.word	0x08005305
 80051e8:	20000c8c 	.word	0x20000c8c

080051ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b08a      	sub	sp, #40	; 0x28
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	607a      	str	r2, [r7, #4]
 80051f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80051fa:	2300      	movs	r3, #0
 80051fc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d109      	bne.n	8005218 <xTimerGenericCommand+0x2c>
 8005204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005208:	f383 8811 	msr	BASEPRI, r3
 800520c:	f3bf 8f6f 	isb	sy
 8005210:	f3bf 8f4f 	dsb	sy
 8005214:	623b      	str	r3, [r7, #32]
 8005216:	e7fe      	b.n	8005216 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005218:	4b19      	ldr	r3, [pc, #100]	; (8005280 <xTimerGenericCommand+0x94>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d02a      	beq.n	8005276 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	2b05      	cmp	r3, #5
 8005230:	dc18      	bgt.n	8005264 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005232:	f7ff feb5 	bl	8004fa0 <xTaskGetSchedulerState>
 8005236:	4603      	mov	r3, r0
 8005238:	2b02      	cmp	r3, #2
 800523a:	d109      	bne.n	8005250 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800523c:	4b10      	ldr	r3, [pc, #64]	; (8005280 <xTimerGenericCommand+0x94>)
 800523e:	6818      	ldr	r0, [r3, #0]
 8005240:	f107 0110 	add.w	r1, r7, #16
 8005244:	2300      	movs	r3, #0
 8005246:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005248:	f7fe fcce 	bl	8003be8 <xQueueGenericSend>
 800524c:	6278      	str	r0, [r7, #36]	; 0x24
 800524e:	e012      	b.n	8005276 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005250:	4b0b      	ldr	r3, [pc, #44]	; (8005280 <xTimerGenericCommand+0x94>)
 8005252:	6818      	ldr	r0, [r3, #0]
 8005254:	f107 0110 	add.w	r1, r7, #16
 8005258:	2300      	movs	r3, #0
 800525a:	2200      	movs	r2, #0
 800525c:	f7fe fcc4 	bl	8003be8 <xQueueGenericSend>
 8005260:	6278      	str	r0, [r7, #36]	; 0x24
 8005262:	e008      	b.n	8005276 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005264:	4b06      	ldr	r3, [pc, #24]	; (8005280 <xTimerGenericCommand+0x94>)
 8005266:	6818      	ldr	r0, [r3, #0]
 8005268:	f107 0110 	add.w	r1, r7, #16
 800526c:	2300      	movs	r3, #0
 800526e:	683a      	ldr	r2, [r7, #0]
 8005270:	f7fe fdb4 	bl	8003ddc <xQueueGenericSendFromISR>
 8005274:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005278:	4618      	mov	r0, r3
 800527a:	3728      	adds	r7, #40	; 0x28
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}
 8005280:	20000c88 	.word	0x20000c88

08005284 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b088      	sub	sp, #32
 8005288:	af02      	add	r7, sp, #8
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800528e:	4b1c      	ldr	r3, [pc, #112]	; (8005300 <prvProcessExpiredTimer+0x7c>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	3304      	adds	r3, #4
 800529c:	4618      	mov	r0, r3
 800529e:	f7fe fb7b 	bl	8003998 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	69db      	ldr	r3, [r3, #28]
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d121      	bne.n	80052ee <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	699a      	ldr	r2, [r3, #24]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	18d1      	adds	r1, r2, r3
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	683a      	ldr	r2, [r7, #0]
 80052b6:	6978      	ldr	r0, [r7, #20]
 80052b8:	f000 f8c8 	bl	800544c <prvInsertTimerInActiveList>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d015      	beq.n	80052ee <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80052c2:	2300      	movs	r3, #0
 80052c4:	9300      	str	r3, [sp, #0]
 80052c6:	2300      	movs	r3, #0
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	2100      	movs	r1, #0
 80052cc:	6978      	ldr	r0, [r7, #20]
 80052ce:	f7ff ff8d 	bl	80051ec <xTimerGenericCommand>
 80052d2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d109      	bne.n	80052ee <prvProcessExpiredTimer+0x6a>
 80052da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052de:	f383 8811 	msr	BASEPRI, r3
 80052e2:	f3bf 8f6f 	isb	sy
 80052e6:	f3bf 8f4f 	dsb	sy
 80052ea:	60fb      	str	r3, [r7, #12]
 80052ec:	e7fe      	b.n	80052ec <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f2:	6978      	ldr	r0, [r7, #20]
 80052f4:	4798      	blx	r3
}
 80052f6:	bf00      	nop
 80052f8:	3718      	adds	r7, #24
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop
 8005300:	20000c80 	.word	0x20000c80

08005304 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800530c:	f107 0308 	add.w	r3, r7, #8
 8005310:	4618      	mov	r0, r3
 8005312:	f000 f857 	bl	80053c4 <prvGetNextExpireTime>
 8005316:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	4619      	mov	r1, r3
 800531c:	68f8      	ldr	r0, [r7, #12]
 800531e:	f000 f803 	bl	8005328 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005322:	f000 f8d5 	bl	80054d0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005326:	e7f1      	b.n	800530c <prvTimerTask+0x8>

08005328 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005332:	f7ff fa5b 	bl	80047ec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005336:	f107 0308 	add.w	r3, r7, #8
 800533a:	4618      	mov	r0, r3
 800533c:	f000 f866 	bl	800540c <prvSampleTimeNow>
 8005340:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d130      	bne.n	80053aa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d10a      	bne.n	8005364 <prvProcessTimerOrBlockTask+0x3c>
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	429a      	cmp	r2, r3
 8005354:	d806      	bhi.n	8005364 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005356:	f7ff fa57 	bl	8004808 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800535a:	68f9      	ldr	r1, [r7, #12]
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f7ff ff91 	bl	8005284 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005362:	e024      	b.n	80053ae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d008      	beq.n	800537c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800536a:	4b13      	ldr	r3, [pc, #76]	; (80053b8 <prvProcessTimerOrBlockTask+0x90>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2b00      	cmp	r3, #0
 8005372:	bf0c      	ite	eq
 8005374:	2301      	moveq	r3, #1
 8005376:	2300      	movne	r3, #0
 8005378:	b2db      	uxtb	r3, r3
 800537a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800537c:	4b0f      	ldr	r3, [pc, #60]	; (80053bc <prvProcessTimerOrBlockTask+0x94>)
 800537e:	6818      	ldr	r0, [r3, #0]
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	683a      	ldr	r2, [r7, #0]
 8005388:	4619      	mov	r1, r3
 800538a:	f7fe ffcf 	bl	800432c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800538e:	f7ff fa3b 	bl	8004808 <xTaskResumeAll>
 8005392:	4603      	mov	r3, r0
 8005394:	2b00      	cmp	r3, #0
 8005396:	d10a      	bne.n	80053ae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005398:	4b09      	ldr	r3, [pc, #36]	; (80053c0 <prvProcessTimerOrBlockTask+0x98>)
 800539a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800539e:	601a      	str	r2, [r3, #0]
 80053a0:	f3bf 8f4f 	dsb	sy
 80053a4:	f3bf 8f6f 	isb	sy
}
 80053a8:	e001      	b.n	80053ae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80053aa:	f7ff fa2d 	bl	8004808 <xTaskResumeAll>
}
 80053ae:	bf00      	nop
 80053b0:	3710      	adds	r7, #16
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	20000c84 	.word	0x20000c84
 80053bc:	20000c88 	.word	0x20000c88
 80053c0:	e000ed04 	.word	0xe000ed04

080053c4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80053c4:	b480      	push	{r7}
 80053c6:	b085      	sub	sp, #20
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80053cc:	4b0e      	ldr	r3, [pc, #56]	; (8005408 <prvGetNextExpireTime+0x44>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	bf0c      	ite	eq
 80053d6:	2301      	moveq	r3, #1
 80053d8:	2300      	movne	r3, #0
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	461a      	mov	r2, r3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d105      	bne.n	80053f6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80053ea:	4b07      	ldr	r3, [pc, #28]	; (8005408 <prvGetNextExpireTime+0x44>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	60fb      	str	r3, [r7, #12]
 80053f4:	e001      	b.n	80053fa <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80053f6:	2300      	movs	r3, #0
 80053f8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80053fa:	68fb      	ldr	r3, [r7, #12]
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3714      	adds	r7, #20
 8005400:	46bd      	mov	sp, r7
 8005402:	bc80      	pop	{r7}
 8005404:	4770      	bx	lr
 8005406:	bf00      	nop
 8005408:	20000c80 	.word	0x20000c80

0800540c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005414:	f7ff fa94 	bl	8004940 <xTaskGetTickCount>
 8005418:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800541a:	4b0b      	ldr	r3, [pc, #44]	; (8005448 <prvSampleTimeNow+0x3c>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68fa      	ldr	r2, [r7, #12]
 8005420:	429a      	cmp	r2, r3
 8005422:	d205      	bcs.n	8005430 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005424:	f000 f904 	bl	8005630 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	601a      	str	r2, [r3, #0]
 800542e:	e002      	b.n	8005436 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005436:	4a04      	ldr	r2, [pc, #16]	; (8005448 <prvSampleTimeNow+0x3c>)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800543c:	68fb      	ldr	r3, [r7, #12]
}
 800543e:	4618      	mov	r0, r3
 8005440:	3710      	adds	r7, #16
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	20000c90 	.word	0x20000c90

0800544c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b086      	sub	sp, #24
 8005450:	af00      	add	r7, sp, #0
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	60b9      	str	r1, [r7, #8]
 8005456:	607a      	str	r2, [r7, #4]
 8005458:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800545a:	2300      	movs	r3, #0
 800545c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	68ba      	ldr	r2, [r7, #8]
 8005462:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	68fa      	ldr	r2, [r7, #12]
 8005468:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800546a:	68ba      	ldr	r2, [r7, #8]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	429a      	cmp	r2, r3
 8005470:	d812      	bhi.n	8005498 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	1ad2      	subs	r2, r2, r3
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	699b      	ldr	r3, [r3, #24]
 800547c:	429a      	cmp	r2, r3
 800547e:	d302      	bcc.n	8005486 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005480:	2301      	movs	r3, #1
 8005482:	617b      	str	r3, [r7, #20]
 8005484:	e01b      	b.n	80054be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005486:	4b10      	ldr	r3, [pc, #64]	; (80054c8 <prvInsertTimerInActiveList+0x7c>)
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	3304      	adds	r3, #4
 800548e:	4619      	mov	r1, r3
 8005490:	4610      	mov	r0, r2
 8005492:	f7fe fa49 	bl	8003928 <vListInsert>
 8005496:	e012      	b.n	80054be <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	429a      	cmp	r2, r3
 800549e:	d206      	bcs.n	80054ae <prvInsertTimerInActiveList+0x62>
 80054a0:	68ba      	ldr	r2, [r7, #8]
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d302      	bcc.n	80054ae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80054a8:	2301      	movs	r3, #1
 80054aa:	617b      	str	r3, [r7, #20]
 80054ac:	e007      	b.n	80054be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80054ae:	4b07      	ldr	r3, [pc, #28]	; (80054cc <prvInsertTimerInActiveList+0x80>)
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	3304      	adds	r3, #4
 80054b6:	4619      	mov	r1, r3
 80054b8:	4610      	mov	r0, r2
 80054ba:	f7fe fa35 	bl	8003928 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80054be:	697b      	ldr	r3, [r7, #20]
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3718      	adds	r7, #24
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}
 80054c8:	20000c84 	.word	0x20000c84
 80054cc:	20000c80 	.word	0x20000c80

080054d0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b08e      	sub	sp, #56	; 0x38
 80054d4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80054d6:	e099      	b.n	800560c <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	da17      	bge.n	800550e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80054de:	1d3b      	adds	r3, r7, #4
 80054e0:	3304      	adds	r3, #4
 80054e2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80054e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d109      	bne.n	80054fe <prvProcessReceivedCommands+0x2e>
 80054ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ee:	f383 8811 	msr	BASEPRI, r3
 80054f2:	f3bf 8f6f 	isb	sy
 80054f6:	f3bf 8f4f 	dsb	sy
 80054fa:	61fb      	str	r3, [r7, #28]
 80054fc:	e7fe      	b.n	80054fc <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80054fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005504:	6850      	ldr	r0, [r2, #4]
 8005506:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005508:	6892      	ldr	r2, [r2, #8]
 800550a:	4611      	mov	r1, r2
 800550c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2b00      	cmp	r3, #0
 8005512:	db7a      	blt.n	800560a <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800551a:	695b      	ldr	r3, [r3, #20]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d004      	beq.n	800552a <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005522:	3304      	adds	r3, #4
 8005524:	4618      	mov	r0, r3
 8005526:	f7fe fa37 	bl	8003998 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800552a:	463b      	mov	r3, r7
 800552c:	4618      	mov	r0, r3
 800552e:	f7ff ff6d 	bl	800540c <prvSampleTimeNow>
 8005532:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2b09      	cmp	r3, #9
 8005538:	d868      	bhi.n	800560c <prvProcessReceivedCommands+0x13c>
 800553a:	a201      	add	r2, pc, #4	; (adr r2, 8005540 <prvProcessReceivedCommands+0x70>)
 800553c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005540:	08005569 	.word	0x08005569
 8005544:	08005569 	.word	0x08005569
 8005548:	08005569 	.word	0x08005569
 800554c:	0800560d 	.word	0x0800560d
 8005550:	080055c3 	.word	0x080055c3
 8005554:	080055f9 	.word	0x080055f9
 8005558:	08005569 	.word	0x08005569
 800555c:	08005569 	.word	0x08005569
 8005560:	0800560d 	.word	0x0800560d
 8005564:	080055c3 	.word	0x080055c3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005568:	68ba      	ldr	r2, [r7, #8]
 800556a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556c:	699b      	ldr	r3, [r3, #24]
 800556e:	18d1      	adds	r1, r2, r3
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005574:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005576:	f7ff ff69 	bl	800544c <prvInsertTimerInActiveList>
 800557a:	4603      	mov	r3, r0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d045      	beq.n	800560c <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005584:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005586:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800558a:	69db      	ldr	r3, [r3, #28]
 800558c:	2b01      	cmp	r3, #1
 800558e:	d13d      	bne.n	800560c <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005590:	68ba      	ldr	r2, [r7, #8]
 8005592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005594:	699b      	ldr	r3, [r3, #24]
 8005596:	441a      	add	r2, r3
 8005598:	2300      	movs	r3, #0
 800559a:	9300      	str	r3, [sp, #0]
 800559c:	2300      	movs	r3, #0
 800559e:	2100      	movs	r1, #0
 80055a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055a2:	f7ff fe23 	bl	80051ec <xTimerGenericCommand>
 80055a6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80055a8:	6a3b      	ldr	r3, [r7, #32]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d12e      	bne.n	800560c <prvProcessReceivedCommands+0x13c>
 80055ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b2:	f383 8811 	msr	BASEPRI, r3
 80055b6:	f3bf 8f6f 	isb	sy
 80055ba:	f3bf 8f4f 	dsb	sy
 80055be:	61bb      	str	r3, [r7, #24]
 80055c0:	e7fe      	b.n	80055c0 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80055c2:	68ba      	ldr	r2, [r7, #8]
 80055c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80055c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ca:	699b      	ldr	r3, [r3, #24]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d109      	bne.n	80055e4 <prvProcessReceivedCommands+0x114>
 80055d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d4:	f383 8811 	msr	BASEPRI, r3
 80055d8:	f3bf 8f6f 	isb	sy
 80055dc:	f3bf 8f4f 	dsb	sy
 80055e0:	617b      	str	r3, [r7, #20]
 80055e2:	e7fe      	b.n	80055e2 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80055e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e6:	699a      	ldr	r2, [r3, #24]
 80055e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ea:	18d1      	adds	r1, r2, r3
 80055ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055f2:	f7ff ff2b 	bl	800544c <prvInsertTimerInActiveList>
					break;
 80055f6:	e009      	b.n	800560c <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80055f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055fa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d104      	bne.n	800560c <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8005602:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005604:	f000 fb58 	bl	8005cb8 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005608:	e000      	b.n	800560c <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800560a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800560c:	4b07      	ldr	r3, [pc, #28]	; (800562c <prvProcessReceivedCommands+0x15c>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	1d39      	adds	r1, r7, #4
 8005612:	2200      	movs	r2, #0
 8005614:	4618      	mov	r0, r3
 8005616:	f7fe fc75 	bl	8003f04 <xQueueReceive>
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
 800561e:	f47f af5b 	bne.w	80054d8 <prvProcessReceivedCommands+0x8>
	}
}
 8005622:	bf00      	nop
 8005624:	3730      	adds	r7, #48	; 0x30
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
 800562a:	bf00      	nop
 800562c:	20000c88 	.word	0x20000c88

08005630 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b088      	sub	sp, #32
 8005634:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005636:	e044      	b.n	80056c2 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005638:	4b2b      	ldr	r3, [pc, #172]	; (80056e8 <prvSwitchTimerLists+0xb8>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005642:	4b29      	ldr	r3, [pc, #164]	; (80056e8 <prvSwitchTimerLists+0xb8>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	3304      	adds	r3, #4
 8005650:	4618      	mov	r0, r3
 8005652:	f7fe f9a1 	bl	8003998 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565a:	68f8      	ldr	r0, [r7, #12]
 800565c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	69db      	ldr	r3, [r3, #28]
 8005662:	2b01      	cmp	r3, #1
 8005664:	d12d      	bne.n	80056c2 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	699b      	ldr	r3, [r3, #24]
 800566a:	693a      	ldr	r2, [r7, #16]
 800566c:	4413      	add	r3, r2
 800566e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005670:	68ba      	ldr	r2, [r7, #8]
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	429a      	cmp	r2, r3
 8005676:	d90e      	bls.n	8005696 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	68ba      	ldr	r2, [r7, #8]
 800567c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005684:	4b18      	ldr	r3, [pc, #96]	; (80056e8 <prvSwitchTimerLists+0xb8>)
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	3304      	adds	r3, #4
 800568c:	4619      	mov	r1, r3
 800568e:	4610      	mov	r0, r2
 8005690:	f7fe f94a 	bl	8003928 <vListInsert>
 8005694:	e015      	b.n	80056c2 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005696:	2300      	movs	r3, #0
 8005698:	9300      	str	r3, [sp, #0]
 800569a:	2300      	movs	r3, #0
 800569c:	693a      	ldr	r2, [r7, #16]
 800569e:	2100      	movs	r1, #0
 80056a0:	68f8      	ldr	r0, [r7, #12]
 80056a2:	f7ff fda3 	bl	80051ec <xTimerGenericCommand>
 80056a6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d109      	bne.n	80056c2 <prvSwitchTimerLists+0x92>
 80056ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b2:	f383 8811 	msr	BASEPRI, r3
 80056b6:	f3bf 8f6f 	isb	sy
 80056ba:	f3bf 8f4f 	dsb	sy
 80056be:	603b      	str	r3, [r7, #0]
 80056c0:	e7fe      	b.n	80056c0 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80056c2:	4b09      	ldr	r3, [pc, #36]	; (80056e8 <prvSwitchTimerLists+0xb8>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d1b5      	bne.n	8005638 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80056cc:	4b06      	ldr	r3, [pc, #24]	; (80056e8 <prvSwitchTimerLists+0xb8>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80056d2:	4b06      	ldr	r3, [pc, #24]	; (80056ec <prvSwitchTimerLists+0xbc>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a04      	ldr	r2, [pc, #16]	; (80056e8 <prvSwitchTimerLists+0xb8>)
 80056d8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80056da:	4a04      	ldr	r2, [pc, #16]	; (80056ec <prvSwitchTimerLists+0xbc>)
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	6013      	str	r3, [r2, #0]
}
 80056e0:	bf00      	nop
 80056e2:	3718      	adds	r7, #24
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}
 80056e8:	20000c80 	.word	0x20000c80
 80056ec:	20000c84 	.word	0x20000c84

080056f0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b082      	sub	sp, #8
 80056f4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80056f6:	f000 f927 	bl	8005948 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80056fa:	4b15      	ldr	r3, [pc, #84]	; (8005750 <prvCheckForValidListAndQueue+0x60>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d120      	bne.n	8005744 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005702:	4814      	ldr	r0, [pc, #80]	; (8005754 <prvCheckForValidListAndQueue+0x64>)
 8005704:	f7fe f8c2 	bl	800388c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005708:	4813      	ldr	r0, [pc, #76]	; (8005758 <prvCheckForValidListAndQueue+0x68>)
 800570a:	f7fe f8bf 	bl	800388c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800570e:	4b13      	ldr	r3, [pc, #76]	; (800575c <prvCheckForValidListAndQueue+0x6c>)
 8005710:	4a10      	ldr	r2, [pc, #64]	; (8005754 <prvCheckForValidListAndQueue+0x64>)
 8005712:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005714:	4b12      	ldr	r3, [pc, #72]	; (8005760 <prvCheckForValidListAndQueue+0x70>)
 8005716:	4a10      	ldr	r2, [pc, #64]	; (8005758 <prvCheckForValidListAndQueue+0x68>)
 8005718:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800571a:	2300      	movs	r3, #0
 800571c:	9300      	str	r3, [sp, #0]
 800571e:	4b11      	ldr	r3, [pc, #68]	; (8005764 <prvCheckForValidListAndQueue+0x74>)
 8005720:	4a11      	ldr	r2, [pc, #68]	; (8005768 <prvCheckForValidListAndQueue+0x78>)
 8005722:	2110      	movs	r1, #16
 8005724:	200a      	movs	r0, #10
 8005726:	f7fe f9c9 	bl	8003abc <xQueueGenericCreateStatic>
 800572a:	4602      	mov	r2, r0
 800572c:	4b08      	ldr	r3, [pc, #32]	; (8005750 <prvCheckForValidListAndQueue+0x60>)
 800572e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005730:	4b07      	ldr	r3, [pc, #28]	; (8005750 <prvCheckForValidListAndQueue+0x60>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d005      	beq.n	8005744 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005738:	4b05      	ldr	r3, [pc, #20]	; (8005750 <prvCheckForValidListAndQueue+0x60>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	490b      	ldr	r1, [pc, #44]	; (800576c <prvCheckForValidListAndQueue+0x7c>)
 800573e:	4618      	mov	r0, r3
 8005740:	f7fe fdcc 	bl	80042dc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005744:	f000 f92e 	bl	80059a4 <vPortExitCritical>
}
 8005748:	bf00      	nop
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop
 8005750:	20000c88 	.word	0x20000c88
 8005754:	20000c58 	.word	0x20000c58
 8005758:	20000c6c 	.word	0x20000c6c
 800575c:	20000c80 	.word	0x20000c80
 8005760:	20000c84 	.word	0x20000c84
 8005764:	20000d34 	.word	0x20000d34
 8005768:	20000c94 	.word	0x20000c94
 800576c:	08006e7c 	.word	0x08006e7c

08005770 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005770:	b480      	push	{r7}
 8005772:	b085      	sub	sp, #20
 8005774:	af00      	add	r7, sp, #0
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	60b9      	str	r1, [r7, #8]
 800577a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	3b04      	subs	r3, #4
 8005780:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005788:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	3b04      	subs	r3, #4
 800578e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	f023 0201 	bic.w	r2, r3, #1
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	3b04      	subs	r3, #4
 800579e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80057a0:	4a08      	ldr	r2, [pc, #32]	; (80057c4 <pxPortInitialiseStack+0x54>)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	3b14      	subs	r3, #20
 80057aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	3b20      	subs	r3, #32
 80057b6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80057b8:	68fb      	ldr	r3, [r7, #12]
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3714      	adds	r7, #20
 80057be:	46bd      	mov	sp, r7
 80057c0:	bc80      	pop	{r7}
 80057c2:	4770      	bx	lr
 80057c4:	080057c9 	.word	0x080057c9

080057c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80057c8:	b480      	push	{r7}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80057ce:	2300      	movs	r3, #0
 80057d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80057d2:	4b10      	ldr	r3, [pc, #64]	; (8005814 <prvTaskExitError+0x4c>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057da:	d009      	beq.n	80057f0 <prvTaskExitError+0x28>
 80057dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e0:	f383 8811 	msr	BASEPRI, r3
 80057e4:	f3bf 8f6f 	isb	sy
 80057e8:	f3bf 8f4f 	dsb	sy
 80057ec:	60fb      	str	r3, [r7, #12]
 80057ee:	e7fe      	b.n	80057ee <prvTaskExitError+0x26>
 80057f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f4:	f383 8811 	msr	BASEPRI, r3
 80057f8:	f3bf 8f6f 	isb	sy
 80057fc:	f3bf 8f4f 	dsb	sy
 8005800:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005802:	bf00      	nop
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d0fc      	beq.n	8005804 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800580a:	bf00      	nop
 800580c:	3714      	adds	r7, #20
 800580e:	46bd      	mov	sp, r7
 8005810:	bc80      	pop	{r7}
 8005812:	4770      	bx	lr
 8005814:	2000000c 	.word	0x2000000c
	...

08005820 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005820:	4b07      	ldr	r3, [pc, #28]	; (8005840 <pxCurrentTCBConst2>)
 8005822:	6819      	ldr	r1, [r3, #0]
 8005824:	6808      	ldr	r0, [r1, #0]
 8005826:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800582a:	f380 8809 	msr	PSP, r0
 800582e:	f3bf 8f6f 	isb	sy
 8005832:	f04f 0000 	mov.w	r0, #0
 8005836:	f380 8811 	msr	BASEPRI, r0
 800583a:	f04e 0e0d 	orr.w	lr, lr, #13
 800583e:	4770      	bx	lr

08005840 <pxCurrentTCBConst2>:
 8005840:	20000758 	.word	0x20000758
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005844:	bf00      	nop
 8005846:	bf00      	nop

08005848 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005848:	4806      	ldr	r0, [pc, #24]	; (8005864 <prvPortStartFirstTask+0x1c>)
 800584a:	6800      	ldr	r0, [r0, #0]
 800584c:	6800      	ldr	r0, [r0, #0]
 800584e:	f380 8808 	msr	MSP, r0
 8005852:	b662      	cpsie	i
 8005854:	b661      	cpsie	f
 8005856:	f3bf 8f4f 	dsb	sy
 800585a:	f3bf 8f6f 	isb	sy
 800585e:	df00      	svc	0
 8005860:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005862:	bf00      	nop
 8005864:	e000ed08 	.word	0xe000ed08

08005868 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b084      	sub	sp, #16
 800586c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800586e:	4b31      	ldr	r3, [pc, #196]	; (8005934 <xPortStartScheduler+0xcc>)
 8005870:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	b2db      	uxtb	r3, r3
 8005878:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	22ff      	movs	r2, #255	; 0xff
 800587e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	b2db      	uxtb	r3, r3
 8005886:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005888:	78fb      	ldrb	r3, [r7, #3]
 800588a:	b2db      	uxtb	r3, r3
 800588c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005890:	b2da      	uxtb	r2, r3
 8005892:	4b29      	ldr	r3, [pc, #164]	; (8005938 <xPortStartScheduler+0xd0>)
 8005894:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005896:	4b29      	ldr	r3, [pc, #164]	; (800593c <xPortStartScheduler+0xd4>)
 8005898:	2207      	movs	r2, #7
 800589a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800589c:	e009      	b.n	80058b2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800589e:	4b27      	ldr	r3, [pc, #156]	; (800593c <xPortStartScheduler+0xd4>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	3b01      	subs	r3, #1
 80058a4:	4a25      	ldr	r2, [pc, #148]	; (800593c <xPortStartScheduler+0xd4>)
 80058a6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80058a8:	78fb      	ldrb	r3, [r7, #3]
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	005b      	lsls	r3, r3, #1
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80058b2:	78fb      	ldrb	r3, [r7, #3]
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ba:	2b80      	cmp	r3, #128	; 0x80
 80058bc:	d0ef      	beq.n	800589e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80058be:	4b1f      	ldr	r3, [pc, #124]	; (800593c <xPortStartScheduler+0xd4>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f1c3 0307 	rsb	r3, r3, #7
 80058c6:	2b04      	cmp	r3, #4
 80058c8:	d009      	beq.n	80058de <xPortStartScheduler+0x76>
 80058ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ce:	f383 8811 	msr	BASEPRI, r3
 80058d2:	f3bf 8f6f 	isb	sy
 80058d6:	f3bf 8f4f 	dsb	sy
 80058da:	60bb      	str	r3, [r7, #8]
 80058dc:	e7fe      	b.n	80058dc <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80058de:	4b17      	ldr	r3, [pc, #92]	; (800593c <xPortStartScheduler+0xd4>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	021b      	lsls	r3, r3, #8
 80058e4:	4a15      	ldr	r2, [pc, #84]	; (800593c <xPortStartScheduler+0xd4>)
 80058e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80058e8:	4b14      	ldr	r3, [pc, #80]	; (800593c <xPortStartScheduler+0xd4>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80058f0:	4a12      	ldr	r2, [pc, #72]	; (800593c <xPortStartScheduler+0xd4>)
 80058f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	b2da      	uxtb	r2, r3
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80058fc:	4b10      	ldr	r3, [pc, #64]	; (8005940 <xPortStartScheduler+0xd8>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a0f      	ldr	r2, [pc, #60]	; (8005940 <xPortStartScheduler+0xd8>)
 8005902:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005906:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005908:	4b0d      	ldr	r3, [pc, #52]	; (8005940 <xPortStartScheduler+0xd8>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a0c      	ldr	r2, [pc, #48]	; (8005940 <xPortStartScheduler+0xd8>)
 800590e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005912:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005914:	f000 f8b0 	bl	8005a78 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005918:	4b0a      	ldr	r3, [pc, #40]	; (8005944 <xPortStartScheduler+0xdc>)
 800591a:	2200      	movs	r2, #0
 800591c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800591e:	f7ff ff93 	bl	8005848 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005922:	f7ff f8d9 	bl	8004ad8 <vTaskSwitchContext>
	prvTaskExitError();
 8005926:	f7ff ff4f 	bl	80057c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800592a:	2300      	movs	r3, #0
}
 800592c:	4618      	mov	r0, r3
 800592e:	3710      	adds	r7, #16
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}
 8005934:	e000e400 	.word	0xe000e400
 8005938:	20000d84 	.word	0x20000d84
 800593c:	20000d88 	.word	0x20000d88
 8005940:	e000ed20 	.word	0xe000ed20
 8005944:	2000000c 	.word	0x2000000c

08005948 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005952:	f383 8811 	msr	BASEPRI, r3
 8005956:	f3bf 8f6f 	isb	sy
 800595a:	f3bf 8f4f 	dsb	sy
 800595e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005960:	4b0e      	ldr	r3, [pc, #56]	; (800599c <vPortEnterCritical+0x54>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	3301      	adds	r3, #1
 8005966:	4a0d      	ldr	r2, [pc, #52]	; (800599c <vPortEnterCritical+0x54>)
 8005968:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800596a:	4b0c      	ldr	r3, [pc, #48]	; (800599c <vPortEnterCritical+0x54>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	2b01      	cmp	r3, #1
 8005970:	d10e      	bne.n	8005990 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005972:	4b0b      	ldr	r3, [pc, #44]	; (80059a0 <vPortEnterCritical+0x58>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	b2db      	uxtb	r3, r3
 8005978:	2b00      	cmp	r3, #0
 800597a:	d009      	beq.n	8005990 <vPortEnterCritical+0x48>
 800597c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005980:	f383 8811 	msr	BASEPRI, r3
 8005984:	f3bf 8f6f 	isb	sy
 8005988:	f3bf 8f4f 	dsb	sy
 800598c:	603b      	str	r3, [r7, #0]
 800598e:	e7fe      	b.n	800598e <vPortEnterCritical+0x46>
	}
}
 8005990:	bf00      	nop
 8005992:	370c      	adds	r7, #12
 8005994:	46bd      	mov	sp, r7
 8005996:	bc80      	pop	{r7}
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop
 800599c:	2000000c 	.word	0x2000000c
 80059a0:	e000ed04 	.word	0xe000ed04

080059a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80059aa:	4b10      	ldr	r3, [pc, #64]	; (80059ec <vPortExitCritical+0x48>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d109      	bne.n	80059c6 <vPortExitCritical+0x22>
 80059b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b6:	f383 8811 	msr	BASEPRI, r3
 80059ba:	f3bf 8f6f 	isb	sy
 80059be:	f3bf 8f4f 	dsb	sy
 80059c2:	607b      	str	r3, [r7, #4]
 80059c4:	e7fe      	b.n	80059c4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80059c6:	4b09      	ldr	r3, [pc, #36]	; (80059ec <vPortExitCritical+0x48>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	3b01      	subs	r3, #1
 80059cc:	4a07      	ldr	r2, [pc, #28]	; (80059ec <vPortExitCritical+0x48>)
 80059ce:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80059d0:	4b06      	ldr	r3, [pc, #24]	; (80059ec <vPortExitCritical+0x48>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d104      	bne.n	80059e2 <vPortExitCritical+0x3e>
 80059d8:	2300      	movs	r3, #0
 80059da:	603b      	str	r3, [r7, #0]
	__asm volatile
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80059e2:	bf00      	nop
 80059e4:	370c      	adds	r7, #12
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bc80      	pop	{r7}
 80059ea:	4770      	bx	lr
 80059ec:	2000000c 	.word	0x2000000c

080059f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80059f0:	f3ef 8009 	mrs	r0, PSP
 80059f4:	f3bf 8f6f 	isb	sy
 80059f8:	4b0d      	ldr	r3, [pc, #52]	; (8005a30 <pxCurrentTCBConst>)
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005a00:	6010      	str	r0, [r2, #0]
 8005a02:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005a06:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005a0a:	f380 8811 	msr	BASEPRI, r0
 8005a0e:	f7ff f863 	bl	8004ad8 <vTaskSwitchContext>
 8005a12:	f04f 0000 	mov.w	r0, #0
 8005a16:	f380 8811 	msr	BASEPRI, r0
 8005a1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005a1e:	6819      	ldr	r1, [r3, #0]
 8005a20:	6808      	ldr	r0, [r1, #0]
 8005a22:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005a26:	f380 8809 	msr	PSP, r0
 8005a2a:	f3bf 8f6f 	isb	sy
 8005a2e:	4770      	bx	lr

08005a30 <pxCurrentTCBConst>:
 8005a30:	20000758 	.word	0x20000758
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005a34:	bf00      	nop
 8005a36:	bf00      	nop

08005a38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b082      	sub	sp, #8
 8005a3c:	af00      	add	r7, sp, #0
	__asm volatile
 8005a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a42:	f383 8811 	msr	BASEPRI, r3
 8005a46:	f3bf 8f6f 	isb	sy
 8005a4a:	f3bf 8f4f 	dsb	sy
 8005a4e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005a50:	f7fe ff84 	bl	800495c <xTaskIncrementTick>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d003      	beq.n	8005a62 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005a5a:	4b06      	ldr	r3, [pc, #24]	; (8005a74 <xPortSysTickHandler+0x3c>)
 8005a5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a60:	601a      	str	r2, [r3, #0]
 8005a62:	2300      	movs	r3, #0
 8005a64:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8005a6c:	bf00      	nop
 8005a6e:	3708      	adds	r7, #8
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	e000ed04 	.word	0xe000ed04

08005a78 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005a78:	b480      	push	{r7}
 8005a7a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005a7c:	4b0a      	ldr	r3, [pc, #40]	; (8005aa8 <vPortSetupTimerInterrupt+0x30>)
 8005a7e:	2200      	movs	r2, #0
 8005a80:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005a82:	4b0a      	ldr	r3, [pc, #40]	; (8005aac <vPortSetupTimerInterrupt+0x34>)
 8005a84:	2200      	movs	r2, #0
 8005a86:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005a88:	4b09      	ldr	r3, [pc, #36]	; (8005ab0 <vPortSetupTimerInterrupt+0x38>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a09      	ldr	r2, [pc, #36]	; (8005ab4 <vPortSetupTimerInterrupt+0x3c>)
 8005a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a92:	099b      	lsrs	r3, r3, #6
 8005a94:	4a08      	ldr	r2, [pc, #32]	; (8005ab8 <vPortSetupTimerInterrupt+0x40>)
 8005a96:	3b01      	subs	r3, #1
 8005a98:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005a9a:	4b03      	ldr	r3, [pc, #12]	; (8005aa8 <vPortSetupTimerInterrupt+0x30>)
 8005a9c:	2207      	movs	r2, #7
 8005a9e:	601a      	str	r2, [r3, #0]
}
 8005aa0:	bf00      	nop
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bc80      	pop	{r7}
 8005aa6:	4770      	bx	lr
 8005aa8:	e000e010 	.word	0xe000e010
 8005aac:	e000e018 	.word	0xe000e018
 8005ab0:	20000000 	.word	0x20000000
 8005ab4:	10624dd3 	.word	0x10624dd3
 8005ab8:	e000e014 	.word	0xe000e014

08005abc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005abc:	b480      	push	{r7}
 8005abe:	b085      	sub	sp, #20
 8005ac0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005ac2:	f3ef 8305 	mrs	r3, IPSR
 8005ac6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2b0f      	cmp	r3, #15
 8005acc:	d913      	bls.n	8005af6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005ace:	4a15      	ldr	r2, [pc, #84]	; (8005b24 <vPortValidateInterruptPriority+0x68>)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005ad8:	4b13      	ldr	r3, [pc, #76]	; (8005b28 <vPortValidateInterruptPriority+0x6c>)
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	7afa      	ldrb	r2, [r7, #11]
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d209      	bcs.n	8005af6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8005ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae6:	f383 8811 	msr	BASEPRI, r3
 8005aea:	f3bf 8f6f 	isb	sy
 8005aee:	f3bf 8f4f 	dsb	sy
 8005af2:	607b      	str	r3, [r7, #4]
 8005af4:	e7fe      	b.n	8005af4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005af6:	4b0d      	ldr	r3, [pc, #52]	; (8005b2c <vPortValidateInterruptPriority+0x70>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005afe:	4b0c      	ldr	r3, [pc, #48]	; (8005b30 <vPortValidateInterruptPriority+0x74>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d909      	bls.n	8005b1a <vPortValidateInterruptPriority+0x5e>
 8005b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b0a:	f383 8811 	msr	BASEPRI, r3
 8005b0e:	f3bf 8f6f 	isb	sy
 8005b12:	f3bf 8f4f 	dsb	sy
 8005b16:	603b      	str	r3, [r7, #0]
 8005b18:	e7fe      	b.n	8005b18 <vPortValidateInterruptPriority+0x5c>
	}
 8005b1a:	bf00      	nop
 8005b1c:	3714      	adds	r7, #20
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bc80      	pop	{r7}
 8005b22:	4770      	bx	lr
 8005b24:	e000e3f0 	.word	0xe000e3f0
 8005b28:	20000d84 	.word	0x20000d84
 8005b2c:	e000ed0c 	.word	0xe000ed0c
 8005b30:	20000d88 	.word	0x20000d88

08005b34 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b08a      	sub	sp, #40	; 0x28
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005b40:	f7fe fe54 	bl	80047ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005b44:	4b57      	ldr	r3, [pc, #348]	; (8005ca4 <pvPortMalloc+0x170>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d101      	bne.n	8005b50 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005b4c:	f000 f90c 	bl	8005d68 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005b50:	4b55      	ldr	r3, [pc, #340]	; (8005ca8 <pvPortMalloc+0x174>)
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4013      	ands	r3, r2
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	f040 808c 	bne.w	8005c76 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d01c      	beq.n	8005b9e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005b64:	2208      	movs	r2, #8
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4413      	add	r3, r2
 8005b6a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f003 0307 	and.w	r3, r3, #7
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d013      	beq.n	8005b9e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f023 0307 	bic.w	r3, r3, #7
 8005b7c:	3308      	adds	r3, #8
 8005b7e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f003 0307 	and.w	r3, r3, #7
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d009      	beq.n	8005b9e <pvPortMalloc+0x6a>
 8005b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b8e:	f383 8811 	msr	BASEPRI, r3
 8005b92:	f3bf 8f6f 	isb	sy
 8005b96:	f3bf 8f4f 	dsb	sy
 8005b9a:	617b      	str	r3, [r7, #20]
 8005b9c:	e7fe      	b.n	8005b9c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d068      	beq.n	8005c76 <pvPortMalloc+0x142>
 8005ba4:	4b41      	ldr	r3, [pc, #260]	; (8005cac <pvPortMalloc+0x178>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d863      	bhi.n	8005c76 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005bae:	4b40      	ldr	r3, [pc, #256]	; (8005cb0 <pvPortMalloc+0x17c>)
 8005bb0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005bb2:	4b3f      	ldr	r3, [pc, #252]	; (8005cb0 <pvPortMalloc+0x17c>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005bb8:	e004      	b.n	8005bc4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bbc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d903      	bls.n	8005bd6 <pvPortMalloc+0xa2>
 8005bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d1f1      	bne.n	8005bba <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005bd6:	4b33      	ldr	r3, [pc, #204]	; (8005ca4 <pvPortMalloc+0x170>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d04a      	beq.n	8005c76 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005be0:	6a3b      	ldr	r3, [r7, #32]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	2208      	movs	r2, #8
 8005be6:	4413      	add	r3, r2
 8005be8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	6a3b      	ldr	r3, [r7, #32]
 8005bf0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf4:	685a      	ldr	r2, [r3, #4]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	1ad2      	subs	r2, r2, r3
 8005bfa:	2308      	movs	r3, #8
 8005bfc:	005b      	lsls	r3, r3, #1
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	d91e      	bls.n	8005c40 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	4413      	add	r3, r2
 8005c08:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	f003 0307 	and.w	r3, r3, #7
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d009      	beq.n	8005c28 <pvPortMalloc+0xf4>
 8005c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c18:	f383 8811 	msr	BASEPRI, r3
 8005c1c:	f3bf 8f6f 	isb	sy
 8005c20:	f3bf 8f4f 	dsb	sy
 8005c24:	613b      	str	r3, [r7, #16]
 8005c26:	e7fe      	b.n	8005c26 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2a:	685a      	ldr	r2, [r3, #4]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	1ad2      	subs	r2, r2, r3
 8005c30:	69bb      	ldr	r3, [r7, #24]
 8005c32:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005c3a:	69b8      	ldr	r0, [r7, #24]
 8005c3c:	f000 f8f6 	bl	8005e2c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005c40:	4b1a      	ldr	r3, [pc, #104]	; (8005cac <pvPortMalloc+0x178>)
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	1ad3      	subs	r3, r2, r3
 8005c4a:	4a18      	ldr	r2, [pc, #96]	; (8005cac <pvPortMalloc+0x178>)
 8005c4c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005c4e:	4b17      	ldr	r3, [pc, #92]	; (8005cac <pvPortMalloc+0x178>)
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	4b18      	ldr	r3, [pc, #96]	; (8005cb4 <pvPortMalloc+0x180>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d203      	bcs.n	8005c62 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005c5a:	4b14      	ldr	r3, [pc, #80]	; (8005cac <pvPortMalloc+0x178>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a15      	ldr	r2, [pc, #84]	; (8005cb4 <pvPortMalloc+0x180>)
 8005c60:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c64:	685a      	ldr	r2, [r3, #4]
 8005c66:	4b10      	ldr	r3, [pc, #64]	; (8005ca8 <pvPortMalloc+0x174>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	431a      	orrs	r2, r3
 8005c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c72:	2200      	movs	r2, #0
 8005c74:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005c76:	f7fe fdc7 	bl	8004808 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	f003 0307 	and.w	r3, r3, #7
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d009      	beq.n	8005c98 <pvPortMalloc+0x164>
 8005c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c88:	f383 8811 	msr	BASEPRI, r3
 8005c8c:	f3bf 8f6f 	isb	sy
 8005c90:	f3bf 8f4f 	dsb	sy
 8005c94:	60fb      	str	r3, [r7, #12]
 8005c96:	e7fe      	b.n	8005c96 <pvPortMalloc+0x162>
	return pvReturn;
 8005c98:	69fb      	ldr	r3, [r7, #28]
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3728      	adds	r7, #40	; 0x28
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}
 8005ca2:	bf00      	nop
 8005ca4:	20001994 	.word	0x20001994
 8005ca8:	200019a0 	.word	0x200019a0
 8005cac:	20001998 	.word	0x20001998
 8005cb0:	2000198c 	.word	0x2000198c
 8005cb4:	2000199c 	.word	0x2000199c

08005cb8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b086      	sub	sp, #24
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d046      	beq.n	8005d58 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005cca:	2308      	movs	r3, #8
 8005ccc:	425b      	negs	r3, r3
 8005cce:	697a      	ldr	r2, [r7, #20]
 8005cd0:	4413      	add	r3, r2
 8005cd2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	685a      	ldr	r2, [r3, #4]
 8005cdc:	4b20      	ldr	r3, [pc, #128]	; (8005d60 <vPortFree+0xa8>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d109      	bne.n	8005cfa <vPortFree+0x42>
 8005ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cea:	f383 8811 	msr	BASEPRI, r3
 8005cee:	f3bf 8f6f 	isb	sy
 8005cf2:	f3bf 8f4f 	dsb	sy
 8005cf6:	60fb      	str	r3, [r7, #12]
 8005cf8:	e7fe      	b.n	8005cf8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d009      	beq.n	8005d16 <vPortFree+0x5e>
 8005d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d06:	f383 8811 	msr	BASEPRI, r3
 8005d0a:	f3bf 8f6f 	isb	sy
 8005d0e:	f3bf 8f4f 	dsb	sy
 8005d12:	60bb      	str	r3, [r7, #8]
 8005d14:	e7fe      	b.n	8005d14 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	685a      	ldr	r2, [r3, #4]
 8005d1a:	4b11      	ldr	r3, [pc, #68]	; (8005d60 <vPortFree+0xa8>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4013      	ands	r3, r2
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d019      	beq.n	8005d58 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d115      	bne.n	8005d58 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	685a      	ldr	r2, [r3, #4]
 8005d30:	4b0b      	ldr	r3, [pc, #44]	; (8005d60 <vPortFree+0xa8>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	43db      	mvns	r3, r3
 8005d36:	401a      	ands	r2, r3
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005d3c:	f7fe fd56 	bl	80047ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	685a      	ldr	r2, [r3, #4]
 8005d44:	4b07      	ldr	r3, [pc, #28]	; (8005d64 <vPortFree+0xac>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4413      	add	r3, r2
 8005d4a:	4a06      	ldr	r2, [pc, #24]	; (8005d64 <vPortFree+0xac>)
 8005d4c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005d4e:	6938      	ldr	r0, [r7, #16]
 8005d50:	f000 f86c 	bl	8005e2c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005d54:	f7fe fd58 	bl	8004808 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005d58:	bf00      	nop
 8005d5a:	3718      	adds	r7, #24
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}
 8005d60:	200019a0 	.word	0x200019a0
 8005d64:	20001998 	.word	0x20001998

08005d68 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b085      	sub	sp, #20
 8005d6c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005d6e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005d72:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005d74:	4b27      	ldr	r3, [pc, #156]	; (8005e14 <prvHeapInit+0xac>)
 8005d76:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f003 0307 	and.w	r3, r3, #7
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d00c      	beq.n	8005d9c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	3307      	adds	r3, #7
 8005d86:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f023 0307 	bic.w	r3, r3, #7
 8005d8e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005d90:	68ba      	ldr	r2, [r7, #8]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	1ad3      	subs	r3, r2, r3
 8005d96:	4a1f      	ldr	r2, [pc, #124]	; (8005e14 <prvHeapInit+0xac>)
 8005d98:	4413      	add	r3, r2
 8005d9a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005da0:	4a1d      	ldr	r2, [pc, #116]	; (8005e18 <prvHeapInit+0xb0>)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005da6:	4b1c      	ldr	r3, [pc, #112]	; (8005e18 <prvHeapInit+0xb0>)
 8005da8:	2200      	movs	r2, #0
 8005daa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	68ba      	ldr	r2, [r7, #8]
 8005db0:	4413      	add	r3, r2
 8005db2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005db4:	2208      	movs	r2, #8
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	1a9b      	subs	r3, r3, r2
 8005dba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f023 0307 	bic.w	r3, r3, #7
 8005dc2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	4a15      	ldr	r2, [pc, #84]	; (8005e1c <prvHeapInit+0xb4>)
 8005dc8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005dca:	4b14      	ldr	r3, [pc, #80]	; (8005e1c <prvHeapInit+0xb4>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005dd2:	4b12      	ldr	r3, [pc, #72]	; (8005e1c <prvHeapInit+0xb4>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	1ad2      	subs	r2, r2, r3
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005de8:	4b0c      	ldr	r3, [pc, #48]	; (8005e1c <prvHeapInit+0xb4>)
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	4a0a      	ldr	r2, [pc, #40]	; (8005e20 <prvHeapInit+0xb8>)
 8005df6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	4a09      	ldr	r2, [pc, #36]	; (8005e24 <prvHeapInit+0xbc>)
 8005dfe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005e00:	4b09      	ldr	r3, [pc, #36]	; (8005e28 <prvHeapInit+0xc0>)
 8005e02:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005e06:	601a      	str	r2, [r3, #0]
}
 8005e08:	bf00      	nop
 8005e0a:	3714      	adds	r7, #20
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bc80      	pop	{r7}
 8005e10:	4770      	bx	lr
 8005e12:	bf00      	nop
 8005e14:	20000d8c 	.word	0x20000d8c
 8005e18:	2000198c 	.word	0x2000198c
 8005e1c:	20001994 	.word	0x20001994
 8005e20:	2000199c 	.word	0x2000199c
 8005e24:	20001998 	.word	0x20001998
 8005e28:	200019a0 	.word	0x200019a0

08005e2c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b085      	sub	sp, #20
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005e34:	4b27      	ldr	r3, [pc, #156]	; (8005ed4 <prvInsertBlockIntoFreeList+0xa8>)
 8005e36:	60fb      	str	r3, [r7, #12]
 8005e38:	e002      	b.n	8005e40 <prvInsertBlockIntoFreeList+0x14>
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	60fb      	str	r3, [r7, #12]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	429a      	cmp	r2, r3
 8005e48:	d8f7      	bhi.n	8005e3a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	68ba      	ldr	r2, [r7, #8]
 8005e54:	4413      	add	r3, r2
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d108      	bne.n	8005e6e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	685a      	ldr	r2, [r3, #4]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	441a      	add	r2, r3
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	68ba      	ldr	r2, [r7, #8]
 8005e78:	441a      	add	r2, r3
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d118      	bne.n	8005eb4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	4b14      	ldr	r3, [pc, #80]	; (8005ed8 <prvInsertBlockIntoFreeList+0xac>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d00d      	beq.n	8005eaa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	685a      	ldr	r2, [r3, #4]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	441a      	add	r2, r3
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	601a      	str	r2, [r3, #0]
 8005ea8:	e008      	b.n	8005ebc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005eaa:	4b0b      	ldr	r3, [pc, #44]	; (8005ed8 <prvInsertBlockIntoFreeList+0xac>)
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	601a      	str	r2, [r3, #0]
 8005eb2:	e003      	b.n	8005ebc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d002      	beq.n	8005eca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005eca:	bf00      	nop
 8005ecc:	3714      	adds	r7, #20
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bc80      	pop	{r7}
 8005ed2:	4770      	bx	lr
 8005ed4:	2000198c 	.word	0x2000198c
 8005ed8:	20001994 	.word	0x20001994

08005edc <__errno>:
 8005edc:	4b01      	ldr	r3, [pc, #4]	; (8005ee4 <__errno+0x8>)
 8005ede:	6818      	ldr	r0, [r3, #0]
 8005ee0:	4770      	bx	lr
 8005ee2:	bf00      	nop
 8005ee4:	20000010 	.word	0x20000010

08005ee8 <__libc_init_array>:
 8005ee8:	b570      	push	{r4, r5, r6, lr}
 8005eea:	2500      	movs	r5, #0
 8005eec:	4e0c      	ldr	r6, [pc, #48]	; (8005f20 <__libc_init_array+0x38>)
 8005eee:	4c0d      	ldr	r4, [pc, #52]	; (8005f24 <__libc_init_array+0x3c>)
 8005ef0:	1ba4      	subs	r4, r4, r6
 8005ef2:	10a4      	asrs	r4, r4, #2
 8005ef4:	42a5      	cmp	r5, r4
 8005ef6:	d109      	bne.n	8005f0c <__libc_init_array+0x24>
 8005ef8:	f000 ff80 	bl	8006dfc <_init>
 8005efc:	2500      	movs	r5, #0
 8005efe:	4e0a      	ldr	r6, [pc, #40]	; (8005f28 <__libc_init_array+0x40>)
 8005f00:	4c0a      	ldr	r4, [pc, #40]	; (8005f2c <__libc_init_array+0x44>)
 8005f02:	1ba4      	subs	r4, r4, r6
 8005f04:	10a4      	asrs	r4, r4, #2
 8005f06:	42a5      	cmp	r5, r4
 8005f08:	d105      	bne.n	8005f16 <__libc_init_array+0x2e>
 8005f0a:	bd70      	pop	{r4, r5, r6, pc}
 8005f0c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005f10:	4798      	blx	r3
 8005f12:	3501      	adds	r5, #1
 8005f14:	e7ee      	b.n	8005ef4 <__libc_init_array+0xc>
 8005f16:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005f1a:	4798      	blx	r3
 8005f1c:	3501      	adds	r5, #1
 8005f1e:	e7f2      	b.n	8005f06 <__libc_init_array+0x1e>
 8005f20:	08006f7c 	.word	0x08006f7c
 8005f24:	08006f7c 	.word	0x08006f7c
 8005f28:	08006f7c 	.word	0x08006f7c
 8005f2c:	08006f80 	.word	0x08006f80

08005f30 <memcpy>:
 8005f30:	b510      	push	{r4, lr}
 8005f32:	1e43      	subs	r3, r0, #1
 8005f34:	440a      	add	r2, r1
 8005f36:	4291      	cmp	r1, r2
 8005f38:	d100      	bne.n	8005f3c <memcpy+0xc>
 8005f3a:	bd10      	pop	{r4, pc}
 8005f3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f40:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f44:	e7f7      	b.n	8005f36 <memcpy+0x6>

08005f46 <memset>:
 8005f46:	4603      	mov	r3, r0
 8005f48:	4402      	add	r2, r0
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d100      	bne.n	8005f50 <memset+0xa>
 8005f4e:	4770      	bx	lr
 8005f50:	f803 1b01 	strb.w	r1, [r3], #1
 8005f54:	e7f9      	b.n	8005f4a <memset+0x4>
	...

08005f58 <iprintf>:
 8005f58:	b40f      	push	{r0, r1, r2, r3}
 8005f5a:	4b0a      	ldr	r3, [pc, #40]	; (8005f84 <iprintf+0x2c>)
 8005f5c:	b513      	push	{r0, r1, r4, lr}
 8005f5e:	681c      	ldr	r4, [r3, #0]
 8005f60:	b124      	cbz	r4, 8005f6c <iprintf+0x14>
 8005f62:	69a3      	ldr	r3, [r4, #24]
 8005f64:	b913      	cbnz	r3, 8005f6c <iprintf+0x14>
 8005f66:	4620      	mov	r0, r4
 8005f68:	f000 fa22 	bl	80063b0 <__sinit>
 8005f6c:	ab05      	add	r3, sp, #20
 8005f6e:	9a04      	ldr	r2, [sp, #16]
 8005f70:	68a1      	ldr	r1, [r4, #8]
 8005f72:	4620      	mov	r0, r4
 8005f74:	9301      	str	r3, [sp, #4]
 8005f76:	f000 fbd7 	bl	8006728 <_vfiprintf_r>
 8005f7a:	b002      	add	sp, #8
 8005f7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f80:	b004      	add	sp, #16
 8005f82:	4770      	bx	lr
 8005f84:	20000010 	.word	0x20000010

08005f88 <_puts_r>:
 8005f88:	b570      	push	{r4, r5, r6, lr}
 8005f8a:	460e      	mov	r6, r1
 8005f8c:	4605      	mov	r5, r0
 8005f8e:	b118      	cbz	r0, 8005f98 <_puts_r+0x10>
 8005f90:	6983      	ldr	r3, [r0, #24]
 8005f92:	b90b      	cbnz	r3, 8005f98 <_puts_r+0x10>
 8005f94:	f000 fa0c 	bl	80063b0 <__sinit>
 8005f98:	69ab      	ldr	r3, [r5, #24]
 8005f9a:	68ac      	ldr	r4, [r5, #8]
 8005f9c:	b913      	cbnz	r3, 8005fa4 <_puts_r+0x1c>
 8005f9e:	4628      	mov	r0, r5
 8005fa0:	f000 fa06 	bl	80063b0 <__sinit>
 8005fa4:	4b23      	ldr	r3, [pc, #140]	; (8006034 <_puts_r+0xac>)
 8005fa6:	429c      	cmp	r4, r3
 8005fa8:	d117      	bne.n	8005fda <_puts_r+0x52>
 8005faa:	686c      	ldr	r4, [r5, #4]
 8005fac:	89a3      	ldrh	r3, [r4, #12]
 8005fae:	071b      	lsls	r3, r3, #28
 8005fb0:	d51d      	bpl.n	8005fee <_puts_r+0x66>
 8005fb2:	6923      	ldr	r3, [r4, #16]
 8005fb4:	b1db      	cbz	r3, 8005fee <_puts_r+0x66>
 8005fb6:	3e01      	subs	r6, #1
 8005fb8:	68a3      	ldr	r3, [r4, #8]
 8005fba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005fbe:	3b01      	subs	r3, #1
 8005fc0:	60a3      	str	r3, [r4, #8]
 8005fc2:	b9e9      	cbnz	r1, 8006000 <_puts_r+0x78>
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	da2e      	bge.n	8006026 <_puts_r+0x9e>
 8005fc8:	4622      	mov	r2, r4
 8005fca:	210a      	movs	r1, #10
 8005fcc:	4628      	mov	r0, r5
 8005fce:	f000 f83f 	bl	8006050 <__swbuf_r>
 8005fd2:	3001      	adds	r0, #1
 8005fd4:	d011      	beq.n	8005ffa <_puts_r+0x72>
 8005fd6:	200a      	movs	r0, #10
 8005fd8:	e011      	b.n	8005ffe <_puts_r+0x76>
 8005fda:	4b17      	ldr	r3, [pc, #92]	; (8006038 <_puts_r+0xb0>)
 8005fdc:	429c      	cmp	r4, r3
 8005fde:	d101      	bne.n	8005fe4 <_puts_r+0x5c>
 8005fe0:	68ac      	ldr	r4, [r5, #8]
 8005fe2:	e7e3      	b.n	8005fac <_puts_r+0x24>
 8005fe4:	4b15      	ldr	r3, [pc, #84]	; (800603c <_puts_r+0xb4>)
 8005fe6:	429c      	cmp	r4, r3
 8005fe8:	bf08      	it	eq
 8005fea:	68ec      	ldreq	r4, [r5, #12]
 8005fec:	e7de      	b.n	8005fac <_puts_r+0x24>
 8005fee:	4621      	mov	r1, r4
 8005ff0:	4628      	mov	r0, r5
 8005ff2:	f000 f87f 	bl	80060f4 <__swsetup_r>
 8005ff6:	2800      	cmp	r0, #0
 8005ff8:	d0dd      	beq.n	8005fb6 <_puts_r+0x2e>
 8005ffa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ffe:	bd70      	pop	{r4, r5, r6, pc}
 8006000:	2b00      	cmp	r3, #0
 8006002:	da04      	bge.n	800600e <_puts_r+0x86>
 8006004:	69a2      	ldr	r2, [r4, #24]
 8006006:	429a      	cmp	r2, r3
 8006008:	dc06      	bgt.n	8006018 <_puts_r+0x90>
 800600a:	290a      	cmp	r1, #10
 800600c:	d004      	beq.n	8006018 <_puts_r+0x90>
 800600e:	6823      	ldr	r3, [r4, #0]
 8006010:	1c5a      	adds	r2, r3, #1
 8006012:	6022      	str	r2, [r4, #0]
 8006014:	7019      	strb	r1, [r3, #0]
 8006016:	e7cf      	b.n	8005fb8 <_puts_r+0x30>
 8006018:	4622      	mov	r2, r4
 800601a:	4628      	mov	r0, r5
 800601c:	f000 f818 	bl	8006050 <__swbuf_r>
 8006020:	3001      	adds	r0, #1
 8006022:	d1c9      	bne.n	8005fb8 <_puts_r+0x30>
 8006024:	e7e9      	b.n	8005ffa <_puts_r+0x72>
 8006026:	200a      	movs	r0, #10
 8006028:	6823      	ldr	r3, [r4, #0]
 800602a:	1c5a      	adds	r2, r3, #1
 800602c:	6022      	str	r2, [r4, #0]
 800602e:	7018      	strb	r0, [r3, #0]
 8006030:	e7e5      	b.n	8005ffe <_puts_r+0x76>
 8006032:	bf00      	nop
 8006034:	08006f08 	.word	0x08006f08
 8006038:	08006f28 	.word	0x08006f28
 800603c:	08006ee8 	.word	0x08006ee8

08006040 <puts>:
 8006040:	4b02      	ldr	r3, [pc, #8]	; (800604c <puts+0xc>)
 8006042:	4601      	mov	r1, r0
 8006044:	6818      	ldr	r0, [r3, #0]
 8006046:	f7ff bf9f 	b.w	8005f88 <_puts_r>
 800604a:	bf00      	nop
 800604c:	20000010 	.word	0x20000010

08006050 <__swbuf_r>:
 8006050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006052:	460e      	mov	r6, r1
 8006054:	4614      	mov	r4, r2
 8006056:	4605      	mov	r5, r0
 8006058:	b118      	cbz	r0, 8006062 <__swbuf_r+0x12>
 800605a:	6983      	ldr	r3, [r0, #24]
 800605c:	b90b      	cbnz	r3, 8006062 <__swbuf_r+0x12>
 800605e:	f000 f9a7 	bl	80063b0 <__sinit>
 8006062:	4b21      	ldr	r3, [pc, #132]	; (80060e8 <__swbuf_r+0x98>)
 8006064:	429c      	cmp	r4, r3
 8006066:	d12a      	bne.n	80060be <__swbuf_r+0x6e>
 8006068:	686c      	ldr	r4, [r5, #4]
 800606a:	69a3      	ldr	r3, [r4, #24]
 800606c:	60a3      	str	r3, [r4, #8]
 800606e:	89a3      	ldrh	r3, [r4, #12]
 8006070:	071a      	lsls	r2, r3, #28
 8006072:	d52e      	bpl.n	80060d2 <__swbuf_r+0x82>
 8006074:	6923      	ldr	r3, [r4, #16]
 8006076:	b363      	cbz	r3, 80060d2 <__swbuf_r+0x82>
 8006078:	6923      	ldr	r3, [r4, #16]
 800607a:	6820      	ldr	r0, [r4, #0]
 800607c:	b2f6      	uxtb	r6, r6
 800607e:	1ac0      	subs	r0, r0, r3
 8006080:	6963      	ldr	r3, [r4, #20]
 8006082:	4637      	mov	r7, r6
 8006084:	4283      	cmp	r3, r0
 8006086:	dc04      	bgt.n	8006092 <__swbuf_r+0x42>
 8006088:	4621      	mov	r1, r4
 800608a:	4628      	mov	r0, r5
 800608c:	f000 f926 	bl	80062dc <_fflush_r>
 8006090:	bb28      	cbnz	r0, 80060de <__swbuf_r+0x8e>
 8006092:	68a3      	ldr	r3, [r4, #8]
 8006094:	3001      	adds	r0, #1
 8006096:	3b01      	subs	r3, #1
 8006098:	60a3      	str	r3, [r4, #8]
 800609a:	6823      	ldr	r3, [r4, #0]
 800609c:	1c5a      	adds	r2, r3, #1
 800609e:	6022      	str	r2, [r4, #0]
 80060a0:	701e      	strb	r6, [r3, #0]
 80060a2:	6963      	ldr	r3, [r4, #20]
 80060a4:	4283      	cmp	r3, r0
 80060a6:	d004      	beq.n	80060b2 <__swbuf_r+0x62>
 80060a8:	89a3      	ldrh	r3, [r4, #12]
 80060aa:	07db      	lsls	r3, r3, #31
 80060ac:	d519      	bpl.n	80060e2 <__swbuf_r+0x92>
 80060ae:	2e0a      	cmp	r6, #10
 80060b0:	d117      	bne.n	80060e2 <__swbuf_r+0x92>
 80060b2:	4621      	mov	r1, r4
 80060b4:	4628      	mov	r0, r5
 80060b6:	f000 f911 	bl	80062dc <_fflush_r>
 80060ba:	b190      	cbz	r0, 80060e2 <__swbuf_r+0x92>
 80060bc:	e00f      	b.n	80060de <__swbuf_r+0x8e>
 80060be:	4b0b      	ldr	r3, [pc, #44]	; (80060ec <__swbuf_r+0x9c>)
 80060c0:	429c      	cmp	r4, r3
 80060c2:	d101      	bne.n	80060c8 <__swbuf_r+0x78>
 80060c4:	68ac      	ldr	r4, [r5, #8]
 80060c6:	e7d0      	b.n	800606a <__swbuf_r+0x1a>
 80060c8:	4b09      	ldr	r3, [pc, #36]	; (80060f0 <__swbuf_r+0xa0>)
 80060ca:	429c      	cmp	r4, r3
 80060cc:	bf08      	it	eq
 80060ce:	68ec      	ldreq	r4, [r5, #12]
 80060d0:	e7cb      	b.n	800606a <__swbuf_r+0x1a>
 80060d2:	4621      	mov	r1, r4
 80060d4:	4628      	mov	r0, r5
 80060d6:	f000 f80d 	bl	80060f4 <__swsetup_r>
 80060da:	2800      	cmp	r0, #0
 80060dc:	d0cc      	beq.n	8006078 <__swbuf_r+0x28>
 80060de:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80060e2:	4638      	mov	r0, r7
 80060e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060e6:	bf00      	nop
 80060e8:	08006f08 	.word	0x08006f08
 80060ec:	08006f28 	.word	0x08006f28
 80060f0:	08006ee8 	.word	0x08006ee8

080060f4 <__swsetup_r>:
 80060f4:	4b32      	ldr	r3, [pc, #200]	; (80061c0 <__swsetup_r+0xcc>)
 80060f6:	b570      	push	{r4, r5, r6, lr}
 80060f8:	681d      	ldr	r5, [r3, #0]
 80060fa:	4606      	mov	r6, r0
 80060fc:	460c      	mov	r4, r1
 80060fe:	b125      	cbz	r5, 800610a <__swsetup_r+0x16>
 8006100:	69ab      	ldr	r3, [r5, #24]
 8006102:	b913      	cbnz	r3, 800610a <__swsetup_r+0x16>
 8006104:	4628      	mov	r0, r5
 8006106:	f000 f953 	bl	80063b0 <__sinit>
 800610a:	4b2e      	ldr	r3, [pc, #184]	; (80061c4 <__swsetup_r+0xd0>)
 800610c:	429c      	cmp	r4, r3
 800610e:	d10f      	bne.n	8006130 <__swsetup_r+0x3c>
 8006110:	686c      	ldr	r4, [r5, #4]
 8006112:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006116:	b29a      	uxth	r2, r3
 8006118:	0715      	lsls	r5, r2, #28
 800611a:	d42c      	bmi.n	8006176 <__swsetup_r+0x82>
 800611c:	06d0      	lsls	r0, r2, #27
 800611e:	d411      	bmi.n	8006144 <__swsetup_r+0x50>
 8006120:	2209      	movs	r2, #9
 8006122:	6032      	str	r2, [r6, #0]
 8006124:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006128:	81a3      	strh	r3, [r4, #12]
 800612a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800612e:	e03e      	b.n	80061ae <__swsetup_r+0xba>
 8006130:	4b25      	ldr	r3, [pc, #148]	; (80061c8 <__swsetup_r+0xd4>)
 8006132:	429c      	cmp	r4, r3
 8006134:	d101      	bne.n	800613a <__swsetup_r+0x46>
 8006136:	68ac      	ldr	r4, [r5, #8]
 8006138:	e7eb      	b.n	8006112 <__swsetup_r+0x1e>
 800613a:	4b24      	ldr	r3, [pc, #144]	; (80061cc <__swsetup_r+0xd8>)
 800613c:	429c      	cmp	r4, r3
 800613e:	bf08      	it	eq
 8006140:	68ec      	ldreq	r4, [r5, #12]
 8006142:	e7e6      	b.n	8006112 <__swsetup_r+0x1e>
 8006144:	0751      	lsls	r1, r2, #29
 8006146:	d512      	bpl.n	800616e <__swsetup_r+0x7a>
 8006148:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800614a:	b141      	cbz	r1, 800615e <__swsetup_r+0x6a>
 800614c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006150:	4299      	cmp	r1, r3
 8006152:	d002      	beq.n	800615a <__swsetup_r+0x66>
 8006154:	4630      	mov	r0, r6
 8006156:	f000 fa19 	bl	800658c <_free_r>
 800615a:	2300      	movs	r3, #0
 800615c:	6363      	str	r3, [r4, #52]	; 0x34
 800615e:	89a3      	ldrh	r3, [r4, #12]
 8006160:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006164:	81a3      	strh	r3, [r4, #12]
 8006166:	2300      	movs	r3, #0
 8006168:	6063      	str	r3, [r4, #4]
 800616a:	6923      	ldr	r3, [r4, #16]
 800616c:	6023      	str	r3, [r4, #0]
 800616e:	89a3      	ldrh	r3, [r4, #12]
 8006170:	f043 0308 	orr.w	r3, r3, #8
 8006174:	81a3      	strh	r3, [r4, #12]
 8006176:	6923      	ldr	r3, [r4, #16]
 8006178:	b94b      	cbnz	r3, 800618e <__swsetup_r+0x9a>
 800617a:	89a3      	ldrh	r3, [r4, #12]
 800617c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006180:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006184:	d003      	beq.n	800618e <__swsetup_r+0x9a>
 8006186:	4621      	mov	r1, r4
 8006188:	4630      	mov	r0, r6
 800618a:	f000 f9bf 	bl	800650c <__smakebuf_r>
 800618e:	89a2      	ldrh	r2, [r4, #12]
 8006190:	f012 0301 	ands.w	r3, r2, #1
 8006194:	d00c      	beq.n	80061b0 <__swsetup_r+0xbc>
 8006196:	2300      	movs	r3, #0
 8006198:	60a3      	str	r3, [r4, #8]
 800619a:	6963      	ldr	r3, [r4, #20]
 800619c:	425b      	negs	r3, r3
 800619e:	61a3      	str	r3, [r4, #24]
 80061a0:	6923      	ldr	r3, [r4, #16]
 80061a2:	b953      	cbnz	r3, 80061ba <__swsetup_r+0xc6>
 80061a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061a8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80061ac:	d1ba      	bne.n	8006124 <__swsetup_r+0x30>
 80061ae:	bd70      	pop	{r4, r5, r6, pc}
 80061b0:	0792      	lsls	r2, r2, #30
 80061b2:	bf58      	it	pl
 80061b4:	6963      	ldrpl	r3, [r4, #20]
 80061b6:	60a3      	str	r3, [r4, #8]
 80061b8:	e7f2      	b.n	80061a0 <__swsetup_r+0xac>
 80061ba:	2000      	movs	r0, #0
 80061bc:	e7f7      	b.n	80061ae <__swsetup_r+0xba>
 80061be:	bf00      	nop
 80061c0:	20000010 	.word	0x20000010
 80061c4:	08006f08 	.word	0x08006f08
 80061c8:	08006f28 	.word	0x08006f28
 80061cc:	08006ee8 	.word	0x08006ee8

080061d0 <__sflush_r>:
 80061d0:	898a      	ldrh	r2, [r1, #12]
 80061d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061d6:	4605      	mov	r5, r0
 80061d8:	0710      	lsls	r0, r2, #28
 80061da:	460c      	mov	r4, r1
 80061dc:	d458      	bmi.n	8006290 <__sflush_r+0xc0>
 80061de:	684b      	ldr	r3, [r1, #4]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	dc05      	bgt.n	80061f0 <__sflush_r+0x20>
 80061e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	dc02      	bgt.n	80061f0 <__sflush_r+0x20>
 80061ea:	2000      	movs	r0, #0
 80061ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80061f2:	2e00      	cmp	r6, #0
 80061f4:	d0f9      	beq.n	80061ea <__sflush_r+0x1a>
 80061f6:	2300      	movs	r3, #0
 80061f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80061fc:	682f      	ldr	r7, [r5, #0]
 80061fe:	6a21      	ldr	r1, [r4, #32]
 8006200:	602b      	str	r3, [r5, #0]
 8006202:	d032      	beq.n	800626a <__sflush_r+0x9a>
 8006204:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006206:	89a3      	ldrh	r3, [r4, #12]
 8006208:	075a      	lsls	r2, r3, #29
 800620a:	d505      	bpl.n	8006218 <__sflush_r+0x48>
 800620c:	6863      	ldr	r3, [r4, #4]
 800620e:	1ac0      	subs	r0, r0, r3
 8006210:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006212:	b10b      	cbz	r3, 8006218 <__sflush_r+0x48>
 8006214:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006216:	1ac0      	subs	r0, r0, r3
 8006218:	2300      	movs	r3, #0
 800621a:	4602      	mov	r2, r0
 800621c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800621e:	6a21      	ldr	r1, [r4, #32]
 8006220:	4628      	mov	r0, r5
 8006222:	47b0      	blx	r6
 8006224:	1c43      	adds	r3, r0, #1
 8006226:	89a3      	ldrh	r3, [r4, #12]
 8006228:	d106      	bne.n	8006238 <__sflush_r+0x68>
 800622a:	6829      	ldr	r1, [r5, #0]
 800622c:	291d      	cmp	r1, #29
 800622e:	d848      	bhi.n	80062c2 <__sflush_r+0xf2>
 8006230:	4a29      	ldr	r2, [pc, #164]	; (80062d8 <__sflush_r+0x108>)
 8006232:	40ca      	lsrs	r2, r1
 8006234:	07d6      	lsls	r6, r2, #31
 8006236:	d544      	bpl.n	80062c2 <__sflush_r+0xf2>
 8006238:	2200      	movs	r2, #0
 800623a:	6062      	str	r2, [r4, #4]
 800623c:	6922      	ldr	r2, [r4, #16]
 800623e:	04d9      	lsls	r1, r3, #19
 8006240:	6022      	str	r2, [r4, #0]
 8006242:	d504      	bpl.n	800624e <__sflush_r+0x7e>
 8006244:	1c42      	adds	r2, r0, #1
 8006246:	d101      	bne.n	800624c <__sflush_r+0x7c>
 8006248:	682b      	ldr	r3, [r5, #0]
 800624a:	b903      	cbnz	r3, 800624e <__sflush_r+0x7e>
 800624c:	6560      	str	r0, [r4, #84]	; 0x54
 800624e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006250:	602f      	str	r7, [r5, #0]
 8006252:	2900      	cmp	r1, #0
 8006254:	d0c9      	beq.n	80061ea <__sflush_r+0x1a>
 8006256:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800625a:	4299      	cmp	r1, r3
 800625c:	d002      	beq.n	8006264 <__sflush_r+0x94>
 800625e:	4628      	mov	r0, r5
 8006260:	f000 f994 	bl	800658c <_free_r>
 8006264:	2000      	movs	r0, #0
 8006266:	6360      	str	r0, [r4, #52]	; 0x34
 8006268:	e7c0      	b.n	80061ec <__sflush_r+0x1c>
 800626a:	2301      	movs	r3, #1
 800626c:	4628      	mov	r0, r5
 800626e:	47b0      	blx	r6
 8006270:	1c41      	adds	r1, r0, #1
 8006272:	d1c8      	bne.n	8006206 <__sflush_r+0x36>
 8006274:	682b      	ldr	r3, [r5, #0]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d0c5      	beq.n	8006206 <__sflush_r+0x36>
 800627a:	2b1d      	cmp	r3, #29
 800627c:	d001      	beq.n	8006282 <__sflush_r+0xb2>
 800627e:	2b16      	cmp	r3, #22
 8006280:	d101      	bne.n	8006286 <__sflush_r+0xb6>
 8006282:	602f      	str	r7, [r5, #0]
 8006284:	e7b1      	b.n	80061ea <__sflush_r+0x1a>
 8006286:	89a3      	ldrh	r3, [r4, #12]
 8006288:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800628c:	81a3      	strh	r3, [r4, #12]
 800628e:	e7ad      	b.n	80061ec <__sflush_r+0x1c>
 8006290:	690f      	ldr	r7, [r1, #16]
 8006292:	2f00      	cmp	r7, #0
 8006294:	d0a9      	beq.n	80061ea <__sflush_r+0x1a>
 8006296:	0793      	lsls	r3, r2, #30
 8006298:	bf18      	it	ne
 800629a:	2300      	movne	r3, #0
 800629c:	680e      	ldr	r6, [r1, #0]
 800629e:	bf08      	it	eq
 80062a0:	694b      	ldreq	r3, [r1, #20]
 80062a2:	eba6 0807 	sub.w	r8, r6, r7
 80062a6:	600f      	str	r7, [r1, #0]
 80062a8:	608b      	str	r3, [r1, #8]
 80062aa:	f1b8 0f00 	cmp.w	r8, #0
 80062ae:	dd9c      	ble.n	80061ea <__sflush_r+0x1a>
 80062b0:	4643      	mov	r3, r8
 80062b2:	463a      	mov	r2, r7
 80062b4:	6a21      	ldr	r1, [r4, #32]
 80062b6:	4628      	mov	r0, r5
 80062b8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80062ba:	47b0      	blx	r6
 80062bc:	2800      	cmp	r0, #0
 80062be:	dc06      	bgt.n	80062ce <__sflush_r+0xfe>
 80062c0:	89a3      	ldrh	r3, [r4, #12]
 80062c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062c6:	81a3      	strh	r3, [r4, #12]
 80062c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062cc:	e78e      	b.n	80061ec <__sflush_r+0x1c>
 80062ce:	4407      	add	r7, r0
 80062d0:	eba8 0800 	sub.w	r8, r8, r0
 80062d4:	e7e9      	b.n	80062aa <__sflush_r+0xda>
 80062d6:	bf00      	nop
 80062d8:	20400001 	.word	0x20400001

080062dc <_fflush_r>:
 80062dc:	b538      	push	{r3, r4, r5, lr}
 80062de:	690b      	ldr	r3, [r1, #16]
 80062e0:	4605      	mov	r5, r0
 80062e2:	460c      	mov	r4, r1
 80062e4:	b1db      	cbz	r3, 800631e <_fflush_r+0x42>
 80062e6:	b118      	cbz	r0, 80062f0 <_fflush_r+0x14>
 80062e8:	6983      	ldr	r3, [r0, #24]
 80062ea:	b90b      	cbnz	r3, 80062f0 <_fflush_r+0x14>
 80062ec:	f000 f860 	bl	80063b0 <__sinit>
 80062f0:	4b0c      	ldr	r3, [pc, #48]	; (8006324 <_fflush_r+0x48>)
 80062f2:	429c      	cmp	r4, r3
 80062f4:	d109      	bne.n	800630a <_fflush_r+0x2e>
 80062f6:	686c      	ldr	r4, [r5, #4]
 80062f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062fc:	b17b      	cbz	r3, 800631e <_fflush_r+0x42>
 80062fe:	4621      	mov	r1, r4
 8006300:	4628      	mov	r0, r5
 8006302:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006306:	f7ff bf63 	b.w	80061d0 <__sflush_r>
 800630a:	4b07      	ldr	r3, [pc, #28]	; (8006328 <_fflush_r+0x4c>)
 800630c:	429c      	cmp	r4, r3
 800630e:	d101      	bne.n	8006314 <_fflush_r+0x38>
 8006310:	68ac      	ldr	r4, [r5, #8]
 8006312:	e7f1      	b.n	80062f8 <_fflush_r+0x1c>
 8006314:	4b05      	ldr	r3, [pc, #20]	; (800632c <_fflush_r+0x50>)
 8006316:	429c      	cmp	r4, r3
 8006318:	bf08      	it	eq
 800631a:	68ec      	ldreq	r4, [r5, #12]
 800631c:	e7ec      	b.n	80062f8 <_fflush_r+0x1c>
 800631e:	2000      	movs	r0, #0
 8006320:	bd38      	pop	{r3, r4, r5, pc}
 8006322:	bf00      	nop
 8006324:	08006f08 	.word	0x08006f08
 8006328:	08006f28 	.word	0x08006f28
 800632c:	08006ee8 	.word	0x08006ee8

08006330 <std>:
 8006330:	2300      	movs	r3, #0
 8006332:	b510      	push	{r4, lr}
 8006334:	4604      	mov	r4, r0
 8006336:	e9c0 3300 	strd	r3, r3, [r0]
 800633a:	6083      	str	r3, [r0, #8]
 800633c:	8181      	strh	r1, [r0, #12]
 800633e:	6643      	str	r3, [r0, #100]	; 0x64
 8006340:	81c2      	strh	r2, [r0, #14]
 8006342:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006346:	6183      	str	r3, [r0, #24]
 8006348:	4619      	mov	r1, r3
 800634a:	2208      	movs	r2, #8
 800634c:	305c      	adds	r0, #92	; 0x5c
 800634e:	f7ff fdfa 	bl	8005f46 <memset>
 8006352:	4b05      	ldr	r3, [pc, #20]	; (8006368 <std+0x38>)
 8006354:	6224      	str	r4, [r4, #32]
 8006356:	6263      	str	r3, [r4, #36]	; 0x24
 8006358:	4b04      	ldr	r3, [pc, #16]	; (800636c <std+0x3c>)
 800635a:	62a3      	str	r3, [r4, #40]	; 0x28
 800635c:	4b04      	ldr	r3, [pc, #16]	; (8006370 <std+0x40>)
 800635e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006360:	4b04      	ldr	r3, [pc, #16]	; (8006374 <std+0x44>)
 8006362:	6323      	str	r3, [r4, #48]	; 0x30
 8006364:	bd10      	pop	{r4, pc}
 8006366:	bf00      	nop
 8006368:	08006c85 	.word	0x08006c85
 800636c:	08006ca7 	.word	0x08006ca7
 8006370:	08006cdf 	.word	0x08006cdf
 8006374:	08006d03 	.word	0x08006d03

08006378 <_cleanup_r>:
 8006378:	4901      	ldr	r1, [pc, #4]	; (8006380 <_cleanup_r+0x8>)
 800637a:	f000 b885 	b.w	8006488 <_fwalk_reent>
 800637e:	bf00      	nop
 8006380:	080062dd 	.word	0x080062dd

08006384 <__sfmoreglue>:
 8006384:	b570      	push	{r4, r5, r6, lr}
 8006386:	2568      	movs	r5, #104	; 0x68
 8006388:	1e4a      	subs	r2, r1, #1
 800638a:	4355      	muls	r5, r2
 800638c:	460e      	mov	r6, r1
 800638e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006392:	f000 f947 	bl	8006624 <_malloc_r>
 8006396:	4604      	mov	r4, r0
 8006398:	b140      	cbz	r0, 80063ac <__sfmoreglue+0x28>
 800639a:	2100      	movs	r1, #0
 800639c:	e9c0 1600 	strd	r1, r6, [r0]
 80063a0:	300c      	adds	r0, #12
 80063a2:	60a0      	str	r0, [r4, #8]
 80063a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80063a8:	f7ff fdcd 	bl	8005f46 <memset>
 80063ac:	4620      	mov	r0, r4
 80063ae:	bd70      	pop	{r4, r5, r6, pc}

080063b0 <__sinit>:
 80063b0:	6983      	ldr	r3, [r0, #24]
 80063b2:	b510      	push	{r4, lr}
 80063b4:	4604      	mov	r4, r0
 80063b6:	bb33      	cbnz	r3, 8006406 <__sinit+0x56>
 80063b8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80063bc:	6503      	str	r3, [r0, #80]	; 0x50
 80063be:	4b12      	ldr	r3, [pc, #72]	; (8006408 <__sinit+0x58>)
 80063c0:	4a12      	ldr	r2, [pc, #72]	; (800640c <__sinit+0x5c>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	6282      	str	r2, [r0, #40]	; 0x28
 80063c6:	4298      	cmp	r0, r3
 80063c8:	bf04      	itt	eq
 80063ca:	2301      	moveq	r3, #1
 80063cc:	6183      	streq	r3, [r0, #24]
 80063ce:	f000 f81f 	bl	8006410 <__sfp>
 80063d2:	6060      	str	r0, [r4, #4]
 80063d4:	4620      	mov	r0, r4
 80063d6:	f000 f81b 	bl	8006410 <__sfp>
 80063da:	60a0      	str	r0, [r4, #8]
 80063dc:	4620      	mov	r0, r4
 80063de:	f000 f817 	bl	8006410 <__sfp>
 80063e2:	2200      	movs	r2, #0
 80063e4:	60e0      	str	r0, [r4, #12]
 80063e6:	2104      	movs	r1, #4
 80063e8:	6860      	ldr	r0, [r4, #4]
 80063ea:	f7ff ffa1 	bl	8006330 <std>
 80063ee:	2201      	movs	r2, #1
 80063f0:	2109      	movs	r1, #9
 80063f2:	68a0      	ldr	r0, [r4, #8]
 80063f4:	f7ff ff9c 	bl	8006330 <std>
 80063f8:	2202      	movs	r2, #2
 80063fa:	2112      	movs	r1, #18
 80063fc:	68e0      	ldr	r0, [r4, #12]
 80063fe:	f7ff ff97 	bl	8006330 <std>
 8006402:	2301      	movs	r3, #1
 8006404:	61a3      	str	r3, [r4, #24]
 8006406:	bd10      	pop	{r4, pc}
 8006408:	08006ee4 	.word	0x08006ee4
 800640c:	08006379 	.word	0x08006379

08006410 <__sfp>:
 8006410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006412:	4b1b      	ldr	r3, [pc, #108]	; (8006480 <__sfp+0x70>)
 8006414:	4607      	mov	r7, r0
 8006416:	681e      	ldr	r6, [r3, #0]
 8006418:	69b3      	ldr	r3, [r6, #24]
 800641a:	b913      	cbnz	r3, 8006422 <__sfp+0x12>
 800641c:	4630      	mov	r0, r6
 800641e:	f7ff ffc7 	bl	80063b0 <__sinit>
 8006422:	3648      	adds	r6, #72	; 0x48
 8006424:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006428:	3b01      	subs	r3, #1
 800642a:	d503      	bpl.n	8006434 <__sfp+0x24>
 800642c:	6833      	ldr	r3, [r6, #0]
 800642e:	b133      	cbz	r3, 800643e <__sfp+0x2e>
 8006430:	6836      	ldr	r6, [r6, #0]
 8006432:	e7f7      	b.n	8006424 <__sfp+0x14>
 8006434:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006438:	b16d      	cbz	r5, 8006456 <__sfp+0x46>
 800643a:	3468      	adds	r4, #104	; 0x68
 800643c:	e7f4      	b.n	8006428 <__sfp+0x18>
 800643e:	2104      	movs	r1, #4
 8006440:	4638      	mov	r0, r7
 8006442:	f7ff ff9f 	bl	8006384 <__sfmoreglue>
 8006446:	6030      	str	r0, [r6, #0]
 8006448:	2800      	cmp	r0, #0
 800644a:	d1f1      	bne.n	8006430 <__sfp+0x20>
 800644c:	230c      	movs	r3, #12
 800644e:	4604      	mov	r4, r0
 8006450:	603b      	str	r3, [r7, #0]
 8006452:	4620      	mov	r0, r4
 8006454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006456:	4b0b      	ldr	r3, [pc, #44]	; (8006484 <__sfp+0x74>)
 8006458:	6665      	str	r5, [r4, #100]	; 0x64
 800645a:	e9c4 5500 	strd	r5, r5, [r4]
 800645e:	60a5      	str	r5, [r4, #8]
 8006460:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006464:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006468:	2208      	movs	r2, #8
 800646a:	4629      	mov	r1, r5
 800646c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006470:	f7ff fd69 	bl	8005f46 <memset>
 8006474:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006478:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800647c:	e7e9      	b.n	8006452 <__sfp+0x42>
 800647e:	bf00      	nop
 8006480:	08006ee4 	.word	0x08006ee4
 8006484:	ffff0001 	.word	0xffff0001

08006488 <_fwalk_reent>:
 8006488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800648c:	4680      	mov	r8, r0
 800648e:	4689      	mov	r9, r1
 8006490:	2600      	movs	r6, #0
 8006492:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006496:	b914      	cbnz	r4, 800649e <_fwalk_reent+0x16>
 8006498:	4630      	mov	r0, r6
 800649a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800649e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80064a2:	3f01      	subs	r7, #1
 80064a4:	d501      	bpl.n	80064aa <_fwalk_reent+0x22>
 80064a6:	6824      	ldr	r4, [r4, #0]
 80064a8:	e7f5      	b.n	8006496 <_fwalk_reent+0xe>
 80064aa:	89ab      	ldrh	r3, [r5, #12]
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d907      	bls.n	80064c0 <_fwalk_reent+0x38>
 80064b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80064b4:	3301      	adds	r3, #1
 80064b6:	d003      	beq.n	80064c0 <_fwalk_reent+0x38>
 80064b8:	4629      	mov	r1, r5
 80064ba:	4640      	mov	r0, r8
 80064bc:	47c8      	blx	r9
 80064be:	4306      	orrs	r6, r0
 80064c0:	3568      	adds	r5, #104	; 0x68
 80064c2:	e7ee      	b.n	80064a2 <_fwalk_reent+0x1a>

080064c4 <__swhatbuf_r>:
 80064c4:	b570      	push	{r4, r5, r6, lr}
 80064c6:	460e      	mov	r6, r1
 80064c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064cc:	b096      	sub	sp, #88	; 0x58
 80064ce:	2900      	cmp	r1, #0
 80064d0:	4614      	mov	r4, r2
 80064d2:	461d      	mov	r5, r3
 80064d4:	da07      	bge.n	80064e6 <__swhatbuf_r+0x22>
 80064d6:	2300      	movs	r3, #0
 80064d8:	602b      	str	r3, [r5, #0]
 80064da:	89b3      	ldrh	r3, [r6, #12]
 80064dc:	061a      	lsls	r2, r3, #24
 80064de:	d410      	bmi.n	8006502 <__swhatbuf_r+0x3e>
 80064e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064e4:	e00e      	b.n	8006504 <__swhatbuf_r+0x40>
 80064e6:	466a      	mov	r2, sp
 80064e8:	f000 fc32 	bl	8006d50 <_fstat_r>
 80064ec:	2800      	cmp	r0, #0
 80064ee:	dbf2      	blt.n	80064d6 <__swhatbuf_r+0x12>
 80064f0:	9a01      	ldr	r2, [sp, #4]
 80064f2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80064f6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80064fa:	425a      	negs	r2, r3
 80064fc:	415a      	adcs	r2, r3
 80064fe:	602a      	str	r2, [r5, #0]
 8006500:	e7ee      	b.n	80064e0 <__swhatbuf_r+0x1c>
 8006502:	2340      	movs	r3, #64	; 0x40
 8006504:	2000      	movs	r0, #0
 8006506:	6023      	str	r3, [r4, #0]
 8006508:	b016      	add	sp, #88	; 0x58
 800650a:	bd70      	pop	{r4, r5, r6, pc}

0800650c <__smakebuf_r>:
 800650c:	898b      	ldrh	r3, [r1, #12]
 800650e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006510:	079d      	lsls	r5, r3, #30
 8006512:	4606      	mov	r6, r0
 8006514:	460c      	mov	r4, r1
 8006516:	d507      	bpl.n	8006528 <__smakebuf_r+0x1c>
 8006518:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800651c:	6023      	str	r3, [r4, #0]
 800651e:	6123      	str	r3, [r4, #16]
 8006520:	2301      	movs	r3, #1
 8006522:	6163      	str	r3, [r4, #20]
 8006524:	b002      	add	sp, #8
 8006526:	bd70      	pop	{r4, r5, r6, pc}
 8006528:	ab01      	add	r3, sp, #4
 800652a:	466a      	mov	r2, sp
 800652c:	f7ff ffca 	bl	80064c4 <__swhatbuf_r>
 8006530:	9900      	ldr	r1, [sp, #0]
 8006532:	4605      	mov	r5, r0
 8006534:	4630      	mov	r0, r6
 8006536:	f000 f875 	bl	8006624 <_malloc_r>
 800653a:	b948      	cbnz	r0, 8006550 <__smakebuf_r+0x44>
 800653c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006540:	059a      	lsls	r2, r3, #22
 8006542:	d4ef      	bmi.n	8006524 <__smakebuf_r+0x18>
 8006544:	f023 0303 	bic.w	r3, r3, #3
 8006548:	f043 0302 	orr.w	r3, r3, #2
 800654c:	81a3      	strh	r3, [r4, #12]
 800654e:	e7e3      	b.n	8006518 <__smakebuf_r+0xc>
 8006550:	4b0d      	ldr	r3, [pc, #52]	; (8006588 <__smakebuf_r+0x7c>)
 8006552:	62b3      	str	r3, [r6, #40]	; 0x28
 8006554:	89a3      	ldrh	r3, [r4, #12]
 8006556:	6020      	str	r0, [r4, #0]
 8006558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800655c:	81a3      	strh	r3, [r4, #12]
 800655e:	9b00      	ldr	r3, [sp, #0]
 8006560:	6120      	str	r0, [r4, #16]
 8006562:	6163      	str	r3, [r4, #20]
 8006564:	9b01      	ldr	r3, [sp, #4]
 8006566:	b15b      	cbz	r3, 8006580 <__smakebuf_r+0x74>
 8006568:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800656c:	4630      	mov	r0, r6
 800656e:	f000 fc01 	bl	8006d74 <_isatty_r>
 8006572:	b128      	cbz	r0, 8006580 <__smakebuf_r+0x74>
 8006574:	89a3      	ldrh	r3, [r4, #12]
 8006576:	f023 0303 	bic.w	r3, r3, #3
 800657a:	f043 0301 	orr.w	r3, r3, #1
 800657e:	81a3      	strh	r3, [r4, #12]
 8006580:	89a3      	ldrh	r3, [r4, #12]
 8006582:	431d      	orrs	r5, r3
 8006584:	81a5      	strh	r5, [r4, #12]
 8006586:	e7cd      	b.n	8006524 <__smakebuf_r+0x18>
 8006588:	08006379 	.word	0x08006379

0800658c <_free_r>:
 800658c:	b538      	push	{r3, r4, r5, lr}
 800658e:	4605      	mov	r5, r0
 8006590:	2900      	cmp	r1, #0
 8006592:	d043      	beq.n	800661c <_free_r+0x90>
 8006594:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006598:	1f0c      	subs	r4, r1, #4
 800659a:	2b00      	cmp	r3, #0
 800659c:	bfb8      	it	lt
 800659e:	18e4      	addlt	r4, r4, r3
 80065a0:	f000 fc18 	bl	8006dd4 <__malloc_lock>
 80065a4:	4a1e      	ldr	r2, [pc, #120]	; (8006620 <_free_r+0x94>)
 80065a6:	6813      	ldr	r3, [r2, #0]
 80065a8:	4610      	mov	r0, r2
 80065aa:	b933      	cbnz	r3, 80065ba <_free_r+0x2e>
 80065ac:	6063      	str	r3, [r4, #4]
 80065ae:	6014      	str	r4, [r2, #0]
 80065b0:	4628      	mov	r0, r5
 80065b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065b6:	f000 bc0e 	b.w	8006dd6 <__malloc_unlock>
 80065ba:	42a3      	cmp	r3, r4
 80065bc:	d90b      	bls.n	80065d6 <_free_r+0x4a>
 80065be:	6821      	ldr	r1, [r4, #0]
 80065c0:	1862      	adds	r2, r4, r1
 80065c2:	4293      	cmp	r3, r2
 80065c4:	bf01      	itttt	eq
 80065c6:	681a      	ldreq	r2, [r3, #0]
 80065c8:	685b      	ldreq	r3, [r3, #4]
 80065ca:	1852      	addeq	r2, r2, r1
 80065cc:	6022      	streq	r2, [r4, #0]
 80065ce:	6063      	str	r3, [r4, #4]
 80065d0:	6004      	str	r4, [r0, #0]
 80065d2:	e7ed      	b.n	80065b0 <_free_r+0x24>
 80065d4:	4613      	mov	r3, r2
 80065d6:	685a      	ldr	r2, [r3, #4]
 80065d8:	b10a      	cbz	r2, 80065de <_free_r+0x52>
 80065da:	42a2      	cmp	r2, r4
 80065dc:	d9fa      	bls.n	80065d4 <_free_r+0x48>
 80065de:	6819      	ldr	r1, [r3, #0]
 80065e0:	1858      	adds	r0, r3, r1
 80065e2:	42a0      	cmp	r0, r4
 80065e4:	d10b      	bne.n	80065fe <_free_r+0x72>
 80065e6:	6820      	ldr	r0, [r4, #0]
 80065e8:	4401      	add	r1, r0
 80065ea:	1858      	adds	r0, r3, r1
 80065ec:	4282      	cmp	r2, r0
 80065ee:	6019      	str	r1, [r3, #0]
 80065f0:	d1de      	bne.n	80065b0 <_free_r+0x24>
 80065f2:	6810      	ldr	r0, [r2, #0]
 80065f4:	6852      	ldr	r2, [r2, #4]
 80065f6:	4401      	add	r1, r0
 80065f8:	6019      	str	r1, [r3, #0]
 80065fa:	605a      	str	r2, [r3, #4]
 80065fc:	e7d8      	b.n	80065b0 <_free_r+0x24>
 80065fe:	d902      	bls.n	8006606 <_free_r+0x7a>
 8006600:	230c      	movs	r3, #12
 8006602:	602b      	str	r3, [r5, #0]
 8006604:	e7d4      	b.n	80065b0 <_free_r+0x24>
 8006606:	6820      	ldr	r0, [r4, #0]
 8006608:	1821      	adds	r1, r4, r0
 800660a:	428a      	cmp	r2, r1
 800660c:	bf01      	itttt	eq
 800660e:	6811      	ldreq	r1, [r2, #0]
 8006610:	6852      	ldreq	r2, [r2, #4]
 8006612:	1809      	addeq	r1, r1, r0
 8006614:	6021      	streq	r1, [r4, #0]
 8006616:	6062      	str	r2, [r4, #4]
 8006618:	605c      	str	r4, [r3, #4]
 800661a:	e7c9      	b.n	80065b0 <_free_r+0x24>
 800661c:	bd38      	pop	{r3, r4, r5, pc}
 800661e:	bf00      	nop
 8006620:	200019a4 	.word	0x200019a4

08006624 <_malloc_r>:
 8006624:	b570      	push	{r4, r5, r6, lr}
 8006626:	1ccd      	adds	r5, r1, #3
 8006628:	f025 0503 	bic.w	r5, r5, #3
 800662c:	3508      	adds	r5, #8
 800662e:	2d0c      	cmp	r5, #12
 8006630:	bf38      	it	cc
 8006632:	250c      	movcc	r5, #12
 8006634:	2d00      	cmp	r5, #0
 8006636:	4606      	mov	r6, r0
 8006638:	db01      	blt.n	800663e <_malloc_r+0x1a>
 800663a:	42a9      	cmp	r1, r5
 800663c:	d903      	bls.n	8006646 <_malloc_r+0x22>
 800663e:	230c      	movs	r3, #12
 8006640:	6033      	str	r3, [r6, #0]
 8006642:	2000      	movs	r0, #0
 8006644:	bd70      	pop	{r4, r5, r6, pc}
 8006646:	f000 fbc5 	bl	8006dd4 <__malloc_lock>
 800664a:	4a21      	ldr	r2, [pc, #132]	; (80066d0 <_malloc_r+0xac>)
 800664c:	6814      	ldr	r4, [r2, #0]
 800664e:	4621      	mov	r1, r4
 8006650:	b991      	cbnz	r1, 8006678 <_malloc_r+0x54>
 8006652:	4c20      	ldr	r4, [pc, #128]	; (80066d4 <_malloc_r+0xb0>)
 8006654:	6823      	ldr	r3, [r4, #0]
 8006656:	b91b      	cbnz	r3, 8006660 <_malloc_r+0x3c>
 8006658:	4630      	mov	r0, r6
 800665a:	f000 fb03 	bl	8006c64 <_sbrk_r>
 800665e:	6020      	str	r0, [r4, #0]
 8006660:	4629      	mov	r1, r5
 8006662:	4630      	mov	r0, r6
 8006664:	f000 fafe 	bl	8006c64 <_sbrk_r>
 8006668:	1c43      	adds	r3, r0, #1
 800666a:	d124      	bne.n	80066b6 <_malloc_r+0x92>
 800666c:	230c      	movs	r3, #12
 800666e:	4630      	mov	r0, r6
 8006670:	6033      	str	r3, [r6, #0]
 8006672:	f000 fbb0 	bl	8006dd6 <__malloc_unlock>
 8006676:	e7e4      	b.n	8006642 <_malloc_r+0x1e>
 8006678:	680b      	ldr	r3, [r1, #0]
 800667a:	1b5b      	subs	r3, r3, r5
 800667c:	d418      	bmi.n	80066b0 <_malloc_r+0x8c>
 800667e:	2b0b      	cmp	r3, #11
 8006680:	d90f      	bls.n	80066a2 <_malloc_r+0x7e>
 8006682:	600b      	str	r3, [r1, #0]
 8006684:	18cc      	adds	r4, r1, r3
 8006686:	50cd      	str	r5, [r1, r3]
 8006688:	4630      	mov	r0, r6
 800668a:	f000 fba4 	bl	8006dd6 <__malloc_unlock>
 800668e:	f104 000b 	add.w	r0, r4, #11
 8006692:	1d23      	adds	r3, r4, #4
 8006694:	f020 0007 	bic.w	r0, r0, #7
 8006698:	1ac3      	subs	r3, r0, r3
 800669a:	d0d3      	beq.n	8006644 <_malloc_r+0x20>
 800669c:	425a      	negs	r2, r3
 800669e:	50e2      	str	r2, [r4, r3]
 80066a0:	e7d0      	b.n	8006644 <_malloc_r+0x20>
 80066a2:	684b      	ldr	r3, [r1, #4]
 80066a4:	428c      	cmp	r4, r1
 80066a6:	bf16      	itet	ne
 80066a8:	6063      	strne	r3, [r4, #4]
 80066aa:	6013      	streq	r3, [r2, #0]
 80066ac:	460c      	movne	r4, r1
 80066ae:	e7eb      	b.n	8006688 <_malloc_r+0x64>
 80066b0:	460c      	mov	r4, r1
 80066b2:	6849      	ldr	r1, [r1, #4]
 80066b4:	e7cc      	b.n	8006650 <_malloc_r+0x2c>
 80066b6:	1cc4      	adds	r4, r0, #3
 80066b8:	f024 0403 	bic.w	r4, r4, #3
 80066bc:	42a0      	cmp	r0, r4
 80066be:	d005      	beq.n	80066cc <_malloc_r+0xa8>
 80066c0:	1a21      	subs	r1, r4, r0
 80066c2:	4630      	mov	r0, r6
 80066c4:	f000 face 	bl	8006c64 <_sbrk_r>
 80066c8:	3001      	adds	r0, #1
 80066ca:	d0cf      	beq.n	800666c <_malloc_r+0x48>
 80066cc:	6025      	str	r5, [r4, #0]
 80066ce:	e7db      	b.n	8006688 <_malloc_r+0x64>
 80066d0:	200019a4 	.word	0x200019a4
 80066d4:	200019a8 	.word	0x200019a8

080066d8 <__sfputc_r>:
 80066d8:	6893      	ldr	r3, [r2, #8]
 80066da:	b410      	push	{r4}
 80066dc:	3b01      	subs	r3, #1
 80066de:	2b00      	cmp	r3, #0
 80066e0:	6093      	str	r3, [r2, #8]
 80066e2:	da07      	bge.n	80066f4 <__sfputc_r+0x1c>
 80066e4:	6994      	ldr	r4, [r2, #24]
 80066e6:	42a3      	cmp	r3, r4
 80066e8:	db01      	blt.n	80066ee <__sfputc_r+0x16>
 80066ea:	290a      	cmp	r1, #10
 80066ec:	d102      	bne.n	80066f4 <__sfputc_r+0x1c>
 80066ee:	bc10      	pop	{r4}
 80066f0:	f7ff bcae 	b.w	8006050 <__swbuf_r>
 80066f4:	6813      	ldr	r3, [r2, #0]
 80066f6:	1c58      	adds	r0, r3, #1
 80066f8:	6010      	str	r0, [r2, #0]
 80066fa:	7019      	strb	r1, [r3, #0]
 80066fc:	4608      	mov	r0, r1
 80066fe:	bc10      	pop	{r4}
 8006700:	4770      	bx	lr

08006702 <__sfputs_r>:
 8006702:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006704:	4606      	mov	r6, r0
 8006706:	460f      	mov	r7, r1
 8006708:	4614      	mov	r4, r2
 800670a:	18d5      	adds	r5, r2, r3
 800670c:	42ac      	cmp	r4, r5
 800670e:	d101      	bne.n	8006714 <__sfputs_r+0x12>
 8006710:	2000      	movs	r0, #0
 8006712:	e007      	b.n	8006724 <__sfputs_r+0x22>
 8006714:	463a      	mov	r2, r7
 8006716:	f814 1b01 	ldrb.w	r1, [r4], #1
 800671a:	4630      	mov	r0, r6
 800671c:	f7ff ffdc 	bl	80066d8 <__sfputc_r>
 8006720:	1c43      	adds	r3, r0, #1
 8006722:	d1f3      	bne.n	800670c <__sfputs_r+0xa>
 8006724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006728 <_vfiprintf_r>:
 8006728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800672c:	460c      	mov	r4, r1
 800672e:	b09d      	sub	sp, #116	; 0x74
 8006730:	4617      	mov	r7, r2
 8006732:	461d      	mov	r5, r3
 8006734:	4606      	mov	r6, r0
 8006736:	b118      	cbz	r0, 8006740 <_vfiprintf_r+0x18>
 8006738:	6983      	ldr	r3, [r0, #24]
 800673a:	b90b      	cbnz	r3, 8006740 <_vfiprintf_r+0x18>
 800673c:	f7ff fe38 	bl	80063b0 <__sinit>
 8006740:	4b7c      	ldr	r3, [pc, #496]	; (8006934 <_vfiprintf_r+0x20c>)
 8006742:	429c      	cmp	r4, r3
 8006744:	d158      	bne.n	80067f8 <_vfiprintf_r+0xd0>
 8006746:	6874      	ldr	r4, [r6, #4]
 8006748:	89a3      	ldrh	r3, [r4, #12]
 800674a:	0718      	lsls	r0, r3, #28
 800674c:	d55e      	bpl.n	800680c <_vfiprintf_r+0xe4>
 800674e:	6923      	ldr	r3, [r4, #16]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d05b      	beq.n	800680c <_vfiprintf_r+0xe4>
 8006754:	2300      	movs	r3, #0
 8006756:	9309      	str	r3, [sp, #36]	; 0x24
 8006758:	2320      	movs	r3, #32
 800675a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800675e:	2330      	movs	r3, #48	; 0x30
 8006760:	f04f 0b01 	mov.w	fp, #1
 8006764:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006768:	9503      	str	r5, [sp, #12]
 800676a:	46b8      	mov	r8, r7
 800676c:	4645      	mov	r5, r8
 800676e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006772:	b10b      	cbz	r3, 8006778 <_vfiprintf_r+0x50>
 8006774:	2b25      	cmp	r3, #37	; 0x25
 8006776:	d154      	bne.n	8006822 <_vfiprintf_r+0xfa>
 8006778:	ebb8 0a07 	subs.w	sl, r8, r7
 800677c:	d00b      	beq.n	8006796 <_vfiprintf_r+0x6e>
 800677e:	4653      	mov	r3, sl
 8006780:	463a      	mov	r2, r7
 8006782:	4621      	mov	r1, r4
 8006784:	4630      	mov	r0, r6
 8006786:	f7ff ffbc 	bl	8006702 <__sfputs_r>
 800678a:	3001      	adds	r0, #1
 800678c:	f000 80c2 	beq.w	8006914 <_vfiprintf_r+0x1ec>
 8006790:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006792:	4453      	add	r3, sl
 8006794:	9309      	str	r3, [sp, #36]	; 0x24
 8006796:	f898 3000 	ldrb.w	r3, [r8]
 800679a:	2b00      	cmp	r3, #0
 800679c:	f000 80ba 	beq.w	8006914 <_vfiprintf_r+0x1ec>
 80067a0:	2300      	movs	r3, #0
 80067a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80067a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80067aa:	9304      	str	r3, [sp, #16]
 80067ac:	9307      	str	r3, [sp, #28]
 80067ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80067b2:	931a      	str	r3, [sp, #104]	; 0x68
 80067b4:	46a8      	mov	r8, r5
 80067b6:	2205      	movs	r2, #5
 80067b8:	f818 1b01 	ldrb.w	r1, [r8], #1
 80067bc:	485e      	ldr	r0, [pc, #376]	; (8006938 <_vfiprintf_r+0x210>)
 80067be:	f000 fafb 	bl	8006db8 <memchr>
 80067c2:	9b04      	ldr	r3, [sp, #16]
 80067c4:	bb78      	cbnz	r0, 8006826 <_vfiprintf_r+0xfe>
 80067c6:	06d9      	lsls	r1, r3, #27
 80067c8:	bf44      	itt	mi
 80067ca:	2220      	movmi	r2, #32
 80067cc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80067d0:	071a      	lsls	r2, r3, #28
 80067d2:	bf44      	itt	mi
 80067d4:	222b      	movmi	r2, #43	; 0x2b
 80067d6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80067da:	782a      	ldrb	r2, [r5, #0]
 80067dc:	2a2a      	cmp	r2, #42	; 0x2a
 80067de:	d02a      	beq.n	8006836 <_vfiprintf_r+0x10e>
 80067e0:	46a8      	mov	r8, r5
 80067e2:	2000      	movs	r0, #0
 80067e4:	250a      	movs	r5, #10
 80067e6:	9a07      	ldr	r2, [sp, #28]
 80067e8:	4641      	mov	r1, r8
 80067ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80067ee:	3b30      	subs	r3, #48	; 0x30
 80067f0:	2b09      	cmp	r3, #9
 80067f2:	d969      	bls.n	80068c8 <_vfiprintf_r+0x1a0>
 80067f4:	b360      	cbz	r0, 8006850 <_vfiprintf_r+0x128>
 80067f6:	e024      	b.n	8006842 <_vfiprintf_r+0x11a>
 80067f8:	4b50      	ldr	r3, [pc, #320]	; (800693c <_vfiprintf_r+0x214>)
 80067fa:	429c      	cmp	r4, r3
 80067fc:	d101      	bne.n	8006802 <_vfiprintf_r+0xda>
 80067fe:	68b4      	ldr	r4, [r6, #8]
 8006800:	e7a2      	b.n	8006748 <_vfiprintf_r+0x20>
 8006802:	4b4f      	ldr	r3, [pc, #316]	; (8006940 <_vfiprintf_r+0x218>)
 8006804:	429c      	cmp	r4, r3
 8006806:	bf08      	it	eq
 8006808:	68f4      	ldreq	r4, [r6, #12]
 800680a:	e79d      	b.n	8006748 <_vfiprintf_r+0x20>
 800680c:	4621      	mov	r1, r4
 800680e:	4630      	mov	r0, r6
 8006810:	f7ff fc70 	bl	80060f4 <__swsetup_r>
 8006814:	2800      	cmp	r0, #0
 8006816:	d09d      	beq.n	8006754 <_vfiprintf_r+0x2c>
 8006818:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800681c:	b01d      	add	sp, #116	; 0x74
 800681e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006822:	46a8      	mov	r8, r5
 8006824:	e7a2      	b.n	800676c <_vfiprintf_r+0x44>
 8006826:	4a44      	ldr	r2, [pc, #272]	; (8006938 <_vfiprintf_r+0x210>)
 8006828:	4645      	mov	r5, r8
 800682a:	1a80      	subs	r0, r0, r2
 800682c:	fa0b f000 	lsl.w	r0, fp, r0
 8006830:	4318      	orrs	r0, r3
 8006832:	9004      	str	r0, [sp, #16]
 8006834:	e7be      	b.n	80067b4 <_vfiprintf_r+0x8c>
 8006836:	9a03      	ldr	r2, [sp, #12]
 8006838:	1d11      	adds	r1, r2, #4
 800683a:	6812      	ldr	r2, [r2, #0]
 800683c:	9103      	str	r1, [sp, #12]
 800683e:	2a00      	cmp	r2, #0
 8006840:	db01      	blt.n	8006846 <_vfiprintf_r+0x11e>
 8006842:	9207      	str	r2, [sp, #28]
 8006844:	e004      	b.n	8006850 <_vfiprintf_r+0x128>
 8006846:	4252      	negs	r2, r2
 8006848:	f043 0302 	orr.w	r3, r3, #2
 800684c:	9207      	str	r2, [sp, #28]
 800684e:	9304      	str	r3, [sp, #16]
 8006850:	f898 3000 	ldrb.w	r3, [r8]
 8006854:	2b2e      	cmp	r3, #46	; 0x2e
 8006856:	d10e      	bne.n	8006876 <_vfiprintf_r+0x14e>
 8006858:	f898 3001 	ldrb.w	r3, [r8, #1]
 800685c:	2b2a      	cmp	r3, #42	; 0x2a
 800685e:	d138      	bne.n	80068d2 <_vfiprintf_r+0x1aa>
 8006860:	9b03      	ldr	r3, [sp, #12]
 8006862:	f108 0802 	add.w	r8, r8, #2
 8006866:	1d1a      	adds	r2, r3, #4
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	9203      	str	r2, [sp, #12]
 800686c:	2b00      	cmp	r3, #0
 800686e:	bfb8      	it	lt
 8006870:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006874:	9305      	str	r3, [sp, #20]
 8006876:	4d33      	ldr	r5, [pc, #204]	; (8006944 <_vfiprintf_r+0x21c>)
 8006878:	2203      	movs	r2, #3
 800687a:	f898 1000 	ldrb.w	r1, [r8]
 800687e:	4628      	mov	r0, r5
 8006880:	f000 fa9a 	bl	8006db8 <memchr>
 8006884:	b140      	cbz	r0, 8006898 <_vfiprintf_r+0x170>
 8006886:	2340      	movs	r3, #64	; 0x40
 8006888:	1b40      	subs	r0, r0, r5
 800688a:	fa03 f000 	lsl.w	r0, r3, r0
 800688e:	9b04      	ldr	r3, [sp, #16]
 8006890:	f108 0801 	add.w	r8, r8, #1
 8006894:	4303      	orrs	r3, r0
 8006896:	9304      	str	r3, [sp, #16]
 8006898:	f898 1000 	ldrb.w	r1, [r8]
 800689c:	2206      	movs	r2, #6
 800689e:	482a      	ldr	r0, [pc, #168]	; (8006948 <_vfiprintf_r+0x220>)
 80068a0:	f108 0701 	add.w	r7, r8, #1
 80068a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80068a8:	f000 fa86 	bl	8006db8 <memchr>
 80068ac:	2800      	cmp	r0, #0
 80068ae:	d037      	beq.n	8006920 <_vfiprintf_r+0x1f8>
 80068b0:	4b26      	ldr	r3, [pc, #152]	; (800694c <_vfiprintf_r+0x224>)
 80068b2:	bb1b      	cbnz	r3, 80068fc <_vfiprintf_r+0x1d4>
 80068b4:	9b03      	ldr	r3, [sp, #12]
 80068b6:	3307      	adds	r3, #7
 80068b8:	f023 0307 	bic.w	r3, r3, #7
 80068bc:	3308      	adds	r3, #8
 80068be:	9303      	str	r3, [sp, #12]
 80068c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068c2:	444b      	add	r3, r9
 80068c4:	9309      	str	r3, [sp, #36]	; 0x24
 80068c6:	e750      	b.n	800676a <_vfiprintf_r+0x42>
 80068c8:	fb05 3202 	mla	r2, r5, r2, r3
 80068cc:	2001      	movs	r0, #1
 80068ce:	4688      	mov	r8, r1
 80068d0:	e78a      	b.n	80067e8 <_vfiprintf_r+0xc0>
 80068d2:	2300      	movs	r3, #0
 80068d4:	250a      	movs	r5, #10
 80068d6:	4619      	mov	r1, r3
 80068d8:	f108 0801 	add.w	r8, r8, #1
 80068dc:	9305      	str	r3, [sp, #20]
 80068de:	4640      	mov	r0, r8
 80068e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80068e4:	3a30      	subs	r2, #48	; 0x30
 80068e6:	2a09      	cmp	r2, #9
 80068e8:	d903      	bls.n	80068f2 <_vfiprintf_r+0x1ca>
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d0c3      	beq.n	8006876 <_vfiprintf_r+0x14e>
 80068ee:	9105      	str	r1, [sp, #20]
 80068f0:	e7c1      	b.n	8006876 <_vfiprintf_r+0x14e>
 80068f2:	fb05 2101 	mla	r1, r5, r1, r2
 80068f6:	2301      	movs	r3, #1
 80068f8:	4680      	mov	r8, r0
 80068fa:	e7f0      	b.n	80068de <_vfiprintf_r+0x1b6>
 80068fc:	ab03      	add	r3, sp, #12
 80068fe:	9300      	str	r3, [sp, #0]
 8006900:	4622      	mov	r2, r4
 8006902:	4b13      	ldr	r3, [pc, #76]	; (8006950 <_vfiprintf_r+0x228>)
 8006904:	a904      	add	r1, sp, #16
 8006906:	4630      	mov	r0, r6
 8006908:	f3af 8000 	nop.w
 800690c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006910:	4681      	mov	r9, r0
 8006912:	d1d5      	bne.n	80068c0 <_vfiprintf_r+0x198>
 8006914:	89a3      	ldrh	r3, [r4, #12]
 8006916:	065b      	lsls	r3, r3, #25
 8006918:	f53f af7e 	bmi.w	8006818 <_vfiprintf_r+0xf0>
 800691c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800691e:	e77d      	b.n	800681c <_vfiprintf_r+0xf4>
 8006920:	ab03      	add	r3, sp, #12
 8006922:	9300      	str	r3, [sp, #0]
 8006924:	4622      	mov	r2, r4
 8006926:	4b0a      	ldr	r3, [pc, #40]	; (8006950 <_vfiprintf_r+0x228>)
 8006928:	a904      	add	r1, sp, #16
 800692a:	4630      	mov	r0, r6
 800692c:	f000 f888 	bl	8006a40 <_printf_i>
 8006930:	e7ec      	b.n	800690c <_vfiprintf_r+0x1e4>
 8006932:	bf00      	nop
 8006934:	08006f08 	.word	0x08006f08
 8006938:	08006f48 	.word	0x08006f48
 800693c:	08006f28 	.word	0x08006f28
 8006940:	08006ee8 	.word	0x08006ee8
 8006944:	08006f4e 	.word	0x08006f4e
 8006948:	08006f52 	.word	0x08006f52
 800694c:	00000000 	.word	0x00000000
 8006950:	08006703 	.word	0x08006703

08006954 <_printf_common>:
 8006954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006958:	4691      	mov	r9, r2
 800695a:	461f      	mov	r7, r3
 800695c:	688a      	ldr	r2, [r1, #8]
 800695e:	690b      	ldr	r3, [r1, #16]
 8006960:	4606      	mov	r6, r0
 8006962:	4293      	cmp	r3, r2
 8006964:	bfb8      	it	lt
 8006966:	4613      	movlt	r3, r2
 8006968:	f8c9 3000 	str.w	r3, [r9]
 800696c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006970:	460c      	mov	r4, r1
 8006972:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006976:	b112      	cbz	r2, 800697e <_printf_common+0x2a>
 8006978:	3301      	adds	r3, #1
 800697a:	f8c9 3000 	str.w	r3, [r9]
 800697e:	6823      	ldr	r3, [r4, #0]
 8006980:	0699      	lsls	r1, r3, #26
 8006982:	bf42      	ittt	mi
 8006984:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006988:	3302      	addmi	r3, #2
 800698a:	f8c9 3000 	strmi.w	r3, [r9]
 800698e:	6825      	ldr	r5, [r4, #0]
 8006990:	f015 0506 	ands.w	r5, r5, #6
 8006994:	d107      	bne.n	80069a6 <_printf_common+0x52>
 8006996:	f104 0a19 	add.w	sl, r4, #25
 800699a:	68e3      	ldr	r3, [r4, #12]
 800699c:	f8d9 2000 	ldr.w	r2, [r9]
 80069a0:	1a9b      	subs	r3, r3, r2
 80069a2:	42ab      	cmp	r3, r5
 80069a4:	dc29      	bgt.n	80069fa <_printf_common+0xa6>
 80069a6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80069aa:	6822      	ldr	r2, [r4, #0]
 80069ac:	3300      	adds	r3, #0
 80069ae:	bf18      	it	ne
 80069b0:	2301      	movne	r3, #1
 80069b2:	0692      	lsls	r2, r2, #26
 80069b4:	d42e      	bmi.n	8006a14 <_printf_common+0xc0>
 80069b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80069ba:	4639      	mov	r1, r7
 80069bc:	4630      	mov	r0, r6
 80069be:	47c0      	blx	r8
 80069c0:	3001      	adds	r0, #1
 80069c2:	d021      	beq.n	8006a08 <_printf_common+0xb4>
 80069c4:	6823      	ldr	r3, [r4, #0]
 80069c6:	68e5      	ldr	r5, [r4, #12]
 80069c8:	f003 0306 	and.w	r3, r3, #6
 80069cc:	2b04      	cmp	r3, #4
 80069ce:	bf18      	it	ne
 80069d0:	2500      	movne	r5, #0
 80069d2:	f8d9 2000 	ldr.w	r2, [r9]
 80069d6:	f04f 0900 	mov.w	r9, #0
 80069da:	bf08      	it	eq
 80069dc:	1aad      	subeq	r5, r5, r2
 80069de:	68a3      	ldr	r3, [r4, #8]
 80069e0:	6922      	ldr	r2, [r4, #16]
 80069e2:	bf08      	it	eq
 80069e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80069e8:	4293      	cmp	r3, r2
 80069ea:	bfc4      	itt	gt
 80069ec:	1a9b      	subgt	r3, r3, r2
 80069ee:	18ed      	addgt	r5, r5, r3
 80069f0:	341a      	adds	r4, #26
 80069f2:	454d      	cmp	r5, r9
 80069f4:	d11a      	bne.n	8006a2c <_printf_common+0xd8>
 80069f6:	2000      	movs	r0, #0
 80069f8:	e008      	b.n	8006a0c <_printf_common+0xb8>
 80069fa:	2301      	movs	r3, #1
 80069fc:	4652      	mov	r2, sl
 80069fe:	4639      	mov	r1, r7
 8006a00:	4630      	mov	r0, r6
 8006a02:	47c0      	blx	r8
 8006a04:	3001      	adds	r0, #1
 8006a06:	d103      	bne.n	8006a10 <_printf_common+0xbc>
 8006a08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a10:	3501      	adds	r5, #1
 8006a12:	e7c2      	b.n	800699a <_printf_common+0x46>
 8006a14:	2030      	movs	r0, #48	; 0x30
 8006a16:	18e1      	adds	r1, r4, r3
 8006a18:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a1c:	1c5a      	adds	r2, r3, #1
 8006a1e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a22:	4422      	add	r2, r4
 8006a24:	3302      	adds	r3, #2
 8006a26:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006a2a:	e7c4      	b.n	80069b6 <_printf_common+0x62>
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	4622      	mov	r2, r4
 8006a30:	4639      	mov	r1, r7
 8006a32:	4630      	mov	r0, r6
 8006a34:	47c0      	blx	r8
 8006a36:	3001      	adds	r0, #1
 8006a38:	d0e6      	beq.n	8006a08 <_printf_common+0xb4>
 8006a3a:	f109 0901 	add.w	r9, r9, #1
 8006a3e:	e7d8      	b.n	80069f2 <_printf_common+0x9e>

08006a40 <_printf_i>:
 8006a40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006a44:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006a48:	460c      	mov	r4, r1
 8006a4a:	7e09      	ldrb	r1, [r1, #24]
 8006a4c:	b085      	sub	sp, #20
 8006a4e:	296e      	cmp	r1, #110	; 0x6e
 8006a50:	4617      	mov	r7, r2
 8006a52:	4606      	mov	r6, r0
 8006a54:	4698      	mov	r8, r3
 8006a56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006a58:	f000 80b3 	beq.w	8006bc2 <_printf_i+0x182>
 8006a5c:	d822      	bhi.n	8006aa4 <_printf_i+0x64>
 8006a5e:	2963      	cmp	r1, #99	; 0x63
 8006a60:	d036      	beq.n	8006ad0 <_printf_i+0x90>
 8006a62:	d80a      	bhi.n	8006a7a <_printf_i+0x3a>
 8006a64:	2900      	cmp	r1, #0
 8006a66:	f000 80b9 	beq.w	8006bdc <_printf_i+0x19c>
 8006a6a:	2958      	cmp	r1, #88	; 0x58
 8006a6c:	f000 8083 	beq.w	8006b76 <_printf_i+0x136>
 8006a70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a74:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006a78:	e032      	b.n	8006ae0 <_printf_i+0xa0>
 8006a7a:	2964      	cmp	r1, #100	; 0x64
 8006a7c:	d001      	beq.n	8006a82 <_printf_i+0x42>
 8006a7e:	2969      	cmp	r1, #105	; 0x69
 8006a80:	d1f6      	bne.n	8006a70 <_printf_i+0x30>
 8006a82:	6820      	ldr	r0, [r4, #0]
 8006a84:	6813      	ldr	r3, [r2, #0]
 8006a86:	0605      	lsls	r5, r0, #24
 8006a88:	f103 0104 	add.w	r1, r3, #4
 8006a8c:	d52a      	bpl.n	8006ae4 <_printf_i+0xa4>
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	6011      	str	r1, [r2, #0]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	da03      	bge.n	8006a9e <_printf_i+0x5e>
 8006a96:	222d      	movs	r2, #45	; 0x2d
 8006a98:	425b      	negs	r3, r3
 8006a9a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006a9e:	486f      	ldr	r0, [pc, #444]	; (8006c5c <_printf_i+0x21c>)
 8006aa0:	220a      	movs	r2, #10
 8006aa2:	e039      	b.n	8006b18 <_printf_i+0xd8>
 8006aa4:	2973      	cmp	r1, #115	; 0x73
 8006aa6:	f000 809d 	beq.w	8006be4 <_printf_i+0x1a4>
 8006aaa:	d808      	bhi.n	8006abe <_printf_i+0x7e>
 8006aac:	296f      	cmp	r1, #111	; 0x6f
 8006aae:	d020      	beq.n	8006af2 <_printf_i+0xb2>
 8006ab0:	2970      	cmp	r1, #112	; 0x70
 8006ab2:	d1dd      	bne.n	8006a70 <_printf_i+0x30>
 8006ab4:	6823      	ldr	r3, [r4, #0]
 8006ab6:	f043 0320 	orr.w	r3, r3, #32
 8006aba:	6023      	str	r3, [r4, #0]
 8006abc:	e003      	b.n	8006ac6 <_printf_i+0x86>
 8006abe:	2975      	cmp	r1, #117	; 0x75
 8006ac0:	d017      	beq.n	8006af2 <_printf_i+0xb2>
 8006ac2:	2978      	cmp	r1, #120	; 0x78
 8006ac4:	d1d4      	bne.n	8006a70 <_printf_i+0x30>
 8006ac6:	2378      	movs	r3, #120	; 0x78
 8006ac8:	4865      	ldr	r0, [pc, #404]	; (8006c60 <_printf_i+0x220>)
 8006aca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006ace:	e055      	b.n	8006b7c <_printf_i+0x13c>
 8006ad0:	6813      	ldr	r3, [r2, #0]
 8006ad2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ad6:	1d19      	adds	r1, r3, #4
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	6011      	str	r1, [r2, #0]
 8006adc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e08c      	b.n	8006bfe <_printf_i+0x1be>
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006aea:	6011      	str	r1, [r2, #0]
 8006aec:	bf18      	it	ne
 8006aee:	b21b      	sxthne	r3, r3
 8006af0:	e7cf      	b.n	8006a92 <_printf_i+0x52>
 8006af2:	6813      	ldr	r3, [r2, #0]
 8006af4:	6825      	ldr	r5, [r4, #0]
 8006af6:	1d18      	adds	r0, r3, #4
 8006af8:	6010      	str	r0, [r2, #0]
 8006afa:	0628      	lsls	r0, r5, #24
 8006afc:	d501      	bpl.n	8006b02 <_printf_i+0xc2>
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	e002      	b.n	8006b08 <_printf_i+0xc8>
 8006b02:	0668      	lsls	r0, r5, #25
 8006b04:	d5fb      	bpl.n	8006afe <_printf_i+0xbe>
 8006b06:	881b      	ldrh	r3, [r3, #0]
 8006b08:	296f      	cmp	r1, #111	; 0x6f
 8006b0a:	bf14      	ite	ne
 8006b0c:	220a      	movne	r2, #10
 8006b0e:	2208      	moveq	r2, #8
 8006b10:	4852      	ldr	r0, [pc, #328]	; (8006c5c <_printf_i+0x21c>)
 8006b12:	2100      	movs	r1, #0
 8006b14:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006b18:	6865      	ldr	r5, [r4, #4]
 8006b1a:	2d00      	cmp	r5, #0
 8006b1c:	60a5      	str	r5, [r4, #8]
 8006b1e:	f2c0 8095 	blt.w	8006c4c <_printf_i+0x20c>
 8006b22:	6821      	ldr	r1, [r4, #0]
 8006b24:	f021 0104 	bic.w	r1, r1, #4
 8006b28:	6021      	str	r1, [r4, #0]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d13d      	bne.n	8006baa <_printf_i+0x16a>
 8006b2e:	2d00      	cmp	r5, #0
 8006b30:	f040 808e 	bne.w	8006c50 <_printf_i+0x210>
 8006b34:	4665      	mov	r5, ip
 8006b36:	2a08      	cmp	r2, #8
 8006b38:	d10b      	bne.n	8006b52 <_printf_i+0x112>
 8006b3a:	6823      	ldr	r3, [r4, #0]
 8006b3c:	07db      	lsls	r3, r3, #31
 8006b3e:	d508      	bpl.n	8006b52 <_printf_i+0x112>
 8006b40:	6923      	ldr	r3, [r4, #16]
 8006b42:	6862      	ldr	r2, [r4, #4]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	bfde      	ittt	le
 8006b48:	2330      	movle	r3, #48	; 0x30
 8006b4a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006b4e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006b52:	ebac 0305 	sub.w	r3, ip, r5
 8006b56:	6123      	str	r3, [r4, #16]
 8006b58:	f8cd 8000 	str.w	r8, [sp]
 8006b5c:	463b      	mov	r3, r7
 8006b5e:	aa03      	add	r2, sp, #12
 8006b60:	4621      	mov	r1, r4
 8006b62:	4630      	mov	r0, r6
 8006b64:	f7ff fef6 	bl	8006954 <_printf_common>
 8006b68:	3001      	adds	r0, #1
 8006b6a:	d14d      	bne.n	8006c08 <_printf_i+0x1c8>
 8006b6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b70:	b005      	add	sp, #20
 8006b72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b76:	4839      	ldr	r0, [pc, #228]	; (8006c5c <_printf_i+0x21c>)
 8006b78:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006b7c:	6813      	ldr	r3, [r2, #0]
 8006b7e:	6821      	ldr	r1, [r4, #0]
 8006b80:	1d1d      	adds	r5, r3, #4
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	6015      	str	r5, [r2, #0]
 8006b86:	060a      	lsls	r2, r1, #24
 8006b88:	d50b      	bpl.n	8006ba2 <_printf_i+0x162>
 8006b8a:	07ca      	lsls	r2, r1, #31
 8006b8c:	bf44      	itt	mi
 8006b8e:	f041 0120 	orrmi.w	r1, r1, #32
 8006b92:	6021      	strmi	r1, [r4, #0]
 8006b94:	b91b      	cbnz	r3, 8006b9e <_printf_i+0x15e>
 8006b96:	6822      	ldr	r2, [r4, #0]
 8006b98:	f022 0220 	bic.w	r2, r2, #32
 8006b9c:	6022      	str	r2, [r4, #0]
 8006b9e:	2210      	movs	r2, #16
 8006ba0:	e7b7      	b.n	8006b12 <_printf_i+0xd2>
 8006ba2:	064d      	lsls	r5, r1, #25
 8006ba4:	bf48      	it	mi
 8006ba6:	b29b      	uxthmi	r3, r3
 8006ba8:	e7ef      	b.n	8006b8a <_printf_i+0x14a>
 8006baa:	4665      	mov	r5, ip
 8006bac:	fbb3 f1f2 	udiv	r1, r3, r2
 8006bb0:	fb02 3311 	mls	r3, r2, r1, r3
 8006bb4:	5cc3      	ldrb	r3, [r0, r3]
 8006bb6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006bba:	460b      	mov	r3, r1
 8006bbc:	2900      	cmp	r1, #0
 8006bbe:	d1f5      	bne.n	8006bac <_printf_i+0x16c>
 8006bc0:	e7b9      	b.n	8006b36 <_printf_i+0xf6>
 8006bc2:	6813      	ldr	r3, [r2, #0]
 8006bc4:	6825      	ldr	r5, [r4, #0]
 8006bc6:	1d18      	adds	r0, r3, #4
 8006bc8:	6961      	ldr	r1, [r4, #20]
 8006bca:	6010      	str	r0, [r2, #0]
 8006bcc:	0628      	lsls	r0, r5, #24
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	d501      	bpl.n	8006bd6 <_printf_i+0x196>
 8006bd2:	6019      	str	r1, [r3, #0]
 8006bd4:	e002      	b.n	8006bdc <_printf_i+0x19c>
 8006bd6:	066a      	lsls	r2, r5, #25
 8006bd8:	d5fb      	bpl.n	8006bd2 <_printf_i+0x192>
 8006bda:	8019      	strh	r1, [r3, #0]
 8006bdc:	2300      	movs	r3, #0
 8006bde:	4665      	mov	r5, ip
 8006be0:	6123      	str	r3, [r4, #16]
 8006be2:	e7b9      	b.n	8006b58 <_printf_i+0x118>
 8006be4:	6813      	ldr	r3, [r2, #0]
 8006be6:	1d19      	adds	r1, r3, #4
 8006be8:	6011      	str	r1, [r2, #0]
 8006bea:	681d      	ldr	r5, [r3, #0]
 8006bec:	6862      	ldr	r2, [r4, #4]
 8006bee:	2100      	movs	r1, #0
 8006bf0:	4628      	mov	r0, r5
 8006bf2:	f000 f8e1 	bl	8006db8 <memchr>
 8006bf6:	b108      	cbz	r0, 8006bfc <_printf_i+0x1bc>
 8006bf8:	1b40      	subs	r0, r0, r5
 8006bfa:	6060      	str	r0, [r4, #4]
 8006bfc:	6863      	ldr	r3, [r4, #4]
 8006bfe:	6123      	str	r3, [r4, #16]
 8006c00:	2300      	movs	r3, #0
 8006c02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c06:	e7a7      	b.n	8006b58 <_printf_i+0x118>
 8006c08:	6923      	ldr	r3, [r4, #16]
 8006c0a:	462a      	mov	r2, r5
 8006c0c:	4639      	mov	r1, r7
 8006c0e:	4630      	mov	r0, r6
 8006c10:	47c0      	blx	r8
 8006c12:	3001      	adds	r0, #1
 8006c14:	d0aa      	beq.n	8006b6c <_printf_i+0x12c>
 8006c16:	6823      	ldr	r3, [r4, #0]
 8006c18:	079b      	lsls	r3, r3, #30
 8006c1a:	d413      	bmi.n	8006c44 <_printf_i+0x204>
 8006c1c:	68e0      	ldr	r0, [r4, #12]
 8006c1e:	9b03      	ldr	r3, [sp, #12]
 8006c20:	4298      	cmp	r0, r3
 8006c22:	bfb8      	it	lt
 8006c24:	4618      	movlt	r0, r3
 8006c26:	e7a3      	b.n	8006b70 <_printf_i+0x130>
 8006c28:	2301      	movs	r3, #1
 8006c2a:	464a      	mov	r2, r9
 8006c2c:	4639      	mov	r1, r7
 8006c2e:	4630      	mov	r0, r6
 8006c30:	47c0      	blx	r8
 8006c32:	3001      	adds	r0, #1
 8006c34:	d09a      	beq.n	8006b6c <_printf_i+0x12c>
 8006c36:	3501      	adds	r5, #1
 8006c38:	68e3      	ldr	r3, [r4, #12]
 8006c3a:	9a03      	ldr	r2, [sp, #12]
 8006c3c:	1a9b      	subs	r3, r3, r2
 8006c3e:	42ab      	cmp	r3, r5
 8006c40:	dcf2      	bgt.n	8006c28 <_printf_i+0x1e8>
 8006c42:	e7eb      	b.n	8006c1c <_printf_i+0x1dc>
 8006c44:	2500      	movs	r5, #0
 8006c46:	f104 0919 	add.w	r9, r4, #25
 8006c4a:	e7f5      	b.n	8006c38 <_printf_i+0x1f8>
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d1ac      	bne.n	8006baa <_printf_i+0x16a>
 8006c50:	7803      	ldrb	r3, [r0, #0]
 8006c52:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c56:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c5a:	e76c      	b.n	8006b36 <_printf_i+0xf6>
 8006c5c:	08006f59 	.word	0x08006f59
 8006c60:	08006f6a 	.word	0x08006f6a

08006c64 <_sbrk_r>:
 8006c64:	b538      	push	{r3, r4, r5, lr}
 8006c66:	2300      	movs	r3, #0
 8006c68:	4c05      	ldr	r4, [pc, #20]	; (8006c80 <_sbrk_r+0x1c>)
 8006c6a:	4605      	mov	r5, r0
 8006c6c:	4608      	mov	r0, r1
 8006c6e:	6023      	str	r3, [r4, #0]
 8006c70:	f7f9 ff88 	bl	8000b84 <_sbrk>
 8006c74:	1c43      	adds	r3, r0, #1
 8006c76:	d102      	bne.n	8006c7e <_sbrk_r+0x1a>
 8006c78:	6823      	ldr	r3, [r4, #0]
 8006c7a:	b103      	cbz	r3, 8006c7e <_sbrk_r+0x1a>
 8006c7c:	602b      	str	r3, [r5, #0]
 8006c7e:	bd38      	pop	{r3, r4, r5, pc}
 8006c80:	20001c8c 	.word	0x20001c8c

08006c84 <__sread>:
 8006c84:	b510      	push	{r4, lr}
 8006c86:	460c      	mov	r4, r1
 8006c88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c8c:	f000 f8a4 	bl	8006dd8 <_read_r>
 8006c90:	2800      	cmp	r0, #0
 8006c92:	bfab      	itete	ge
 8006c94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006c96:	89a3      	ldrhlt	r3, [r4, #12]
 8006c98:	181b      	addge	r3, r3, r0
 8006c9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006c9e:	bfac      	ite	ge
 8006ca0:	6563      	strge	r3, [r4, #84]	; 0x54
 8006ca2:	81a3      	strhlt	r3, [r4, #12]
 8006ca4:	bd10      	pop	{r4, pc}

08006ca6 <__swrite>:
 8006ca6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006caa:	461f      	mov	r7, r3
 8006cac:	898b      	ldrh	r3, [r1, #12]
 8006cae:	4605      	mov	r5, r0
 8006cb0:	05db      	lsls	r3, r3, #23
 8006cb2:	460c      	mov	r4, r1
 8006cb4:	4616      	mov	r6, r2
 8006cb6:	d505      	bpl.n	8006cc4 <__swrite+0x1e>
 8006cb8:	2302      	movs	r3, #2
 8006cba:	2200      	movs	r2, #0
 8006cbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cc0:	f000 f868 	bl	8006d94 <_lseek_r>
 8006cc4:	89a3      	ldrh	r3, [r4, #12]
 8006cc6:	4632      	mov	r2, r6
 8006cc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ccc:	81a3      	strh	r3, [r4, #12]
 8006cce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006cd2:	463b      	mov	r3, r7
 8006cd4:	4628      	mov	r0, r5
 8006cd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006cda:	f000 b817 	b.w	8006d0c <_write_r>

08006cde <__sseek>:
 8006cde:	b510      	push	{r4, lr}
 8006ce0:	460c      	mov	r4, r1
 8006ce2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ce6:	f000 f855 	bl	8006d94 <_lseek_r>
 8006cea:	1c43      	adds	r3, r0, #1
 8006cec:	89a3      	ldrh	r3, [r4, #12]
 8006cee:	bf15      	itete	ne
 8006cf0:	6560      	strne	r0, [r4, #84]	; 0x54
 8006cf2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006cf6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006cfa:	81a3      	strheq	r3, [r4, #12]
 8006cfc:	bf18      	it	ne
 8006cfe:	81a3      	strhne	r3, [r4, #12]
 8006d00:	bd10      	pop	{r4, pc}

08006d02 <__sclose>:
 8006d02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d06:	f000 b813 	b.w	8006d30 <_close_r>
	...

08006d0c <_write_r>:
 8006d0c:	b538      	push	{r3, r4, r5, lr}
 8006d0e:	4605      	mov	r5, r0
 8006d10:	4608      	mov	r0, r1
 8006d12:	4611      	mov	r1, r2
 8006d14:	2200      	movs	r2, #0
 8006d16:	4c05      	ldr	r4, [pc, #20]	; (8006d2c <_write_r+0x20>)
 8006d18:	6022      	str	r2, [r4, #0]
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	f7f9 fdda 	bl	80008d4 <_write>
 8006d20:	1c43      	adds	r3, r0, #1
 8006d22:	d102      	bne.n	8006d2a <_write_r+0x1e>
 8006d24:	6823      	ldr	r3, [r4, #0]
 8006d26:	b103      	cbz	r3, 8006d2a <_write_r+0x1e>
 8006d28:	602b      	str	r3, [r5, #0]
 8006d2a:	bd38      	pop	{r3, r4, r5, pc}
 8006d2c:	20001c8c 	.word	0x20001c8c

08006d30 <_close_r>:
 8006d30:	b538      	push	{r3, r4, r5, lr}
 8006d32:	2300      	movs	r3, #0
 8006d34:	4c05      	ldr	r4, [pc, #20]	; (8006d4c <_close_r+0x1c>)
 8006d36:	4605      	mov	r5, r0
 8006d38:	4608      	mov	r0, r1
 8006d3a:	6023      	str	r3, [r4, #0]
 8006d3c:	f7f9 fef1 	bl	8000b22 <_close>
 8006d40:	1c43      	adds	r3, r0, #1
 8006d42:	d102      	bne.n	8006d4a <_close_r+0x1a>
 8006d44:	6823      	ldr	r3, [r4, #0]
 8006d46:	b103      	cbz	r3, 8006d4a <_close_r+0x1a>
 8006d48:	602b      	str	r3, [r5, #0]
 8006d4a:	bd38      	pop	{r3, r4, r5, pc}
 8006d4c:	20001c8c 	.word	0x20001c8c

08006d50 <_fstat_r>:
 8006d50:	b538      	push	{r3, r4, r5, lr}
 8006d52:	2300      	movs	r3, #0
 8006d54:	4c06      	ldr	r4, [pc, #24]	; (8006d70 <_fstat_r+0x20>)
 8006d56:	4605      	mov	r5, r0
 8006d58:	4608      	mov	r0, r1
 8006d5a:	4611      	mov	r1, r2
 8006d5c:	6023      	str	r3, [r4, #0]
 8006d5e:	f7f9 feeb 	bl	8000b38 <_fstat>
 8006d62:	1c43      	adds	r3, r0, #1
 8006d64:	d102      	bne.n	8006d6c <_fstat_r+0x1c>
 8006d66:	6823      	ldr	r3, [r4, #0]
 8006d68:	b103      	cbz	r3, 8006d6c <_fstat_r+0x1c>
 8006d6a:	602b      	str	r3, [r5, #0]
 8006d6c:	bd38      	pop	{r3, r4, r5, pc}
 8006d6e:	bf00      	nop
 8006d70:	20001c8c 	.word	0x20001c8c

08006d74 <_isatty_r>:
 8006d74:	b538      	push	{r3, r4, r5, lr}
 8006d76:	2300      	movs	r3, #0
 8006d78:	4c05      	ldr	r4, [pc, #20]	; (8006d90 <_isatty_r+0x1c>)
 8006d7a:	4605      	mov	r5, r0
 8006d7c:	4608      	mov	r0, r1
 8006d7e:	6023      	str	r3, [r4, #0]
 8006d80:	f7f9 fee9 	bl	8000b56 <_isatty>
 8006d84:	1c43      	adds	r3, r0, #1
 8006d86:	d102      	bne.n	8006d8e <_isatty_r+0x1a>
 8006d88:	6823      	ldr	r3, [r4, #0]
 8006d8a:	b103      	cbz	r3, 8006d8e <_isatty_r+0x1a>
 8006d8c:	602b      	str	r3, [r5, #0]
 8006d8e:	bd38      	pop	{r3, r4, r5, pc}
 8006d90:	20001c8c 	.word	0x20001c8c

08006d94 <_lseek_r>:
 8006d94:	b538      	push	{r3, r4, r5, lr}
 8006d96:	4605      	mov	r5, r0
 8006d98:	4608      	mov	r0, r1
 8006d9a:	4611      	mov	r1, r2
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	4c05      	ldr	r4, [pc, #20]	; (8006db4 <_lseek_r+0x20>)
 8006da0:	6022      	str	r2, [r4, #0]
 8006da2:	461a      	mov	r2, r3
 8006da4:	f7f9 fee1 	bl	8000b6a <_lseek>
 8006da8:	1c43      	adds	r3, r0, #1
 8006daa:	d102      	bne.n	8006db2 <_lseek_r+0x1e>
 8006dac:	6823      	ldr	r3, [r4, #0]
 8006dae:	b103      	cbz	r3, 8006db2 <_lseek_r+0x1e>
 8006db0:	602b      	str	r3, [r5, #0]
 8006db2:	bd38      	pop	{r3, r4, r5, pc}
 8006db4:	20001c8c 	.word	0x20001c8c

08006db8 <memchr>:
 8006db8:	b510      	push	{r4, lr}
 8006dba:	b2c9      	uxtb	r1, r1
 8006dbc:	4402      	add	r2, r0
 8006dbe:	4290      	cmp	r0, r2
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	d101      	bne.n	8006dc8 <memchr+0x10>
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	e003      	b.n	8006dd0 <memchr+0x18>
 8006dc8:	781c      	ldrb	r4, [r3, #0]
 8006dca:	3001      	adds	r0, #1
 8006dcc:	428c      	cmp	r4, r1
 8006dce:	d1f6      	bne.n	8006dbe <memchr+0x6>
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	bd10      	pop	{r4, pc}

08006dd4 <__malloc_lock>:
 8006dd4:	4770      	bx	lr

08006dd6 <__malloc_unlock>:
 8006dd6:	4770      	bx	lr

08006dd8 <_read_r>:
 8006dd8:	b538      	push	{r3, r4, r5, lr}
 8006dda:	4605      	mov	r5, r0
 8006ddc:	4608      	mov	r0, r1
 8006dde:	4611      	mov	r1, r2
 8006de0:	2200      	movs	r2, #0
 8006de2:	4c05      	ldr	r4, [pc, #20]	; (8006df8 <_read_r+0x20>)
 8006de4:	6022      	str	r2, [r4, #0]
 8006de6:	461a      	mov	r2, r3
 8006de8:	f7f9 fe7e 	bl	8000ae8 <_read>
 8006dec:	1c43      	adds	r3, r0, #1
 8006dee:	d102      	bne.n	8006df6 <_read_r+0x1e>
 8006df0:	6823      	ldr	r3, [r4, #0]
 8006df2:	b103      	cbz	r3, 8006df6 <_read_r+0x1e>
 8006df4:	602b      	str	r3, [r5, #0]
 8006df6:	bd38      	pop	{r3, r4, r5, pc}
 8006df8:	20001c8c 	.word	0x20001c8c

08006dfc <_init>:
 8006dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dfe:	bf00      	nop
 8006e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e02:	bc08      	pop	{r3}
 8006e04:	469e      	mov	lr, r3
 8006e06:	4770      	bx	lr

08006e08 <_fini>:
 8006e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e0a:	bf00      	nop
 8006e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e0e:	bc08      	pop	{r3}
 8006e10:	469e      	mov	lr, r3
 8006e12:	4770      	bx	lr
