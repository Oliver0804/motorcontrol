
Curtain_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007820  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000370  08007930  08007930  00017930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ca0  08007ca0  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08007ca0  08007ca0  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007ca0  08007ca0  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ca0  08007ca0  00017ca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ca4  08007ca4  00017ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08007ca8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d38  2000007c  08007d24  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001db4  08007d24  00021db4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bda6  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003ca9  00000000  00000000  0003be4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001630  00000000  00000000  0003faf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001458  00000000  00000000  00041128  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018765  00000000  00000000  00042580  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001334d  00000000  00000000  0005ace5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00081ee3  00000000  00000000  0006e032  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000eff15  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006240  00000000  00000000  000eff90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000007c 	.word	0x2000007c
 800012c:	00000000 	.word	0x00000000
 8000130:	08007918 	.word	0x08007918

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000080 	.word	0x20000080
 800014c:	08007918 	.word	0x08007918

08000150 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b084      	sub	sp, #16
 8000154:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000156:	1d3b      	adds	r3, r7, #4
 8000158:	2200      	movs	r2, #0
 800015a:	601a      	str	r2, [r3, #0]
 800015c:	605a      	str	r2, [r3, #4]
 800015e:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000160:	4b20      	ldr	r3, [pc, #128]	; (80001e4 <MX_ADC1_Init+0x94>)
 8000162:	4a21      	ldr	r2, [pc, #132]	; (80001e8 <MX_ADC1_Init+0x98>)
 8000164:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000166:	4b1f      	ldr	r3, [pc, #124]	; (80001e4 <MX_ADC1_Init+0x94>)
 8000168:	f44f 7280 	mov.w	r2, #256	; 0x100
 800016c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800016e:	4b1d      	ldr	r3, [pc, #116]	; (80001e4 <MX_ADC1_Init+0x94>)
 8000170:	2201      	movs	r2, #1
 8000172:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000174:	4b1b      	ldr	r3, [pc, #108]	; (80001e4 <MX_ADC1_Init+0x94>)
 8000176:	2200      	movs	r2, #0
 8000178:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800017a:	4b1a      	ldr	r3, [pc, #104]	; (80001e4 <MX_ADC1_Init+0x94>)
 800017c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000180:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000182:	4b18      	ldr	r3, [pc, #96]	; (80001e4 <MX_ADC1_Init+0x94>)
 8000184:	2200      	movs	r2, #0
 8000186:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000188:	4b16      	ldr	r3, [pc, #88]	; (80001e4 <MX_ADC1_Init+0x94>)
 800018a:	2202      	movs	r2, #2
 800018c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800018e:	4815      	ldr	r0, [pc, #84]	; (80001e4 <MX_ADC1_Init+0x94>)
 8000190:	f001 f8d2 	bl	8001338 <HAL_ADC_Init>
 8000194:	4603      	mov	r3, r0
 8000196:	2b00      	cmp	r3, #0
 8000198:	d001      	beq.n	800019e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800019a:	f000 fd1c 	bl	8000bd6 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800019e:	2307      	movs	r3, #7
 80001a0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80001a2:	2301      	movs	r3, #1
 80001a4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80001a6:	2300      	movs	r3, #0
 80001a8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001aa:	1d3b      	adds	r3, r7, #4
 80001ac:	4619      	mov	r1, r3
 80001ae:	480d      	ldr	r0, [pc, #52]	; (80001e4 <MX_ADC1_Init+0x94>)
 80001b0:	f001 fa94 	bl	80016dc <HAL_ADC_ConfigChannel>
 80001b4:	4603      	mov	r3, r0
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d001      	beq.n	80001be <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80001ba:	f000 fd0c 	bl	8000bd6 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80001be:	2308      	movs	r3, #8
 80001c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80001c2:	2302      	movs	r3, #2
 80001c4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001c6:	1d3b      	adds	r3, r7, #4
 80001c8:	4619      	mov	r1, r3
 80001ca:	4806      	ldr	r0, [pc, #24]	; (80001e4 <MX_ADC1_Init+0x94>)
 80001cc:	f001 fa86 	bl	80016dc <HAL_ADC_ConfigChannel>
 80001d0:	4603      	mov	r3, r0
 80001d2:	2b00      	cmp	r3, #0
 80001d4:	d001      	beq.n	80001da <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80001d6:	f000 fcfe 	bl	8000bd6 <Error_Handler>
  }

}
 80001da:	bf00      	nop
 80001dc:	3710      	adds	r7, #16
 80001de:	46bd      	mov	sp, r7
 80001e0:	bd80      	pop	{r7, pc}
 80001e2:	bf00      	nop
 80001e4:	200019e0 	.word	0x200019e0
 80001e8:	40012400 	.word	0x40012400

080001ec <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b08a      	sub	sp, #40	; 0x28
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001f4:	f107 0318 	add.w	r3, r7, #24
 80001f8:	2200      	movs	r2, #0
 80001fa:	601a      	str	r2, [r3, #0]
 80001fc:	605a      	str	r2, [r3, #4]
 80001fe:	609a      	str	r2, [r3, #8]
 8000200:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	4a33      	ldr	r2, [pc, #204]	; (80002d4 <HAL_ADC_MspInit+0xe8>)
 8000208:	4293      	cmp	r3, r2
 800020a:	d15f      	bne.n	80002cc <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800020c:	4b32      	ldr	r3, [pc, #200]	; (80002d8 <HAL_ADC_MspInit+0xec>)
 800020e:	699b      	ldr	r3, [r3, #24]
 8000210:	4a31      	ldr	r2, [pc, #196]	; (80002d8 <HAL_ADC_MspInit+0xec>)
 8000212:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000216:	6193      	str	r3, [r2, #24]
 8000218:	4b2f      	ldr	r3, [pc, #188]	; (80002d8 <HAL_ADC_MspInit+0xec>)
 800021a:	699b      	ldr	r3, [r3, #24]
 800021c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000220:	617b      	str	r3, [r7, #20]
 8000222:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000224:	4b2c      	ldr	r3, [pc, #176]	; (80002d8 <HAL_ADC_MspInit+0xec>)
 8000226:	699b      	ldr	r3, [r3, #24]
 8000228:	4a2b      	ldr	r2, [pc, #172]	; (80002d8 <HAL_ADC_MspInit+0xec>)
 800022a:	f043 0304 	orr.w	r3, r3, #4
 800022e:	6193      	str	r3, [r2, #24]
 8000230:	4b29      	ldr	r3, [pc, #164]	; (80002d8 <HAL_ADC_MspInit+0xec>)
 8000232:	699b      	ldr	r3, [r3, #24]
 8000234:	f003 0304 	and.w	r3, r3, #4
 8000238:	613b      	str	r3, [r7, #16]
 800023a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800023c:	4b26      	ldr	r3, [pc, #152]	; (80002d8 <HAL_ADC_MspInit+0xec>)
 800023e:	699b      	ldr	r3, [r3, #24]
 8000240:	4a25      	ldr	r2, [pc, #148]	; (80002d8 <HAL_ADC_MspInit+0xec>)
 8000242:	f043 0308 	orr.w	r3, r3, #8
 8000246:	6193      	str	r3, [r2, #24]
 8000248:	4b23      	ldr	r3, [pc, #140]	; (80002d8 <HAL_ADC_MspInit+0xec>)
 800024a:	699b      	ldr	r3, [r3, #24]
 800024c:	f003 0308 	and.w	r3, r3, #8
 8000250:	60fb      	str	r3, [r7, #12]
 8000252:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = ADC1_Pin;
 8000254:	2380      	movs	r3, #128	; 0x80
 8000256:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000258:	2303      	movs	r3, #3
 800025a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_GPIO_Port, &GPIO_InitStruct);
 800025c:	f107 0318 	add.w	r3, r7, #24
 8000260:	4619      	mov	r1, r3
 8000262:	481e      	ldr	r0, [pc, #120]	; (80002dc <HAL_ADC_MspInit+0xf0>)
 8000264:	f001 ff96 	bl	8002194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC2_Pin;
 8000268:	2301      	movs	r3, #1
 800026a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800026c:	2303      	movs	r3, #3
 800026e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC2_GPIO_Port, &GPIO_InitStruct);
 8000270:	f107 0318 	add.w	r3, r7, #24
 8000274:	4619      	mov	r1, r3
 8000276:	481a      	ldr	r0, [pc, #104]	; (80002e0 <HAL_ADC_MspInit+0xf4>)
 8000278:	f001 ff8c 	bl	8002194 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800027c:	4b19      	ldr	r3, [pc, #100]	; (80002e4 <HAL_ADC_MspInit+0xf8>)
 800027e:	4a1a      	ldr	r2, [pc, #104]	; (80002e8 <HAL_ADC_MspInit+0xfc>)
 8000280:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000282:	4b18      	ldr	r3, [pc, #96]	; (80002e4 <HAL_ADC_MspInit+0xf8>)
 8000284:	2200      	movs	r2, #0
 8000286:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000288:	4b16      	ldr	r3, [pc, #88]	; (80002e4 <HAL_ADC_MspInit+0xf8>)
 800028a:	2200      	movs	r2, #0
 800028c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800028e:	4b15      	ldr	r3, [pc, #84]	; (80002e4 <HAL_ADC_MspInit+0xf8>)
 8000290:	2280      	movs	r2, #128	; 0x80
 8000292:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000294:	4b13      	ldr	r3, [pc, #76]	; (80002e4 <HAL_ADC_MspInit+0xf8>)
 8000296:	f44f 7200 	mov.w	r2, #512	; 0x200
 800029a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800029c:	4b11      	ldr	r3, [pc, #68]	; (80002e4 <HAL_ADC_MspInit+0xf8>)
 800029e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80002a2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80002a4:	4b0f      	ldr	r3, [pc, #60]	; (80002e4 <HAL_ADC_MspInit+0xf8>)
 80002a6:	2220      	movs	r2, #32
 80002a8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80002aa:	4b0e      	ldr	r3, [pc, #56]	; (80002e4 <HAL_ADC_MspInit+0xf8>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80002b0:	480c      	ldr	r0, [pc, #48]	; (80002e4 <HAL_ADC_MspInit+0xf8>)
 80002b2:	f001 fd0b 	bl	8001ccc <HAL_DMA_Init>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d001      	beq.n	80002c0 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 80002bc:	f000 fc8b 	bl	8000bd6 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	4a08      	ldr	r2, [pc, #32]	; (80002e4 <HAL_ADC_MspInit+0xf8>)
 80002c4:	621a      	str	r2, [r3, #32]
 80002c6:	4a07      	ldr	r2, [pc, #28]	; (80002e4 <HAL_ADC_MspInit+0xf8>)
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80002cc:	bf00      	nop
 80002ce:	3728      	adds	r7, #40	; 0x28
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	40012400 	.word	0x40012400
 80002d8:	40021000 	.word	0x40021000
 80002dc:	40010800 	.word	0x40010800
 80002e0:	40010c00 	.word	0x40010c00
 80002e4:	20001a10 	.word	0x20001a10
 80002e8:	40020008 	.word	0x40020008

080002ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b082      	sub	sp, #8
 80002f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002f2:	4b14      	ldr	r3, [pc, #80]	; (8000344 <MX_DMA_Init+0x58>)
 80002f4:	695b      	ldr	r3, [r3, #20]
 80002f6:	4a13      	ldr	r2, [pc, #76]	; (8000344 <MX_DMA_Init+0x58>)
 80002f8:	f043 0301 	orr.w	r3, r3, #1
 80002fc:	6153      	str	r3, [r2, #20]
 80002fe:	4b11      	ldr	r3, [pc, #68]	; (8000344 <MX_DMA_Init+0x58>)
 8000300:	695b      	ldr	r3, [r3, #20]
 8000302:	f003 0301 	and.w	r3, r3, #1
 8000306:	607b      	str	r3, [r7, #4]
 8000308:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800030a:	2200      	movs	r2, #0
 800030c:	2100      	movs	r1, #0
 800030e:	200b      	movs	r0, #11
 8000310:	f001 fca5 	bl	8001c5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000314:	200b      	movs	r0, #11
 8000316:	f001 fcbe 	bl	8001c96 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800031a:	2200      	movs	r2, #0
 800031c:	2100      	movs	r1, #0
 800031e:	2010      	movs	r0, #16
 8000320:	f001 fc9d 	bl	8001c5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000324:	2010      	movs	r0, #16
 8000326:	f001 fcb6 	bl	8001c96 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800032a:	2200      	movs	r2, #0
 800032c:	2100      	movs	r1, #0
 800032e:	2011      	movs	r0, #17
 8000330:	f001 fc95 	bl	8001c5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000334:	2011      	movs	r0, #17
 8000336:	f001 fcae 	bl	8001c96 <HAL_NVIC_EnableIRQ>

}
 800033a:	bf00      	nop
 800033c:	3708      	adds	r7, #8
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	40021000 	.word	0x40021000

08000348 <Usart2DmaPrintf>:
	uint32_t temp = *(__IO uint32_t*) (addr);

	Usart2DmaPrintf("addr:0x%x, data:0x%x\r\n", addr, temp);
}

void Usart2DmaPrintf(const char *format, ...) {
 8000348:	b40f      	push	{r0, r1, r2, r3}
 800034a:	b580      	push	{r7, lr}
 800034c:	b082      	sub	sp, #8
 800034e:	af00      	add	r7, sp, #0
	uint16_t len;
	va_list args;
	va_start(args, format);
 8000350:	f107 0314 	add.w	r3, r7, #20
 8000354:	603b      	str	r3, [r7, #0]
	len = vsnprintf((char*) UartTxBuf, sizeof(UartTxBuf) + 1, (char*) format,
 8000356:	683b      	ldr	r3, [r7, #0]
 8000358:	693a      	ldr	r2, [r7, #16]
 800035a:	2165      	movs	r1, #101	; 0x65
 800035c:	480a      	ldr	r0, [pc, #40]	; (8000388 <Usart2DmaPrintf+0x40>)
 800035e:	f006 fb9b 	bl	8006a98 <vsniprintf>
 8000362:	4603      	mov	r3, r0
 8000364:	80fb      	strh	r3, [r7, #6]
			args);
	va_end(args);
	HAL_UART_Transmit_DMA(&huart2, UartTxBuf, len);
 8000366:	88fb      	ldrh	r3, [r7, #6]
 8000368:	461a      	mov	r2, r3
 800036a:	4907      	ldr	r1, [pc, #28]	; (8000388 <Usart2DmaPrintf+0x40>)
 800036c:	4807      	ldr	r0, [pc, #28]	; (800038c <Usart2DmaPrintf+0x44>)
 800036e:	f003 f949 	bl	8003604 <HAL_UART_Transmit_DMA>
	osDelay(10); //避免資料穿插
 8000372:	200a      	movs	r0, #10
 8000374:	f003 ff3c 	bl	80041f0 <osDelay>

}
 8000378:	bf00      	nop
 800037a:	3708      	adds	r7, #8
 800037c:	46bd      	mov	sp, r7
 800037e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000382:	b004      	add	sp, #16
 8000384:	4770      	bx	lr
 8000386:	bf00      	nop
 8000388:	20001c00 	.word	0x20001c00
 800038c:	20001d2c 	.word	0x20001d2c

08000390 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 800039a:	88fb      	ldrh	r3, [r7, #6]
 800039c:	2b20      	cmp	r3, #32
 800039e:	d014      	beq.n	80003ca <HAL_GPIO_EXTI_Callback+0x3a>
 80003a0:	2b20      	cmp	r3, #32
 80003a2:	dc02      	bgt.n	80003aa <HAL_GPIO_EXTI_Callback+0x1a>
 80003a4:	2b10      	cmp	r3, #16
 80003a6:	d005      	beq.n	80003b4 <HAL_GPIO_EXTI_Callback+0x24>
	case GPIO_PIN_7:
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); //PC13 Led
		buttom_flag[4]++;
		break;
	}
}
 80003a8:	e030      	b.n	800040c <HAL_GPIO_EXTI_Callback+0x7c>
	switch (GPIO_Pin) {
 80003aa:	2b40      	cmp	r3, #64	; 0x40
 80003ac:	d018      	beq.n	80003e0 <HAL_GPIO_EXTI_Callback+0x50>
 80003ae:	2b80      	cmp	r3, #128	; 0x80
 80003b0:	d021      	beq.n	80003f6 <HAL_GPIO_EXTI_Callback+0x66>
}
 80003b2:	e02b      	b.n	800040c <HAL_GPIO_EXTI_Callback+0x7c>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); //PC13 Led
 80003b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003b8:	4816      	ldr	r0, [pc, #88]	; (8000414 <HAL_GPIO_EXTI_Callback+0x84>)
 80003ba:	f002 f85d 	bl	8002478 <HAL_GPIO_TogglePin>
		buttom_flag[1]++;
 80003be:	4b16      	ldr	r3, [pc, #88]	; (8000418 <HAL_GPIO_EXTI_Callback+0x88>)
 80003c0:	685b      	ldr	r3, [r3, #4]
 80003c2:	3301      	adds	r3, #1
 80003c4:	4a14      	ldr	r2, [pc, #80]	; (8000418 <HAL_GPIO_EXTI_Callback+0x88>)
 80003c6:	6053      	str	r3, [r2, #4]
		break;
 80003c8:	e020      	b.n	800040c <HAL_GPIO_EXTI_Callback+0x7c>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); //PC13 Led
 80003ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003ce:	4811      	ldr	r0, [pc, #68]	; (8000414 <HAL_GPIO_EXTI_Callback+0x84>)
 80003d0:	f002 f852 	bl	8002478 <HAL_GPIO_TogglePin>
		buttom_flag[2]++;
 80003d4:	4b10      	ldr	r3, [pc, #64]	; (8000418 <HAL_GPIO_EXTI_Callback+0x88>)
 80003d6:	689b      	ldr	r3, [r3, #8]
 80003d8:	3301      	adds	r3, #1
 80003da:	4a0f      	ldr	r2, [pc, #60]	; (8000418 <HAL_GPIO_EXTI_Callback+0x88>)
 80003dc:	6093      	str	r3, [r2, #8]
		break;
 80003de:	e015      	b.n	800040c <HAL_GPIO_EXTI_Callback+0x7c>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); //PC13 Led
 80003e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003e4:	480b      	ldr	r0, [pc, #44]	; (8000414 <HAL_GPIO_EXTI_Callback+0x84>)
 80003e6:	f002 f847 	bl	8002478 <HAL_GPIO_TogglePin>
		buttom_flag[3]++;
 80003ea:	4b0b      	ldr	r3, [pc, #44]	; (8000418 <HAL_GPIO_EXTI_Callback+0x88>)
 80003ec:	68db      	ldr	r3, [r3, #12]
 80003ee:	3301      	adds	r3, #1
 80003f0:	4a09      	ldr	r2, [pc, #36]	; (8000418 <HAL_GPIO_EXTI_Callback+0x88>)
 80003f2:	60d3      	str	r3, [r2, #12]
		break;
 80003f4:	e00a      	b.n	800040c <HAL_GPIO_EXTI_Callback+0x7c>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); //PC13 Led
 80003f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003fa:	4806      	ldr	r0, [pc, #24]	; (8000414 <HAL_GPIO_EXTI_Callback+0x84>)
 80003fc:	f002 f83c 	bl	8002478 <HAL_GPIO_TogglePin>
		buttom_flag[4]++;
 8000400:	4b05      	ldr	r3, [pc, #20]	; (8000418 <HAL_GPIO_EXTI_Callback+0x88>)
 8000402:	691b      	ldr	r3, [r3, #16]
 8000404:	3301      	adds	r3, #1
 8000406:	4a04      	ldr	r2, [pc, #16]	; (8000418 <HAL_GPIO_EXTI_Callback+0x88>)
 8000408:	6113      	str	r3, [r2, #16]
		break;
 800040a:	bf00      	nop
}
 800040c:	bf00      	nop
 800040e:	3708      	adds	r7, #8
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	40011000 	.word	0x40011000
 8000418:	200000a4 	.word	0x200000a4

0800041c <zheng_zhuan>:
	for (i = 0; i <= 5; i++) { //clean flag
		buttom_flag[i] = 0;
	}
}

void zheng_zhuan(void) {
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_DMA(&huart2, "zheng_zhuan\n",
 8000420:	220c      	movs	r2, #12
 8000422:	4909      	ldr	r1, [pc, #36]	; (8000448 <zheng_zhuan+0x2c>)
 8000424:	4809      	ldr	r0, [pc, #36]	; (800044c <zheng_zhuan+0x30>)
 8000426:	f003 f8ed 	bl	8003604 <HAL_UART_Transmit_DMA>
			sizeof("zheng_zhuan\n") - 1);
	HAL_GPIO_WritePin(MC_1_GPIO_Port, MC_1_Pin, GPIO_PIN_RESET);
 800042a:	2200      	movs	r2, #0
 800042c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000430:	4807      	ldr	r0, [pc, #28]	; (8000450 <zheng_zhuan+0x34>)
 8000432:	f002 f809 	bl	8002448 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MC_2_GPIO_Port, MC_2_Pin, GPIO_PIN_SET);
 8000436:	2201      	movs	r2, #1
 8000438:	f44f 7180 	mov.w	r1, #256	; 0x100
 800043c:	4804      	ldr	r0, [pc, #16]	; (8000450 <zheng_zhuan+0x34>)
 800043e:	f002 f803 	bl	8002448 <HAL_GPIO_WritePin>
}
 8000442:	bf00      	nop
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	08007988 	.word	0x08007988
 800044c:	20001d2c 	.word	0x20001d2c
 8000450:	40010800 	.word	0x40010800

08000454 <fan_zhuan>:
void fan_zhuan(void) {
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_DMA(&huart2, "fan_zhuan\n", sizeof("fan_zhuan\n") - 1);
 8000458:	220a      	movs	r2, #10
 800045a:	4909      	ldr	r1, [pc, #36]	; (8000480 <fan_zhuan+0x2c>)
 800045c:	4809      	ldr	r0, [pc, #36]	; (8000484 <fan_zhuan+0x30>)
 800045e:	f003 f8d1 	bl	8003604 <HAL_UART_Transmit_DMA>
	HAL_GPIO_WritePin(MC_1_GPIO_Port, MC_1_Pin, GPIO_PIN_SET);
 8000462:	2201      	movs	r2, #1
 8000464:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000468:	4807      	ldr	r0, [pc, #28]	; (8000488 <fan_zhuan+0x34>)
 800046a:	f001 ffed 	bl	8002448 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MC_2_GPIO_Port, MC_2_Pin, GPIO_PIN_RESET);
 800046e:	2200      	movs	r2, #0
 8000470:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000474:	4804      	ldr	r0, [pc, #16]	; (8000488 <fan_zhuan+0x34>)
 8000476:	f001 ffe7 	bl	8002448 <HAL_GPIO_WritePin>
}
 800047a:	bf00      	nop
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	08007998 	.word	0x08007998
 8000484:	20001d2c 	.word	0x20001d2c
 8000488:	40010800 	.word	0x40010800

0800048c <stop_motor>:
	stop_motor();
	zheng_zhuan();
	stop_motor();
	clean_buttom_flag();
}
void stop_motor(void) {
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_DMA(&huart2, "stop_motor\n", sizeof("stop_motor\n") - 1);
 8000490:	220b      	movs	r2, #11
 8000492:	490d      	ldr	r1, [pc, #52]	; (80004c8 <stop_motor+0x3c>)
 8000494:	480d      	ldr	r0, [pc, #52]	; (80004cc <stop_motor+0x40>)
 8000496:	f003 f8b5 	bl	8003604 <HAL_UART_Transmit_DMA>
	HAL_GPIO_WritePin(MC_1_GPIO_Port, MC_1_Pin, GPIO_PIN_RESET);
 800049a:	2200      	movs	r2, #0
 800049c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004a0:	480b      	ldr	r0, [pc, #44]	; (80004d0 <stop_motor+0x44>)
 80004a2:	f001 ffd1 	bl	8002448 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MC_2_GPIO_Port, MC_2_Pin, GPIO_PIN_RESET);
 80004a6:	2200      	movs	r2, #0
 80004a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004ac:	4808      	ldr	r0, [pc, #32]	; (80004d0 <stop_motor+0x44>)
 80004ae:	f001 ffcb 	bl	8002448 <HAL_GPIO_WritePin>
	user_pwm_setvalue_1(0);
 80004b2:	2000      	movs	r0, #0
 80004b4:	f000 fda8 	bl	8001008 <user_pwm_setvalue_1>
	user_pwm_setvalue_2(0);
 80004b8:	2000      	movs	r0, #0
 80004ba:	f000 fdc3 	bl	8001044 <user_pwm_setvalue_2>
	osDelay(100);
 80004be:	2064      	movs	r0, #100	; 0x64
 80004c0:	f003 fe96 	bl	80041f0 <osDelay>
}
 80004c4:	bf00      	nop
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	080079c0 	.word	0x080079c0
 80004cc:	20001d2c 	.word	0x20001d2c
 80004d0:	40010800 	.word	0x40010800

080004d4 <turn_on_motor>:
	HAL_GPIO_WritePin(MC_1_GPIO_Port, MC_1_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(MC_2_GPIO_Port, MC_2_Pin, GPIO_PIN_SET);
	user_pwm_setvalue_1(0);
	user_pwm_setvalue_2(0);
}
void turn_on_motor(int slow_time, int time, int slow_pwm, int pwm) {
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b086      	sub	sp, #24
 80004d8:	af02      	add	r7, sp, #8
 80004da:	60f8      	str	r0, [r7, #12]
 80004dc:	60b9      	str	r1, [r7, #8]
 80004de:	607a      	str	r2, [r7, #4]
 80004e0:	603b      	str	r3, [r7, #0]
	zheng_zhuan();
 80004e2:	f7ff ff9b 	bl	800041c <zheng_zhuan>
	smoothPWM(1, 0, slow_pwm, 10, slow_time);
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	9300      	str	r3, [sp, #0]
 80004ea:	230a      	movs	r3, #10
 80004ec:	687a      	ldr	r2, [r7, #4]
 80004ee:	2100      	movs	r1, #0
 80004f0:	2001      	movs	r0, #1
 80004f2:	f000 f847 	bl	8000584 <smoothPWM>
	//user_pwm_setvalue_1(slow_pwm);
	user_pwm_setvalue_1(pwm);
 80004f6:	683b      	ldr	r3, [r7, #0]
 80004f8:	b29b      	uxth	r3, r3
 80004fa:	4618      	mov	r0, r3
 80004fc:	f000 fd84 	bl	8001008 <user_pwm_setvalue_1>
	osDelay(time);
 8000500:	68bb      	ldr	r3, [r7, #8]
 8000502:	4618      	mov	r0, r3
 8000504:	f003 fe74 	bl	80041f0 <osDelay>
	smoothPWM(1, slow_pwm, 0, 10, slow_time);
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	9300      	str	r3, [sp, #0]
 800050c:	230a      	movs	r3, #10
 800050e:	2200      	movs	r2, #0
 8000510:	6879      	ldr	r1, [r7, #4]
 8000512:	2001      	movs	r0, #1
 8000514:	f000 f836 	bl	8000584 <smoothPWM>
	//user_pwm_setvalue_1(slow_pwm);
	osDelay(slow_time);
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	4618      	mov	r0, r3
 800051c:	f003 fe68 	bl	80041f0 <osDelay>
	stop_motor();
 8000520:	f7ff ffb4 	bl	800048c <stop_motor>

}
 8000524:	bf00      	nop
 8000526:	3710      	adds	r7, #16
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}

0800052c <turn_off_motor>:

void turn_off_motor(int slow_time, int time, int slow_pwm, int pwm) {
 800052c:	b580      	push	{r7, lr}
 800052e:	b086      	sub	sp, #24
 8000530:	af02      	add	r7, sp, #8
 8000532:	60f8      	str	r0, [r7, #12]
 8000534:	60b9      	str	r1, [r7, #8]
 8000536:	607a      	str	r2, [r7, #4]
 8000538:	603b      	str	r3, [r7, #0]
	fan_zhuan();
 800053a:	f7ff ff8b 	bl	8000454 <fan_zhuan>
	smoothPWM(2, 0, slow_pwm, 10, slow_time);
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	9300      	str	r3, [sp, #0]
 8000542:	230a      	movs	r3, #10
 8000544:	687a      	ldr	r2, [r7, #4]
 8000546:	2100      	movs	r1, #0
 8000548:	2002      	movs	r0, #2
 800054a:	f000 f81b 	bl	8000584 <smoothPWM>
	//user_pwm_setvalue_2(slow_pwm);
	user_pwm_setvalue_2(pwm);
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	b29b      	uxth	r3, r3
 8000552:	4618      	mov	r0, r3
 8000554:	f000 fd76 	bl	8001044 <user_pwm_setvalue_2>
	osDelay(time);
 8000558:	68bb      	ldr	r3, [r7, #8]
 800055a:	4618      	mov	r0, r3
 800055c:	f003 fe48 	bl	80041f0 <osDelay>
	smoothPWM(2, slow_pwm, 0, 10, slow_time);
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	9300      	str	r3, [sp, #0]
 8000564:	230a      	movs	r3, #10
 8000566:	2200      	movs	r2, #0
 8000568:	6879      	ldr	r1, [r7, #4]
 800056a:	2002      	movs	r0, #2
 800056c:	f000 f80a 	bl	8000584 <smoothPWM>
	//user_pwm_setvalue_2(slow_pwm);
	osDelay(slow_time);
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	4618      	mov	r0, r3
 8000574:	f003 fe3c 	bl	80041f0 <osDelay>
	stop_motor();
 8000578:	f7ff ff88 	bl	800048c <stop_motor>

}
 800057c:	bf00      	nop
 800057e:	3710      	adds	r7, #16
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}

08000584 <smoothPWM>:

void smoothPWM(int channel, int start_val, int end_val, int step_size,
		int step_time) {
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	60f8      	str	r0, [r7, #12]
 800058c:	60b9      	str	r1, [r7, #8]
 800058e:	607a      	str	r2, [r7, #4]
 8000590:	603b      	str	r3, [r7, #0]
	switch (channel) {
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	2b01      	cmp	r3, #1
 8000596:	d002      	beq.n	800059e <smoothPWM+0x1a>
 8000598:	2b02      	cmp	r3, #2
 800059a:	d029      	beq.n	80005f0 <smoothPWM+0x6c>
				start_val = start_val - step_size;
			}
		}
		break;
	default:
		break;
 800059c:	e051      	b.n	8000642 <smoothPWM+0xbe>
		if (start_val < end_val) {
 800059e:	68ba      	ldr	r2, [r7, #8]
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	429a      	cmp	r2, r3
 80005a4:	da1f      	bge.n	80005e6 <smoothPWM+0x62>
			while (start_val <= end_val) {
 80005a6:	e00c      	b.n	80005c2 <smoothPWM+0x3e>
				user_pwm_setvalue_1(start_val);
 80005a8:	68bb      	ldr	r3, [r7, #8]
 80005aa:	b29b      	uxth	r3, r3
 80005ac:	4618      	mov	r0, r3
 80005ae:	f000 fd2b 	bl	8001008 <user_pwm_setvalue_1>
				osDelay(step_time);
 80005b2:	69bb      	ldr	r3, [r7, #24]
 80005b4:	4618      	mov	r0, r3
 80005b6:	f003 fe1b 	bl	80041f0 <osDelay>
				start_val = start_val + step_size;
 80005ba:	68ba      	ldr	r2, [r7, #8]
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	4413      	add	r3, r2
 80005c0:	60bb      	str	r3, [r7, #8]
			while (start_val <= end_val) {
 80005c2:	68ba      	ldr	r2, [r7, #8]
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	429a      	cmp	r2, r3
 80005c8:	ddee      	ble.n	80005a8 <smoothPWM+0x24>
		break;
 80005ca:	e03a      	b.n	8000642 <smoothPWM+0xbe>
				user_pwm_setvalue_1(start_val);
 80005cc:	68bb      	ldr	r3, [r7, #8]
 80005ce:	b29b      	uxth	r3, r3
 80005d0:	4618      	mov	r0, r3
 80005d2:	f000 fd19 	bl	8001008 <user_pwm_setvalue_1>
				osDelay(step_time);
 80005d6:	69bb      	ldr	r3, [r7, #24]
 80005d8:	4618      	mov	r0, r3
 80005da:	f003 fe09 	bl	80041f0 <osDelay>
				start_val = start_val - step_size;
 80005de:	68ba      	ldr	r2, [r7, #8]
 80005e0:	683b      	ldr	r3, [r7, #0]
 80005e2:	1ad3      	subs	r3, r2, r3
 80005e4:	60bb      	str	r3, [r7, #8]
			while (start_val >= end_val) {
 80005e6:	68ba      	ldr	r2, [r7, #8]
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	429a      	cmp	r2, r3
 80005ec:	daee      	bge.n	80005cc <smoothPWM+0x48>
		break;
 80005ee:	e028      	b.n	8000642 <smoothPWM+0xbe>
		if (start_val < end_val) {
 80005f0:	68ba      	ldr	r2, [r7, #8]
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	429a      	cmp	r2, r3
 80005f6:	da1f      	bge.n	8000638 <smoothPWM+0xb4>
			while (start_val <= end_val) {
 80005f8:	e00c      	b.n	8000614 <smoothPWM+0x90>
				user_pwm_setvalue_2(start_val);
 80005fa:	68bb      	ldr	r3, [r7, #8]
 80005fc:	b29b      	uxth	r3, r3
 80005fe:	4618      	mov	r0, r3
 8000600:	f000 fd20 	bl	8001044 <user_pwm_setvalue_2>
				osDelay(step_time);
 8000604:	69bb      	ldr	r3, [r7, #24]
 8000606:	4618      	mov	r0, r3
 8000608:	f003 fdf2 	bl	80041f0 <osDelay>
				start_val = start_val + step_size;
 800060c:	68ba      	ldr	r2, [r7, #8]
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	4413      	add	r3, r2
 8000612:	60bb      	str	r3, [r7, #8]
			while (start_val <= end_val) {
 8000614:	68ba      	ldr	r2, [r7, #8]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	429a      	cmp	r2, r3
 800061a:	ddee      	ble.n	80005fa <smoothPWM+0x76>
		break;
 800061c:	e010      	b.n	8000640 <smoothPWM+0xbc>
				user_pwm_setvalue_2(start_val);
 800061e:	68bb      	ldr	r3, [r7, #8]
 8000620:	b29b      	uxth	r3, r3
 8000622:	4618      	mov	r0, r3
 8000624:	f000 fd0e 	bl	8001044 <user_pwm_setvalue_2>
				osDelay(step_time);
 8000628:	69bb      	ldr	r3, [r7, #24]
 800062a:	4618      	mov	r0, r3
 800062c:	f003 fde0 	bl	80041f0 <osDelay>
				start_val = start_val - step_size;
 8000630:	68ba      	ldr	r2, [r7, #8]
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	1ad3      	subs	r3, r2, r3
 8000636:	60bb      	str	r3, [r7, #8]
			while (start_val >= end_val) {
 8000638:	68ba      	ldr	r2, [r7, #8]
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	429a      	cmp	r2, r3
 800063e:	daee      	bge.n	800061e <smoothPWM+0x9a>
		break;
 8000640:	bf00      	nop
	}
}
 8000642:	bf00      	nop
 8000644:	3710      	adds	r7, #16
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
	...

0800064c <print_sysinfo>:
	default:
		printf("save data mode error\n");
	}
}

void print_sysinfo(int mode) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af02      	add	r7, sp, #8
 8000652:	6078      	str	r0, [r7, #4]

	switch (mode) {
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	2b01      	cmp	r3, #1
 8000658:	d04a      	beq.n	80006f0 <print_sysinfo+0xa4>
 800065a:	2b02      	cmp	r3, #2
 800065c:	d04a      	beq.n	80006f4 <print_sysinfo+0xa8>
 800065e:	2b00      	cmp	r3, #0
 8000660:	d142      	bne.n	80006e8 <print_sysinfo+0x9c>
	case 0: //All
		Usart2DmaPrintf("\n==============================\n");
 8000662:	4827      	ldr	r0, [pc, #156]	; (8000700 <print_sysinfo+0xb4>)
 8000664:	f7ff fe70 	bl	8000348 <Usart2DmaPrintf>
		Usart2DmaPrintf("| Sys time : %d\n",xTaskGetTickCount());
 8000668:	f004 fe7c 	bl	8005364 <xTaskGetTickCount>
 800066c:	4603      	mov	r3, r0
 800066e:	4619      	mov	r1, r3
 8000670:	4824      	ldr	r0, [pc, #144]	; (8000704 <print_sysinfo+0xb8>)
 8000672:	f7ff fe69 	bl	8000348 <Usart2DmaPrintf>
		Usart2DmaPrintf("| Mode:\t%d  \t\tSetMode:\t\t%d  \t|\n", sys_mode,
 8000676:	4b24      	ldr	r3, [pc, #144]	; (8000708 <print_sysinfo+0xbc>)
 8000678:	6819      	ldr	r1, [r3, #0]
 800067a:	4b24      	ldr	r3, [pc, #144]	; (800070c <print_sysinfo+0xc0>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	461a      	mov	r2, r3
 8000680:	4823      	ldr	r0, [pc, #140]	; (8000710 <print_sysinfo+0xc4>)
 8000682:	f7ff fe61 	bl	8000348 <Usart2DmaPrintf>
				sys_setting);
		Usart2DmaPrintf("| mdir:\t%d  \t\tSmoothMode:\t%d  \t|\n", motor_dir,
 8000686:	4b23      	ldr	r3, [pc, #140]	; (8000714 <print_sysinfo+0xc8>)
 8000688:	6819      	ldr	r1, [r3, #0]
 800068a:	4b23      	ldr	r3, [pc, #140]	; (8000718 <print_sysinfo+0xcc>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	461a      	mov	r2, r3
 8000690:	4822      	ldr	r0, [pc, #136]	; (800071c <print_sysinfo+0xd0>)
 8000692:	f7ff fe59 	bl	8000348 <Usart2DmaPrintf>
				smooth_mode);
		Usart2DmaPrintf("| TimeN:\t%d  \t\tTimeSlow:\t\t%d  \t|\n", run_time_n,
 8000696:	4b22      	ldr	r3, [pc, #136]	; (8000720 <print_sysinfo+0xd4>)
 8000698:	6819      	ldr	r1, [r3, #0]
 800069a:	4b22      	ldr	r3, [pc, #136]	; (8000724 <print_sysinfo+0xd8>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	461a      	mov	r2, r3
 80006a0:	4821      	ldr	r0, [pc, #132]	; (8000728 <print_sysinfo+0xdc>)
 80006a2:	f7ff fe51 	bl	8000348 <Usart2DmaPrintf>
				run_time_s);
		Usart2DmaPrintf("| pwmN:\t%d  \tPWNSlow:\t%d  \t|\n", run_pwm_n,
 80006a6:	4b21      	ldr	r3, [pc, #132]	; (800072c <print_sysinfo+0xe0>)
 80006a8:	6819      	ldr	r1, [r3, #0]
 80006aa:	4b21      	ldr	r3, [pc, #132]	; (8000730 <print_sysinfo+0xe4>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	461a      	mov	r2, r3
 80006b0:	4820      	ldr	r0, [pc, #128]	; (8000734 <print_sysinfo+0xe8>)
 80006b2:	f7ff fe49 	bl	8000348 <Usart2DmaPrintf>
				run_pwm_s);
		Usart2DmaPrintf("| Buttom Flag:[%d][%d][%d][%d] \t\t\t|\n",
 80006b6:	4b20      	ldr	r3, [pc, #128]	; (8000738 <print_sysinfo+0xec>)
 80006b8:	6859      	ldr	r1, [r3, #4]
 80006ba:	4b1f      	ldr	r3, [pc, #124]	; (8000738 <print_sysinfo+0xec>)
 80006bc:	689a      	ldr	r2, [r3, #8]
 80006be:	4b1e      	ldr	r3, [pc, #120]	; (8000738 <print_sysinfo+0xec>)
 80006c0:	68d8      	ldr	r0, [r3, #12]
 80006c2:	4b1d      	ldr	r3, [pc, #116]	; (8000738 <print_sysinfo+0xec>)
 80006c4:	691b      	ldr	r3, [r3, #16]
 80006c6:	9300      	str	r3, [sp, #0]
 80006c8:	4603      	mov	r3, r0
 80006ca:	481c      	ldr	r0, [pc, #112]	; (800073c <print_sysinfo+0xf0>)
 80006cc:	f7ff fe3c 	bl	8000348 <Usart2DmaPrintf>
				buttom_flag[1], buttom_flag[2], buttom_flag[3], buttom_flag[4]);
		Usart2DmaPrintf("| ADC1:\t%d  \tADC2:\t%d \t\t|\n", real_adc1,
 80006d0:	4b1b      	ldr	r3, [pc, #108]	; (8000740 <print_sysinfo+0xf4>)
 80006d2:	6819      	ldr	r1, [r3, #0]
 80006d4:	4b1b      	ldr	r3, [pc, #108]	; (8000744 <print_sysinfo+0xf8>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	461a      	mov	r2, r3
 80006da:	481b      	ldr	r0, [pc, #108]	; (8000748 <print_sysinfo+0xfc>)
 80006dc:	f7ff fe34 	bl	8000348 <Usart2DmaPrintf>
				real_adc2);
		Usart2DmaPrintf("==============================\n");
 80006e0:	481a      	ldr	r0, [pc, #104]	; (800074c <print_sysinfo+0x100>)
 80006e2:	f7ff fe31 	bl	8000348 <Usart2DmaPrintf>
		break;
 80006e6:	e006      	b.n	80006f6 <print_sysinfo+0xaa>
	case 1:
		break;
	case 2:
		break;
	default:
		printf("save data mode error\n");
 80006e8:	4819      	ldr	r0, [pc, #100]	; (8000750 <print_sysinfo+0x104>)
 80006ea:	f006 f9a1 	bl	8006a30 <puts>
	}
}
 80006ee:	e002      	b.n	80006f6 <print_sysinfo+0xaa>
		break;
 80006f0:	bf00      	nop
 80006f2:	e000      	b.n	80006f6 <print_sysinfo+0xaa>
		break;
 80006f4:	bf00      	nop
}
 80006f6:	bf00      	nop
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	08007a28 	.word	0x08007a28
 8000704:	08007a4c 	.word	0x08007a4c
 8000708:	200000b8 	.word	0x200000b8
 800070c:	200000bc 	.word	0x200000bc
 8000710:	08007a60 	.word	0x08007a60
 8000714:	200000c0 	.word	0x200000c0
 8000718:	200000c4 	.word	0x200000c4
 800071c:	08007a80 	.word	0x08007a80
 8000720:	20000098 	.word	0x20000098
 8000724:	2000009c 	.word	0x2000009c
 8000728:	08007aa4 	.word	0x08007aa4
 800072c:	20000000 	.word	0x20000000
 8000730:	20000004 	.word	0x20000004
 8000734:	08007ac8 	.word	0x08007ac8
 8000738:	200000a4 	.word	0x200000a4
 800073c:	08007ae8 	.word	0x08007ae8
 8000740:	20001bfc 	.word	0x20001bfc
 8000744:	20001a60 	.word	0x20001a60
 8000748:	08007b10 	.word	0x08007b10
 800074c:	08007b2c 	.word	0x08007b2c
 8000750:	08007a10 	.word	0x08007a10

08000754 <MX_FREERTOS_Init>:
/**
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void) {
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Init */
	//stop_motor();
	//printf("Helloworld!\n");
	HAL_GPIO_WritePin(MC_1_GPIO_Port, MC_1_Pin, GPIO_PIN_RESET);
 8000758:	2200      	movs	r2, #0
 800075a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800075e:	481c      	ldr	r0, [pc, #112]	; (80007d0 <MX_FREERTOS_Init+0x7c>)
 8000760:	f001 fe72 	bl	8002448 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MC_2_GPIO_Port, MC_2_Pin, GPIO_PIN_RESET);
 8000764:	2200      	movs	r2, #0
 8000766:	f44f 7180 	mov.w	r1, #256	; 0x100
 800076a:	4819      	ldr	r0, [pc, #100]	; (80007d0 <MX_FREERTOS_Init+0x7c>)
 800076c:	f001 fe6c 	bl	8002448 <HAL_GPIO_WritePin>
	user_pwm_setvalue_1(0);
 8000770:	2000      	movs	r0, #0
 8000772:	f000 fc49 	bl	8001008 <user_pwm_setvalue_1>
	user_pwm_setvalue_2(0);
 8000776:	2000      	movs	r0, #0
 8000778:	f000 fc64 	bl	8001044 <user_pwm_setvalue_2>
	if (HAL_UART_Receive_DMA(&huart2, (uint8_t*) rxData, sizeof(rxData) - 1)
 800077c:	2200      	movs	r2, #0
 800077e:	4915      	ldr	r1, [pc, #84]	; (80007d4 <MX_FREERTOS_Init+0x80>)
 8000780:	4815      	ldr	r0, [pc, #84]	; (80007d8 <MX_FREERTOS_Init+0x84>)
 8000782:	f002 ffab 	bl	80036dc <HAL_UART_Receive_DMA>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_FREERTOS_Init+0x3c>
			!= HAL_OK)	//main函数while(1)前，启动一次DMA接收
			{
		Error_Handler();
 800078c:	f000 fa23 	bl	8000bd6 <Error_Handler>
	}
	HAL_UART_Transmit_DMA(&huart2, "Sys Run\n", sizeof("Sys Run\n") - 1);//可以通过DMA把数据发出去
 8000790:	2208      	movs	r2, #8
 8000792:	4912      	ldr	r1, [pc, #72]	; (80007dc <MX_FREERTOS_Init+0x88>)
 8000794:	4810      	ldr	r0, [pc, #64]	; (80007d8 <MX_FREERTOS_Init+0x84>)
 8000796:	f002 ff35 	bl	8003604 <HAL_UART_Transmit_DMA>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 800079a:	4a11      	ldr	r2, [pc, #68]	; (80007e0 <MX_FREERTOS_Init+0x8c>)
 800079c:	2100      	movs	r1, #0
 800079e:	4811      	ldr	r0, [pc, #68]	; (80007e4 <MX_FREERTOS_Init+0x90>)
 80007a0:	f003 fc7c 	bl	800409c <osThreadNew>
 80007a4:	4602      	mov	r2, r0
 80007a6:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <MX_FREERTOS_Init+0x94>)
 80007a8:	601a      	str	r2, [r3, #0]
			&defaultTask_attributes);

	/* creation of myTaskoutput */
	myTaskoutputHandle = osThreadNew(StartTask02, NULL,
 80007aa:	4a10      	ldr	r2, [pc, #64]	; (80007ec <MX_FREERTOS_Init+0x98>)
 80007ac:	2100      	movs	r1, #0
 80007ae:	4810      	ldr	r0, [pc, #64]	; (80007f0 <MX_FREERTOS_Init+0x9c>)
 80007b0:	f003 fc74 	bl	800409c <osThreadNew>
 80007b4:	4602      	mov	r2, r0
 80007b6:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <MX_FREERTOS_Init+0xa0>)
 80007b8:	601a      	str	r2, [r3, #0]
			&myTaskoutput_attributes);

	/* creation of myTask_BUTTON */
	myTask_BUTTONHandle = osThreadNew(StartTask03, NULL,
 80007ba:	4a0f      	ldr	r2, [pc, #60]	; (80007f8 <MX_FREERTOS_Init+0xa4>)
 80007bc:	2100      	movs	r1, #0
 80007be:	480f      	ldr	r0, [pc, #60]	; (80007fc <MX_FREERTOS_Init+0xa8>)
 80007c0:	f003 fc6c 	bl	800409c <osThreadNew>
 80007c4:	4602      	mov	r2, r0
 80007c6:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <MX_FREERTOS_Init+0xac>)
 80007c8:	601a      	str	r2, [r3, #0]

	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40010800 	.word	0x40010800
 80007d4:	200000c8 	.word	0x200000c8
 80007d8:	20001d2c 	.word	0x20001d2c
 80007dc:	08007b4c 	.word	0x08007b4c
 80007e0:	08007b84 	.word	0x08007b84
 80007e4:	08000805 	.word	0x08000805
 80007e8:	20001a54 	.word	0x20001a54
 80007ec:	08007ba8 	.word	0x08007ba8
 80007f0:	0800087d 	.word	0x0800087d
 80007f4:	20001a58 	.word	0x20001a58
 80007f8:	08007bcc 	.word	0x08007bcc
 80007fc:	0800093d 	.word	0x0800093d
 8000800:	20001a5c 	.word	0x20001a5c

08000804 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartDefaultTask */
	/* Infinite loop */
	for (;;) {

		if (buttom_flag[1] > 0) { //按下1按鈕
 800080c:	4b18      	ldr	r3, [pc, #96]	; (8000870 <StartDefaultTask+0x6c>)
 800080e:	685b      	ldr	r3, [r3, #4]
 8000810:	2b00      	cmp	r3, #0
 8000812:	dd10      	ble.n	8000836 <StartDefaultTask+0x32>
			 * 第二個數值時間					預設5000 = 5秒
			 * 第三個緩請動最大輸出值			預設500
			 * 第四個正常常模式下功率 			預設100%
			 */
			//turn_on_motor(50, 5000, 500, 1000);
			turn_on_motor(real_adc1 / 50, 5000, real_adc1, 2000);
 8000814:	4b17      	ldr	r3, [pc, #92]	; (8000874 <StartDefaultTask+0x70>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a17      	ldr	r2, [pc, #92]	; (8000878 <StartDefaultTask+0x74>)
 800081a:	fba2 2303 	umull	r2, r3, r2, r3
 800081e:	091b      	lsrs	r3, r3, #4
 8000820:	4618      	mov	r0, r3
 8000822:	4b14      	ldr	r3, [pc, #80]	; (8000874 <StartDefaultTask+0x70>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	461a      	mov	r2, r3
 8000828:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800082c:	f241 3188 	movw	r1, #5000	; 0x1388
 8000830:	f7ff fe50 	bl	80004d4 <turn_on_motor>
 8000834:	e017      	b.n	8000866 <StartDefaultTask+0x62>
			//clean_buttom_flag();
		} else if (buttom_flag[2] > 0) { //按下2按鈕
 8000836:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <StartDefaultTask+0x6c>)
 8000838:	689b      	ldr	r3, [r3, #8]
 800083a:	2b00      	cmp	r3, #0
 800083c:	dc13      	bgt.n	8000866 <StartDefaultTask+0x62>

		} else if (buttom_flag[3] > 0) { //按鈕3
 800083e:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <StartDefaultTask+0x6c>)
 8000840:	68db      	ldr	r3, [r3, #12]
 8000842:	2b00      	cmp	r3, #0
 8000844:	dd0f      	ble.n	8000866 <StartDefaultTask+0x62>
			 * 第二個數值時間					預設5000 = 5秒
			 * 第三個緩請動最大輸出值			預設500
			 * 第四個正常常模式下功率 			預設100%
			 */
			//turn_off_motor(50, 5000, 500, 1000);
			turn_off_motor(real_adc1 / 50, 5000, real_adc1, 2000);
 8000846:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <StartDefaultTask+0x70>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4a0b      	ldr	r2, [pc, #44]	; (8000878 <StartDefaultTask+0x74>)
 800084c:	fba2 2303 	umull	r2, r3, r2, r3
 8000850:	091b      	lsrs	r3, r3, #4
 8000852:	4618      	mov	r0, r3
 8000854:	4b07      	ldr	r3, [pc, #28]	; (8000874 <StartDefaultTask+0x70>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	461a      	mov	r2, r3
 800085a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800085e:	f241 3188 	movw	r1, #5000	; 0x1388
 8000862:	f7ff fe63 	bl	800052c <turn_off_motor>
			//clean_buttom_flag();

		} else if (buttom_flag[4] > 0) { //按鈕4
			//clean_buttom_flag();
		}
		osDelay(1);
 8000866:	2001      	movs	r0, #1
 8000868:	f003 fcc2 	bl	80041f0 <osDelay>
		if (buttom_flag[1] > 0) { //按下1按鈕
 800086c:	e7ce      	b.n	800080c <StartDefaultTask+0x8>
 800086e:	bf00      	nop
 8000870:	200000a4 	.word	0x200000a4
 8000874:	20001bfc 	.word	0x20001bfc
 8000878:	51eb851f 	.word	0x51eb851f

0800087c <StartTask02>:
 * @brief Function implementing the myTaskoutput thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument) {
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask02 */
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &ADC_Value, 100);
 8000884:	2264      	movs	r2, #100	; 0x64
 8000886:	4924      	ldr	r1, [pc, #144]	; (8000918 <StartTask02+0x9c>)
 8000888:	4824      	ldr	r0, [pc, #144]	; (800091c <StartTask02+0xa0>)
 800088a:	f000 fe2d 	bl	80014e8 <HAL_ADC_Start_DMA>
	/* Infinite loop */
	for (;;) {
		for (i = 0, ad1 = 0, ad2 = 0; i < 100;) {
 800088e:	4b24      	ldr	r3, [pc, #144]	; (8000920 <StartTask02+0xa4>)
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	4b23      	ldr	r3, [pc, #140]	; (8000924 <StartTask02+0xa8>)
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	4b23      	ldr	r3, [pc, #140]	; (8000928 <StartTask02+0xac>)
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	e01c      	b.n	80008dc <StartTask02+0x60>
			ad1 += ADC_Value[i++];
 80008a2:	4b1f      	ldr	r3, [pc, #124]	; (8000920 <StartTask02+0xa4>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	1c5a      	adds	r2, r3, #1
 80008a8:	491d      	ldr	r1, [pc, #116]	; (8000920 <StartTask02+0xa4>)
 80008aa:	600a      	str	r2, [r1, #0]
 80008ac:	4a1a      	ldr	r2, [pc, #104]	; (8000918 <StartTask02+0x9c>)
 80008ae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008b2:	4b1c      	ldr	r3, [pc, #112]	; (8000924 <StartTask02+0xa8>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4413      	add	r3, r2
 80008b8:	4a1a      	ldr	r2, [pc, #104]	; (8000924 <StartTask02+0xa8>)
 80008ba:	6013      	str	r3, [r2, #0]
			ad2 += ADC_Value[i++];
 80008bc:	4b18      	ldr	r3, [pc, #96]	; (8000920 <StartTask02+0xa4>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	1c5a      	adds	r2, r3, #1
 80008c2:	4917      	ldr	r1, [pc, #92]	; (8000920 <StartTask02+0xa4>)
 80008c4:	600a      	str	r2, [r1, #0]
 80008c6:	4a14      	ldr	r2, [pc, #80]	; (8000918 <StartTask02+0x9c>)
 80008c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008cc:	4b16      	ldr	r3, [pc, #88]	; (8000928 <StartTask02+0xac>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4413      	add	r3, r2
 80008d2:	4a15      	ldr	r2, [pc, #84]	; (8000928 <StartTask02+0xac>)
 80008d4:	6013      	str	r3, [r2, #0]
			osDelay(10);
 80008d6:	200a      	movs	r0, #10
 80008d8:	f003 fc8a 	bl	80041f0 <osDelay>
		for (i = 0, ad1 = 0, ad2 = 0; i < 100;) {
 80008dc:	4b10      	ldr	r3, [pc, #64]	; (8000920 <StartTask02+0xa4>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	2b63      	cmp	r3, #99	; 0x63
 80008e2:	ddde      	ble.n	80008a2 <StartTask02+0x26>
		}
		real_adc1 = ad1 / 50;
 80008e4:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <StartTask02+0xa8>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a10      	ldr	r2, [pc, #64]	; (800092c <StartTask02+0xb0>)
 80008ea:	fba2 2303 	umull	r2, r3, r2, r3
 80008ee:	091b      	lsrs	r3, r3, #4
 80008f0:	4a0f      	ldr	r2, [pc, #60]	; (8000930 <StartTask02+0xb4>)
 80008f2:	6013      	str	r3, [r2, #0]
		real_adc2 = ad2 / 50;
 80008f4:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <StartTask02+0xac>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a0c      	ldr	r2, [pc, #48]	; (800092c <StartTask02+0xb0>)
 80008fa:	fba2 2303 	umull	r2, r3, r2, r3
 80008fe:	091b      	lsrs	r3, r3, #4
 8000900:	4a0c      	ldr	r2, [pc, #48]	; (8000934 <StartTask02+0xb8>)
 8000902:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000904:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000908:	480b      	ldr	r0, [pc, #44]	; (8000938 <StartTask02+0xbc>)
 800090a:	f001 fdb5 	bl	8002478 <HAL_GPIO_TogglePin>
		print_sysinfo(0);
 800090e:	2000      	movs	r0, #0
 8000910:	f7ff fe9c 	bl	800064c <print_sysinfo>
		for (i = 0, ad1 = 0, ad2 = 0; i < 100;) {
 8000914:	e7bb      	b.n	800088e <StartTask02+0x12>
 8000916:	bf00      	nop
 8000918:	20001a64 	.word	0x20001a64
 800091c:	200019e0 	.word	0x200019e0
 8000920:	200000a0 	.word	0x200000a0
 8000924:	20001bf4 	.word	0x20001bf4
 8000928:	20001bf8 	.word	0x20001bf8
 800092c:	51eb851f 	.word	0x51eb851f
 8000930:	20001bfc 	.word	0x20001bfc
 8000934:	20001a60 	.word	0x20001a60
 8000938:	40011000 	.word	0x40011000

0800093c <StartTask03>:
 * @brief Function implementing the myTask_BUTTON thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument) {
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
		writeFlashTest();
		printFlashTest();
*/
		while (1) {                        //for test
			//printFlashTest();
			osDelay(1000);
 8000944:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000948:	f003 fc52 	bl	80041f0 <osDelay>
 800094c:	e7fa      	b.n	8000944 <StartTask03+0x8>
	...

08000950 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b088      	sub	sp, #32
 8000954:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000956:	f107 0310 	add.w	r3, r7, #16
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	605a      	str	r2, [r3, #4]
 8000960:	609a      	str	r2, [r3, #8]
 8000962:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000964:	4b41      	ldr	r3, [pc, #260]	; (8000a6c <MX_GPIO_Init+0x11c>)
 8000966:	699b      	ldr	r3, [r3, #24]
 8000968:	4a40      	ldr	r2, [pc, #256]	; (8000a6c <MX_GPIO_Init+0x11c>)
 800096a:	f043 0310 	orr.w	r3, r3, #16
 800096e:	6193      	str	r3, [r2, #24]
 8000970:	4b3e      	ldr	r3, [pc, #248]	; (8000a6c <MX_GPIO_Init+0x11c>)
 8000972:	699b      	ldr	r3, [r3, #24]
 8000974:	f003 0310 	and.w	r3, r3, #16
 8000978:	60fb      	str	r3, [r7, #12]
 800097a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800097c:	4b3b      	ldr	r3, [pc, #236]	; (8000a6c <MX_GPIO_Init+0x11c>)
 800097e:	699b      	ldr	r3, [r3, #24]
 8000980:	4a3a      	ldr	r2, [pc, #232]	; (8000a6c <MX_GPIO_Init+0x11c>)
 8000982:	f043 0304 	orr.w	r3, r3, #4
 8000986:	6193      	str	r3, [r2, #24]
 8000988:	4b38      	ldr	r3, [pc, #224]	; (8000a6c <MX_GPIO_Init+0x11c>)
 800098a:	699b      	ldr	r3, [r3, #24]
 800098c:	f003 0304 	and.w	r3, r3, #4
 8000990:	60bb      	str	r3, [r7, #8]
 8000992:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000994:	4b35      	ldr	r3, [pc, #212]	; (8000a6c <MX_GPIO_Init+0x11c>)
 8000996:	699b      	ldr	r3, [r3, #24]
 8000998:	4a34      	ldr	r2, [pc, #208]	; (8000a6c <MX_GPIO_Init+0x11c>)
 800099a:	f043 0308 	orr.w	r3, r3, #8
 800099e:	6193      	str	r3, [r2, #24]
 80009a0:	4b32      	ldr	r3, [pc, #200]	; (8000a6c <MX_GPIO_Init+0x11c>)
 80009a2:	699b      	ldr	r3, [r3, #24]
 80009a4:	f003 0308 	and.w	r3, r3, #8
 80009a8:	607b      	str	r3, [r7, #4]
 80009aa:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80009ac:	2200      	movs	r2, #0
 80009ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009b2:	482f      	ldr	r0, [pc, #188]	; (8000a70 <MX_GPIO_Init+0x120>)
 80009b4:	f001 fd48 	bl	8002448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MC_4_Pin|MC_3_Pin, GPIO_PIN_RESET);
 80009b8:	2200      	movs	r2, #0
 80009ba:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80009be:	482d      	ldr	r0, [pc, #180]	; (8000a74 <MX_GPIO_Init+0x124>)
 80009c0:	f001 fd42 	bl	8002448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MC_2_Pin|MC_1_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 80009c4:	2200      	movs	r2, #0
 80009c6:	f44f 51d8 	mov.w	r1, #6912	; 0x1b00
 80009ca:	482b      	ldr	r0, [pc, #172]	; (8000a78 <MX_GPIO_Init+0x128>)
 80009cc:	f001 fd3c 	bl	8002448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80009d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d6:	2301      	movs	r3, #1
 80009d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009de:	2302      	movs	r3, #2
 80009e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80009e2:	f107 0310 	add.w	r3, r7, #16
 80009e6:	4619      	mov	r1, r3
 80009e8:	4821      	ldr	r0, [pc, #132]	; (8000a70 <MX_GPIO_Init+0x120>)
 80009ea:	f001 fbd3 	bl	8002194 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = MC_4_Pin|MC_3_Pin;
 80009ee:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80009f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f4:	2301      	movs	r3, #1
 80009f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fc:	2302      	movs	r3, #2
 80009fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a00:	f107 0310 	add.w	r3, r7, #16
 8000a04:	4619      	mov	r1, r3
 8000a06:	481b      	ldr	r0, [pc, #108]	; (8000a74 <MX_GPIO_Init+0x124>)
 8000a08:	f001 fbc4 	bl	8002194 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = MC_2_Pin|MC_1_Pin|LED2_Pin|LED1_Pin;
 8000a0c:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8000a10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a12:	2301      	movs	r3, #1
 8000a14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1e:	f107 0310 	add.w	r3, r7, #16
 8000a22:	4619      	mov	r1, r3
 8000a24:	4814      	ldr	r0, [pc, #80]	; (8000a78 <MX_GPIO_Init+0x128>)
 8000a26:	f001 fbb5 	bl	8002194 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin|BUTTON4_Pin;
 8000a2a:	23f0      	movs	r3, #240	; 0xf0
 8000a2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a2e:	4b13      	ldr	r3, [pc, #76]	; (8000a7c <MX_GPIO_Init+0x12c>)
 8000a30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a32:	2302      	movs	r3, #2
 8000a34:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a36:	f107 0310 	add.w	r3, r7, #16
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	480d      	ldr	r0, [pc, #52]	; (8000a74 <MX_GPIO_Init+0x124>)
 8000a3e:	f001 fba9 	bl	8002194 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2100      	movs	r1, #0
 8000a46:	200a      	movs	r0, #10
 8000a48:	f001 f909 	bl	8001c5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000a4c:	200a      	movs	r0, #10
 8000a4e:	f001 f922 	bl	8001c96 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2100      	movs	r1, #0
 8000a56:	2017      	movs	r0, #23
 8000a58:	f001 f901 	bl	8001c5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000a5c:	2017      	movs	r0, #23
 8000a5e:	f001 f91a 	bl	8001c96 <HAL_NVIC_EnableIRQ>

}
 8000a62:	bf00      	nop
 8000a64:	3720      	adds	r7, #32
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	40011000 	.word	0x40011000
 8000a74:	40010c00 	.word	0x40010c00
 8000a78:	40010800 	.word	0x40010800
 8000a7c:	10110000 	.word	0x10110000

08000a80 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000a88:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000a8c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000a90:	f003 0301 	and.w	r3, r3, #1
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d013      	beq.n	8000ac0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000a98:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000a9c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000aa0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d00b      	beq.n	8000ac0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000aa8:	e000      	b.n	8000aac <ITM_SendChar+0x2c>
    {
      __NOP();
 8000aaa:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000aac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d0f9      	beq.n	8000aaa <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000ab6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000aba:	687a      	ldr	r2, [r7, #4]
 8000abc:	b2d2      	uxtb	r2, r2
 8000abe:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000ac0:	687b      	ldr	r3, [r7, #4]
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bc80      	pop	{r7}
 8000aca:	4770      	bx	lr

08000acc <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file , char *ptr,int len)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b086      	sub	sp, #24
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60f8      	str	r0, [r7, #12]
 8000ad4:	60b9      	str	r1, [r7, #8]
 8000ad6:	607a      	str	r2, [r7, #4]
    int i = 0;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	617b      	str	r3, [r7, #20]
    for(i = 0;i<len;i++)
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]
 8000ae0:	e009      	b.n	8000af6 <_write+0x2a>
        ITM_SendChar((*ptr++));
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	1c5a      	adds	r2, r3, #1
 8000ae6:	60ba      	str	r2, [r7, #8]
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff ffc8 	bl	8000a80 <ITM_SendChar>
    for(i = 0;i<len;i++)
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	3301      	adds	r3, #1
 8000af4:	617b      	str	r3, [r7, #20]
 8000af6:	697a      	ldr	r2, [r7, #20]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	429a      	cmp	r2, r3
 8000afc:	dbf1      	blt.n	8000ae2 <_write+0x16>
    return len;
 8000afe:	687b      	ldr	r3, [r7, #4]
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3718      	adds	r7, #24
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}

08000b08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b0c:	f000 fbb2 	bl	8001274 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b10:	f000 f811 	bl	8000b36 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b14:	f7ff ff1c 	bl	8000950 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b18:	f7ff fbe8 	bl	80002ec <MX_DMA_Init>
  MX_ADC1_Init();
 8000b1c:	f7ff fb18 	bl	8000150 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000b20:	f000 f9ac 	bl	8000e7c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000b24:	f000 faac 	bl	8001080 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000b28:	f003 fa52 	bl	8003fd0 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000b2c:	f7ff fe12 	bl	8000754 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000b30:	f003 fa80 	bl	8004034 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b34:	e7fe      	b.n	8000b34 <main+0x2c>

08000b36 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b094      	sub	sp, #80	; 0x50
 8000b3a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b3c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b40:	2228      	movs	r2, #40	; 0x28
 8000b42:	2100      	movs	r1, #0
 8000b44:	4618      	mov	r0, r3
 8000b46:	f005 ff0e 	bl	8006966 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b4a:	f107 0314 	add.w	r3, r7, #20
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	605a      	str	r2, [r3, #4]
 8000b54:	609a      	str	r2, [r3, #8]
 8000b56:	60da      	str	r2, [r3, #12]
 8000b58:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b5a:	1d3b      	adds	r3, r7, #4
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b66:	2302      	movs	r3, #2
 8000b68:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b6e:	2310      	movs	r3, #16
 8000b70:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b72:	2300      	movs	r3, #0
 8000b74:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f001 fcac 	bl	80024d8 <HAL_RCC_OscConfig>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000b86:	f000 f826 	bl	8000bd6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b8a:	230f      	movs	r3, #15
 8000b8c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b92:	2300      	movs	r3, #0
 8000b94:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b96:	2300      	movs	r3, #0
 8000b98:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b9e:	f107 0314 	add.w	r3, r7, #20
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f001 ff17 	bl	80029d8 <HAL_RCC_ClockConfig>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000bb0:	f000 f811 	bl	8000bd6 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f002 f8a6 	bl	8002d10 <HAL_RCCEx_PeriphCLKConfig>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000bca:	f000 f804 	bl	8000bd6 <Error_Handler>
  }
}
 8000bce:	bf00      	nop
 8000bd0:	3750      	adds	r7, #80	; 0x50
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000bda:	bf00      	nop
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bc80      	pop	{r7}
 8000be0:	4770      	bx	lr
	...

08000be4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b085      	sub	sp, #20
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bea:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <HAL_MspInit+0x5c>)
 8000bec:	699b      	ldr	r3, [r3, #24]
 8000bee:	4a14      	ldr	r2, [pc, #80]	; (8000c40 <HAL_MspInit+0x5c>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	6193      	str	r3, [r2, #24]
 8000bf6:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <HAL_MspInit+0x5c>)
 8000bf8:	699b      	ldr	r3, [r3, #24]
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	60bb      	str	r3, [r7, #8]
 8000c00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c02:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <HAL_MspInit+0x5c>)
 8000c04:	69db      	ldr	r3, [r3, #28]
 8000c06:	4a0e      	ldr	r2, [pc, #56]	; (8000c40 <HAL_MspInit+0x5c>)
 8000c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c0c:	61d3      	str	r3, [r2, #28]
 8000c0e:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <HAL_MspInit+0x5c>)
 8000c10:	69db      	ldr	r3, [r3, #28]
 8000c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c16:	607b      	str	r3, [r7, #4]
 8000c18:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c1a:	4b0a      	ldr	r3, [pc, #40]	; (8000c44 <HAL_MspInit+0x60>)
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	4a04      	ldr	r2, [pc, #16]	; (8000c44 <HAL_MspInit+0x60>)
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c36:	bf00      	nop
 8000c38:	3714      	adds	r7, #20
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bc80      	pop	{r7}
 8000c3e:	4770      	bx	lr
 8000c40:	40021000 	.word	0x40021000
 8000c44:	40010000 	.word	0x40010000

08000c48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bc80      	pop	{r7}
 8000c52:	4770      	bx	lr

08000c54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <HardFault_Handler+0x4>

08000c5a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c5e:	e7fe      	b.n	8000c5e <MemManage_Handler+0x4>

08000c60 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <BusFault_Handler+0x4>

08000c66 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c6a:	e7fe      	b.n	8000c6a <UsageFault_Handler+0x4>

08000c6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bc80      	pop	{r7}
 8000c76:	4770      	bx	lr

08000c78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c7c:	f000 fb40 	bl	8001300 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000c80:	f004 fea0 	bl	80059c4 <xTaskGetSchedulerState>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d001      	beq.n	8000c8e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000c8a:	f005 fbe5 	bl	8006458 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000c96:	2010      	movs	r0, #16
 8000c98:	f001 fc06 	bl	80024a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ca4:	4802      	ldr	r0, [pc, #8]	; (8000cb0 <DMA1_Channel1_IRQHandler+0x10>)
 8000ca6:	f001 f941 	bl	8001f2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	20001a10 	.word	0x20001a10

08000cb4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000cb8:	4802      	ldr	r0, [pc, #8]	; (8000cc4 <DMA1_Channel6_IRQHandler+0x10>)
 8000cba:	f001 f937 	bl	8001f2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	20001ca4 	.word	0x20001ca4

08000cc8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000ccc:	4802      	ldr	r0, [pc, #8]	; (8000cd8 <DMA1_Channel7_IRQHandler+0x10>)
 8000cce:	f001 f92d 	bl	8001f2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */
  //HAL_UART_Init(&huart2);

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	20001ce8 	.word	0x20001ce8

08000cdc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

	//speed_flag=speed_flag+100;
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000ce0:	2020      	movs	r0, #32
 8000ce2:	f001 fbe1 	bl	80024a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000ce6:	2040      	movs	r0, #64	; 0x40
 8000ce8:	f001 fbde 	bl	80024a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000cec:	2080      	movs	r0, #128	; 0x80
 8000cee:	f001 fbdb 	bl	80024a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
	...

08000cf8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000cfc:	4802      	ldr	r0, [pc, #8]	; (8000d08 <USART2_IRQHandler+0x10>)
 8000cfe:	f002 fd6d 	bl	80037dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20001d2c 	.word	0x20001d2c

08000d0c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d18:	2300      	movs	r3, #0
 8000d1a:	617b      	str	r3, [r7, #20]
 8000d1c:	e00a      	b.n	8000d34 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d1e:	f3af 8000 	nop.w
 8000d22:	4601      	mov	r1, r0
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	1c5a      	adds	r2, r3, #1
 8000d28:	60ba      	str	r2, [r7, #8]
 8000d2a:	b2ca      	uxtb	r2, r1
 8000d2c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	3301      	adds	r3, #1
 8000d32:	617b      	str	r3, [r7, #20]
 8000d34:	697a      	ldr	r2, [r7, #20]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	dbf0      	blt.n	8000d1e <_read+0x12>
	}

return len;
 8000d3c:	687b      	ldr	r3, [r7, #4]
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3718      	adds	r7, #24
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000d46:	b480      	push	{r7}
 8000d48:	b083      	sub	sp, #12
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
	return -1;
 8000d4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bc80      	pop	{r7}
 8000d5a:	4770      	bx	lr

08000d5c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d6c:	605a      	str	r2, [r3, #4]
	return 0;
 8000d6e:	2300      	movs	r3, #0
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bc80      	pop	{r7}
 8000d78:	4770      	bx	lr

08000d7a <_isatty>:

int _isatty(int file)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	b083      	sub	sp, #12
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
	return 1;
 8000d82:	2301      	movs	r3, #1
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bc80      	pop	{r7}
 8000d8c:	4770      	bx	lr

08000d8e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	b085      	sub	sp, #20
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	60f8      	str	r0, [r7, #12]
 8000d96:	60b9      	str	r1, [r7, #8]
 8000d98:	607a      	str	r2, [r7, #4]
	return 0;
 8000d9a:	2300      	movs	r3, #0
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3714      	adds	r7, #20
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bc80      	pop	{r7}
 8000da4:	4770      	bx	lr
	...

08000da8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000db0:	4a14      	ldr	r2, [pc, #80]	; (8000e04 <_sbrk+0x5c>)
 8000db2:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <_sbrk+0x60>)
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dbc:	4b13      	ldr	r3, [pc, #76]	; (8000e0c <_sbrk+0x64>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d102      	bne.n	8000dca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dc4:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <_sbrk+0x64>)
 8000dc6:	4a12      	ldr	r2, [pc, #72]	; (8000e10 <_sbrk+0x68>)
 8000dc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dca:	4b10      	ldr	r3, [pc, #64]	; (8000e0c <_sbrk+0x64>)
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d207      	bcs.n	8000de8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dd8:	f005 fd90 	bl	80068fc <__errno>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	230c      	movs	r3, #12
 8000de0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000de2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000de6:	e009      	b.n	8000dfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000de8:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <_sbrk+0x64>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dee:	4b07      	ldr	r3, [pc, #28]	; (8000e0c <_sbrk+0x64>)
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4413      	add	r3, r2
 8000df6:	4a05      	ldr	r2, [pc, #20]	; (8000e0c <_sbrk+0x64>)
 8000df8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3718      	adds	r7, #24
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	20005000 	.word	0x20005000
 8000e08:	00000400 	.word	0x00000400
 8000e0c:	200000cc 	.word	0x200000cc
 8000e10:	20001db8 	.word	0x20001db8

08000e14 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000e18:	4b15      	ldr	r3, [pc, #84]	; (8000e70 <SystemInit+0x5c>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a14      	ldr	r2, [pc, #80]	; (8000e70 <SystemInit+0x5c>)
 8000e1e:	f043 0301 	orr.w	r3, r3, #1
 8000e22:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000e24:	4b12      	ldr	r3, [pc, #72]	; (8000e70 <SystemInit+0x5c>)
 8000e26:	685a      	ldr	r2, [r3, #4]
 8000e28:	4911      	ldr	r1, [pc, #68]	; (8000e70 <SystemInit+0x5c>)
 8000e2a:	4b12      	ldr	r3, [pc, #72]	; (8000e74 <SystemInit+0x60>)
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000e30:	4b0f      	ldr	r3, [pc, #60]	; (8000e70 <SystemInit+0x5c>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a0e      	ldr	r2, [pc, #56]	; (8000e70 <SystemInit+0x5c>)
 8000e36:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000e3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e3e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e40:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <SystemInit+0x5c>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a0a      	ldr	r2, [pc, #40]	; (8000e70 <SystemInit+0x5c>)
 8000e46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e4a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000e4c:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <SystemInit+0x5c>)
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	4a07      	ldr	r2, [pc, #28]	; (8000e70 <SystemInit+0x5c>)
 8000e52:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000e56:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000e58:	4b05      	ldr	r3, [pc, #20]	; (8000e70 <SystemInit+0x5c>)
 8000e5a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000e5e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000e60:	4b05      	ldr	r3, [pc, #20]	; (8000e78 <SystemInit+0x64>)
 8000e62:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e66:	609a      	str	r2, [r3, #8]
#endif 
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bc80      	pop	{r7}
 8000e6e:	4770      	bx	lr
 8000e70:	40021000 	.word	0x40021000
 8000e74:	f8ff0000 	.word	0xf8ff0000
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b08a      	sub	sp, #40	; 0x28
 8000e80:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e82:	f107 0320 	add.w	r3, r7, #32
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e8c:	1d3b      	adds	r3, r7, #4
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	605a      	str	r2, [r3, #4]
 8000e94:	609a      	str	r2, [r3, #8]
 8000e96:	60da      	str	r2, [r3, #12]
 8000e98:	611a      	str	r2, [r3, #16]
 8000e9a:	615a      	str	r2, [r3, #20]
 8000e9c:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8000e9e:	4b28      	ldr	r3, [pc, #160]	; (8000f40 <MX_TIM2_Init+0xc4>)
 8000ea0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ea4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ea6:	4b26      	ldr	r3, [pc, #152]	; (8000f40 <MX_TIM2_Init+0xc4>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eac:	4b24      	ldr	r3, [pc, #144]	; (8000f40 <MX_TIM2_Init+0xc4>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8000eb2:	4b23      	ldr	r3, [pc, #140]	; (8000f40 <MX_TIM2_Init+0xc4>)
 8000eb4:	f242 720f 	movw	r2, #9999	; 0x270f
 8000eb8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eba:	4b21      	ldr	r3, [pc, #132]	; (8000f40 <MX_TIM2_Init+0xc4>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ec0:	4b1f      	ldr	r3, [pc, #124]	; (8000f40 <MX_TIM2_Init+0xc4>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ec6:	481e      	ldr	r0, [pc, #120]	; (8000f40 <MX_TIM2_Init+0xc4>)
 8000ec8:	f001 ffd8 	bl	8002e7c <HAL_TIM_PWM_Init>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000ed2:	f7ff fe80 	bl	8000bd6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eda:	2300      	movs	r3, #0
 8000edc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ede:	f107 0320 	add.w	r3, r7, #32
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4816      	ldr	r0, [pc, #88]	; (8000f40 <MX_TIM2_Init+0xc4>)
 8000ee6:	f002 fafb 	bl	80034e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000ef0:	f7ff fe71 	bl	8000bd6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ef4:	2360      	movs	r3, #96	; 0x60
 8000ef6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000efc:	2300      	movs	r3, #0
 8000efe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f00:	2300      	movs	r3, #0
 8000f02:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f04:	1d3b      	adds	r3, r7, #4
 8000f06:	2208      	movs	r2, #8
 8000f08:	4619      	mov	r1, r3
 8000f0a:	480d      	ldr	r0, [pc, #52]	; (8000f40 <MX_TIM2_Init+0xc4>)
 8000f0c:	f002 f814 	bl	8002f38 <HAL_TIM_PWM_ConfigChannel>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000f16:	f7ff fe5e 	bl	8000bd6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f1a:	1d3b      	adds	r3, r7, #4
 8000f1c:	220c      	movs	r2, #12
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4807      	ldr	r0, [pc, #28]	; (8000f40 <MX_TIM2_Init+0xc4>)
 8000f22:	f002 f809 	bl	8002f38 <HAL_TIM_PWM_ConfigChannel>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000f2c:	f7ff fe53 	bl	8000bd6 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8000f30:	4803      	ldr	r0, [pc, #12]	; (8000f40 <MX_TIM2_Init+0xc4>)
 8000f32:	f000 f823 	bl	8000f7c <HAL_TIM_MspPostInit>

}
 8000f36:	bf00      	nop
 8000f38:	3728      	adds	r7, #40	; 0x28
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20001c64 	.word	0x20001c64

08000f44 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f54:	d10b      	bne.n	8000f6e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f56:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <HAL_TIM_PWM_MspInit+0x34>)
 8000f58:	69db      	ldr	r3, [r3, #28]
 8000f5a:	4a07      	ldr	r2, [pc, #28]	; (8000f78 <HAL_TIM_PWM_MspInit+0x34>)
 8000f5c:	f043 0301 	orr.w	r3, r3, #1
 8000f60:	61d3      	str	r3, [r2, #28]
 8000f62:	4b05      	ldr	r3, [pc, #20]	; (8000f78 <HAL_TIM_PWM_MspInit+0x34>)
 8000f64:	69db      	ldr	r3, [r3, #28]
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000f6e:	bf00      	nop
 8000f70:	3714      	adds	r7, #20
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bc80      	pop	{r7}
 8000f76:	4770      	bx	lr
 8000f78:	40021000 	.word	0x40021000

08000f7c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b088      	sub	sp, #32
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f84:	f107 030c 	add.w	r3, r7, #12
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f9a:	d12a      	bne.n	8000ff2 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f9c:	4b17      	ldr	r3, [pc, #92]	; (8000ffc <HAL_TIM_MspPostInit+0x80>)
 8000f9e:	699b      	ldr	r3, [r3, #24]
 8000fa0:	4a16      	ldr	r2, [pc, #88]	; (8000ffc <HAL_TIM_MspPostInit+0x80>)
 8000fa2:	f043 0308 	orr.w	r3, r3, #8
 8000fa6:	6193      	str	r3, [r2, #24]
 8000fa8:	4b14      	ldr	r3, [pc, #80]	; (8000ffc <HAL_TIM_MspPostInit+0x80>)
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	f003 0308 	and.w	r3, r3, #8
 8000fb0:	60bb      	str	r3, [r7, #8]
 8000fb2:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = PWM1_Pin|PWM2_Pin;
 8000fb4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000fb8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc2:	f107 030c 	add.w	r3, r7, #12
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	480d      	ldr	r0, [pc, #52]	; (8001000 <HAL_TIM_MspPostInit+0x84>)
 8000fca:	f001 f8e3 	bl	8002194 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8000fce:	4b0d      	ldr	r3, [pc, #52]	; (8001004 <HAL_TIM_MspPostInit+0x88>)
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	61fb      	str	r3, [r7, #28]
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000fda:	61fb      	str	r3, [r7, #28]
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000fe2:	61fb      	str	r3, [r7, #28]
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fea:	61fb      	str	r3, [r7, #28]
 8000fec:	4a05      	ldr	r2, [pc, #20]	; (8001004 <HAL_TIM_MspPostInit+0x88>)
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000ff2:	bf00      	nop
 8000ff4:	3720      	adds	r7, #32
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40021000 	.word	0x40021000
 8001000:	40010c00 	.word	0x40010c00
 8001004:	40010000 	.word	0x40010000

08001008 <user_pwm_setvalue_1>:

/* USER CODE BEGIN 1 */


void user_pwm_setvalue_1(uint16_t value)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b08a      	sub	sp, #40	; 0x28
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	80fb      	strh	r3, [r7, #6]
    TIM_OC_InitTypeDef sConfigOC;

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001012:	2360      	movs	r3, #96	; 0x60
 8001014:	60fb      	str	r3, [r7, #12]
    sConfigOC.Pulse = value;
 8001016:	88fb      	ldrh	r3, [r7, #6]
 8001018:	613b      	str	r3, [r7, #16]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800101a:	2300      	movs	r3, #0
 800101c:	617b      	str	r3, [r7, #20]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800101e:	2300      	movs	r3, #0
 8001020:	61fb      	str	r3, [r7, #28]
    HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3);
 8001022:	f107 030c 	add.w	r3, r7, #12
 8001026:	2208      	movs	r2, #8
 8001028:	4619      	mov	r1, r3
 800102a:	4805      	ldr	r0, [pc, #20]	; (8001040 <user_pwm_setvalue_1+0x38>)
 800102c:	f001 ff84 	bl	8002f38 <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001030:	2108      	movs	r1, #8
 8001032:	4803      	ldr	r0, [pc, #12]	; (8001040 <user_pwm_setvalue_1+0x38>)
 8001034:	f001 ff4e 	bl	8002ed4 <HAL_TIM_PWM_Start>
    //HAL_TIM_MspPostInit(&htim2);
}
 8001038:	bf00      	nop
 800103a:	3728      	adds	r7, #40	; 0x28
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20001c64 	.word	0x20001c64

08001044 <user_pwm_setvalue_2>:
void user_pwm_setvalue_2(uint16_t value)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08a      	sub	sp, #40	; 0x28
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	80fb      	strh	r3, [r7, #6]
    TIM_OC_InitTypeDef sConfigOC;

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800104e:	2360      	movs	r3, #96	; 0x60
 8001050:	60fb      	str	r3, [r7, #12]
    sConfigOC.Pulse = value;
 8001052:	88fb      	ldrh	r3, [r7, #6]
 8001054:	613b      	str	r3, [r7, #16]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001056:	2300      	movs	r3, #0
 8001058:	617b      	str	r3, [r7, #20]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800105a:	2300      	movs	r3, #0
 800105c:	61fb      	str	r3, [r7, #28]
    HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4);
 800105e:	f107 030c 	add.w	r3, r7, #12
 8001062:	220c      	movs	r2, #12
 8001064:	4619      	mov	r1, r3
 8001066:	4805      	ldr	r0, [pc, #20]	; (800107c <user_pwm_setvalue_2+0x38>)
 8001068:	f001 ff66 	bl	8002f38 <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800106c:	210c      	movs	r1, #12
 800106e:	4803      	ldr	r0, [pc, #12]	; (800107c <user_pwm_setvalue_2+0x38>)
 8001070:	f001 ff30 	bl	8002ed4 <HAL_TIM_PWM_Start>
   // HAL_TIM_MspPostInit(&htim2);
}
 8001074:	bf00      	nop
 8001076:	3728      	adds	r7, #40	; 0x28
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	20001c64 	.word	0x20001c64

08001080 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001084:	4b11      	ldr	r3, [pc, #68]	; (80010cc <MX_USART2_UART_Init+0x4c>)
 8001086:	4a12      	ldr	r2, [pc, #72]	; (80010d0 <MX_USART2_UART_Init+0x50>)
 8001088:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800108a:	4b10      	ldr	r3, [pc, #64]	; (80010cc <MX_USART2_UART_Init+0x4c>)
 800108c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001090:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001092:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <MX_USART2_UART_Init+0x4c>)
 8001094:	2200      	movs	r2, #0
 8001096:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001098:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <MX_USART2_UART_Init+0x4c>)
 800109a:	2200      	movs	r2, #0
 800109c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800109e:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <MX_USART2_UART_Init+0x4c>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010a4:	4b09      	ldr	r3, [pc, #36]	; (80010cc <MX_USART2_UART_Init+0x4c>)
 80010a6:	220c      	movs	r2, #12
 80010a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010aa:	4b08      	ldr	r3, [pc, #32]	; (80010cc <MX_USART2_UART_Init+0x4c>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <MX_USART2_UART_Init+0x4c>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010b6:	4805      	ldr	r0, [pc, #20]	; (80010cc <MX_USART2_UART_Init+0x4c>)
 80010b8:	f002 fa56 	bl	8003568 <HAL_UART_Init>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010c2:	f7ff fd88 	bl	8000bd6 <Error_Handler>
  }

}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20001d2c 	.word	0x20001d2c
 80010d0:	40004400 	.word	0x40004400

080010d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b088      	sub	sp, #32
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010dc:	f107 0310 	add.w	r3, r7, #16
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a47      	ldr	r2, [pc, #284]	; (800120c <HAL_UART_MspInit+0x138>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	f040 8086 	bne.w	8001202 <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010f6:	4b46      	ldr	r3, [pc, #280]	; (8001210 <HAL_UART_MspInit+0x13c>)
 80010f8:	69db      	ldr	r3, [r3, #28]
 80010fa:	4a45      	ldr	r2, [pc, #276]	; (8001210 <HAL_UART_MspInit+0x13c>)
 80010fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001100:	61d3      	str	r3, [r2, #28]
 8001102:	4b43      	ldr	r3, [pc, #268]	; (8001210 <HAL_UART_MspInit+0x13c>)
 8001104:	69db      	ldr	r3, [r3, #28]
 8001106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800110e:	4b40      	ldr	r3, [pc, #256]	; (8001210 <HAL_UART_MspInit+0x13c>)
 8001110:	699b      	ldr	r3, [r3, #24]
 8001112:	4a3f      	ldr	r2, [pc, #252]	; (8001210 <HAL_UART_MspInit+0x13c>)
 8001114:	f043 0304 	orr.w	r3, r3, #4
 8001118:	6193      	str	r3, [r2, #24]
 800111a:	4b3d      	ldr	r3, [pc, #244]	; (8001210 <HAL_UART_MspInit+0x13c>)
 800111c:	699b      	ldr	r3, [r3, #24]
 800111e:	f003 0304 	and.w	r3, r3, #4
 8001122:	60bb      	str	r3, [r7, #8]
 8001124:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001126:	2304      	movs	r3, #4
 8001128:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112a:	2302      	movs	r3, #2
 800112c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800112e:	2303      	movs	r3, #3
 8001130:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001132:	f107 0310 	add.w	r3, r7, #16
 8001136:	4619      	mov	r1, r3
 8001138:	4836      	ldr	r0, [pc, #216]	; (8001214 <HAL_UART_MspInit+0x140>)
 800113a:	f001 f82b 	bl	8002194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800113e:	2308      	movs	r3, #8
 8001140:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001142:	2300      	movs	r3, #0
 8001144:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114a:	f107 0310 	add.w	r3, r7, #16
 800114e:	4619      	mov	r1, r3
 8001150:	4830      	ldr	r0, [pc, #192]	; (8001214 <HAL_UART_MspInit+0x140>)
 8001152:	f001 f81f 	bl	8002194 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8001156:	4b30      	ldr	r3, [pc, #192]	; (8001218 <HAL_UART_MspInit+0x144>)
 8001158:	4a30      	ldr	r2, [pc, #192]	; (800121c <HAL_UART_MspInit+0x148>)
 800115a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800115c:	4b2e      	ldr	r3, [pc, #184]	; (8001218 <HAL_UART_MspInit+0x144>)
 800115e:	2210      	movs	r2, #16
 8001160:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001162:	4b2d      	ldr	r3, [pc, #180]	; (8001218 <HAL_UART_MspInit+0x144>)
 8001164:	2200      	movs	r2, #0
 8001166:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001168:	4b2b      	ldr	r3, [pc, #172]	; (8001218 <HAL_UART_MspInit+0x144>)
 800116a:	2280      	movs	r2, #128	; 0x80
 800116c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800116e:	4b2a      	ldr	r3, [pc, #168]	; (8001218 <HAL_UART_MspInit+0x144>)
 8001170:	2200      	movs	r2, #0
 8001172:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001174:	4b28      	ldr	r3, [pc, #160]	; (8001218 <HAL_UART_MspInit+0x144>)
 8001176:	2200      	movs	r2, #0
 8001178:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800117a:	4b27      	ldr	r3, [pc, #156]	; (8001218 <HAL_UART_MspInit+0x144>)
 800117c:	2200      	movs	r2, #0
 800117e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001180:	4b25      	ldr	r3, [pc, #148]	; (8001218 <HAL_UART_MspInit+0x144>)
 8001182:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001186:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001188:	4823      	ldr	r0, [pc, #140]	; (8001218 <HAL_UART_MspInit+0x144>)
 800118a:	f000 fd9f 	bl	8001ccc <HAL_DMA_Init>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8001194:	f7ff fd1f 	bl	8000bd6 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	4a1f      	ldr	r2, [pc, #124]	; (8001218 <HAL_UART_MspInit+0x144>)
 800119c:	631a      	str	r2, [r3, #48]	; 0x30
 800119e:	4a1e      	ldr	r2, [pc, #120]	; (8001218 <HAL_UART_MspInit+0x144>)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80011a4:	4b1e      	ldr	r3, [pc, #120]	; (8001220 <HAL_UART_MspInit+0x14c>)
 80011a6:	4a1f      	ldr	r2, [pc, #124]	; (8001224 <HAL_UART_MspInit+0x150>)
 80011a8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011aa:	4b1d      	ldr	r3, [pc, #116]	; (8001220 <HAL_UART_MspInit+0x14c>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011b0:	4b1b      	ldr	r3, [pc, #108]	; (8001220 <HAL_UART_MspInit+0x14c>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011b6:	4b1a      	ldr	r3, [pc, #104]	; (8001220 <HAL_UART_MspInit+0x14c>)
 80011b8:	2280      	movs	r2, #128	; 0x80
 80011ba:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011bc:	4b18      	ldr	r3, [pc, #96]	; (8001220 <HAL_UART_MspInit+0x14c>)
 80011be:	2200      	movs	r2, #0
 80011c0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011c2:	4b17      	ldr	r3, [pc, #92]	; (8001220 <HAL_UART_MspInit+0x14c>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80011c8:	4b15      	ldr	r3, [pc, #84]	; (8001220 <HAL_UART_MspInit+0x14c>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80011ce:	4b14      	ldr	r3, [pc, #80]	; (8001220 <HAL_UART_MspInit+0x14c>)
 80011d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011d4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80011d6:	4812      	ldr	r0, [pc, #72]	; (8001220 <HAL_UART_MspInit+0x14c>)
 80011d8:	f000 fd78 	bl	8001ccc <HAL_DMA_Init>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 80011e2:	f7ff fcf8 	bl	8000bd6 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a0d      	ldr	r2, [pc, #52]	; (8001220 <HAL_UART_MspInit+0x14c>)
 80011ea:	635a      	str	r2, [r3, #52]	; 0x34
 80011ec:	4a0c      	ldr	r2, [pc, #48]	; (8001220 <HAL_UART_MspInit+0x14c>)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 80011f2:	2200      	movs	r2, #0
 80011f4:	2101      	movs	r1, #1
 80011f6:	2026      	movs	r0, #38	; 0x26
 80011f8:	f000 fd31 	bl	8001c5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011fc:	2026      	movs	r0, #38	; 0x26
 80011fe:	f000 fd4a 	bl	8001c96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001202:	bf00      	nop
 8001204:	3720      	adds	r7, #32
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40004400 	.word	0x40004400
 8001210:	40021000 	.word	0x40021000
 8001214:	40010800 	.word	0x40010800
 8001218:	20001ce8 	.word	0x20001ce8
 800121c:	40020080 	.word	0x40020080
 8001220:	20001ca4 	.word	0x20001ca4
 8001224:	4002006c 	.word	0x4002006c

08001228 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001228:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800122a:	e003      	b.n	8001234 <LoopCopyDataInit>

0800122c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800122c:	4b0b      	ldr	r3, [pc, #44]	; (800125c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800122e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001230:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001232:	3104      	adds	r1, #4

08001234 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001234:	480a      	ldr	r0, [pc, #40]	; (8001260 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001236:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001238:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800123a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800123c:	d3f6      	bcc.n	800122c <CopyDataInit>
  ldr r2, =_sbss
 800123e:	4a0a      	ldr	r2, [pc, #40]	; (8001268 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001240:	e002      	b.n	8001248 <LoopFillZerobss>

08001242 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001242:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001244:	f842 3b04 	str.w	r3, [r2], #4

08001248 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001248:	4b08      	ldr	r3, [pc, #32]	; (800126c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800124a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800124c:	d3f9      	bcc.n	8001242 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800124e:	f7ff fde1 	bl	8000e14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001252:	f005 fb59 	bl	8006908 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001256:	f7ff fc57 	bl	8000b08 <main>
  bx lr
 800125a:	4770      	bx	lr
  ldr r3, =_sidata
 800125c:	08007ca8 	.word	0x08007ca8
  ldr r0, =_sdata
 8001260:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001264:	2000007c 	.word	0x2000007c
  ldr r2, =_sbss
 8001268:	2000007c 	.word	0x2000007c
  ldr r3, = _ebss
 800126c:	20001db4 	.word	0x20001db4

08001270 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001270:	e7fe      	b.n	8001270 <ADC1_2_IRQHandler>
	...

08001274 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001278:	4b08      	ldr	r3, [pc, #32]	; (800129c <HAL_Init+0x28>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a07      	ldr	r2, [pc, #28]	; (800129c <HAL_Init+0x28>)
 800127e:	f043 0310 	orr.w	r3, r3, #16
 8001282:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001284:	2003      	movs	r0, #3
 8001286:	f000 fcdf 	bl	8001c48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800128a:	2000      	movs	r0, #0
 800128c:	f000 f808 	bl	80012a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001290:	f7ff fca8 	bl	8000be4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001294:	2300      	movs	r3, #0
}
 8001296:	4618      	mov	r0, r3
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40022000 	.word	0x40022000

080012a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012a8:	4b12      	ldr	r3, [pc, #72]	; (80012f4 <HAL_InitTick+0x54>)
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	4b12      	ldr	r3, [pc, #72]	; (80012f8 <HAL_InitTick+0x58>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	4619      	mov	r1, r3
 80012b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80012be:	4618      	mov	r0, r3
 80012c0:	f000 fcf7 	bl	8001cb2 <HAL_SYSTICK_Config>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e00e      	b.n	80012ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2b0f      	cmp	r3, #15
 80012d2:	d80a      	bhi.n	80012ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012d4:	2200      	movs	r2, #0
 80012d6:	6879      	ldr	r1, [r7, #4]
 80012d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012dc:	f000 fcbf 	bl	8001c5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012e0:	4a06      	ldr	r2, [pc, #24]	; (80012fc <HAL_InitTick+0x5c>)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012e6:	2300      	movs	r3, #0
 80012e8:	e000      	b.n	80012ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	20000008 	.word	0x20000008
 80012f8:	20000010 	.word	0x20000010
 80012fc:	2000000c 	.word	0x2000000c

08001300 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001304:	4b05      	ldr	r3, [pc, #20]	; (800131c <HAL_IncTick+0x1c>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	461a      	mov	r2, r3
 800130a:	4b05      	ldr	r3, [pc, #20]	; (8001320 <HAL_IncTick+0x20>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4413      	add	r3, r2
 8001310:	4a03      	ldr	r2, [pc, #12]	; (8001320 <HAL_IncTick+0x20>)
 8001312:	6013      	str	r3, [r2, #0]
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	bc80      	pop	{r7}
 800131a:	4770      	bx	lr
 800131c:	20000010 	.word	0x20000010
 8001320:	20001d6c 	.word	0x20001d6c

08001324 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  return uwTick;
 8001328:	4b02      	ldr	r3, [pc, #8]	; (8001334 <HAL_GetTick+0x10>)
 800132a:	681b      	ldr	r3, [r3, #0]
}
 800132c:	4618      	mov	r0, r3
 800132e:	46bd      	mov	sp, r7
 8001330:	bc80      	pop	{r7}
 8001332:	4770      	bx	lr
 8001334:	20001d6c 	.word	0x20001d6c

08001338 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001340:	2300      	movs	r3, #0
 8001342:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001344:	2300      	movs	r3, #0
 8001346:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001348:	2300      	movs	r3, #0
 800134a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800134c:	2300      	movs	r3, #0
 800134e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d101      	bne.n	800135a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e0be      	b.n	80014d8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001364:	2b00      	cmp	r3, #0
 8001366:	d109      	bne.n	800137c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2200      	movs	r2, #0
 800136c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2200      	movs	r2, #0
 8001372:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f7fe ff38 	bl	80001ec <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f000 faf7 	bl	8001970 <ADC_ConversionStop_Disable>
 8001382:	4603      	mov	r3, r0
 8001384:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800138a:	f003 0310 	and.w	r3, r3, #16
 800138e:	2b00      	cmp	r3, #0
 8001390:	f040 8099 	bne.w	80014c6 <HAL_ADC_Init+0x18e>
 8001394:	7dfb      	ldrb	r3, [r7, #23]
 8001396:	2b00      	cmp	r3, #0
 8001398:	f040 8095 	bne.w	80014c6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80013a4:	f023 0302 	bic.w	r3, r3, #2
 80013a8:	f043 0202 	orr.w	r2, r3, #2
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80013b8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	7b1b      	ldrb	r3, [r3, #12]
 80013be:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80013c0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80013c2:	68ba      	ldr	r2, [r7, #8]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013d0:	d003      	beq.n	80013da <HAL_ADC_Init+0xa2>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d102      	bne.n	80013e0 <HAL_ADC_Init+0xa8>
 80013da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013de:	e000      	b.n	80013e2 <HAL_ADC_Init+0xaa>
 80013e0:	2300      	movs	r3, #0
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	7d1b      	ldrb	r3, [r3, #20]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d119      	bne.n	8001424 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	7b1b      	ldrb	r3, [r3, #12]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d109      	bne.n	800140c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	3b01      	subs	r3, #1
 80013fe:	035a      	lsls	r2, r3, #13
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	4313      	orrs	r3, r2
 8001404:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001408:	613b      	str	r3, [r7, #16]
 800140a:	e00b      	b.n	8001424 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001410:	f043 0220 	orr.w	r2, r3, #32
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800141c:	f043 0201 	orr.w	r2, r3, #1
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	430a      	orrs	r2, r1
 8001436:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	689a      	ldr	r2, [r3, #8]
 800143e:	4b28      	ldr	r3, [pc, #160]	; (80014e0 <HAL_ADC_Init+0x1a8>)
 8001440:	4013      	ands	r3, r2
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	6812      	ldr	r2, [r2, #0]
 8001446:	68b9      	ldr	r1, [r7, #8]
 8001448:	430b      	orrs	r3, r1
 800144a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001454:	d003      	beq.n	800145e <HAL_ADC_Init+0x126>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d104      	bne.n	8001468 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	691b      	ldr	r3, [r3, #16]
 8001462:	3b01      	subs	r3, #1
 8001464:	051b      	lsls	r3, r3, #20
 8001466:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800146e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	68fa      	ldr	r2, [r7, #12]
 8001478:	430a      	orrs	r2, r1
 800147a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	689a      	ldr	r2, [r3, #8]
 8001482:	4b18      	ldr	r3, [pc, #96]	; (80014e4 <HAL_ADC_Init+0x1ac>)
 8001484:	4013      	ands	r3, r2
 8001486:	68ba      	ldr	r2, [r7, #8]
 8001488:	429a      	cmp	r2, r3
 800148a:	d10b      	bne.n	80014a4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2200      	movs	r2, #0
 8001490:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001496:	f023 0303 	bic.w	r3, r3, #3
 800149a:	f043 0201 	orr.w	r2, r3, #1
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80014a2:	e018      	b.n	80014d6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a8:	f023 0312 	bic.w	r3, r3, #18
 80014ac:	f043 0210 	orr.w	r2, r3, #16
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b8:	f043 0201 	orr.w	r2, r3, #1
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80014c4:	e007      	b.n	80014d6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ca:	f043 0210 	orr.w	r2, r3, #16
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80014d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3718      	adds	r7, #24
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	ffe1f7fd 	.word	0xffe1f7fd
 80014e4:	ff1f0efe 	.word	0xff1f0efe

080014e8 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014f4:	2300      	movs	r3, #0
 80014f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a64      	ldr	r2, [pc, #400]	; (8001690 <HAL_ADC_Start_DMA+0x1a8>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d004      	beq.n	800150c <HAL_ADC_Start_DMA+0x24>
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a63      	ldr	r2, [pc, #396]	; (8001694 <HAL_ADC_Start_DMA+0x1ac>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d106      	bne.n	800151a <HAL_ADC_Start_DMA+0x32>
 800150c:	4b60      	ldr	r3, [pc, #384]	; (8001690 <HAL_ADC_Start_DMA+0x1a8>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001514:	2b00      	cmp	r3, #0
 8001516:	f040 80b3 	bne.w	8001680 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001520:	2b01      	cmp	r3, #1
 8001522:	d101      	bne.n	8001528 <HAL_ADC_Start_DMA+0x40>
 8001524:	2302      	movs	r3, #2
 8001526:	e0ae      	b.n	8001686 <HAL_ADC_Start_DMA+0x19e>
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	2201      	movs	r2, #1
 800152c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001530:	68f8      	ldr	r0, [r7, #12]
 8001532:	f000 f9cb 	bl	80018cc <ADC_Enable>
 8001536:	4603      	mov	r3, r0
 8001538:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800153a:	7dfb      	ldrb	r3, [r7, #23]
 800153c:	2b00      	cmp	r3, #0
 800153e:	f040 809a 	bne.w	8001676 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001546:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800154a:	f023 0301 	bic.w	r3, r3, #1
 800154e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a4e      	ldr	r2, [pc, #312]	; (8001694 <HAL_ADC_Start_DMA+0x1ac>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d105      	bne.n	800156c <HAL_ADC_Start_DMA+0x84>
 8001560:	4b4b      	ldr	r3, [pc, #300]	; (8001690 <HAL_ADC_Start_DMA+0x1a8>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d115      	bne.n	8001598 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001570:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001582:	2b00      	cmp	r3, #0
 8001584:	d026      	beq.n	80015d4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800158a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800158e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001596:	e01d      	b.n	80015d4 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800159c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a39      	ldr	r2, [pc, #228]	; (8001690 <HAL_ADC_Start_DMA+0x1a8>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d004      	beq.n	80015b8 <HAL_ADC_Start_DMA+0xd0>
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a38      	ldr	r2, [pc, #224]	; (8001694 <HAL_ADC_Start_DMA+0x1ac>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d10d      	bne.n	80015d4 <HAL_ADC_Start_DMA+0xec>
 80015b8:	4b35      	ldr	r3, [pc, #212]	; (8001690 <HAL_ADC_Start_DMA+0x1a8>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d007      	beq.n	80015d4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80015cc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d006      	beq.n	80015ee <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e4:	f023 0206 	bic.w	r2, r3, #6
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	62da      	str	r2, [r3, #44]	; 0x2c
 80015ec:	e002      	b.n	80015f4 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2200      	movs	r2, #0
 80015f2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2200      	movs	r2, #0
 80015f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	6a1b      	ldr	r3, [r3, #32]
 8001600:	4a25      	ldr	r2, [pc, #148]	; (8001698 <HAL_ADC_Start_DMA+0x1b0>)
 8001602:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	6a1b      	ldr	r3, [r3, #32]
 8001608:	4a24      	ldr	r2, [pc, #144]	; (800169c <HAL_ADC_Start_DMA+0x1b4>)
 800160a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	6a1b      	ldr	r3, [r3, #32]
 8001610:	4a23      	ldr	r2, [pc, #140]	; (80016a0 <HAL_ADC_Start_DMA+0x1b8>)
 8001612:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f06f 0202 	mvn.w	r2, #2
 800161c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	689a      	ldr	r2, [r3, #8]
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800162c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	6a18      	ldr	r0, [r3, #32]
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	334c      	adds	r3, #76	; 0x4c
 8001638:	4619      	mov	r1, r3
 800163a:	68ba      	ldr	r2, [r7, #8]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f000 fb9f 	bl	8001d80 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800164c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001650:	d108      	bne.n	8001664 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	689a      	ldr	r2, [r3, #8]
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001660:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001662:	e00f      	b.n	8001684 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	689a      	ldr	r2, [r3, #8]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001672:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001674:	e006      	b.n	8001684 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	2200      	movs	r2, #0
 800167a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800167e:	e001      	b.n	8001684 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001684:	7dfb      	ldrb	r3, [r7, #23]
}
 8001686:	4618      	mov	r0, r3
 8001688:	3718      	adds	r7, #24
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40012400 	.word	0x40012400
 8001694:	40012800 	.word	0x40012800
 8001698:	080019e5 	.word	0x080019e5
 800169c:	08001a61 	.word	0x08001a61
 80016a0:	08001a7d 	.word	0x08001a7d

080016a4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bc80      	pop	{r7}
 80016b4:	4770      	bx	lr

080016b6 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80016b6:	b480      	push	{r7}
 80016b8:	b083      	sub	sp, #12
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80016be:	bf00      	nop
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bc80      	pop	{r7}
 80016c6:	4770      	bx	lr

080016c8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bc80      	pop	{r7}
 80016d8:	4770      	bx	lr
	...

080016dc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80016dc:	b480      	push	{r7}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016e6:	2300      	movs	r3, #0
 80016e8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80016ea:	2300      	movs	r3, #0
 80016ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d101      	bne.n	80016fc <HAL_ADC_ConfigChannel+0x20>
 80016f8:	2302      	movs	r3, #2
 80016fa:	e0dc      	b.n	80018b6 <HAL_ADC_ConfigChannel+0x1da>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2201      	movs	r2, #1
 8001700:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	2b06      	cmp	r3, #6
 800170a:	d81c      	bhi.n	8001746 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685a      	ldr	r2, [r3, #4]
 8001716:	4613      	mov	r3, r2
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	4413      	add	r3, r2
 800171c:	3b05      	subs	r3, #5
 800171e:	221f      	movs	r2, #31
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	43db      	mvns	r3, r3
 8001726:	4019      	ands	r1, r3
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	6818      	ldr	r0, [r3, #0]
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685a      	ldr	r2, [r3, #4]
 8001730:	4613      	mov	r3, r2
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	4413      	add	r3, r2
 8001736:	3b05      	subs	r3, #5
 8001738:	fa00 f203 	lsl.w	r2, r0, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	430a      	orrs	r2, r1
 8001742:	635a      	str	r2, [r3, #52]	; 0x34
 8001744:	e03c      	b.n	80017c0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	2b0c      	cmp	r3, #12
 800174c:	d81c      	bhi.n	8001788 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685a      	ldr	r2, [r3, #4]
 8001758:	4613      	mov	r3, r2
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	4413      	add	r3, r2
 800175e:	3b23      	subs	r3, #35	; 0x23
 8001760:	221f      	movs	r2, #31
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	43db      	mvns	r3, r3
 8001768:	4019      	ands	r1, r3
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	6818      	ldr	r0, [r3, #0]
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685a      	ldr	r2, [r3, #4]
 8001772:	4613      	mov	r3, r2
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	4413      	add	r3, r2
 8001778:	3b23      	subs	r3, #35	; 0x23
 800177a:	fa00 f203 	lsl.w	r2, r0, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	430a      	orrs	r2, r1
 8001784:	631a      	str	r2, [r3, #48]	; 0x30
 8001786:	e01b      	b.n	80017c0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685a      	ldr	r2, [r3, #4]
 8001792:	4613      	mov	r3, r2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	4413      	add	r3, r2
 8001798:	3b41      	subs	r3, #65	; 0x41
 800179a:	221f      	movs	r2, #31
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	43db      	mvns	r3, r3
 80017a2:	4019      	ands	r1, r3
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	6818      	ldr	r0, [r3, #0]
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685a      	ldr	r2, [r3, #4]
 80017ac:	4613      	mov	r3, r2
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	4413      	add	r3, r2
 80017b2:	3b41      	subs	r3, #65	; 0x41
 80017b4:	fa00 f203 	lsl.w	r2, r0, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	430a      	orrs	r2, r1
 80017be:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2b09      	cmp	r3, #9
 80017c6:	d91c      	bls.n	8001802 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	68d9      	ldr	r1, [r3, #12]
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	4613      	mov	r3, r2
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	4413      	add	r3, r2
 80017d8:	3b1e      	subs	r3, #30
 80017da:	2207      	movs	r2, #7
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	43db      	mvns	r3, r3
 80017e2:	4019      	ands	r1, r3
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	6898      	ldr	r0, [r3, #8]
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	4613      	mov	r3, r2
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	4413      	add	r3, r2
 80017f2:	3b1e      	subs	r3, #30
 80017f4:	fa00 f203 	lsl.w	r2, r0, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	430a      	orrs	r2, r1
 80017fe:	60da      	str	r2, [r3, #12]
 8001800:	e019      	b.n	8001836 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	6919      	ldr	r1, [r3, #16]
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	4613      	mov	r3, r2
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	4413      	add	r3, r2
 8001812:	2207      	movs	r2, #7
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	43db      	mvns	r3, r3
 800181a:	4019      	ands	r1, r3
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	6898      	ldr	r0, [r3, #8]
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	4613      	mov	r3, r2
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	4413      	add	r3, r2
 800182a:	fa00 f203 	lsl.w	r2, r0, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	430a      	orrs	r2, r1
 8001834:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2b10      	cmp	r3, #16
 800183c:	d003      	beq.n	8001846 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001842:	2b11      	cmp	r3, #17
 8001844:	d132      	bne.n	80018ac <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a1d      	ldr	r2, [pc, #116]	; (80018c0 <HAL_ADC_ConfigChannel+0x1e4>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d125      	bne.n	800189c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d126      	bne.n	80018ac <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	689a      	ldr	r2, [r3, #8]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800186c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2b10      	cmp	r3, #16
 8001874:	d11a      	bne.n	80018ac <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001876:	4b13      	ldr	r3, [pc, #76]	; (80018c4 <HAL_ADC_ConfigChannel+0x1e8>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a13      	ldr	r2, [pc, #76]	; (80018c8 <HAL_ADC_ConfigChannel+0x1ec>)
 800187c:	fba2 2303 	umull	r2, r3, r2, r3
 8001880:	0c9a      	lsrs	r2, r3, #18
 8001882:	4613      	mov	r3, r2
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	4413      	add	r3, r2
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800188c:	e002      	b.n	8001894 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	3b01      	subs	r3, #1
 8001892:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d1f9      	bne.n	800188e <HAL_ADC_ConfigChannel+0x1b2>
 800189a:	e007      	b.n	80018ac <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a0:	f043 0220 	orr.w	r2, r3, #32
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2200      	movs	r2, #0
 80018b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80018b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3714      	adds	r7, #20
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bc80      	pop	{r7}
 80018be:	4770      	bx	lr
 80018c0:	40012400 	.word	0x40012400
 80018c4:	20000008 	.word	0x20000008
 80018c8:	431bde83 	.word	0x431bde83

080018cc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018d4:	2300      	movs	r3, #0
 80018d6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80018d8:	2300      	movs	r3, #0
 80018da:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d039      	beq.n	800195e <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	689a      	ldr	r2, [r3, #8]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f042 0201 	orr.w	r2, r2, #1
 80018f8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80018fa:	4b1b      	ldr	r3, [pc, #108]	; (8001968 <ADC_Enable+0x9c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a1b      	ldr	r2, [pc, #108]	; (800196c <ADC_Enable+0xa0>)
 8001900:	fba2 2303 	umull	r2, r3, r2, r3
 8001904:	0c9b      	lsrs	r3, r3, #18
 8001906:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001908:	e002      	b.n	8001910 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	3b01      	subs	r3, #1
 800190e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1f9      	bne.n	800190a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001916:	f7ff fd05 	bl	8001324 <HAL_GetTick>
 800191a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800191c:	e018      	b.n	8001950 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800191e:	f7ff fd01 	bl	8001324 <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	2b02      	cmp	r3, #2
 800192a:	d911      	bls.n	8001950 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001930:	f043 0210 	orr.w	r2, r3, #16
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800193c:	f043 0201 	orr.w	r2, r3, #1
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e007      	b.n	8001960 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	2b01      	cmp	r3, #1
 800195c:	d1df      	bne.n	800191e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800195e:	2300      	movs	r3, #0
}
 8001960:	4618      	mov	r0, r3
 8001962:	3710      	adds	r7, #16
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	20000008 	.word	0x20000008
 800196c:	431bde83 	.word	0x431bde83

08001970 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001978:	2300      	movs	r3, #0
 800197a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	2b01      	cmp	r3, #1
 8001988:	d127      	bne.n	80019da <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	689a      	ldr	r2, [r3, #8]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f022 0201 	bic.w	r2, r2, #1
 8001998:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800199a:	f7ff fcc3 	bl	8001324 <HAL_GetTick>
 800199e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80019a0:	e014      	b.n	80019cc <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80019a2:	f7ff fcbf 	bl	8001324 <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d90d      	bls.n	80019cc <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b4:	f043 0210 	orr.w	r2, r3, #16
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c0:	f043 0201 	orr.w	r2, r3, #1
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e007      	b.n	80019dc <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d0e3      	beq.n	80019a2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80019da:	2300      	movs	r3, #0
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3710      	adds	r7, #16
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f0:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d127      	bne.n	8001a4e <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a02:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001a14:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001a18:	d115      	bne.n	8001a46 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d111      	bne.n	8001a46 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d105      	bne.n	8001a46 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a3e:	f043 0201 	orr.w	r2, r3, #1
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001a46:	68f8      	ldr	r0, [r7, #12]
 8001a48:	f7ff fe2c 	bl	80016a4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001a4c:	e004      	b.n	8001a58 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	6a1b      	ldr	r3, [r3, #32]
 8001a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	4798      	blx	r3
}
 8001a58:	bf00      	nop
 8001a5a:	3710      	adds	r7, #16
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6c:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001a6e:	68f8      	ldr	r0, [r7, #12]
 8001a70:	f7ff fe21 	bl	80016b6 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a74:	bf00      	nop
 8001a76:	3710      	adds	r7, #16
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a88:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a8e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a9a:	f043 0204 	orr.w	r2, r3, #4
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001aa2:	68f8      	ldr	r0, [r7, #12]
 8001aa4:	f7ff fe10 	bl	80016c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001aa8:	bf00      	nop
 8001aaa:	3710      	adds	r7, #16
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <__NVIC_SetPriorityGrouping>:
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f003 0307 	and.w	r3, r3, #7
 8001abe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ac0:	4b0c      	ldr	r3, [pc, #48]	; (8001af4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ac6:	68ba      	ldr	r2, [r7, #8]
 8001ac8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001acc:	4013      	ands	r3, r2
 8001ace:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ad8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001adc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ae0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ae2:	4a04      	ldr	r2, [pc, #16]	; (8001af4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	60d3      	str	r3, [r2, #12]
}
 8001ae8:	bf00      	nop
 8001aea:	3714      	adds	r7, #20
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bc80      	pop	{r7}
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	e000ed00 	.word	0xe000ed00

08001af8 <__NVIC_GetPriorityGrouping>:
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001afc:	4b04      	ldr	r3, [pc, #16]	; (8001b10 <__NVIC_GetPriorityGrouping+0x18>)
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	0a1b      	lsrs	r3, r3, #8
 8001b02:	f003 0307 	and.w	r3, r3, #7
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bc80      	pop	{r7}
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	e000ed00 	.word	0xe000ed00

08001b14 <__NVIC_EnableIRQ>:
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	db0b      	blt.n	8001b3e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b26:	79fb      	ldrb	r3, [r7, #7]
 8001b28:	f003 021f 	and.w	r2, r3, #31
 8001b2c:	4906      	ldr	r1, [pc, #24]	; (8001b48 <__NVIC_EnableIRQ+0x34>)
 8001b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b32:	095b      	lsrs	r3, r3, #5
 8001b34:	2001      	movs	r0, #1
 8001b36:	fa00 f202 	lsl.w	r2, r0, r2
 8001b3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr
 8001b48:	e000e100 	.word	0xe000e100

08001b4c <__NVIC_SetPriority>:
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4603      	mov	r3, r0
 8001b54:	6039      	str	r1, [r7, #0]
 8001b56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	db0a      	blt.n	8001b76 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	b2da      	uxtb	r2, r3
 8001b64:	490c      	ldr	r1, [pc, #48]	; (8001b98 <__NVIC_SetPriority+0x4c>)
 8001b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6a:	0112      	lsls	r2, r2, #4
 8001b6c:	b2d2      	uxtb	r2, r2
 8001b6e:	440b      	add	r3, r1
 8001b70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001b74:	e00a      	b.n	8001b8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	b2da      	uxtb	r2, r3
 8001b7a:	4908      	ldr	r1, [pc, #32]	; (8001b9c <__NVIC_SetPriority+0x50>)
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	f003 030f 	and.w	r3, r3, #15
 8001b82:	3b04      	subs	r3, #4
 8001b84:	0112      	lsls	r2, r2, #4
 8001b86:	b2d2      	uxtb	r2, r2
 8001b88:	440b      	add	r3, r1
 8001b8a:	761a      	strb	r2, [r3, #24]
}
 8001b8c:	bf00      	nop
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bc80      	pop	{r7}
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	e000e100 	.word	0xe000e100
 8001b9c:	e000ed00 	.word	0xe000ed00

08001ba0 <NVIC_EncodePriority>:
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b089      	sub	sp, #36	; 0x24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f003 0307 	and.w	r3, r3, #7
 8001bb2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	f1c3 0307 	rsb	r3, r3, #7
 8001bba:	2b04      	cmp	r3, #4
 8001bbc:	bf28      	it	cs
 8001bbe:	2304      	movcs	r3, #4
 8001bc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	3304      	adds	r3, #4
 8001bc6:	2b06      	cmp	r3, #6
 8001bc8:	d902      	bls.n	8001bd0 <NVIC_EncodePriority+0x30>
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	3b03      	subs	r3, #3
 8001bce:	e000      	b.n	8001bd2 <NVIC_EncodePriority+0x32>
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	43da      	mvns	r2, r3
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	401a      	ands	r2, r3
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001be8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf2:	43d9      	mvns	r1, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf8:	4313      	orrs	r3, r2
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3724      	adds	r7, #36	; 0x24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bc80      	pop	{r7}
 8001c02:	4770      	bx	lr

08001c04 <SysTick_Config>:
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c14:	d301      	bcc.n	8001c1a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001c16:	2301      	movs	r3, #1
 8001c18:	e00f      	b.n	8001c3a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c1a:	4a0a      	ldr	r2, [pc, #40]	; (8001c44 <SysTick_Config+0x40>)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c22:	210f      	movs	r1, #15
 8001c24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c28:	f7ff ff90 	bl	8001b4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c2c:	4b05      	ldr	r3, [pc, #20]	; (8001c44 <SysTick_Config+0x40>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c32:	4b04      	ldr	r3, [pc, #16]	; (8001c44 <SysTick_Config+0x40>)
 8001c34:	2207      	movs	r2, #7
 8001c36:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	e000e010 	.word	0xe000e010

08001c48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f7ff ff2d 	bl	8001ab0 <__NVIC_SetPriorityGrouping>
}
 8001c56:	bf00      	nop
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b086      	sub	sp, #24
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	4603      	mov	r3, r0
 8001c66:	60b9      	str	r1, [r7, #8]
 8001c68:	607a      	str	r2, [r7, #4]
 8001c6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c70:	f7ff ff42 	bl	8001af8 <__NVIC_GetPriorityGrouping>
 8001c74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	68b9      	ldr	r1, [r7, #8]
 8001c7a:	6978      	ldr	r0, [r7, #20]
 8001c7c:	f7ff ff90 	bl	8001ba0 <NVIC_EncodePriority>
 8001c80:	4602      	mov	r2, r0
 8001c82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c86:	4611      	mov	r1, r2
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff ff5f 	bl	8001b4c <__NVIC_SetPriority>
}
 8001c8e:	bf00      	nop
 8001c90:	3718      	adds	r7, #24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b082      	sub	sp, #8
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff ff35 	bl	8001b14 <__NVIC_EnableIRQ>
}
 8001caa:	bf00      	nop
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b082      	sub	sp, #8
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f7ff ffa2 	bl	8001c04 <SysTick_Config>
 8001cc0:	4603      	mov	r3, r0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
	...

08001ccc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d101      	bne.n	8001ce2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e043      	b.n	8001d6a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	4b22      	ldr	r3, [pc, #136]	; (8001d74 <HAL_DMA_Init+0xa8>)
 8001cea:	4413      	add	r3, r2
 8001cec:	4a22      	ldr	r2, [pc, #136]	; (8001d78 <HAL_DMA_Init+0xac>)
 8001cee:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf2:	091b      	lsrs	r3, r3, #4
 8001cf4:	009a      	lsls	r2, r3, #2
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a1f      	ldr	r2, [pc, #124]	; (8001d7c <HAL_DMA_Init+0xb0>)
 8001cfe:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2202      	movs	r2, #2
 8001d04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001d16:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001d1a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001d24:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	695b      	ldr	r3, [r3, #20]
 8001d36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	69db      	ldr	r3, [r3, #28]
 8001d42:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001d44:	68fa      	ldr	r2, [r7, #12]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	68fa      	ldr	r2, [r7, #12]
 8001d50:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3714      	adds	r7, #20
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bc80      	pop	{r7}
 8001d72:	4770      	bx	lr
 8001d74:	bffdfff8 	.word	0xbffdfff8
 8001d78:	cccccccd 	.word	0xcccccccd
 8001d7c:	40020000 	.word	0x40020000

08001d80 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	607a      	str	r2, [r7, #4]
 8001d8c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d101      	bne.n	8001da0 <HAL_DMA_Start_IT+0x20>
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	e04a      	b.n	8001e36 <HAL_DMA_Start_IT+0xb6>
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d13a      	bne.n	8001e28 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2202      	movs	r2, #2
 8001db6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f022 0201 	bic.w	r2, r2, #1
 8001dce:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	68b9      	ldr	r1, [r7, #8]
 8001dd6:	68f8      	ldr	r0, [r7, #12]
 8001dd8:	f000 f9ae 	bl	8002138 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d008      	beq.n	8001df6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f042 020e 	orr.w	r2, r2, #14
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	e00f      	b.n	8001e16 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f022 0204 	bic.w	r2, r2, #4
 8001e04:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f042 020a 	orr.w	r2, r2, #10
 8001e14:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f042 0201 	orr.w	r2, r2, #1
 8001e24:	601a      	str	r2, [r3, #0]
 8001e26:	e005      	b.n	8001e34 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001e30:	2302      	movs	r3, #2
 8001e32:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001e34:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3718      	adds	r7, #24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
	...

08001e40 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d005      	beq.n	8001e62 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2204      	movs	r2, #4
 8001e5a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	73fb      	strb	r3, [r7, #15]
 8001e60:	e051      	b.n	8001f06 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f022 020e 	bic.w	r2, r2, #14
 8001e70:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f022 0201 	bic.w	r2, r2, #1
 8001e80:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a22      	ldr	r2, [pc, #136]	; (8001f10 <HAL_DMA_Abort_IT+0xd0>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d029      	beq.n	8001ee0 <HAL_DMA_Abort_IT+0xa0>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a20      	ldr	r2, [pc, #128]	; (8001f14 <HAL_DMA_Abort_IT+0xd4>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d022      	beq.n	8001edc <HAL_DMA_Abort_IT+0x9c>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a1f      	ldr	r2, [pc, #124]	; (8001f18 <HAL_DMA_Abort_IT+0xd8>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d01a      	beq.n	8001ed6 <HAL_DMA_Abort_IT+0x96>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a1d      	ldr	r2, [pc, #116]	; (8001f1c <HAL_DMA_Abort_IT+0xdc>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d012      	beq.n	8001ed0 <HAL_DMA_Abort_IT+0x90>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a1c      	ldr	r2, [pc, #112]	; (8001f20 <HAL_DMA_Abort_IT+0xe0>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d00a      	beq.n	8001eca <HAL_DMA_Abort_IT+0x8a>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a1a      	ldr	r2, [pc, #104]	; (8001f24 <HAL_DMA_Abort_IT+0xe4>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d102      	bne.n	8001ec4 <HAL_DMA_Abort_IT+0x84>
 8001ebe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001ec2:	e00e      	b.n	8001ee2 <HAL_DMA_Abort_IT+0xa2>
 8001ec4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ec8:	e00b      	b.n	8001ee2 <HAL_DMA_Abort_IT+0xa2>
 8001eca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ece:	e008      	b.n	8001ee2 <HAL_DMA_Abort_IT+0xa2>
 8001ed0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ed4:	e005      	b.n	8001ee2 <HAL_DMA_Abort_IT+0xa2>
 8001ed6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001eda:	e002      	b.n	8001ee2 <HAL_DMA_Abort_IT+0xa2>
 8001edc:	2310      	movs	r3, #16
 8001ede:	e000      	b.n	8001ee2 <HAL_DMA_Abort_IT+0xa2>
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	4a11      	ldr	r2, [pc, #68]	; (8001f28 <HAL_DMA_Abort_IT+0xe8>)
 8001ee4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d003      	beq.n	8001f06 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	4798      	blx	r3
    } 
  }
  return status;
 8001f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3710      	adds	r7, #16
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40020008 	.word	0x40020008
 8001f14:	4002001c 	.word	0x4002001c
 8001f18:	40020030 	.word	0x40020030
 8001f1c:	40020044 	.word	0x40020044
 8001f20:	40020058 	.word	0x40020058
 8001f24:	4002006c 	.word	0x4002006c
 8001f28:	40020000 	.word	0x40020000

08001f2c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f48:	2204      	movs	r2, #4
 8001f4a:	409a      	lsls	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d04f      	beq.n	8001ff4 <HAL_DMA_IRQHandler+0xc8>
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	f003 0304 	and.w	r3, r3, #4
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d04a      	beq.n	8001ff4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0320 	and.w	r3, r3, #32
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d107      	bne.n	8001f7c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f022 0204 	bic.w	r2, r2, #4
 8001f7a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a66      	ldr	r2, [pc, #408]	; (800211c <HAL_DMA_IRQHandler+0x1f0>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d029      	beq.n	8001fda <HAL_DMA_IRQHandler+0xae>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a65      	ldr	r2, [pc, #404]	; (8002120 <HAL_DMA_IRQHandler+0x1f4>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d022      	beq.n	8001fd6 <HAL_DMA_IRQHandler+0xaa>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a63      	ldr	r2, [pc, #396]	; (8002124 <HAL_DMA_IRQHandler+0x1f8>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d01a      	beq.n	8001fd0 <HAL_DMA_IRQHandler+0xa4>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a62      	ldr	r2, [pc, #392]	; (8002128 <HAL_DMA_IRQHandler+0x1fc>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d012      	beq.n	8001fca <HAL_DMA_IRQHandler+0x9e>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a60      	ldr	r2, [pc, #384]	; (800212c <HAL_DMA_IRQHandler+0x200>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d00a      	beq.n	8001fc4 <HAL_DMA_IRQHandler+0x98>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a5f      	ldr	r2, [pc, #380]	; (8002130 <HAL_DMA_IRQHandler+0x204>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d102      	bne.n	8001fbe <HAL_DMA_IRQHandler+0x92>
 8001fb8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001fbc:	e00e      	b.n	8001fdc <HAL_DMA_IRQHandler+0xb0>
 8001fbe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001fc2:	e00b      	b.n	8001fdc <HAL_DMA_IRQHandler+0xb0>
 8001fc4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001fc8:	e008      	b.n	8001fdc <HAL_DMA_IRQHandler+0xb0>
 8001fca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001fce:	e005      	b.n	8001fdc <HAL_DMA_IRQHandler+0xb0>
 8001fd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fd4:	e002      	b.n	8001fdc <HAL_DMA_IRQHandler+0xb0>
 8001fd6:	2340      	movs	r3, #64	; 0x40
 8001fd8:	e000      	b.n	8001fdc <HAL_DMA_IRQHandler+0xb0>
 8001fda:	2304      	movs	r3, #4
 8001fdc:	4a55      	ldr	r2, [pc, #340]	; (8002134 <HAL_DMA_IRQHandler+0x208>)
 8001fde:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	f000 8094 	beq.w	8002112 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001ff2:	e08e      	b.n	8002112 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff8:	2202      	movs	r2, #2
 8001ffa:	409a      	lsls	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	4013      	ands	r3, r2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d056      	beq.n	80020b2 <HAL_DMA_IRQHandler+0x186>
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	2b00      	cmp	r3, #0
 800200c:	d051      	beq.n	80020b2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0320 	and.w	r3, r3, #32
 8002018:	2b00      	cmp	r3, #0
 800201a:	d10b      	bne.n	8002034 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f022 020a 	bic.w	r2, r2, #10
 800202a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a38      	ldr	r2, [pc, #224]	; (800211c <HAL_DMA_IRQHandler+0x1f0>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d029      	beq.n	8002092 <HAL_DMA_IRQHandler+0x166>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a37      	ldr	r2, [pc, #220]	; (8002120 <HAL_DMA_IRQHandler+0x1f4>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d022      	beq.n	800208e <HAL_DMA_IRQHandler+0x162>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a35      	ldr	r2, [pc, #212]	; (8002124 <HAL_DMA_IRQHandler+0x1f8>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d01a      	beq.n	8002088 <HAL_DMA_IRQHandler+0x15c>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a34      	ldr	r2, [pc, #208]	; (8002128 <HAL_DMA_IRQHandler+0x1fc>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d012      	beq.n	8002082 <HAL_DMA_IRQHandler+0x156>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a32      	ldr	r2, [pc, #200]	; (800212c <HAL_DMA_IRQHandler+0x200>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d00a      	beq.n	800207c <HAL_DMA_IRQHandler+0x150>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a31      	ldr	r2, [pc, #196]	; (8002130 <HAL_DMA_IRQHandler+0x204>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d102      	bne.n	8002076 <HAL_DMA_IRQHandler+0x14a>
 8002070:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002074:	e00e      	b.n	8002094 <HAL_DMA_IRQHandler+0x168>
 8002076:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800207a:	e00b      	b.n	8002094 <HAL_DMA_IRQHandler+0x168>
 800207c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002080:	e008      	b.n	8002094 <HAL_DMA_IRQHandler+0x168>
 8002082:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002086:	e005      	b.n	8002094 <HAL_DMA_IRQHandler+0x168>
 8002088:	f44f 7300 	mov.w	r3, #512	; 0x200
 800208c:	e002      	b.n	8002094 <HAL_DMA_IRQHandler+0x168>
 800208e:	2320      	movs	r3, #32
 8002090:	e000      	b.n	8002094 <HAL_DMA_IRQHandler+0x168>
 8002092:	2302      	movs	r3, #2
 8002094:	4a27      	ldr	r2, [pc, #156]	; (8002134 <HAL_DMA_IRQHandler+0x208>)
 8002096:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d034      	beq.n	8002112 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80020b0:	e02f      	b.n	8002112 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	2208      	movs	r2, #8
 80020b8:	409a      	lsls	r2, r3
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	4013      	ands	r3, r2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d028      	beq.n	8002114 <HAL_DMA_IRQHandler+0x1e8>
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	f003 0308 	and.w	r3, r3, #8
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d023      	beq.n	8002114 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f022 020e 	bic.w	r2, r2, #14
 80020da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020e4:	2101      	movs	r1, #1
 80020e6:	fa01 f202 	lsl.w	r2, r1, r2
 80020ea:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2201      	movs	r2, #1
 80020f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	2b00      	cmp	r3, #0
 8002108:	d004      	beq.n	8002114 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	4798      	blx	r3
    }
  }
  return;
 8002112:	bf00      	nop
 8002114:	bf00      	nop
}
 8002116:	3710      	adds	r7, #16
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	40020008 	.word	0x40020008
 8002120:	4002001c 	.word	0x4002001c
 8002124:	40020030 	.word	0x40020030
 8002128:	40020044 	.word	0x40020044
 800212c:	40020058 	.word	0x40020058
 8002130:	4002006c 	.word	0x4002006c
 8002134:	40020000 	.word	0x40020000

08002138 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002138:	b480      	push	{r7}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	607a      	str	r2, [r7, #4]
 8002144:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800214e:	2101      	movs	r1, #1
 8002150:	fa01 f202 	lsl.w	r2, r1, r2
 8002154:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	683a      	ldr	r2, [r7, #0]
 800215c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	2b10      	cmp	r3, #16
 8002164:	d108      	bne.n	8002178 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	68ba      	ldr	r2, [r7, #8]
 8002174:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002176:	e007      	b.n	8002188 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	68ba      	ldr	r2, [r7, #8]
 800217e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	60da      	str	r2, [r3, #12]
}
 8002188:	bf00      	nop
 800218a:	3714      	adds	r7, #20
 800218c:	46bd      	mov	sp, r7
 800218e:	bc80      	pop	{r7}
 8002190:	4770      	bx	lr
	...

08002194 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002194:	b480      	push	{r7}
 8002196:	b08b      	sub	sp, #44	; 0x2c
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800219e:	2300      	movs	r3, #0
 80021a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80021a2:	2300      	movs	r3, #0
 80021a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021a6:	e127      	b.n	80023f8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80021a8:	2201      	movs	r2, #1
 80021aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	69fa      	ldr	r2, [r7, #28]
 80021b8:	4013      	ands	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	f040 8116 	bne.w	80023f2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	2b12      	cmp	r3, #18
 80021cc:	d034      	beq.n	8002238 <HAL_GPIO_Init+0xa4>
 80021ce:	2b12      	cmp	r3, #18
 80021d0:	d80d      	bhi.n	80021ee <HAL_GPIO_Init+0x5a>
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d02b      	beq.n	800222e <HAL_GPIO_Init+0x9a>
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d804      	bhi.n	80021e4 <HAL_GPIO_Init+0x50>
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d031      	beq.n	8002242 <HAL_GPIO_Init+0xae>
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d01c      	beq.n	800221c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80021e2:	e048      	b.n	8002276 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80021e4:	2b03      	cmp	r3, #3
 80021e6:	d043      	beq.n	8002270 <HAL_GPIO_Init+0xdc>
 80021e8:	2b11      	cmp	r3, #17
 80021ea:	d01b      	beq.n	8002224 <HAL_GPIO_Init+0x90>
          break;
 80021ec:	e043      	b.n	8002276 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80021ee:	4a89      	ldr	r2, [pc, #548]	; (8002414 <HAL_GPIO_Init+0x280>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d026      	beq.n	8002242 <HAL_GPIO_Init+0xae>
 80021f4:	4a87      	ldr	r2, [pc, #540]	; (8002414 <HAL_GPIO_Init+0x280>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d806      	bhi.n	8002208 <HAL_GPIO_Init+0x74>
 80021fa:	4a87      	ldr	r2, [pc, #540]	; (8002418 <HAL_GPIO_Init+0x284>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d020      	beq.n	8002242 <HAL_GPIO_Init+0xae>
 8002200:	4a86      	ldr	r2, [pc, #536]	; (800241c <HAL_GPIO_Init+0x288>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d01d      	beq.n	8002242 <HAL_GPIO_Init+0xae>
          break;
 8002206:	e036      	b.n	8002276 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002208:	4a85      	ldr	r2, [pc, #532]	; (8002420 <HAL_GPIO_Init+0x28c>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d019      	beq.n	8002242 <HAL_GPIO_Init+0xae>
 800220e:	4a85      	ldr	r2, [pc, #532]	; (8002424 <HAL_GPIO_Init+0x290>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d016      	beq.n	8002242 <HAL_GPIO_Init+0xae>
 8002214:	4a84      	ldr	r2, [pc, #528]	; (8002428 <HAL_GPIO_Init+0x294>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d013      	beq.n	8002242 <HAL_GPIO_Init+0xae>
          break;
 800221a:	e02c      	b.n	8002276 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	623b      	str	r3, [r7, #32]
          break;
 8002222:	e028      	b.n	8002276 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	3304      	adds	r3, #4
 800222a:	623b      	str	r3, [r7, #32]
          break;
 800222c:	e023      	b.n	8002276 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	3308      	adds	r3, #8
 8002234:	623b      	str	r3, [r7, #32]
          break;
 8002236:	e01e      	b.n	8002276 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	330c      	adds	r3, #12
 800223e:	623b      	str	r3, [r7, #32]
          break;
 8002240:	e019      	b.n	8002276 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d102      	bne.n	8002250 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800224a:	2304      	movs	r3, #4
 800224c:	623b      	str	r3, [r7, #32]
          break;
 800224e:	e012      	b.n	8002276 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d105      	bne.n	8002264 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002258:	2308      	movs	r3, #8
 800225a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	69fa      	ldr	r2, [r7, #28]
 8002260:	611a      	str	r2, [r3, #16]
          break;
 8002262:	e008      	b.n	8002276 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002264:	2308      	movs	r3, #8
 8002266:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	69fa      	ldr	r2, [r7, #28]
 800226c:	615a      	str	r2, [r3, #20]
          break;
 800226e:	e002      	b.n	8002276 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002270:	2300      	movs	r3, #0
 8002272:	623b      	str	r3, [r7, #32]
          break;
 8002274:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	2bff      	cmp	r3, #255	; 0xff
 800227a:	d801      	bhi.n	8002280 <HAL_GPIO_Init+0xec>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	e001      	b.n	8002284 <HAL_GPIO_Init+0xf0>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	3304      	adds	r3, #4
 8002284:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	2bff      	cmp	r3, #255	; 0xff
 800228a:	d802      	bhi.n	8002292 <HAL_GPIO_Init+0xfe>
 800228c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	e002      	b.n	8002298 <HAL_GPIO_Init+0x104>
 8002292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002294:	3b08      	subs	r3, #8
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	210f      	movs	r1, #15
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	fa01 f303 	lsl.w	r3, r1, r3
 80022a6:	43db      	mvns	r3, r3
 80022a8:	401a      	ands	r2, r3
 80022aa:	6a39      	ldr	r1, [r7, #32]
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	fa01 f303 	lsl.w	r3, r1, r3
 80022b2:	431a      	orrs	r2, r3
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	f000 8096 	beq.w	80023f2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80022c6:	4b59      	ldr	r3, [pc, #356]	; (800242c <HAL_GPIO_Init+0x298>)
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	4a58      	ldr	r2, [pc, #352]	; (800242c <HAL_GPIO_Init+0x298>)
 80022cc:	f043 0301 	orr.w	r3, r3, #1
 80022d0:	6193      	str	r3, [r2, #24]
 80022d2:	4b56      	ldr	r3, [pc, #344]	; (800242c <HAL_GPIO_Init+0x298>)
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	60bb      	str	r3, [r7, #8]
 80022dc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80022de:	4a54      	ldr	r2, [pc, #336]	; (8002430 <HAL_GPIO_Init+0x29c>)
 80022e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e2:	089b      	lsrs	r3, r3, #2
 80022e4:	3302      	adds	r3, #2
 80022e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ea:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80022ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ee:	f003 0303 	and.w	r3, r3, #3
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	220f      	movs	r2, #15
 80022f6:	fa02 f303 	lsl.w	r3, r2, r3
 80022fa:	43db      	mvns	r3, r3
 80022fc:	68fa      	ldr	r2, [r7, #12]
 80022fe:	4013      	ands	r3, r2
 8002300:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a4b      	ldr	r2, [pc, #300]	; (8002434 <HAL_GPIO_Init+0x2a0>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d013      	beq.n	8002332 <HAL_GPIO_Init+0x19e>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a4a      	ldr	r2, [pc, #296]	; (8002438 <HAL_GPIO_Init+0x2a4>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d00d      	beq.n	800232e <HAL_GPIO_Init+0x19a>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a49      	ldr	r2, [pc, #292]	; (800243c <HAL_GPIO_Init+0x2a8>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d007      	beq.n	800232a <HAL_GPIO_Init+0x196>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a48      	ldr	r2, [pc, #288]	; (8002440 <HAL_GPIO_Init+0x2ac>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d101      	bne.n	8002326 <HAL_GPIO_Init+0x192>
 8002322:	2303      	movs	r3, #3
 8002324:	e006      	b.n	8002334 <HAL_GPIO_Init+0x1a0>
 8002326:	2304      	movs	r3, #4
 8002328:	e004      	b.n	8002334 <HAL_GPIO_Init+0x1a0>
 800232a:	2302      	movs	r3, #2
 800232c:	e002      	b.n	8002334 <HAL_GPIO_Init+0x1a0>
 800232e:	2301      	movs	r3, #1
 8002330:	e000      	b.n	8002334 <HAL_GPIO_Init+0x1a0>
 8002332:	2300      	movs	r3, #0
 8002334:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002336:	f002 0203 	and.w	r2, r2, #3
 800233a:	0092      	lsls	r2, r2, #2
 800233c:	4093      	lsls	r3, r2
 800233e:	68fa      	ldr	r2, [r7, #12]
 8002340:	4313      	orrs	r3, r2
 8002342:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002344:	493a      	ldr	r1, [pc, #232]	; (8002430 <HAL_GPIO_Init+0x29c>)
 8002346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002348:	089b      	lsrs	r3, r3, #2
 800234a:	3302      	adds	r3, #2
 800234c:	68fa      	ldr	r2, [r7, #12]
 800234e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d006      	beq.n	800236c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800235e:	4b39      	ldr	r3, [pc, #228]	; (8002444 <HAL_GPIO_Init+0x2b0>)
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	4938      	ldr	r1, [pc, #224]	; (8002444 <HAL_GPIO_Init+0x2b0>)
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	4313      	orrs	r3, r2
 8002368:	600b      	str	r3, [r1, #0]
 800236a:	e006      	b.n	800237a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800236c:	4b35      	ldr	r3, [pc, #212]	; (8002444 <HAL_GPIO_Init+0x2b0>)
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	43db      	mvns	r3, r3
 8002374:	4933      	ldr	r1, [pc, #204]	; (8002444 <HAL_GPIO_Init+0x2b0>)
 8002376:	4013      	ands	r3, r2
 8002378:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d006      	beq.n	8002394 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002386:	4b2f      	ldr	r3, [pc, #188]	; (8002444 <HAL_GPIO_Init+0x2b0>)
 8002388:	685a      	ldr	r2, [r3, #4]
 800238a:	492e      	ldr	r1, [pc, #184]	; (8002444 <HAL_GPIO_Init+0x2b0>)
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	4313      	orrs	r3, r2
 8002390:	604b      	str	r3, [r1, #4]
 8002392:	e006      	b.n	80023a2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002394:	4b2b      	ldr	r3, [pc, #172]	; (8002444 <HAL_GPIO_Init+0x2b0>)
 8002396:	685a      	ldr	r2, [r3, #4]
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	43db      	mvns	r3, r3
 800239c:	4929      	ldr	r1, [pc, #164]	; (8002444 <HAL_GPIO_Init+0x2b0>)
 800239e:	4013      	ands	r3, r2
 80023a0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d006      	beq.n	80023bc <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80023ae:	4b25      	ldr	r3, [pc, #148]	; (8002444 <HAL_GPIO_Init+0x2b0>)
 80023b0:	689a      	ldr	r2, [r3, #8]
 80023b2:	4924      	ldr	r1, [pc, #144]	; (8002444 <HAL_GPIO_Init+0x2b0>)
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	608b      	str	r3, [r1, #8]
 80023ba:	e006      	b.n	80023ca <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80023bc:	4b21      	ldr	r3, [pc, #132]	; (8002444 <HAL_GPIO_Init+0x2b0>)
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	43db      	mvns	r3, r3
 80023c4:	491f      	ldr	r1, [pc, #124]	; (8002444 <HAL_GPIO_Init+0x2b0>)
 80023c6:	4013      	ands	r3, r2
 80023c8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d006      	beq.n	80023e4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80023d6:	4b1b      	ldr	r3, [pc, #108]	; (8002444 <HAL_GPIO_Init+0x2b0>)
 80023d8:	68da      	ldr	r2, [r3, #12]
 80023da:	491a      	ldr	r1, [pc, #104]	; (8002444 <HAL_GPIO_Init+0x2b0>)
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	4313      	orrs	r3, r2
 80023e0:	60cb      	str	r3, [r1, #12]
 80023e2:	e006      	b.n	80023f2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80023e4:	4b17      	ldr	r3, [pc, #92]	; (8002444 <HAL_GPIO_Init+0x2b0>)
 80023e6:	68da      	ldr	r2, [r3, #12]
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	43db      	mvns	r3, r3
 80023ec:	4915      	ldr	r1, [pc, #84]	; (8002444 <HAL_GPIO_Init+0x2b0>)
 80023ee:	4013      	ands	r3, r2
 80023f0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80023f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f4:	3301      	adds	r3, #1
 80023f6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002402:	2b00      	cmp	r3, #0
 8002404:	f47f aed0 	bne.w	80021a8 <HAL_GPIO_Init+0x14>
  }
}
 8002408:	bf00      	nop
 800240a:	372c      	adds	r7, #44	; 0x2c
 800240c:	46bd      	mov	sp, r7
 800240e:	bc80      	pop	{r7}
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	10210000 	.word	0x10210000
 8002418:	10110000 	.word	0x10110000
 800241c:	10120000 	.word	0x10120000
 8002420:	10310000 	.word	0x10310000
 8002424:	10320000 	.word	0x10320000
 8002428:	10220000 	.word	0x10220000
 800242c:	40021000 	.word	0x40021000
 8002430:	40010000 	.word	0x40010000
 8002434:	40010800 	.word	0x40010800
 8002438:	40010c00 	.word	0x40010c00
 800243c:	40011000 	.word	0x40011000
 8002440:	40011400 	.word	0x40011400
 8002444:	40010400 	.word	0x40010400

08002448 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	460b      	mov	r3, r1
 8002452:	807b      	strh	r3, [r7, #2]
 8002454:	4613      	mov	r3, r2
 8002456:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002458:	787b      	ldrb	r3, [r7, #1]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d003      	beq.n	8002466 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800245e:	887a      	ldrh	r2, [r7, #2]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002464:	e003      	b.n	800246e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002466:	887b      	ldrh	r3, [r7, #2]
 8002468:	041a      	lsls	r2, r3, #16
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	611a      	str	r2, [r3, #16]
}
 800246e:	bf00      	nop
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	bc80      	pop	{r7}
 8002476:	4770      	bx	lr

08002478 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	460b      	mov	r3, r1
 8002482:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	68da      	ldr	r2, [r3, #12]
 8002488:	887b      	ldrh	r3, [r7, #2]
 800248a:	4013      	ands	r3, r2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d003      	beq.n	8002498 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002490:	887a      	ldrh	r2, [r7, #2]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002496:	e002      	b.n	800249e <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002498:	887a      	ldrh	r2, [r7, #2]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	611a      	str	r2, [r3, #16]
}
 800249e:	bf00      	nop
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bc80      	pop	{r7}
 80024a6:	4770      	bx	lr

080024a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	4603      	mov	r3, r0
 80024b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80024b2:	4b08      	ldr	r3, [pc, #32]	; (80024d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024b4:	695a      	ldr	r2, [r3, #20]
 80024b6:	88fb      	ldrh	r3, [r7, #6]
 80024b8:	4013      	ands	r3, r2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d006      	beq.n	80024cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80024be:	4a05      	ldr	r2, [pc, #20]	; (80024d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024c0:	88fb      	ldrh	r3, [r7, #6]
 80024c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80024c4:	88fb      	ldrh	r3, [r7, #6]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7fd ff62 	bl	8000390 <HAL_GPIO_EXTI_Callback>
  }
}
 80024cc:	bf00      	nop
 80024ce:	3708      	adds	r7, #8
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40010400 	.word	0x40010400

080024d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d101      	bne.n	80024ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e26c      	b.n	80029c4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	f000 8087 	beq.w	8002606 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024f8:	4b92      	ldr	r3, [pc, #584]	; (8002744 <HAL_RCC_OscConfig+0x26c>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f003 030c 	and.w	r3, r3, #12
 8002500:	2b04      	cmp	r3, #4
 8002502:	d00c      	beq.n	800251e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002504:	4b8f      	ldr	r3, [pc, #572]	; (8002744 <HAL_RCC_OscConfig+0x26c>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f003 030c 	and.w	r3, r3, #12
 800250c:	2b08      	cmp	r3, #8
 800250e:	d112      	bne.n	8002536 <HAL_RCC_OscConfig+0x5e>
 8002510:	4b8c      	ldr	r3, [pc, #560]	; (8002744 <HAL_RCC_OscConfig+0x26c>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800251c:	d10b      	bne.n	8002536 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800251e:	4b89      	ldr	r3, [pc, #548]	; (8002744 <HAL_RCC_OscConfig+0x26c>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d06c      	beq.n	8002604 <HAL_RCC_OscConfig+0x12c>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d168      	bne.n	8002604 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e246      	b.n	80029c4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800253e:	d106      	bne.n	800254e <HAL_RCC_OscConfig+0x76>
 8002540:	4b80      	ldr	r3, [pc, #512]	; (8002744 <HAL_RCC_OscConfig+0x26c>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a7f      	ldr	r2, [pc, #508]	; (8002744 <HAL_RCC_OscConfig+0x26c>)
 8002546:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800254a:	6013      	str	r3, [r2, #0]
 800254c:	e02e      	b.n	80025ac <HAL_RCC_OscConfig+0xd4>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d10c      	bne.n	8002570 <HAL_RCC_OscConfig+0x98>
 8002556:	4b7b      	ldr	r3, [pc, #492]	; (8002744 <HAL_RCC_OscConfig+0x26c>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a7a      	ldr	r2, [pc, #488]	; (8002744 <HAL_RCC_OscConfig+0x26c>)
 800255c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002560:	6013      	str	r3, [r2, #0]
 8002562:	4b78      	ldr	r3, [pc, #480]	; (8002744 <HAL_RCC_OscConfig+0x26c>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a77      	ldr	r2, [pc, #476]	; (8002744 <HAL_RCC_OscConfig+0x26c>)
 8002568:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800256c:	6013      	str	r3, [r2, #0]
 800256e:	e01d      	b.n	80025ac <HAL_RCC_OscConfig+0xd4>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002578:	d10c      	bne.n	8002594 <HAL_RCC_OscConfig+0xbc>
 800257a:	4b72      	ldr	r3, [pc, #456]	; (8002744 <HAL_RCC_OscConfig+0x26c>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a71      	ldr	r2, [pc, #452]	; (8002744 <HAL_RCC_OscConfig+0x26c>)
 8002580:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002584:	6013      	str	r3, [r2, #0]
 8002586:	4b6f      	ldr	r3, [pc, #444]	; (8002744 <HAL_RCC_OscConfig+0x26c>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a6e      	ldr	r2, [pc, #440]	; (8002744 <HAL_RCC_OscConfig+0x26c>)
 800258c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002590:	6013      	str	r3, [r2, #0]
 8002592:	e00b      	b.n	80025ac <HAL_RCC_OscConfig+0xd4>
 8002594:	4b6b      	ldr	r3, [pc, #428]	; (8002744 <HAL_RCC_OscConfig+0x26c>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a6a      	ldr	r2, [pc, #424]	; (8002744 <HAL_RCC_OscConfig+0x26c>)
 800259a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800259e:	6013      	str	r3, [r2, #0]
 80025a0:	4b68      	ldr	r3, [pc, #416]	; (8002744 <HAL_RCC_OscConfig+0x26c>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a67      	ldr	r2, [pc, #412]	; (8002744 <HAL_RCC_OscConfig+0x26c>)
 80025a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d013      	beq.n	80025dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b4:	f7fe feb6 	bl	8001324 <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ba:	e008      	b.n	80025ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025bc:	f7fe feb2 	bl	8001324 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b64      	cmp	r3, #100	; 0x64
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e1fa      	b.n	80029c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ce:	4b5d      	ldr	r3, [pc, #372]	; (8002744 <HAL_RCC_OscConfig+0x26c>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d0f0      	beq.n	80025bc <HAL_RCC_OscConfig+0xe4>
 80025da:	e014      	b.n	8002606 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025dc:	f7fe fea2 	bl	8001324 <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025e2:	e008      	b.n	80025f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025e4:	f7fe fe9e 	bl	8001324 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b64      	cmp	r3, #100	; 0x64
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e1e6      	b.n	80029c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025f6:	4b53      	ldr	r3, [pc, #332]	; (8002744 <HAL_RCC_OscConfig+0x26c>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1f0      	bne.n	80025e4 <HAL_RCC_OscConfig+0x10c>
 8002602:	e000      	b.n	8002606 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002604:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d063      	beq.n	80026da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002612:	4b4c      	ldr	r3, [pc, #304]	; (8002744 <HAL_RCC_OscConfig+0x26c>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f003 030c 	and.w	r3, r3, #12
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00b      	beq.n	8002636 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800261e:	4b49      	ldr	r3, [pc, #292]	; (8002744 <HAL_RCC_OscConfig+0x26c>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f003 030c 	and.w	r3, r3, #12
 8002626:	2b08      	cmp	r3, #8
 8002628:	d11c      	bne.n	8002664 <HAL_RCC_OscConfig+0x18c>
 800262a:	4b46      	ldr	r3, [pc, #280]	; (8002744 <HAL_RCC_OscConfig+0x26c>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d116      	bne.n	8002664 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002636:	4b43      	ldr	r3, [pc, #268]	; (8002744 <HAL_RCC_OscConfig+0x26c>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d005      	beq.n	800264e <HAL_RCC_OscConfig+0x176>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d001      	beq.n	800264e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e1ba      	b.n	80029c4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800264e:	4b3d      	ldr	r3, [pc, #244]	; (8002744 <HAL_RCC_OscConfig+0x26c>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	00db      	lsls	r3, r3, #3
 800265c:	4939      	ldr	r1, [pc, #228]	; (8002744 <HAL_RCC_OscConfig+0x26c>)
 800265e:	4313      	orrs	r3, r2
 8002660:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002662:	e03a      	b.n	80026da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	691b      	ldr	r3, [r3, #16]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d020      	beq.n	80026ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800266c:	4b36      	ldr	r3, [pc, #216]	; (8002748 <HAL_RCC_OscConfig+0x270>)
 800266e:	2201      	movs	r2, #1
 8002670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002672:	f7fe fe57 	bl	8001324 <HAL_GetTick>
 8002676:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002678:	e008      	b.n	800268c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800267a:	f7fe fe53 	bl	8001324 <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	2b02      	cmp	r3, #2
 8002686:	d901      	bls.n	800268c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e19b      	b.n	80029c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800268c:	4b2d      	ldr	r3, [pc, #180]	; (8002744 <HAL_RCC_OscConfig+0x26c>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d0f0      	beq.n	800267a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002698:	4b2a      	ldr	r3, [pc, #168]	; (8002744 <HAL_RCC_OscConfig+0x26c>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	695b      	ldr	r3, [r3, #20]
 80026a4:	00db      	lsls	r3, r3, #3
 80026a6:	4927      	ldr	r1, [pc, #156]	; (8002744 <HAL_RCC_OscConfig+0x26c>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	600b      	str	r3, [r1, #0]
 80026ac:	e015      	b.n	80026da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026ae:	4b26      	ldr	r3, [pc, #152]	; (8002748 <HAL_RCC_OscConfig+0x270>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b4:	f7fe fe36 	bl	8001324 <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026bc:	f7fe fe32 	bl	8001324 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e17a      	b.n	80029c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ce:	4b1d      	ldr	r3, [pc, #116]	; (8002744 <HAL_RCC_OscConfig+0x26c>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1f0      	bne.n	80026bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0308 	and.w	r3, r3, #8
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d03a      	beq.n	800275c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d019      	beq.n	8002722 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026ee:	4b17      	ldr	r3, [pc, #92]	; (800274c <HAL_RCC_OscConfig+0x274>)
 80026f0:	2201      	movs	r2, #1
 80026f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026f4:	f7fe fe16 	bl	8001324 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026fc:	f7fe fe12 	bl	8001324 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e15a      	b.n	80029c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800270e:	4b0d      	ldr	r3, [pc, #52]	; (8002744 <HAL_RCC_OscConfig+0x26c>)
 8002710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d0f0      	beq.n	80026fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800271a:	2001      	movs	r0, #1
 800271c:	f000 fada 	bl	8002cd4 <RCC_Delay>
 8002720:	e01c      	b.n	800275c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002722:	4b0a      	ldr	r3, [pc, #40]	; (800274c <HAL_RCC_OscConfig+0x274>)
 8002724:	2200      	movs	r2, #0
 8002726:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002728:	f7fe fdfc 	bl	8001324 <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800272e:	e00f      	b.n	8002750 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002730:	f7fe fdf8 	bl	8001324 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d908      	bls.n	8002750 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e140      	b.n	80029c4 <HAL_RCC_OscConfig+0x4ec>
 8002742:	bf00      	nop
 8002744:	40021000 	.word	0x40021000
 8002748:	42420000 	.word	0x42420000
 800274c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002750:	4b9e      	ldr	r3, [pc, #632]	; (80029cc <HAL_RCC_OscConfig+0x4f4>)
 8002752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d1e9      	bne.n	8002730 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0304 	and.w	r3, r3, #4
 8002764:	2b00      	cmp	r3, #0
 8002766:	f000 80a6 	beq.w	80028b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800276a:	2300      	movs	r3, #0
 800276c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800276e:	4b97      	ldr	r3, [pc, #604]	; (80029cc <HAL_RCC_OscConfig+0x4f4>)
 8002770:	69db      	ldr	r3, [r3, #28]
 8002772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d10d      	bne.n	8002796 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800277a:	4b94      	ldr	r3, [pc, #592]	; (80029cc <HAL_RCC_OscConfig+0x4f4>)
 800277c:	69db      	ldr	r3, [r3, #28]
 800277e:	4a93      	ldr	r2, [pc, #588]	; (80029cc <HAL_RCC_OscConfig+0x4f4>)
 8002780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002784:	61d3      	str	r3, [r2, #28]
 8002786:	4b91      	ldr	r3, [pc, #580]	; (80029cc <HAL_RCC_OscConfig+0x4f4>)
 8002788:	69db      	ldr	r3, [r3, #28]
 800278a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800278e:	60bb      	str	r3, [r7, #8]
 8002790:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002792:	2301      	movs	r3, #1
 8002794:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002796:	4b8e      	ldr	r3, [pc, #568]	; (80029d0 <HAL_RCC_OscConfig+0x4f8>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d118      	bne.n	80027d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027a2:	4b8b      	ldr	r3, [pc, #556]	; (80029d0 <HAL_RCC_OscConfig+0x4f8>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a8a      	ldr	r2, [pc, #552]	; (80029d0 <HAL_RCC_OscConfig+0x4f8>)
 80027a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027ae:	f7fe fdb9 	bl	8001324 <HAL_GetTick>
 80027b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b4:	e008      	b.n	80027c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027b6:	f7fe fdb5 	bl	8001324 <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	2b64      	cmp	r3, #100	; 0x64
 80027c2:	d901      	bls.n	80027c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e0fd      	b.n	80029c4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c8:	4b81      	ldr	r3, [pc, #516]	; (80029d0 <HAL_RCC_OscConfig+0x4f8>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d0f0      	beq.n	80027b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d106      	bne.n	80027ea <HAL_RCC_OscConfig+0x312>
 80027dc:	4b7b      	ldr	r3, [pc, #492]	; (80029cc <HAL_RCC_OscConfig+0x4f4>)
 80027de:	6a1b      	ldr	r3, [r3, #32]
 80027e0:	4a7a      	ldr	r2, [pc, #488]	; (80029cc <HAL_RCC_OscConfig+0x4f4>)
 80027e2:	f043 0301 	orr.w	r3, r3, #1
 80027e6:	6213      	str	r3, [r2, #32]
 80027e8:	e02d      	b.n	8002846 <HAL_RCC_OscConfig+0x36e>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d10c      	bne.n	800280c <HAL_RCC_OscConfig+0x334>
 80027f2:	4b76      	ldr	r3, [pc, #472]	; (80029cc <HAL_RCC_OscConfig+0x4f4>)
 80027f4:	6a1b      	ldr	r3, [r3, #32]
 80027f6:	4a75      	ldr	r2, [pc, #468]	; (80029cc <HAL_RCC_OscConfig+0x4f4>)
 80027f8:	f023 0301 	bic.w	r3, r3, #1
 80027fc:	6213      	str	r3, [r2, #32]
 80027fe:	4b73      	ldr	r3, [pc, #460]	; (80029cc <HAL_RCC_OscConfig+0x4f4>)
 8002800:	6a1b      	ldr	r3, [r3, #32]
 8002802:	4a72      	ldr	r2, [pc, #456]	; (80029cc <HAL_RCC_OscConfig+0x4f4>)
 8002804:	f023 0304 	bic.w	r3, r3, #4
 8002808:	6213      	str	r3, [r2, #32]
 800280a:	e01c      	b.n	8002846 <HAL_RCC_OscConfig+0x36e>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	2b05      	cmp	r3, #5
 8002812:	d10c      	bne.n	800282e <HAL_RCC_OscConfig+0x356>
 8002814:	4b6d      	ldr	r3, [pc, #436]	; (80029cc <HAL_RCC_OscConfig+0x4f4>)
 8002816:	6a1b      	ldr	r3, [r3, #32]
 8002818:	4a6c      	ldr	r2, [pc, #432]	; (80029cc <HAL_RCC_OscConfig+0x4f4>)
 800281a:	f043 0304 	orr.w	r3, r3, #4
 800281e:	6213      	str	r3, [r2, #32]
 8002820:	4b6a      	ldr	r3, [pc, #424]	; (80029cc <HAL_RCC_OscConfig+0x4f4>)
 8002822:	6a1b      	ldr	r3, [r3, #32]
 8002824:	4a69      	ldr	r2, [pc, #420]	; (80029cc <HAL_RCC_OscConfig+0x4f4>)
 8002826:	f043 0301 	orr.w	r3, r3, #1
 800282a:	6213      	str	r3, [r2, #32]
 800282c:	e00b      	b.n	8002846 <HAL_RCC_OscConfig+0x36e>
 800282e:	4b67      	ldr	r3, [pc, #412]	; (80029cc <HAL_RCC_OscConfig+0x4f4>)
 8002830:	6a1b      	ldr	r3, [r3, #32]
 8002832:	4a66      	ldr	r2, [pc, #408]	; (80029cc <HAL_RCC_OscConfig+0x4f4>)
 8002834:	f023 0301 	bic.w	r3, r3, #1
 8002838:	6213      	str	r3, [r2, #32]
 800283a:	4b64      	ldr	r3, [pc, #400]	; (80029cc <HAL_RCC_OscConfig+0x4f4>)
 800283c:	6a1b      	ldr	r3, [r3, #32]
 800283e:	4a63      	ldr	r2, [pc, #396]	; (80029cc <HAL_RCC_OscConfig+0x4f4>)
 8002840:	f023 0304 	bic.w	r3, r3, #4
 8002844:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d015      	beq.n	800287a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800284e:	f7fe fd69 	bl	8001324 <HAL_GetTick>
 8002852:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002854:	e00a      	b.n	800286c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002856:	f7fe fd65 	bl	8001324 <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	f241 3288 	movw	r2, #5000	; 0x1388
 8002864:	4293      	cmp	r3, r2
 8002866:	d901      	bls.n	800286c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e0ab      	b.n	80029c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800286c:	4b57      	ldr	r3, [pc, #348]	; (80029cc <HAL_RCC_OscConfig+0x4f4>)
 800286e:	6a1b      	ldr	r3, [r3, #32]
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d0ee      	beq.n	8002856 <HAL_RCC_OscConfig+0x37e>
 8002878:	e014      	b.n	80028a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800287a:	f7fe fd53 	bl	8001324 <HAL_GetTick>
 800287e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002880:	e00a      	b.n	8002898 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002882:	f7fe fd4f 	bl	8001324 <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002890:	4293      	cmp	r3, r2
 8002892:	d901      	bls.n	8002898 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e095      	b.n	80029c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002898:	4b4c      	ldr	r3, [pc, #304]	; (80029cc <HAL_RCC_OscConfig+0x4f4>)
 800289a:	6a1b      	ldr	r3, [r3, #32]
 800289c:	f003 0302 	and.w	r3, r3, #2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d1ee      	bne.n	8002882 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028a4:	7dfb      	ldrb	r3, [r7, #23]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d105      	bne.n	80028b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028aa:	4b48      	ldr	r3, [pc, #288]	; (80029cc <HAL_RCC_OscConfig+0x4f4>)
 80028ac:	69db      	ldr	r3, [r3, #28]
 80028ae:	4a47      	ldr	r2, [pc, #284]	; (80029cc <HAL_RCC_OscConfig+0x4f4>)
 80028b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	69db      	ldr	r3, [r3, #28]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f000 8081 	beq.w	80029c2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028c0:	4b42      	ldr	r3, [pc, #264]	; (80029cc <HAL_RCC_OscConfig+0x4f4>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f003 030c 	and.w	r3, r3, #12
 80028c8:	2b08      	cmp	r3, #8
 80028ca:	d061      	beq.n	8002990 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	69db      	ldr	r3, [r3, #28]
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d146      	bne.n	8002962 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028d4:	4b3f      	ldr	r3, [pc, #252]	; (80029d4 <HAL_RCC_OscConfig+0x4fc>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028da:	f7fe fd23 	bl	8001324 <HAL_GetTick>
 80028de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028e0:	e008      	b.n	80028f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e2:	f7fe fd1f 	bl	8001324 <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d901      	bls.n	80028f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e067      	b.n	80029c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028f4:	4b35      	ldr	r3, [pc, #212]	; (80029cc <HAL_RCC_OscConfig+0x4f4>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d1f0      	bne.n	80028e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a1b      	ldr	r3, [r3, #32]
 8002904:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002908:	d108      	bne.n	800291c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800290a:	4b30      	ldr	r3, [pc, #192]	; (80029cc <HAL_RCC_OscConfig+0x4f4>)
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	492d      	ldr	r1, [pc, #180]	; (80029cc <HAL_RCC_OscConfig+0x4f4>)
 8002918:	4313      	orrs	r3, r2
 800291a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800291c:	4b2b      	ldr	r3, [pc, #172]	; (80029cc <HAL_RCC_OscConfig+0x4f4>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a19      	ldr	r1, [r3, #32]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292c:	430b      	orrs	r3, r1
 800292e:	4927      	ldr	r1, [pc, #156]	; (80029cc <HAL_RCC_OscConfig+0x4f4>)
 8002930:	4313      	orrs	r3, r2
 8002932:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002934:	4b27      	ldr	r3, [pc, #156]	; (80029d4 <HAL_RCC_OscConfig+0x4fc>)
 8002936:	2201      	movs	r2, #1
 8002938:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800293a:	f7fe fcf3 	bl	8001324 <HAL_GetTick>
 800293e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002940:	e008      	b.n	8002954 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002942:	f7fe fcef 	bl	8001324 <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d901      	bls.n	8002954 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e037      	b.n	80029c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002954:	4b1d      	ldr	r3, [pc, #116]	; (80029cc <HAL_RCC_OscConfig+0x4f4>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d0f0      	beq.n	8002942 <HAL_RCC_OscConfig+0x46a>
 8002960:	e02f      	b.n	80029c2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002962:	4b1c      	ldr	r3, [pc, #112]	; (80029d4 <HAL_RCC_OscConfig+0x4fc>)
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002968:	f7fe fcdc 	bl	8001324 <HAL_GetTick>
 800296c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800296e:	e008      	b.n	8002982 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002970:	f7fe fcd8 	bl	8001324 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b02      	cmp	r3, #2
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e020      	b.n	80029c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002982:	4b12      	ldr	r3, [pc, #72]	; (80029cc <HAL_RCC_OscConfig+0x4f4>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1f0      	bne.n	8002970 <HAL_RCC_OscConfig+0x498>
 800298e:	e018      	b.n	80029c2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	69db      	ldr	r3, [r3, #28]
 8002994:	2b01      	cmp	r3, #1
 8002996:	d101      	bne.n	800299c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e013      	b.n	80029c4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800299c:	4b0b      	ldr	r3, [pc, #44]	; (80029cc <HAL_RCC_OscConfig+0x4f4>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a1b      	ldr	r3, [r3, #32]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d106      	bne.n	80029be <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d001      	beq.n	80029c2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e000      	b.n	80029c4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80029c2:	2300      	movs	r3, #0
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3718      	adds	r7, #24
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	40021000 	.word	0x40021000
 80029d0:	40007000 	.word	0x40007000
 80029d4:	42420060 	.word	0x42420060

080029d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d101      	bne.n	80029ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e0d0      	b.n	8002b8e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029ec:	4b6a      	ldr	r3, [pc, #424]	; (8002b98 <HAL_RCC_ClockConfig+0x1c0>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0307 	and.w	r3, r3, #7
 80029f4:	683a      	ldr	r2, [r7, #0]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d910      	bls.n	8002a1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029fa:	4b67      	ldr	r3, [pc, #412]	; (8002b98 <HAL_RCC_ClockConfig+0x1c0>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f023 0207 	bic.w	r2, r3, #7
 8002a02:	4965      	ldr	r1, [pc, #404]	; (8002b98 <HAL_RCC_ClockConfig+0x1c0>)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a0a:	4b63      	ldr	r3, [pc, #396]	; (8002b98 <HAL_RCC_ClockConfig+0x1c0>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0307 	and.w	r3, r3, #7
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d001      	beq.n	8002a1c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e0b8      	b.n	8002b8e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d020      	beq.n	8002a6a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0304 	and.w	r3, r3, #4
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d005      	beq.n	8002a40 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a34:	4b59      	ldr	r3, [pc, #356]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	4a58      	ldr	r2, [pc, #352]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002a3a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a3e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0308 	and.w	r3, r3, #8
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d005      	beq.n	8002a58 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a4c:	4b53      	ldr	r3, [pc, #332]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	4a52      	ldr	r2, [pc, #328]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002a52:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a56:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a58:	4b50      	ldr	r3, [pc, #320]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	494d      	ldr	r1, [pc, #308]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d040      	beq.n	8002af8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d107      	bne.n	8002a8e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a7e:	4b47      	ldr	r3, [pc, #284]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d115      	bne.n	8002ab6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e07f      	b.n	8002b8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d107      	bne.n	8002aa6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a96:	4b41      	ldr	r3, [pc, #260]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d109      	bne.n	8002ab6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e073      	b.n	8002b8e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aa6:	4b3d      	ldr	r3, [pc, #244]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e06b      	b.n	8002b8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ab6:	4b39      	ldr	r3, [pc, #228]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f023 0203 	bic.w	r2, r3, #3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	4936      	ldr	r1, [pc, #216]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ac8:	f7fe fc2c 	bl	8001324 <HAL_GetTick>
 8002acc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ace:	e00a      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ad0:	f7fe fc28 	bl	8001324 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e053      	b.n	8002b8e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ae6:	4b2d      	ldr	r3, [pc, #180]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f003 020c 	and.w	r2, r3, #12
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d1eb      	bne.n	8002ad0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002af8:	4b27      	ldr	r3, [pc, #156]	; (8002b98 <HAL_RCC_ClockConfig+0x1c0>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0307 	and.w	r3, r3, #7
 8002b00:	683a      	ldr	r2, [r7, #0]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d210      	bcs.n	8002b28 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b06:	4b24      	ldr	r3, [pc, #144]	; (8002b98 <HAL_RCC_ClockConfig+0x1c0>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f023 0207 	bic.w	r2, r3, #7
 8002b0e:	4922      	ldr	r1, [pc, #136]	; (8002b98 <HAL_RCC_ClockConfig+0x1c0>)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b16:	4b20      	ldr	r3, [pc, #128]	; (8002b98 <HAL_RCC_ClockConfig+0x1c0>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0307 	and.w	r3, r3, #7
 8002b1e:	683a      	ldr	r2, [r7, #0]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d001      	beq.n	8002b28 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e032      	b.n	8002b8e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0304 	and.w	r3, r3, #4
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d008      	beq.n	8002b46 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b34:	4b19      	ldr	r3, [pc, #100]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	4916      	ldr	r1, [pc, #88]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0308 	and.w	r3, r3, #8
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d009      	beq.n	8002b66 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b52:	4b12      	ldr	r3, [pc, #72]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	490e      	ldr	r1, [pc, #56]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b66:	f000 f821 	bl	8002bac <HAL_RCC_GetSysClockFreq>
 8002b6a:	4601      	mov	r1, r0
 8002b6c:	4b0b      	ldr	r3, [pc, #44]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	091b      	lsrs	r3, r3, #4
 8002b72:	f003 030f 	and.w	r3, r3, #15
 8002b76:	4a0a      	ldr	r2, [pc, #40]	; (8002ba0 <HAL_RCC_ClockConfig+0x1c8>)
 8002b78:	5cd3      	ldrb	r3, [r2, r3]
 8002b7a:	fa21 f303 	lsr.w	r3, r1, r3
 8002b7e:	4a09      	ldr	r2, [pc, #36]	; (8002ba4 <HAL_RCC_ClockConfig+0x1cc>)
 8002b80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b82:	4b09      	ldr	r3, [pc, #36]	; (8002ba8 <HAL_RCC_ClockConfig+0x1d0>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7fe fb8a 	bl	80012a0 <HAL_InitTick>

  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	40022000 	.word	0x40022000
 8002b9c:	40021000 	.word	0x40021000
 8002ba0:	08007bf0 	.word	0x08007bf0
 8002ba4:	20000008 	.word	0x20000008
 8002ba8:	2000000c 	.word	0x2000000c

08002bac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bac:	b490      	push	{r4, r7}
 8002bae:	b08a      	sub	sp, #40	; 0x28
 8002bb0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002bb2:	4b2a      	ldr	r3, [pc, #168]	; (8002c5c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002bb4:	1d3c      	adds	r4, r7, #4
 8002bb6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bb8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002bbc:	4b28      	ldr	r3, [pc, #160]	; (8002c60 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002bbe:	881b      	ldrh	r3, [r3, #0]
 8002bc0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	61fb      	str	r3, [r7, #28]
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	61bb      	str	r3, [r7, #24]
 8002bca:	2300      	movs	r3, #0
 8002bcc:	627b      	str	r3, [r7, #36]	; 0x24
 8002bce:	2300      	movs	r3, #0
 8002bd0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002bd6:	4b23      	ldr	r3, [pc, #140]	; (8002c64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	f003 030c 	and.w	r3, r3, #12
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d002      	beq.n	8002bec <HAL_RCC_GetSysClockFreq+0x40>
 8002be6:	2b08      	cmp	r3, #8
 8002be8:	d003      	beq.n	8002bf2 <HAL_RCC_GetSysClockFreq+0x46>
 8002bea:	e02d      	b.n	8002c48 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bec:	4b1e      	ldr	r3, [pc, #120]	; (8002c68 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002bee:	623b      	str	r3, [r7, #32]
      break;
 8002bf0:	e02d      	b.n	8002c4e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	0c9b      	lsrs	r3, r3, #18
 8002bf6:	f003 030f 	and.w	r3, r3, #15
 8002bfa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002bfe:	4413      	add	r3, r2
 8002c00:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002c04:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d013      	beq.n	8002c38 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c10:	4b14      	ldr	r3, [pc, #80]	; (8002c64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	0c5b      	lsrs	r3, r3, #17
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002c1e:	4413      	add	r3, r2
 8002c20:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002c24:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	4a0f      	ldr	r2, [pc, #60]	; (8002c68 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c2a:	fb02 f203 	mul.w	r2, r2, r3
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c34:	627b      	str	r3, [r7, #36]	; 0x24
 8002c36:	e004      	b.n	8002c42 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	4a0c      	ldr	r2, [pc, #48]	; (8002c6c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c3c:	fb02 f303 	mul.w	r3, r2, r3
 8002c40:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c44:	623b      	str	r3, [r7, #32]
      break;
 8002c46:	e002      	b.n	8002c4e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c48:	4b07      	ldr	r3, [pc, #28]	; (8002c68 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c4a:	623b      	str	r3, [r7, #32]
      break;
 8002c4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c4e:	6a3b      	ldr	r3, [r7, #32]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3728      	adds	r7, #40	; 0x28
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bc90      	pop	{r4, r7}
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	08007b58 	.word	0x08007b58
 8002c60:	08007b68 	.word	0x08007b68
 8002c64:	40021000 	.word	0x40021000
 8002c68:	007a1200 	.word	0x007a1200
 8002c6c:	003d0900 	.word	0x003d0900

08002c70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c74:	4b02      	ldr	r3, [pc, #8]	; (8002c80 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c76:	681b      	ldr	r3, [r3, #0]
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bc80      	pop	{r7}
 8002c7e:	4770      	bx	lr
 8002c80:	20000008 	.word	0x20000008

08002c84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c88:	f7ff fff2 	bl	8002c70 <HAL_RCC_GetHCLKFreq>
 8002c8c:	4601      	mov	r1, r0
 8002c8e:	4b05      	ldr	r3, [pc, #20]	; (8002ca4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	0a1b      	lsrs	r3, r3, #8
 8002c94:	f003 0307 	and.w	r3, r3, #7
 8002c98:	4a03      	ldr	r2, [pc, #12]	; (8002ca8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c9a:	5cd3      	ldrb	r3, [r2, r3]
 8002c9c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	08007c00 	.word	0x08007c00

08002cac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002cb0:	f7ff ffde 	bl	8002c70 <HAL_RCC_GetHCLKFreq>
 8002cb4:	4601      	mov	r1, r0
 8002cb6:	4b05      	ldr	r3, [pc, #20]	; (8002ccc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	0adb      	lsrs	r3, r3, #11
 8002cbc:	f003 0307 	and.w	r3, r3, #7
 8002cc0:	4a03      	ldr	r2, [pc, #12]	; (8002cd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cc2:	5cd3      	ldrb	r3, [r2, r3]
 8002cc4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	08007c00 	.word	0x08007c00

08002cd4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002cdc:	4b0a      	ldr	r3, [pc, #40]	; (8002d08 <RCC_Delay+0x34>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a0a      	ldr	r2, [pc, #40]	; (8002d0c <RCC_Delay+0x38>)
 8002ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce6:	0a5b      	lsrs	r3, r3, #9
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	fb02 f303 	mul.w	r3, r2, r3
 8002cee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002cf0:	bf00      	nop
  }
  while (Delay --);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	1e5a      	subs	r2, r3, #1
 8002cf6:	60fa      	str	r2, [r7, #12]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d1f9      	bne.n	8002cf0 <RCC_Delay+0x1c>
}
 8002cfc:	bf00      	nop
 8002cfe:	3714      	adds	r7, #20
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bc80      	pop	{r7}
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	20000008 	.word	0x20000008
 8002d0c:	10624dd3 	.word	0x10624dd3

08002d10 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b086      	sub	sp, #24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	613b      	str	r3, [r7, #16]
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0301 	and.w	r3, r3, #1
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d07d      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d30:	4b4f      	ldr	r3, [pc, #316]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d32:	69db      	ldr	r3, [r3, #28]
 8002d34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d10d      	bne.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d3c:	4b4c      	ldr	r3, [pc, #304]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d3e:	69db      	ldr	r3, [r3, #28]
 8002d40:	4a4b      	ldr	r2, [pc, #300]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d46:	61d3      	str	r3, [r2, #28]
 8002d48:	4b49      	ldr	r3, [pc, #292]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d4a:	69db      	ldr	r3, [r3, #28]
 8002d4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d50:	60bb      	str	r3, [r7, #8]
 8002d52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d54:	2301      	movs	r3, #1
 8002d56:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d58:	4b46      	ldr	r3, [pc, #280]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d118      	bne.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d64:	4b43      	ldr	r3, [pc, #268]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a42      	ldr	r2, [pc, #264]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d6e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d70:	f7fe fad8 	bl	8001324 <HAL_GetTick>
 8002d74:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d76:	e008      	b.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d78:	f7fe fad4 	bl	8001324 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b64      	cmp	r3, #100	; 0x64
 8002d84:	d901      	bls.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e06d      	b.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d8a:	4b3a      	ldr	r3, [pc, #232]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d0f0      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d96:	4b36      	ldr	r3, [pc, #216]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d9e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d02e      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d027      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002db4:	4b2e      	ldr	r3, [pc, #184]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002db6:	6a1b      	ldr	r3, [r3, #32]
 8002db8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dbc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002dbe:	4b2e      	ldr	r3, [pc, #184]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002dc4:	4b2c      	ldr	r3, [pc, #176]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002dca:	4a29      	ldr	r2, [pc, #164]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d014      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dda:	f7fe faa3 	bl	8001324 <HAL_GetTick>
 8002dde:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002de0:	e00a      	b.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002de2:	f7fe fa9f 	bl	8001324 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d901      	bls.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e036      	b.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002df8:	4b1d      	ldr	r3, [pc, #116]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dfa:	6a1b      	ldr	r3, [r3, #32]
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d0ee      	beq.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e04:	4b1a      	ldr	r3, [pc, #104]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e06:	6a1b      	ldr	r3, [r3, #32]
 8002e08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	4917      	ldr	r1, [pc, #92]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e16:	7dfb      	ldrb	r3, [r7, #23]
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d105      	bne.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e1c:	4b14      	ldr	r3, [pc, #80]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e1e:	69db      	ldr	r3, [r3, #28]
 8002e20:	4a13      	ldr	r2, [pc, #76]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e26:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d008      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e34:	4b0e      	ldr	r3, [pc, #56]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	490b      	ldr	r1, [pc, #44]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0310 	and.w	r3, r3, #16
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d008      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e52:	4b07      	ldr	r3, [pc, #28]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	4904      	ldr	r1, [pc, #16]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3718      	adds	r7, #24
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	40021000 	.word	0x40021000
 8002e74:	40007000 	.word	0x40007000
 8002e78:	42420440 	.word	0x42420440

08002e7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e01d      	b.n	8002eca <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d106      	bne.n	8002ea8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f7fe f84e 	bl	8000f44 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2202      	movs	r2, #2
 8002eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	3304      	adds	r3, #4
 8002eb8:	4619      	mov	r1, r3
 8002eba:	4610      	mov	r0, r2
 8002ebc:	f000 f902 	bl	80030c4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
	...

08002ed4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	6839      	ldr	r1, [r7, #0]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f000 fad6 	bl	8003498 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a10      	ldr	r2, [pc, #64]	; (8002f34 <HAL_TIM_PWM_Start+0x60>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d107      	bne.n	8002f06 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f04:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f003 0307 	and.w	r3, r3, #7
 8002f10:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2b06      	cmp	r3, #6
 8002f16:	d007      	beq.n	8002f28 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f042 0201 	orr.w	r2, r2, #1
 8002f26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	40012c00 	.word	0x40012c00

08002f38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d101      	bne.n	8002f52 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002f4e:	2302      	movs	r3, #2
 8002f50:	e0b4      	b.n	80030bc <HAL_TIM_PWM_ConfigChannel+0x184>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2201      	movs	r2, #1
 8002f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2202      	movs	r2, #2
 8002f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2b0c      	cmp	r3, #12
 8002f66:	f200 809f 	bhi.w	80030a8 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002f6a:	a201      	add	r2, pc, #4	; (adr r2, 8002f70 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f70:	08002fa5 	.word	0x08002fa5
 8002f74:	080030a9 	.word	0x080030a9
 8002f78:	080030a9 	.word	0x080030a9
 8002f7c:	080030a9 	.word	0x080030a9
 8002f80:	08002fe5 	.word	0x08002fe5
 8002f84:	080030a9 	.word	0x080030a9
 8002f88:	080030a9 	.word	0x080030a9
 8002f8c:	080030a9 	.word	0x080030a9
 8002f90:	08003027 	.word	0x08003027
 8002f94:	080030a9 	.word	0x080030a9
 8002f98:	080030a9 	.word	0x080030a9
 8002f9c:	080030a9 	.word	0x080030a9
 8002fa0:	08003067 	.word	0x08003067
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68b9      	ldr	r1, [r7, #8]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f000 f8ec 	bl	8003188 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	699a      	ldr	r2, [r3, #24]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f042 0208 	orr.w	r2, r2, #8
 8002fbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	699a      	ldr	r2, [r3, #24]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f022 0204 	bic.w	r2, r2, #4
 8002fce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	6999      	ldr	r1, [r3, #24]
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	691a      	ldr	r2, [r3, #16]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	619a      	str	r2, [r3, #24]
      break;
 8002fe2:	e062      	b.n	80030aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	68b9      	ldr	r1, [r7, #8]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f000 f932 	bl	8003254 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	699a      	ldr	r2, [r3, #24]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ffe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	699a      	ldr	r2, [r3, #24]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800300e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	6999      	ldr	r1, [r3, #24]
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	021a      	lsls	r2, r3, #8
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	430a      	orrs	r2, r1
 8003022:	619a      	str	r2, [r3, #24]
      break;
 8003024:	e041      	b.n	80030aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68b9      	ldr	r1, [r7, #8]
 800302c:	4618      	mov	r0, r3
 800302e:	f000 f97b 	bl	8003328 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	69da      	ldr	r2, [r3, #28]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f042 0208 	orr.w	r2, r2, #8
 8003040:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	69da      	ldr	r2, [r3, #28]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f022 0204 	bic.w	r2, r2, #4
 8003050:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	69d9      	ldr	r1, [r3, #28]
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	691a      	ldr	r2, [r3, #16]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	430a      	orrs	r2, r1
 8003062:	61da      	str	r2, [r3, #28]
      break;
 8003064:	e021      	b.n	80030aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68b9      	ldr	r1, [r7, #8]
 800306c:	4618      	mov	r0, r3
 800306e:	f000 f9c5 	bl	80033fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	69da      	ldr	r2, [r3, #28]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003080:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	69da      	ldr	r2, [r3, #28]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003090:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	69d9      	ldr	r1, [r3, #28]
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	691b      	ldr	r3, [r3, #16]
 800309c:	021a      	lsls	r2, r3, #8
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	430a      	orrs	r2, r1
 80030a4:	61da      	str	r2, [r3, #28]
      break;
 80030a6:	e000      	b.n	80030aa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80030a8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2201      	movs	r2, #1
 80030ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3710      	adds	r7, #16
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b085      	sub	sp, #20
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a29      	ldr	r2, [pc, #164]	; (800317c <TIM_Base_SetConfig+0xb8>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d00b      	beq.n	80030f4 <TIM_Base_SetConfig+0x30>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030e2:	d007      	beq.n	80030f4 <TIM_Base_SetConfig+0x30>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a26      	ldr	r2, [pc, #152]	; (8003180 <TIM_Base_SetConfig+0xbc>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d003      	beq.n	80030f4 <TIM_Base_SetConfig+0x30>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a25      	ldr	r2, [pc, #148]	; (8003184 <TIM_Base_SetConfig+0xc0>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d108      	bne.n	8003106 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	68fa      	ldr	r2, [r7, #12]
 8003102:	4313      	orrs	r3, r2
 8003104:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a1c      	ldr	r2, [pc, #112]	; (800317c <TIM_Base_SetConfig+0xb8>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d00b      	beq.n	8003126 <TIM_Base_SetConfig+0x62>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003114:	d007      	beq.n	8003126 <TIM_Base_SetConfig+0x62>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a19      	ldr	r2, [pc, #100]	; (8003180 <TIM_Base_SetConfig+0xbc>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d003      	beq.n	8003126 <TIM_Base_SetConfig+0x62>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a18      	ldr	r2, [pc, #96]	; (8003184 <TIM_Base_SetConfig+0xc0>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d108      	bne.n	8003138 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800312c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	68fa      	ldr	r2, [r7, #12]
 8003134:	4313      	orrs	r3, r2
 8003136:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	4313      	orrs	r3, r2
 8003144:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	68fa      	ldr	r2, [r7, #12]
 800314a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	689a      	ldr	r2, [r3, #8]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a07      	ldr	r2, [pc, #28]	; (800317c <TIM_Base_SetConfig+0xb8>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d103      	bne.n	800316c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	691a      	ldr	r2, [r3, #16]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	615a      	str	r2, [r3, #20]
}
 8003172:	bf00      	nop
 8003174:	3714      	adds	r7, #20
 8003176:	46bd      	mov	sp, r7
 8003178:	bc80      	pop	{r7}
 800317a:	4770      	bx	lr
 800317c:	40012c00 	.word	0x40012c00
 8003180:	40000400 	.word	0x40000400
 8003184:	40000800 	.word	0x40000800

08003188 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003188:	b480      	push	{r7}
 800318a:	b087      	sub	sp, #28
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a1b      	ldr	r3, [r3, #32]
 8003196:	f023 0201 	bic.w	r2, r3, #1
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a1b      	ldr	r3, [r3, #32]
 80031a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f023 0303 	bic.w	r3, r3, #3
 80031be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	f023 0302 	bic.w	r3, r3, #2
 80031d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	697a      	ldr	r2, [r7, #20]
 80031d8:	4313      	orrs	r3, r2
 80031da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a1c      	ldr	r2, [pc, #112]	; (8003250 <TIM_OC1_SetConfig+0xc8>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d10c      	bne.n	80031fe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	f023 0308 	bic.w	r3, r3, #8
 80031ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	697a      	ldr	r2, [r7, #20]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	f023 0304 	bic.w	r3, r3, #4
 80031fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a13      	ldr	r2, [pc, #76]	; (8003250 <TIM_OC1_SetConfig+0xc8>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d111      	bne.n	800322a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800320c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003214:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	4313      	orrs	r3, r2
 800321e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	699b      	ldr	r3, [r3, #24]
 8003224:	693a      	ldr	r2, [r7, #16]
 8003226:	4313      	orrs	r3, r2
 8003228:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	693a      	ldr	r2, [r7, #16]
 800322e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	685a      	ldr	r2, [r3, #4]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	697a      	ldr	r2, [r7, #20]
 8003242:	621a      	str	r2, [r3, #32]
}
 8003244:	bf00      	nop
 8003246:	371c      	adds	r7, #28
 8003248:	46bd      	mov	sp, r7
 800324a:	bc80      	pop	{r7}
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	40012c00 	.word	0x40012c00

08003254 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003254:	b480      	push	{r7}
 8003256:	b087      	sub	sp, #28
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a1b      	ldr	r3, [r3, #32]
 8003262:	f023 0210 	bic.w	r2, r3, #16
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a1b      	ldr	r3, [r3, #32]
 800326e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	699b      	ldr	r3, [r3, #24]
 800327a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003282:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800328a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	021b      	lsls	r3, r3, #8
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	4313      	orrs	r3, r2
 8003296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	f023 0320 	bic.w	r3, r3, #32
 800329e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	011b      	lsls	r3, r3, #4
 80032a6:	697a      	ldr	r2, [r7, #20]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a1d      	ldr	r2, [pc, #116]	; (8003324 <TIM_OC2_SetConfig+0xd0>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d10d      	bne.n	80032d0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	011b      	lsls	r3, r3, #4
 80032c2:	697a      	ldr	r2, [r7, #20]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4a14      	ldr	r2, [pc, #80]	; (8003324 <TIM_OC2_SetConfig+0xd0>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d113      	bne.n	8003300 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80032e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	695b      	ldr	r3, [r3, #20]
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	693a      	ldr	r2, [r7, #16]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	693a      	ldr	r2, [r7, #16]
 8003304:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	68fa      	ldr	r2, [r7, #12]
 800330a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685a      	ldr	r2, [r3, #4]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	697a      	ldr	r2, [r7, #20]
 8003318:	621a      	str	r2, [r3, #32]
}
 800331a:	bf00      	nop
 800331c:	371c      	adds	r7, #28
 800331e:	46bd      	mov	sp, r7
 8003320:	bc80      	pop	{r7}
 8003322:	4770      	bx	lr
 8003324:	40012c00 	.word	0x40012c00

08003328 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003328:	b480      	push	{r7}
 800332a:	b087      	sub	sp, #28
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a1b      	ldr	r3, [r3, #32]
 8003336:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a1b      	ldr	r3, [r3, #32]
 8003342:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	69db      	ldr	r3, [r3, #28]
 800334e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003356:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f023 0303 	bic.w	r3, r3, #3
 800335e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	4313      	orrs	r3, r2
 8003368:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003370:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	021b      	lsls	r3, r3, #8
 8003378:	697a      	ldr	r2, [r7, #20]
 800337a:	4313      	orrs	r3, r2
 800337c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a1d      	ldr	r2, [pc, #116]	; (80033f8 <TIM_OC3_SetConfig+0xd0>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d10d      	bne.n	80033a2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800338c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	021b      	lsls	r3, r3, #8
 8003394:	697a      	ldr	r2, [r7, #20]
 8003396:	4313      	orrs	r3, r2
 8003398:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a14      	ldr	r2, [pc, #80]	; (80033f8 <TIM_OC3_SetConfig+0xd0>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d113      	bne.n	80033d2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80033b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80033b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	011b      	lsls	r3, r3, #4
 80033c0:	693a      	ldr	r2, [r7, #16]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	011b      	lsls	r3, r3, #4
 80033cc:	693a      	ldr	r2, [r7, #16]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	693a      	ldr	r2, [r7, #16]
 80033d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	685a      	ldr	r2, [r3, #4]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	697a      	ldr	r2, [r7, #20]
 80033ea:	621a      	str	r2, [r3, #32]
}
 80033ec:	bf00      	nop
 80033ee:	371c      	adds	r7, #28
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bc80      	pop	{r7}
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	40012c00 	.word	0x40012c00

080033fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b087      	sub	sp, #28
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a1b      	ldr	r3, [r3, #32]
 800340a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a1b      	ldr	r3, [r3, #32]
 8003416:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	69db      	ldr	r3, [r3, #28]
 8003422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800342a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003432:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	021b      	lsls	r3, r3, #8
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	4313      	orrs	r3, r2
 800343e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003446:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	031b      	lsls	r3, r3, #12
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	4313      	orrs	r3, r2
 8003452:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a0f      	ldr	r2, [pc, #60]	; (8003494 <TIM_OC4_SetConfig+0x98>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d109      	bne.n	8003470 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003462:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	695b      	ldr	r3, [r3, #20]
 8003468:	019b      	lsls	r3, r3, #6
 800346a:	697a      	ldr	r2, [r7, #20]
 800346c:	4313      	orrs	r3, r2
 800346e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	68fa      	ldr	r2, [r7, #12]
 800347a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	693a      	ldr	r2, [r7, #16]
 8003488:	621a      	str	r2, [r3, #32]
}
 800348a:	bf00      	nop
 800348c:	371c      	adds	r7, #28
 800348e:	46bd      	mov	sp, r7
 8003490:	bc80      	pop	{r7}
 8003492:	4770      	bx	lr
 8003494:	40012c00 	.word	0x40012c00

08003498 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003498:	b480      	push	{r7}
 800349a:	b087      	sub	sp, #28
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	f003 031f 	and.w	r3, r3, #31
 80034aa:	2201      	movs	r2, #1
 80034ac:	fa02 f303 	lsl.w	r3, r2, r3
 80034b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6a1a      	ldr	r2, [r3, #32]
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	43db      	mvns	r3, r3
 80034ba:	401a      	ands	r2, r3
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6a1a      	ldr	r2, [r3, #32]
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	f003 031f 	and.w	r3, r3, #31
 80034ca:	6879      	ldr	r1, [r7, #4]
 80034cc:	fa01 f303 	lsl.w	r3, r1, r3
 80034d0:	431a      	orrs	r2, r3
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	621a      	str	r2, [r3, #32]
}
 80034d6:	bf00      	nop
 80034d8:	371c      	adds	r7, #28
 80034da:	46bd      	mov	sp, r7
 80034dc:	bc80      	pop	{r7}
 80034de:	4770      	bx	lr

080034e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d101      	bne.n	80034f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034f4:	2302      	movs	r3, #2
 80034f6:	e032      	b.n	800355e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2202      	movs	r2, #2
 8003504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800351e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68fa      	ldr	r2, [r7, #12]
 8003526:	4313      	orrs	r3, r2
 8003528:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003530:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	68ba      	ldr	r2, [r7, #8]
 8003538:	4313      	orrs	r3, r2
 800353a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68ba      	ldr	r2, [r7, #8]
 800354a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3714      	adds	r7, #20
 8003562:	46bd      	mov	sp, r7
 8003564:	bc80      	pop	{r7}
 8003566:	4770      	bx	lr

08003568 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e03f      	b.n	80035fa <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d106      	bne.n	8003594 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f7fd fda0 	bl	80010d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2224      	movs	r2, #36	; 0x24
 8003598:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68da      	ldr	r2, [r3, #12]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f000 fc35 	bl	8003e1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	691a      	ldr	r2, [r3, #16]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	695a      	ldr	r2, [r3, #20]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68da      	ldr	r2, [r3, #12]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2220      	movs	r2, #32
 80035ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2220      	movs	r2, #32
 80035f4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3708      	adds	r7, #8
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
	...

08003604 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	4613      	mov	r3, r2
 8003610:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b20      	cmp	r3, #32
 800361c:	d153      	bne.n	80036c6 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d002      	beq.n	800362a <HAL_UART_Transmit_DMA+0x26>
 8003624:	88fb      	ldrh	r3, [r7, #6]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e04c      	b.n	80036c8 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003634:	2b01      	cmp	r3, #1
 8003636:	d101      	bne.n	800363c <HAL_UART_Transmit_DMA+0x38>
 8003638:	2302      	movs	r3, #2
 800363a:	e045      	b.n	80036c8 <HAL_UART_Transmit_DMA+0xc4>
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8003644:	68ba      	ldr	r2, [r7, #8]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	88fa      	ldrh	r2, [r7, #6]
 800364e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	88fa      	ldrh	r2, [r7, #6]
 8003654:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2221      	movs	r2, #33	; 0x21
 8003660:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003668:	4a19      	ldr	r2, [pc, #100]	; (80036d0 <HAL_UART_Transmit_DMA+0xcc>)
 800366a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003670:	4a18      	ldr	r2, [pc, #96]	; (80036d4 <HAL_UART_Transmit_DMA+0xd0>)
 8003672:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003678:	4a17      	ldr	r2, [pc, #92]	; (80036d8 <HAL_UART_Transmit_DMA+0xd4>)
 800367a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003680:	2200      	movs	r2, #0
 8003682:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8003684:	f107 0308 	add.w	r3, r7, #8
 8003688:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	6819      	ldr	r1, [r3, #0]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	3304      	adds	r3, #4
 8003698:	461a      	mov	r2, r3
 800369a:	88fb      	ldrh	r3, [r7, #6]
 800369c:	f7fe fb70 	bl	8001d80 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80036a8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	695a      	ldr	r2, [r3, #20]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80036c0:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80036c2:	2300      	movs	r3, #0
 80036c4:	e000      	b.n	80036c8 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80036c6:	2302      	movs	r3, #2
  }
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3718      	adds	r7, #24
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	08003a2f 	.word	0x08003a2f
 80036d4:	08003a81 	.word	0x08003a81
 80036d8:	08003b21 	.word	0x08003b21

080036dc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b086      	sub	sp, #24
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	4613      	mov	r3, r2
 80036e8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	2b20      	cmp	r3, #32
 80036f4:	d166      	bne.n	80037c4 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d002      	beq.n	8003702 <HAL_UART_Receive_DMA+0x26>
 80036fc:	88fb      	ldrh	r3, [r7, #6]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d101      	bne.n	8003706 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e05f      	b.n	80037c6 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800370c:	2b01      	cmp	r3, #1
 800370e:	d101      	bne.n	8003714 <HAL_UART_Receive_DMA+0x38>
 8003710:	2302      	movs	r3, #2
 8003712:	e058      	b.n	80037c6 <HAL_UART_Receive_DMA+0xea>
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800371c:	68ba      	ldr	r2, [r7, #8]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	88fa      	ldrh	r2, [r7, #6]
 8003726:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2222      	movs	r2, #34	; 0x22
 8003732:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800373a:	4a25      	ldr	r2, [pc, #148]	; (80037d0 <HAL_UART_Receive_DMA+0xf4>)
 800373c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003742:	4a24      	ldr	r2, [pc, #144]	; (80037d4 <HAL_UART_Receive_DMA+0xf8>)
 8003744:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800374a:	4a23      	ldr	r2, [pc, #140]	; (80037d8 <HAL_UART_Receive_DMA+0xfc>)
 800374c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003752:	2200      	movs	r2, #0
 8003754:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 8003756:	f107 0308 	add.w	r3, r7, #8
 800375a:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	3304      	adds	r3, #4
 8003766:	4619      	mov	r1, r3
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	88fb      	ldrh	r3, [r7, #6]
 800376e:	f7fe fb07 	bl	8001d80 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8003772:	2300      	movs	r3, #0
 8003774:	613b      	str	r3, [r7, #16]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	613b      	str	r3, [r7, #16]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	613b      	str	r3, [r7, #16]
 8003786:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68da      	ldr	r2, [r3, #12]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800379e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	695a      	ldr	r2, [r3, #20]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f042 0201 	orr.w	r2, r2, #1
 80037ae:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	695a      	ldr	r2, [r3, #20]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037be:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80037c0:	2300      	movs	r3, #0
 80037c2:	e000      	b.n	80037c6 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80037c4:	2302      	movs	r3, #2
  }
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3718      	adds	r7, #24
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	08003a9d 	.word	0x08003a9d
 80037d4:	08003b05 	.word	0x08003b05
 80037d8:	08003b21 	.word	0x08003b21

080037dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b088      	sub	sp, #32
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80037fc:	2300      	movs	r3, #0
 80037fe:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003800:	2300      	movs	r3, #0
 8003802:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	f003 030f 	and.w	r3, r3, #15
 800380a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d10d      	bne.n	800382e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	f003 0320 	and.w	r3, r3, #32
 8003818:	2b00      	cmp	r3, #0
 800381a:	d008      	beq.n	800382e <HAL_UART_IRQHandler+0x52>
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	f003 0320 	and.w	r3, r3, #32
 8003822:	2b00      	cmp	r3, #0
 8003824:	d003      	beq.n	800382e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 fa77 	bl	8003d1a <UART_Receive_IT>
      return;
 800382c:	e0cc      	b.n	80039c8 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	2b00      	cmp	r3, #0
 8003832:	f000 80ab 	beq.w	800398c <HAL_UART_IRQHandler+0x1b0>
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	f003 0301 	and.w	r3, r3, #1
 800383c:	2b00      	cmp	r3, #0
 800383e:	d105      	bne.n	800384c <HAL_UART_IRQHandler+0x70>
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003846:	2b00      	cmp	r3, #0
 8003848:	f000 80a0 	beq.w	800398c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00a      	beq.n	800386c <HAL_UART_IRQHandler+0x90>
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800385c:	2b00      	cmp	r3, #0
 800385e:	d005      	beq.n	800386c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003864:	f043 0201 	orr.w	r2, r3, #1
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	f003 0304 	and.w	r3, r3, #4
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00a      	beq.n	800388c <HAL_UART_IRQHandler+0xb0>
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	f003 0301 	and.w	r3, r3, #1
 800387c:	2b00      	cmp	r3, #0
 800387e:	d005      	beq.n	800388c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003884:	f043 0202 	orr.w	r2, r3, #2
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00a      	beq.n	80038ac <HAL_UART_IRQHandler+0xd0>
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	f003 0301 	and.w	r3, r3, #1
 800389c:	2b00      	cmp	r3, #0
 800389e:	d005      	beq.n	80038ac <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038a4:	f043 0204 	orr.w	r2, r3, #4
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	f003 0308 	and.w	r3, r3, #8
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00a      	beq.n	80038cc <HAL_UART_IRQHandler+0xf0>
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	f003 0301 	and.w	r3, r3, #1
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d005      	beq.n	80038cc <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c4:	f043 0208 	orr.w	r2, r3, #8
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d078      	beq.n	80039c6 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	f003 0320 	and.w	r3, r3, #32
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d007      	beq.n	80038ee <HAL_UART_IRQHandler+0x112>
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	f003 0320 	and.w	r3, r3, #32
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d002      	beq.n	80038ee <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f000 fa16 	bl	8003d1a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	695b      	ldr	r3, [r3, #20]
 80038f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	bf14      	ite	ne
 80038fc:	2301      	movne	r3, #1
 80038fe:	2300      	moveq	r3, #0
 8003900:	b2db      	uxtb	r3, r3
 8003902:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003908:	f003 0308 	and.w	r3, r3, #8
 800390c:	2b00      	cmp	r3, #0
 800390e:	d102      	bne.n	8003916 <HAL_UART_IRQHandler+0x13a>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d031      	beq.n	800397a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 f961 	bl	8003bde <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003926:	2b00      	cmp	r3, #0
 8003928:	d023      	beq.n	8003972 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	695a      	ldr	r2, [r3, #20]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003938:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800393e:	2b00      	cmp	r3, #0
 8003940:	d013      	beq.n	800396a <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003946:	4a22      	ldr	r2, [pc, #136]	; (80039d0 <HAL_UART_IRQHandler+0x1f4>)
 8003948:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800394e:	4618      	mov	r0, r3
 8003950:	f7fe fa76 	bl	8001e40 <HAL_DMA_Abort_IT>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d016      	beq.n	8003988 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800395e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003964:	4610      	mov	r0, r2
 8003966:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003968:	e00e      	b.n	8003988 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 f856 	bl	8003a1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003970:	e00a      	b.n	8003988 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 f852 	bl	8003a1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003978:	e006      	b.n	8003988 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 f84e 	bl	8003a1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003986:	e01e      	b.n	80039c6 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003988:	bf00      	nop
    return;
 800398a:	e01c      	b.n	80039c6 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003992:	2b00      	cmp	r3, #0
 8003994:	d008      	beq.n	80039a8 <HAL_UART_IRQHandler+0x1cc>
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800399c:	2b00      	cmp	r3, #0
 800399e:	d003      	beq.n	80039a8 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f000 f94d 	bl	8003c40 <UART_Transmit_IT>
    return;
 80039a6:	e00f      	b.n	80039c8 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00a      	beq.n	80039c8 <HAL_UART_IRQHandler+0x1ec>
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d005      	beq.n	80039c8 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f000 f994 	bl	8003cea <UART_EndTransmit_IT>
    return;
 80039c2:	bf00      	nop
 80039c4:	e000      	b.n	80039c8 <HAL_UART_IRQHandler+0x1ec>
    return;
 80039c6:	bf00      	nop
  }
}
 80039c8:	3720      	adds	r7, #32
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	08003c19 	.word	0x08003c19

080039d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80039dc:	bf00      	nop
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bc80      	pop	{r7}
 80039e4:	4770      	bx	lr

080039e6 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80039e6:	b480      	push	{r7}
 80039e8:	b083      	sub	sp, #12
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80039ee:	bf00      	nop
 80039f0:	370c      	adds	r7, #12
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bc80      	pop	{r7}
 80039f6:	4770      	bx	lr

080039f8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bc80      	pop	{r7}
 8003a08:	4770      	bx	lr

08003a0a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	b083      	sub	sp, #12
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003a12:	bf00      	nop
 8003a14:	370c      	adds	r7, #12
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bc80      	pop	{r7}
 8003a1a:	4770      	bx	lr

08003a1c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003a24:	bf00      	nop
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bc80      	pop	{r7}
 8003a2c:	4770      	bx	lr

08003a2e <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003a2e:	b580      	push	{r7, lr}
 8003a30:	b084      	sub	sp, #16
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3a:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0320 	and.w	r3, r3, #32
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d113      	bne.n	8003a72 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	695a      	ldr	r2, [r3, #20]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a5e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	68da      	ldr	r2, [r3, #12]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a6e:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003a70:	e002      	b.n	8003a78 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8003a72:	68f8      	ldr	r0, [r7, #12]
 8003a74:	f7ff ffae 	bl	80039d4 <HAL_UART_TxCpltCallback>
}
 8003a78:	bf00      	nop
 8003a7a:	3710      	adds	r7, #16
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003a8e:	68f8      	ldr	r0, [r7, #12]
 8003a90:	f7ff ffa9 	bl	80039e6 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a94:	bf00      	nop
 8003a96:	3710      	adds	r7, #16
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa8:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0320 	and.w	r3, r3, #32
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d11e      	bne.n	8003af6 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2200      	movs	r2, #0
 8003abc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68da      	ldr	r2, [r3, #12]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003acc:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	695a      	ldr	r2, [r3, #20]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f022 0201 	bic.w	r2, r2, #1
 8003adc:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	695a      	ldr	r2, [r3, #20]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003aec:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2220      	movs	r2, #32
 8003af2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8003af6:	68f8      	ldr	r0, [r7, #12]
 8003af8:	f7ff ff7e 	bl	80039f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003afc:	bf00      	nop
 8003afe:	3710      	adds	r7, #16
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b10:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8003b12:	68f8      	ldr	r0, [r7, #12]
 8003b14:	f7ff ff79 	bl	8003a0a <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b18:	bf00      	nop
 8003b1a:	3710      	adds	r7, #16
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b30:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	695b      	ldr	r3, [r3, #20]
 8003b38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	bf14      	ite	ne
 8003b40:	2301      	movne	r3, #1
 8003b42:	2300      	moveq	r3, #0
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	2b21      	cmp	r3, #33	; 0x21
 8003b52:	d108      	bne.n	8003b66 <UART_DMAError+0x46>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d005      	beq.n	8003b66 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003b60:	68b8      	ldr	r0, [r7, #8]
 8003b62:	f000 f827 	bl	8003bb4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	695b      	ldr	r3, [r3, #20]
 8003b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	bf14      	ite	ne
 8003b74:	2301      	movne	r3, #1
 8003b76:	2300      	moveq	r3, #0
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	2b22      	cmp	r3, #34	; 0x22
 8003b86:	d108      	bne.n	8003b9a <UART_DMAError+0x7a>
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d005      	beq.n	8003b9a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	2200      	movs	r2, #0
 8003b92:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003b94:	68b8      	ldr	r0, [r7, #8]
 8003b96:	f000 f822 	bl	8003bde <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b9e:	f043 0210 	orr.w	r2, r3, #16
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ba6:	68b8      	ldr	r0, [r7, #8]
 8003ba8:	f7ff ff38 	bl	8003a1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003bac:	bf00      	nop
 8003bae:	3710      	adds	r7, #16
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68da      	ldr	r2, [r3, #12]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003bca:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2220      	movs	r2, #32
 8003bd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8003bd4:	bf00      	nop
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bc80      	pop	{r7}
 8003bdc:	4770      	bx	lr

08003bde <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bde:	b480      	push	{r7}
 8003be0:	b083      	sub	sp, #12
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68da      	ldr	r2, [r3, #12]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003bf4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	695a      	ldr	r2, [r3, #20]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f022 0201 	bic.w	r2, r2, #1
 8003c04:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2220      	movs	r2, #32
 8003c0a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003c0e:	bf00      	nop
 8003c10:	370c      	adds	r7, #12
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bc80      	pop	{r7}
 8003c16:	4770      	bx	lr

08003c18 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c24:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c32:	68f8      	ldr	r0, [r7, #12]
 8003c34:	f7ff fef2 	bl	8003a1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c38:	bf00      	nop
 8003c3a:	3710      	adds	r7, #16
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b085      	sub	sp, #20
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	2b21      	cmp	r3, #33	; 0x21
 8003c52:	d144      	bne.n	8003cde <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c5c:	d11a      	bne.n	8003c94 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a1b      	ldr	r3, [r3, #32]
 8003c62:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	881b      	ldrh	r3, [r3, #0]
 8003c68:	461a      	mov	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c72:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d105      	bne.n	8003c88 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a1b      	ldr	r3, [r3, #32]
 8003c80:	1c9a      	adds	r2, r3, #2
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	621a      	str	r2, [r3, #32]
 8003c86:	e00e      	b.n	8003ca6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a1b      	ldr	r3, [r3, #32]
 8003c8c:	1c5a      	adds	r2, r3, #1
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	621a      	str	r2, [r3, #32]
 8003c92:	e008      	b.n	8003ca6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a1b      	ldr	r3, [r3, #32]
 8003c98:	1c59      	adds	r1, r3, #1
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	6211      	str	r1, [r2, #32]
 8003c9e:	781a      	ldrb	r2, [r3, #0]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	3b01      	subs	r3, #1
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10f      	bne.n	8003cda <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68da      	ldr	r2, [r3, #12]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cc8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68da      	ldr	r2, [r3, #12]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cd8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	e000      	b.n	8003ce0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003cde:	2302      	movs	r3, #2
  }
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3714      	adds	r7, #20
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bc80      	pop	{r7}
 8003ce8:	4770      	bx	lr

08003cea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b082      	sub	sp, #8
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68da      	ldr	r2, [r3, #12]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d00:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2220      	movs	r2, #32
 8003d06:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f7ff fe62 	bl	80039d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3708      	adds	r7, #8
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}

08003d1a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b084      	sub	sp, #16
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b22      	cmp	r3, #34	; 0x22
 8003d2c:	d171      	bne.n	8003e12 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d36:	d123      	bne.n	8003d80 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d3c:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10e      	bne.n	8003d64 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d52:	b29a      	uxth	r2, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d5c:	1c9a      	adds	r2, r3, #2
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	629a      	str	r2, [r3, #40]	; 0x28
 8003d62:	e029      	b.n	8003db8 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	b29a      	uxth	r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d78:	1c5a      	adds	r2, r3, #1
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	629a      	str	r2, [r3, #40]	; 0x28
 8003d7e:	e01b      	b.n	8003db8 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d10a      	bne.n	8003d9e <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	6858      	ldr	r0, [r3, #4]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d92:	1c59      	adds	r1, r3, #1
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	6291      	str	r1, [r2, #40]	; 0x28
 8003d98:	b2c2      	uxtb	r2, r0
 8003d9a:	701a      	strb	r2, [r3, #0]
 8003d9c:	e00c      	b.n	8003db8 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	b2da      	uxtb	r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003daa:	1c58      	adds	r0, r3, #1
 8003dac:	6879      	ldr	r1, [r7, #4]
 8003dae:	6288      	str	r0, [r1, #40]	; 0x28
 8003db0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003db4:	b2d2      	uxtb	r2, r2
 8003db6:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d120      	bne.n	8003e0e <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68da      	ldr	r2, [r3, #12]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f022 0220 	bic.w	r2, r2, #32
 8003dda:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68da      	ldr	r2, [r3, #12]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003dea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	695a      	ldr	r2, [r3, #20]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f022 0201 	bic.w	r2, r2, #1
 8003dfa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2220      	movs	r2, #32
 8003e00:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f7ff fdf7 	bl	80039f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	e002      	b.n	8003e14 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	e000      	b.n	8003e14 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003e12:	2302      	movs	r3, #2
  }
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3710      	adds	r7, #16
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	68da      	ldr	r2, [r3, #12]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	430a      	orrs	r2, r1
 8003e38:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	689a      	ldr	r2, [r3, #8]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	431a      	orrs	r2, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	695b      	ldr	r3, [r3, #20]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003e56:	f023 030c 	bic.w	r3, r3, #12
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	6812      	ldr	r2, [r2, #0]
 8003e5e:	68f9      	ldr	r1, [r7, #12]
 8003e60:	430b      	orrs	r3, r1
 8003e62:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	699a      	ldr	r2, [r3, #24]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	430a      	orrs	r2, r1
 8003e78:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a52      	ldr	r2, [pc, #328]	; (8003fc8 <UART_SetConfig+0x1ac>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d14e      	bne.n	8003f22 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003e84:	f7fe ff12 	bl	8002cac <HAL_RCC_GetPCLK2Freq>
 8003e88:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e8a:	68ba      	ldr	r2, [r7, #8]
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	4413      	add	r3, r2
 8003e92:	009a      	lsls	r2, r3, #2
 8003e94:	441a      	add	r2, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea0:	4a4a      	ldr	r2, [pc, #296]	; (8003fcc <UART_SetConfig+0x1b0>)
 8003ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea6:	095b      	lsrs	r3, r3, #5
 8003ea8:	0119      	lsls	r1, r3, #4
 8003eaa:	68ba      	ldr	r2, [r7, #8]
 8003eac:	4613      	mov	r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	4413      	add	r3, r2
 8003eb2:	009a      	lsls	r2, r3, #2
 8003eb4:	441a      	add	r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ec0:	4b42      	ldr	r3, [pc, #264]	; (8003fcc <UART_SetConfig+0x1b0>)
 8003ec2:	fba3 0302 	umull	r0, r3, r3, r2
 8003ec6:	095b      	lsrs	r3, r3, #5
 8003ec8:	2064      	movs	r0, #100	; 0x64
 8003eca:	fb00 f303 	mul.w	r3, r0, r3
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	011b      	lsls	r3, r3, #4
 8003ed2:	3332      	adds	r3, #50	; 0x32
 8003ed4:	4a3d      	ldr	r2, [pc, #244]	; (8003fcc <UART_SetConfig+0x1b0>)
 8003ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eda:	095b      	lsrs	r3, r3, #5
 8003edc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ee0:	4419      	add	r1, r3
 8003ee2:	68ba      	ldr	r2, [r7, #8]
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	4413      	add	r3, r2
 8003eea:	009a      	lsls	r2, r3, #2
 8003eec:	441a      	add	r2, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ef8:	4b34      	ldr	r3, [pc, #208]	; (8003fcc <UART_SetConfig+0x1b0>)
 8003efa:	fba3 0302 	umull	r0, r3, r3, r2
 8003efe:	095b      	lsrs	r3, r3, #5
 8003f00:	2064      	movs	r0, #100	; 0x64
 8003f02:	fb00 f303 	mul.w	r3, r0, r3
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	011b      	lsls	r3, r3, #4
 8003f0a:	3332      	adds	r3, #50	; 0x32
 8003f0c:	4a2f      	ldr	r2, [pc, #188]	; (8003fcc <UART_SetConfig+0x1b0>)
 8003f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f12:	095b      	lsrs	r3, r3, #5
 8003f14:	f003 020f 	and.w	r2, r3, #15
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	440a      	add	r2, r1
 8003f1e:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8003f20:	e04d      	b.n	8003fbe <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8003f22:	f7fe feaf 	bl	8002c84 <HAL_RCC_GetPCLK1Freq>
 8003f26:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f28:	68ba      	ldr	r2, [r7, #8]
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	4413      	add	r3, r2
 8003f30:	009a      	lsls	r2, r3, #2
 8003f32:	441a      	add	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f3e:	4a23      	ldr	r2, [pc, #140]	; (8003fcc <UART_SetConfig+0x1b0>)
 8003f40:	fba2 2303 	umull	r2, r3, r2, r3
 8003f44:	095b      	lsrs	r3, r3, #5
 8003f46:	0119      	lsls	r1, r3, #4
 8003f48:	68ba      	ldr	r2, [r7, #8]
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	4413      	add	r3, r2
 8003f50:	009a      	lsls	r2, r3, #2
 8003f52:	441a      	add	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f5e:	4b1b      	ldr	r3, [pc, #108]	; (8003fcc <UART_SetConfig+0x1b0>)
 8003f60:	fba3 0302 	umull	r0, r3, r3, r2
 8003f64:	095b      	lsrs	r3, r3, #5
 8003f66:	2064      	movs	r0, #100	; 0x64
 8003f68:	fb00 f303 	mul.w	r3, r0, r3
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	011b      	lsls	r3, r3, #4
 8003f70:	3332      	adds	r3, #50	; 0x32
 8003f72:	4a16      	ldr	r2, [pc, #88]	; (8003fcc <UART_SetConfig+0x1b0>)
 8003f74:	fba2 2303 	umull	r2, r3, r2, r3
 8003f78:	095b      	lsrs	r3, r3, #5
 8003f7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f7e:	4419      	add	r1, r3
 8003f80:	68ba      	ldr	r2, [r7, #8]
 8003f82:	4613      	mov	r3, r2
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	4413      	add	r3, r2
 8003f88:	009a      	lsls	r2, r3, #2
 8003f8a:	441a      	add	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f96:	4b0d      	ldr	r3, [pc, #52]	; (8003fcc <UART_SetConfig+0x1b0>)
 8003f98:	fba3 0302 	umull	r0, r3, r3, r2
 8003f9c:	095b      	lsrs	r3, r3, #5
 8003f9e:	2064      	movs	r0, #100	; 0x64
 8003fa0:	fb00 f303 	mul.w	r3, r0, r3
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	011b      	lsls	r3, r3, #4
 8003fa8:	3332      	adds	r3, #50	; 0x32
 8003faa:	4a08      	ldr	r2, [pc, #32]	; (8003fcc <UART_SetConfig+0x1b0>)
 8003fac:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb0:	095b      	lsrs	r3, r3, #5
 8003fb2:	f003 020f 	and.w	r2, r3, #15
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	440a      	add	r2, r1
 8003fbc:	609a      	str	r2, [r3, #8]
}
 8003fbe:	bf00      	nop
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	40013800 	.word	0x40013800
 8003fcc:	51eb851f 	.word	0x51eb851f

08003fd0 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003fd0:	b480      	push	{r7}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003fd6:	f3ef 8305 	mrs	r3, IPSR
 8003fda:	60bb      	str	r3, [r7, #8]
  return(result);
 8003fdc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d10f      	bne.n	8004002 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fe2:	f3ef 8310 	mrs	r3, PRIMASK
 8003fe6:	607b      	str	r3, [r7, #4]
  return(result);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d109      	bne.n	8004002 <osKernelInitialize+0x32>
 8003fee:	4b10      	ldr	r3, [pc, #64]	; (8004030 <osKernelInitialize+0x60>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d109      	bne.n	800400a <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003ff6:	f3ef 8311 	mrs	r3, BASEPRI
 8003ffa:	603b      	str	r3, [r7, #0]
  return(result);
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d003      	beq.n	800400a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004002:	f06f 0305 	mvn.w	r3, #5
 8004006:	60fb      	str	r3, [r7, #12]
 8004008:	e00c      	b.n	8004024 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800400a:	4b09      	ldr	r3, [pc, #36]	; (8004030 <osKernelInitialize+0x60>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d105      	bne.n	800401e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004012:	4b07      	ldr	r3, [pc, #28]	; (8004030 <osKernelInitialize+0x60>)
 8004014:	2201      	movs	r2, #1
 8004016:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004018:	2300      	movs	r3, #0
 800401a:	60fb      	str	r3, [r7, #12]
 800401c:	e002      	b.n	8004024 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800401e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004022:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004024:	68fb      	ldr	r3, [r7, #12]
}
 8004026:	4618      	mov	r0, r3
 8004028:	3714      	adds	r7, #20
 800402a:	46bd      	mov	sp, r7
 800402c:	bc80      	pop	{r7}
 800402e:	4770      	bx	lr
 8004030:	200000d0 	.word	0x200000d0

08004034 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800403a:	f3ef 8305 	mrs	r3, IPSR
 800403e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004040:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004042:	2b00      	cmp	r3, #0
 8004044:	d10f      	bne.n	8004066 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004046:	f3ef 8310 	mrs	r3, PRIMASK
 800404a:	607b      	str	r3, [r7, #4]
  return(result);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d109      	bne.n	8004066 <osKernelStart+0x32>
 8004052:	4b11      	ldr	r3, [pc, #68]	; (8004098 <osKernelStart+0x64>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2b02      	cmp	r3, #2
 8004058:	d109      	bne.n	800406e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800405a:	f3ef 8311 	mrs	r3, BASEPRI
 800405e:	603b      	str	r3, [r7, #0]
  return(result);
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d003      	beq.n	800406e <osKernelStart+0x3a>
    stat = osErrorISR;
 8004066:	f06f 0305 	mvn.w	r3, #5
 800406a:	60fb      	str	r3, [r7, #12]
 800406c:	e00e      	b.n	800408c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800406e:	4b0a      	ldr	r3, [pc, #40]	; (8004098 <osKernelStart+0x64>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2b01      	cmp	r3, #1
 8004074:	d107      	bne.n	8004086 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8004076:	4b08      	ldr	r3, [pc, #32]	; (8004098 <osKernelStart+0x64>)
 8004078:	2202      	movs	r2, #2
 800407a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800407c:	f001 f864 	bl	8005148 <vTaskStartScheduler>
      stat = osOK;
 8004080:	2300      	movs	r3, #0
 8004082:	60fb      	str	r3, [r7, #12]
 8004084:	e002      	b.n	800408c <osKernelStart+0x58>
    } else {
      stat = osError;
 8004086:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800408a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800408c:	68fb      	ldr	r3, [r7, #12]
}
 800408e:	4618      	mov	r0, r3
 8004090:	3710      	adds	r7, #16
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	200000d0 	.word	0x200000d0

0800409c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800409c:	b580      	push	{r7, lr}
 800409e:	b092      	sub	sp, #72	; 0x48
 80040a0:	af04      	add	r7, sp, #16
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	60b9      	str	r1, [r7, #8]
 80040a6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80040a8:	2300      	movs	r3, #0
 80040aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040ac:	f3ef 8305 	mrs	r3, IPSR
 80040b0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80040b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	f040 8094 	bne.w	80041e2 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040ba:	f3ef 8310 	mrs	r3, PRIMASK
 80040be:	623b      	str	r3, [r7, #32]
  return(result);
 80040c0:	6a3b      	ldr	r3, [r7, #32]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	f040 808d 	bne.w	80041e2 <osThreadNew+0x146>
 80040c8:	4b48      	ldr	r3, [pc, #288]	; (80041ec <osThreadNew+0x150>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d106      	bne.n	80040de <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80040d0:	f3ef 8311 	mrs	r3, BASEPRI
 80040d4:	61fb      	str	r3, [r7, #28]
  return(result);
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	f040 8082 	bne.w	80041e2 <osThreadNew+0x146>
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d07e      	beq.n	80041e2 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80040e4:	2380      	movs	r3, #128	; 0x80
 80040e6:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80040e8:	2318      	movs	r3, #24
 80040ea:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80040ec:	2300      	movs	r3, #0
 80040ee:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80040f0:	f107 031b 	add.w	r3, r7, #27
 80040f4:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80040f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80040fa:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d045      	beq.n	800418e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d002      	beq.n	8004110 <osThreadNew+0x74>
        name = attr->name;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	699b      	ldr	r3, [r3, #24]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d002      	beq.n	800411e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	699b      	ldr	r3, [r3, #24]
 800411c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800411e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004120:	2b00      	cmp	r3, #0
 8004122:	d008      	beq.n	8004136 <osThreadNew+0x9a>
 8004124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004126:	2b38      	cmp	r3, #56	; 0x38
 8004128:	d805      	bhi.n	8004136 <osThreadNew+0x9a>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	2b00      	cmp	r3, #0
 8004134:	d001      	beq.n	800413a <osThreadNew+0x9e>
        return (NULL);
 8004136:	2300      	movs	r3, #0
 8004138:	e054      	b.n	80041e4 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	695b      	ldr	r3, [r3, #20]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d003      	beq.n	800414a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	089b      	lsrs	r3, r3, #2
 8004148:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00e      	beq.n	8004170 <osThreadNew+0xd4>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	2b5b      	cmp	r3, #91	; 0x5b
 8004158:	d90a      	bls.n	8004170 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800415e:	2b00      	cmp	r3, #0
 8004160:	d006      	beq.n	8004170 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d002      	beq.n	8004170 <osThreadNew+0xd4>
        mem = 1;
 800416a:	2301      	movs	r3, #1
 800416c:	62bb      	str	r3, [r7, #40]	; 0x28
 800416e:	e010      	b.n	8004192 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d10c      	bne.n	8004192 <osThreadNew+0xf6>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d108      	bne.n	8004192 <osThreadNew+0xf6>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d104      	bne.n	8004192 <osThreadNew+0xf6>
          mem = 0;
 8004188:	2300      	movs	r3, #0
 800418a:	62bb      	str	r3, [r7, #40]	; 0x28
 800418c:	e001      	b.n	8004192 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800418e:	2300      	movs	r3, #0
 8004190:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8004192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004194:	2b01      	cmp	r3, #1
 8004196:	d110      	bne.n	80041ba <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80041a0:	9202      	str	r2, [sp, #8]
 80041a2:	9301      	str	r3, [sp, #4]
 80041a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041a6:	9300      	str	r3, [sp, #0]
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041ac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	f000 fe02 	bl	8004db8 <xTaskCreateStatic>
 80041b4:	4603      	mov	r3, r0
 80041b6:	617b      	str	r3, [r7, #20]
 80041b8:	e013      	b.n	80041e2 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80041ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d110      	bne.n	80041e2 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80041c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c2:	b29a      	uxth	r2, r3
 80041c4:	f107 0314 	add.w	r3, r7, #20
 80041c8:	9301      	str	r3, [sp, #4]
 80041ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041cc:	9300      	str	r3, [sp, #0]
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80041d2:	68f8      	ldr	r0, [r7, #12]
 80041d4:	f000 fe49 	bl	8004e6a <xTaskCreate>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d001      	beq.n	80041e2 <osThreadNew+0x146>
          hTask = NULL;
 80041de:	2300      	movs	r3, #0
 80041e0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80041e2:	697b      	ldr	r3, [r7, #20]
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3738      	adds	r7, #56	; 0x38
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	200000d0 	.word	0x200000d0

080041f0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b086      	sub	sp, #24
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041f8:	f3ef 8305 	mrs	r3, IPSR
 80041fc:	613b      	str	r3, [r7, #16]
  return(result);
 80041fe:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004200:	2b00      	cmp	r3, #0
 8004202:	d10f      	bne.n	8004224 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004204:	f3ef 8310 	mrs	r3, PRIMASK
 8004208:	60fb      	str	r3, [r7, #12]
  return(result);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d109      	bne.n	8004224 <osDelay+0x34>
 8004210:	4b0d      	ldr	r3, [pc, #52]	; (8004248 <osDelay+0x58>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2b02      	cmp	r3, #2
 8004216:	d109      	bne.n	800422c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004218:	f3ef 8311 	mrs	r3, BASEPRI
 800421c:	60bb      	str	r3, [r7, #8]
  return(result);
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d003      	beq.n	800422c <osDelay+0x3c>
    stat = osErrorISR;
 8004224:	f06f 0305 	mvn.w	r3, #5
 8004228:	617b      	str	r3, [r7, #20]
 800422a:	e007      	b.n	800423c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800422c:	2300      	movs	r3, #0
 800422e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d002      	beq.n	800423c <osDelay+0x4c>
      vTaskDelay(ticks);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 ff52 	bl	80050e0 <vTaskDelay>
    }
  }

  return (stat);
 800423c:	697b      	ldr	r3, [r7, #20]
}
 800423e:	4618      	mov	r0, r3
 8004240:	3718      	adds	r7, #24
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	200000d0 	.word	0x200000d0

0800424c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800424c:	b480      	push	{r7}
 800424e:	b085      	sub	sp, #20
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	4a06      	ldr	r2, [pc, #24]	; (8004274 <vApplicationGetIdleTaskMemory+0x28>)
 800425c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	4a05      	ldr	r2, [pc, #20]	; (8004278 <vApplicationGetIdleTaskMemory+0x2c>)
 8004262:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2280      	movs	r2, #128	; 0x80
 8004268:	601a      	str	r2, [r3, #0]
}
 800426a:	bf00      	nop
 800426c:	3714      	adds	r7, #20
 800426e:	46bd      	mov	sp, r7
 8004270:	bc80      	pop	{r7}
 8004272:	4770      	bx	lr
 8004274:	200000d4 	.word	0x200000d4
 8004278:	20000130 	.word	0x20000130

0800427c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800427c:	b480      	push	{r7}
 800427e:	b085      	sub	sp, #20
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	4a07      	ldr	r2, [pc, #28]	; (80042a8 <vApplicationGetTimerTaskMemory+0x2c>)
 800428c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	4a06      	ldr	r2, [pc, #24]	; (80042ac <vApplicationGetTimerTaskMemory+0x30>)
 8004292:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f44f 7280 	mov.w	r2, #256	; 0x100
 800429a:	601a      	str	r2, [r3, #0]
}
 800429c:	bf00      	nop
 800429e:	3714      	adds	r7, #20
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bc80      	pop	{r7}
 80042a4:	4770      	bx	lr
 80042a6:	bf00      	nop
 80042a8:	20000330 	.word	0x20000330
 80042ac:	2000038c 	.word	0x2000038c

080042b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f103 0208 	add.w	r2, r3, #8
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80042c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f103 0208 	add.w	r2, r3, #8
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f103 0208 	add.w	r2, r3, #8
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80042e4:	bf00      	nop
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bc80      	pop	{r7}
 80042ec:	4770      	bx	lr

080042ee <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80042ee:	b480      	push	{r7}
 80042f0:	b083      	sub	sp, #12
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80042fc:	bf00      	nop
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	bc80      	pop	{r7}
 8004304:	4770      	bx	lr

08004306 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004306:	b480      	push	{r7}
 8004308:	b085      	sub	sp, #20
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
 800430e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	68fa      	ldr	r2, [r7, #12]
 800431a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	689a      	ldr	r2, [r3, #8]
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	683a      	ldr	r2, [r7, #0]
 800432a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	683a      	ldr	r2, [r7, #0]
 8004330:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	1c5a      	adds	r2, r3, #1
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	601a      	str	r2, [r3, #0]
}
 8004342:	bf00      	nop
 8004344:	3714      	adds	r7, #20
 8004346:	46bd      	mov	sp, r7
 8004348:	bc80      	pop	{r7}
 800434a:	4770      	bx	lr

0800434c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800434c:	b480      	push	{r7}
 800434e:	b085      	sub	sp, #20
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004362:	d103      	bne.n	800436c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	691b      	ldr	r3, [r3, #16]
 8004368:	60fb      	str	r3, [r7, #12]
 800436a:	e00c      	b.n	8004386 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	3308      	adds	r3, #8
 8004370:	60fb      	str	r3, [r7, #12]
 8004372:	e002      	b.n	800437a <vListInsert+0x2e>
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	60fb      	str	r3, [r7, #12]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	68ba      	ldr	r2, [r7, #8]
 8004382:	429a      	cmp	r2, r3
 8004384:	d2f6      	bcs.n	8004374 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	685a      	ldr	r2, [r3, #4]
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	683a      	ldr	r2, [r7, #0]
 8004394:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	683a      	ldr	r2, [r7, #0]
 80043a0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	1c5a      	adds	r2, r3, #1
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	601a      	str	r2, [r3, #0]
}
 80043b2:	bf00      	nop
 80043b4:	3714      	adds	r7, #20
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bc80      	pop	{r7}
 80043ba:	4770      	bx	lr

080043bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80043bc:	b480      	push	{r7}
 80043be:	b085      	sub	sp, #20
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	691b      	ldr	r3, [r3, #16]
 80043c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	6892      	ldr	r2, [r2, #8]
 80043d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	6852      	ldr	r2, [r2, #4]
 80043dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d103      	bne.n	80043f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	689a      	ldr	r2, [r3, #8]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	1e5a      	subs	r2, r3, #1
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
}
 8004404:	4618      	mov	r0, r3
 8004406:	3714      	adds	r7, #20
 8004408:	46bd      	mov	sp, r7
 800440a:	bc80      	pop	{r7}
 800440c:	4770      	bx	lr
	...

08004410 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d109      	bne.n	8004438 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004428:	f383 8811 	msr	BASEPRI, r3
 800442c:	f3bf 8f6f 	isb	sy
 8004430:	f3bf 8f4f 	dsb	sy
 8004434:	60bb      	str	r3, [r7, #8]
 8004436:	e7fe      	b.n	8004436 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004438:	f001 ff96 	bl	8006368 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004444:	68f9      	ldr	r1, [r7, #12]
 8004446:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004448:	fb01 f303 	mul.w	r3, r1, r3
 800444c:	441a      	add	r2, r3
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2200      	movs	r2, #0
 8004456:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004468:	3b01      	subs	r3, #1
 800446a:	68f9      	ldr	r1, [r7, #12]
 800446c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800446e:	fb01 f303 	mul.w	r3, r1, r3
 8004472:	441a      	add	r2, r3
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	22ff      	movs	r2, #255	; 0xff
 800447c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	22ff      	movs	r2, #255	; 0xff
 8004484:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d114      	bne.n	80044b8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d01a      	beq.n	80044cc <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	3310      	adds	r3, #16
 800449a:	4618      	mov	r0, r3
 800449c:	f001 f8d8 	bl	8005650 <xTaskRemoveFromEventList>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d012      	beq.n	80044cc <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80044a6:	4b0d      	ldr	r3, [pc, #52]	; (80044dc <xQueueGenericReset+0xcc>)
 80044a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044ac:	601a      	str	r2, [r3, #0]
 80044ae:	f3bf 8f4f 	dsb	sy
 80044b2:	f3bf 8f6f 	isb	sy
 80044b6:	e009      	b.n	80044cc <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	3310      	adds	r3, #16
 80044bc:	4618      	mov	r0, r3
 80044be:	f7ff fef7 	bl	80042b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	3324      	adds	r3, #36	; 0x24
 80044c6:	4618      	mov	r0, r3
 80044c8:	f7ff fef2 	bl	80042b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80044cc:	f001 ff7a 	bl	80063c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80044d0:	2301      	movs	r3, #1
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3710      	adds	r7, #16
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	e000ed04 	.word	0xe000ed04

080044e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b08e      	sub	sp, #56	; 0x38
 80044e4:	af02      	add	r7, sp, #8
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	607a      	str	r2, [r7, #4]
 80044ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d109      	bne.n	8004508 <xQueueGenericCreateStatic+0x28>
 80044f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f8:	f383 8811 	msr	BASEPRI, r3
 80044fc:	f3bf 8f6f 	isb	sy
 8004500:	f3bf 8f4f 	dsb	sy
 8004504:	62bb      	str	r3, [r7, #40]	; 0x28
 8004506:	e7fe      	b.n	8004506 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d109      	bne.n	8004522 <xQueueGenericCreateStatic+0x42>
 800450e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004512:	f383 8811 	msr	BASEPRI, r3
 8004516:	f3bf 8f6f 	isb	sy
 800451a:	f3bf 8f4f 	dsb	sy
 800451e:	627b      	str	r3, [r7, #36]	; 0x24
 8004520:	e7fe      	b.n	8004520 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d002      	beq.n	800452e <xQueueGenericCreateStatic+0x4e>
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d001      	beq.n	8004532 <xQueueGenericCreateStatic+0x52>
 800452e:	2301      	movs	r3, #1
 8004530:	e000      	b.n	8004534 <xQueueGenericCreateStatic+0x54>
 8004532:	2300      	movs	r3, #0
 8004534:	2b00      	cmp	r3, #0
 8004536:	d109      	bne.n	800454c <xQueueGenericCreateStatic+0x6c>
 8004538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800453c:	f383 8811 	msr	BASEPRI, r3
 8004540:	f3bf 8f6f 	isb	sy
 8004544:	f3bf 8f4f 	dsb	sy
 8004548:	623b      	str	r3, [r7, #32]
 800454a:	e7fe      	b.n	800454a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d102      	bne.n	8004558 <xQueueGenericCreateStatic+0x78>
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d101      	bne.n	800455c <xQueueGenericCreateStatic+0x7c>
 8004558:	2301      	movs	r3, #1
 800455a:	e000      	b.n	800455e <xQueueGenericCreateStatic+0x7e>
 800455c:	2300      	movs	r3, #0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d109      	bne.n	8004576 <xQueueGenericCreateStatic+0x96>
 8004562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004566:	f383 8811 	msr	BASEPRI, r3
 800456a:	f3bf 8f6f 	isb	sy
 800456e:	f3bf 8f4f 	dsb	sy
 8004572:	61fb      	str	r3, [r7, #28]
 8004574:	e7fe      	b.n	8004574 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004576:	2350      	movs	r3, #80	; 0x50
 8004578:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	2b50      	cmp	r3, #80	; 0x50
 800457e:	d009      	beq.n	8004594 <xQueueGenericCreateStatic+0xb4>
 8004580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004584:	f383 8811 	msr	BASEPRI, r3
 8004588:	f3bf 8f6f 	isb	sy
 800458c:	f3bf 8f4f 	dsb	sy
 8004590:	61bb      	str	r3, [r7, #24]
 8004592:	e7fe      	b.n	8004592 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00d      	beq.n	80045ba <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800459e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045a0:	2201      	movs	r2, #1
 80045a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80045a6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80045aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ac:	9300      	str	r3, [sp, #0]
 80045ae:	4613      	mov	r3, r2
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	68b9      	ldr	r1, [r7, #8]
 80045b4:	68f8      	ldr	r0, [r7, #12]
 80045b6:	f000 f805 	bl	80045c4 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80045ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80045bc:	4618      	mov	r0, r3
 80045be:	3730      	adds	r7, #48	; 0x30
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	607a      	str	r2, [r7, #4]
 80045d0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d103      	bne.n	80045e0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	69ba      	ldr	r2, [r7, #24]
 80045dc:	601a      	str	r2, [r3, #0]
 80045de:	e002      	b.n	80045e6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	68fa      	ldr	r2, [r7, #12]
 80045ea:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	68ba      	ldr	r2, [r7, #8]
 80045f0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80045f2:	2101      	movs	r1, #1
 80045f4:	69b8      	ldr	r0, [r7, #24]
 80045f6:	f7ff ff0b 	bl	8004410 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	78fa      	ldrb	r2, [r7, #3]
 80045fe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004602:	bf00      	nop
 8004604:	3710      	adds	r7, #16
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
	...

0800460c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b08e      	sub	sp, #56	; 0x38
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	607a      	str	r2, [r7, #4]
 8004618:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800461a:	2300      	movs	r3, #0
 800461c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004624:	2b00      	cmp	r3, #0
 8004626:	d109      	bne.n	800463c <xQueueGenericSend+0x30>
 8004628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462c:	f383 8811 	msr	BASEPRI, r3
 8004630:	f3bf 8f6f 	isb	sy
 8004634:	f3bf 8f4f 	dsb	sy
 8004638:	62bb      	str	r3, [r7, #40]	; 0x28
 800463a:	e7fe      	b.n	800463a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d103      	bne.n	800464a <xQueueGenericSend+0x3e>
 8004642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004646:	2b00      	cmp	r3, #0
 8004648:	d101      	bne.n	800464e <xQueueGenericSend+0x42>
 800464a:	2301      	movs	r3, #1
 800464c:	e000      	b.n	8004650 <xQueueGenericSend+0x44>
 800464e:	2300      	movs	r3, #0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d109      	bne.n	8004668 <xQueueGenericSend+0x5c>
 8004654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004658:	f383 8811 	msr	BASEPRI, r3
 800465c:	f3bf 8f6f 	isb	sy
 8004660:	f3bf 8f4f 	dsb	sy
 8004664:	627b      	str	r3, [r7, #36]	; 0x24
 8004666:	e7fe      	b.n	8004666 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	2b02      	cmp	r3, #2
 800466c:	d103      	bne.n	8004676 <xQueueGenericSend+0x6a>
 800466e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004672:	2b01      	cmp	r3, #1
 8004674:	d101      	bne.n	800467a <xQueueGenericSend+0x6e>
 8004676:	2301      	movs	r3, #1
 8004678:	e000      	b.n	800467c <xQueueGenericSend+0x70>
 800467a:	2300      	movs	r3, #0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d109      	bne.n	8004694 <xQueueGenericSend+0x88>
 8004680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004684:	f383 8811 	msr	BASEPRI, r3
 8004688:	f3bf 8f6f 	isb	sy
 800468c:	f3bf 8f4f 	dsb	sy
 8004690:	623b      	str	r3, [r7, #32]
 8004692:	e7fe      	b.n	8004692 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004694:	f001 f996 	bl	80059c4 <xTaskGetSchedulerState>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d102      	bne.n	80046a4 <xQueueGenericSend+0x98>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d101      	bne.n	80046a8 <xQueueGenericSend+0x9c>
 80046a4:	2301      	movs	r3, #1
 80046a6:	e000      	b.n	80046aa <xQueueGenericSend+0x9e>
 80046a8:	2300      	movs	r3, #0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d109      	bne.n	80046c2 <xQueueGenericSend+0xb6>
 80046ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b2:	f383 8811 	msr	BASEPRI, r3
 80046b6:	f3bf 8f6f 	isb	sy
 80046ba:	f3bf 8f4f 	dsb	sy
 80046be:	61fb      	str	r3, [r7, #28]
 80046c0:	e7fe      	b.n	80046c0 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80046c2:	f001 fe51 	bl	8006368 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80046c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d302      	bcc.n	80046d8 <xQueueGenericSend+0xcc>
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d129      	bne.n	800472c <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80046d8:	683a      	ldr	r2, [r7, #0]
 80046da:	68b9      	ldr	r1, [r7, #8]
 80046dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046de:	f000 f9ff 	bl	8004ae0 <prvCopyDataToQueue>
 80046e2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d010      	beq.n	800470e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ee:	3324      	adds	r3, #36	; 0x24
 80046f0:	4618      	mov	r0, r3
 80046f2:	f000 ffad 	bl	8005650 <xTaskRemoveFromEventList>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d013      	beq.n	8004724 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80046fc:	4b3f      	ldr	r3, [pc, #252]	; (80047fc <xQueueGenericSend+0x1f0>)
 80046fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004702:	601a      	str	r2, [r3, #0]
 8004704:	f3bf 8f4f 	dsb	sy
 8004708:	f3bf 8f6f 	isb	sy
 800470c:	e00a      	b.n	8004724 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800470e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004710:	2b00      	cmp	r3, #0
 8004712:	d007      	beq.n	8004724 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004714:	4b39      	ldr	r3, [pc, #228]	; (80047fc <xQueueGenericSend+0x1f0>)
 8004716:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800471a:	601a      	str	r2, [r3, #0]
 800471c:	f3bf 8f4f 	dsb	sy
 8004720:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004724:	f001 fe4e 	bl	80063c4 <vPortExitCritical>
				return pdPASS;
 8004728:	2301      	movs	r3, #1
 800472a:	e063      	b.n	80047f4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d103      	bne.n	800473a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004732:	f001 fe47 	bl	80063c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004736:	2300      	movs	r3, #0
 8004738:	e05c      	b.n	80047f4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800473a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800473c:	2b00      	cmp	r3, #0
 800473e:	d106      	bne.n	800474e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004740:	f107 0314 	add.w	r3, r7, #20
 8004744:	4618      	mov	r0, r3
 8004746:	f000 ffe5 	bl	8005714 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800474a:	2301      	movs	r3, #1
 800474c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800474e:	f001 fe39 	bl	80063c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004752:	f000 fd5d 	bl	8005210 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004756:	f001 fe07 	bl	8006368 <vPortEnterCritical>
 800475a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800475c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004760:	b25b      	sxtb	r3, r3
 8004762:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004766:	d103      	bne.n	8004770 <xQueueGenericSend+0x164>
 8004768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800476a:	2200      	movs	r2, #0
 800476c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004772:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004776:	b25b      	sxtb	r3, r3
 8004778:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800477c:	d103      	bne.n	8004786 <xQueueGenericSend+0x17a>
 800477e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004780:	2200      	movs	r2, #0
 8004782:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004786:	f001 fe1d 	bl	80063c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800478a:	1d3a      	adds	r2, r7, #4
 800478c:	f107 0314 	add.w	r3, r7, #20
 8004790:	4611      	mov	r1, r2
 8004792:	4618      	mov	r0, r3
 8004794:	f000 ffd4 	bl	8005740 <xTaskCheckForTimeOut>
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d124      	bne.n	80047e8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800479e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047a0:	f000 fa96 	bl	8004cd0 <prvIsQueueFull>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d018      	beq.n	80047dc <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80047aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ac:	3310      	adds	r3, #16
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	4611      	mov	r1, r2
 80047b2:	4618      	mov	r0, r3
 80047b4:	f000 fefe 	bl	80055b4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80047b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047ba:	f000 fa21 	bl	8004c00 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80047be:	f000 fd35 	bl	800522c <xTaskResumeAll>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	f47f af7c 	bne.w	80046c2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80047ca:	4b0c      	ldr	r3, [pc, #48]	; (80047fc <xQueueGenericSend+0x1f0>)
 80047cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047d0:	601a      	str	r2, [r3, #0]
 80047d2:	f3bf 8f4f 	dsb	sy
 80047d6:	f3bf 8f6f 	isb	sy
 80047da:	e772      	b.n	80046c2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80047dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047de:	f000 fa0f 	bl	8004c00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80047e2:	f000 fd23 	bl	800522c <xTaskResumeAll>
 80047e6:	e76c      	b.n	80046c2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80047e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047ea:	f000 fa09 	bl	8004c00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80047ee:	f000 fd1d 	bl	800522c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80047f2:	2300      	movs	r3, #0
		}
	}
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3738      	adds	r7, #56	; 0x38
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	e000ed04 	.word	0xe000ed04

08004800 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b08e      	sub	sp, #56	; 0x38
 8004804:	af00      	add	r7, sp, #0
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	607a      	str	r2, [r7, #4]
 800480c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004814:	2b00      	cmp	r3, #0
 8004816:	d109      	bne.n	800482c <xQueueGenericSendFromISR+0x2c>
 8004818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800481c:	f383 8811 	msr	BASEPRI, r3
 8004820:	f3bf 8f6f 	isb	sy
 8004824:	f3bf 8f4f 	dsb	sy
 8004828:	627b      	str	r3, [r7, #36]	; 0x24
 800482a:	e7fe      	b.n	800482a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d103      	bne.n	800483a <xQueueGenericSendFromISR+0x3a>
 8004832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004836:	2b00      	cmp	r3, #0
 8004838:	d101      	bne.n	800483e <xQueueGenericSendFromISR+0x3e>
 800483a:	2301      	movs	r3, #1
 800483c:	e000      	b.n	8004840 <xQueueGenericSendFromISR+0x40>
 800483e:	2300      	movs	r3, #0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d109      	bne.n	8004858 <xQueueGenericSendFromISR+0x58>
 8004844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004848:	f383 8811 	msr	BASEPRI, r3
 800484c:	f3bf 8f6f 	isb	sy
 8004850:	f3bf 8f4f 	dsb	sy
 8004854:	623b      	str	r3, [r7, #32]
 8004856:	e7fe      	b.n	8004856 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	2b02      	cmp	r3, #2
 800485c:	d103      	bne.n	8004866 <xQueueGenericSendFromISR+0x66>
 800485e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004862:	2b01      	cmp	r3, #1
 8004864:	d101      	bne.n	800486a <xQueueGenericSendFromISR+0x6a>
 8004866:	2301      	movs	r3, #1
 8004868:	e000      	b.n	800486c <xQueueGenericSendFromISR+0x6c>
 800486a:	2300      	movs	r3, #0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d109      	bne.n	8004884 <xQueueGenericSendFromISR+0x84>
 8004870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004874:	f383 8811 	msr	BASEPRI, r3
 8004878:	f3bf 8f6f 	isb	sy
 800487c:	f3bf 8f4f 	dsb	sy
 8004880:	61fb      	str	r3, [r7, #28]
 8004882:	e7fe      	b.n	8004882 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004884:	f001 fe2a 	bl	80064dc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004888:	f3ef 8211 	mrs	r2, BASEPRI
 800488c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004890:	f383 8811 	msr	BASEPRI, r3
 8004894:	f3bf 8f6f 	isb	sy
 8004898:	f3bf 8f4f 	dsb	sy
 800489c:	61ba      	str	r2, [r7, #24]
 800489e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80048a0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80048a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80048a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d302      	bcc.n	80048b6 <xQueueGenericSendFromISR+0xb6>
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d12c      	bne.n	8004910 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80048b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80048c0:	683a      	ldr	r2, [r7, #0]
 80048c2:	68b9      	ldr	r1, [r7, #8]
 80048c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048c6:	f000 f90b 	bl	8004ae0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80048ca:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80048ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048d2:	d112      	bne.n	80048fa <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80048d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d016      	beq.n	800490a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048de:	3324      	adds	r3, #36	; 0x24
 80048e0:	4618      	mov	r0, r3
 80048e2:	f000 feb5 	bl	8005650 <xTaskRemoveFromEventList>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d00e      	beq.n	800490a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d00b      	beq.n	800490a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2201      	movs	r2, #1
 80048f6:	601a      	str	r2, [r3, #0]
 80048f8:	e007      	b.n	800490a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80048fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80048fe:	3301      	adds	r3, #1
 8004900:	b2db      	uxtb	r3, r3
 8004902:	b25a      	sxtb	r2, r3
 8004904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004906:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800490a:	2301      	movs	r3, #1
 800490c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800490e:	e001      	b.n	8004914 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004910:	2300      	movs	r3, #0
 8004912:	637b      	str	r3, [r7, #52]	; 0x34
 8004914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004916:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800491e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004920:	4618      	mov	r0, r3
 8004922:	3738      	adds	r7, #56	; 0x38
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b08c      	sub	sp, #48	; 0x30
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004934:	2300      	movs	r3, #0
 8004936:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800493c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800493e:	2b00      	cmp	r3, #0
 8004940:	d109      	bne.n	8004956 <xQueueReceive+0x2e>
	__asm volatile
 8004942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004946:	f383 8811 	msr	BASEPRI, r3
 800494a:	f3bf 8f6f 	isb	sy
 800494e:	f3bf 8f4f 	dsb	sy
 8004952:	623b      	str	r3, [r7, #32]
 8004954:	e7fe      	b.n	8004954 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d103      	bne.n	8004964 <xQueueReceive+0x3c>
 800495c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800495e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004960:	2b00      	cmp	r3, #0
 8004962:	d101      	bne.n	8004968 <xQueueReceive+0x40>
 8004964:	2301      	movs	r3, #1
 8004966:	e000      	b.n	800496a <xQueueReceive+0x42>
 8004968:	2300      	movs	r3, #0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d109      	bne.n	8004982 <xQueueReceive+0x5a>
 800496e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004972:	f383 8811 	msr	BASEPRI, r3
 8004976:	f3bf 8f6f 	isb	sy
 800497a:	f3bf 8f4f 	dsb	sy
 800497e:	61fb      	str	r3, [r7, #28]
 8004980:	e7fe      	b.n	8004980 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004982:	f001 f81f 	bl	80059c4 <xTaskGetSchedulerState>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d102      	bne.n	8004992 <xQueueReceive+0x6a>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d101      	bne.n	8004996 <xQueueReceive+0x6e>
 8004992:	2301      	movs	r3, #1
 8004994:	e000      	b.n	8004998 <xQueueReceive+0x70>
 8004996:	2300      	movs	r3, #0
 8004998:	2b00      	cmp	r3, #0
 800499a:	d109      	bne.n	80049b0 <xQueueReceive+0x88>
 800499c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a0:	f383 8811 	msr	BASEPRI, r3
 80049a4:	f3bf 8f6f 	isb	sy
 80049a8:	f3bf 8f4f 	dsb	sy
 80049ac:	61bb      	str	r3, [r7, #24]
 80049ae:	e7fe      	b.n	80049ae <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80049b0:	f001 fcda 	bl	8006368 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80049ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d01f      	beq.n	8004a00 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80049c0:	68b9      	ldr	r1, [r7, #8]
 80049c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049c4:	f000 f8f6 	bl	8004bb4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80049c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ca:	1e5a      	subs	r2, r3, #1
 80049cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ce:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d2:	691b      	ldr	r3, [r3, #16]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d00f      	beq.n	80049f8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049da:	3310      	adds	r3, #16
 80049dc:	4618      	mov	r0, r3
 80049de:	f000 fe37 	bl	8005650 <xTaskRemoveFromEventList>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d007      	beq.n	80049f8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80049e8:	4b3c      	ldr	r3, [pc, #240]	; (8004adc <xQueueReceive+0x1b4>)
 80049ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049ee:	601a      	str	r2, [r3, #0]
 80049f0:	f3bf 8f4f 	dsb	sy
 80049f4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80049f8:	f001 fce4 	bl	80063c4 <vPortExitCritical>
				return pdPASS;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e069      	b.n	8004ad4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d103      	bne.n	8004a0e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004a06:	f001 fcdd 	bl	80063c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	e062      	b.n	8004ad4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d106      	bne.n	8004a22 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a14:	f107 0310 	add.w	r3, r7, #16
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f000 fe7b 	bl	8005714 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a22:	f001 fccf 	bl	80063c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a26:	f000 fbf3 	bl	8005210 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a2a:	f001 fc9d 	bl	8006368 <vPortEnterCritical>
 8004a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a34:	b25b      	sxtb	r3, r3
 8004a36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a3a:	d103      	bne.n	8004a44 <xQueueReceive+0x11c>
 8004a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a4a:	b25b      	sxtb	r3, r3
 8004a4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a50:	d103      	bne.n	8004a5a <xQueueReceive+0x132>
 8004a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a54:	2200      	movs	r2, #0
 8004a56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a5a:	f001 fcb3 	bl	80063c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a5e:	1d3a      	adds	r2, r7, #4
 8004a60:	f107 0310 	add.w	r3, r7, #16
 8004a64:	4611      	mov	r1, r2
 8004a66:	4618      	mov	r0, r3
 8004a68:	f000 fe6a 	bl	8005740 <xTaskCheckForTimeOut>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d123      	bne.n	8004aba <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a74:	f000 f916 	bl	8004ca4 <prvIsQueueEmpty>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d017      	beq.n	8004aae <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a80:	3324      	adds	r3, #36	; 0x24
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	4611      	mov	r1, r2
 8004a86:	4618      	mov	r0, r3
 8004a88:	f000 fd94 	bl	80055b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004a8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a8e:	f000 f8b7 	bl	8004c00 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004a92:	f000 fbcb 	bl	800522c <xTaskResumeAll>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d189      	bne.n	80049b0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004a9c:	4b0f      	ldr	r3, [pc, #60]	; (8004adc <xQueueReceive+0x1b4>)
 8004a9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004aa2:	601a      	str	r2, [r3, #0]
 8004aa4:	f3bf 8f4f 	dsb	sy
 8004aa8:	f3bf 8f6f 	isb	sy
 8004aac:	e780      	b.n	80049b0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004aae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ab0:	f000 f8a6 	bl	8004c00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ab4:	f000 fbba 	bl	800522c <xTaskResumeAll>
 8004ab8:	e77a      	b.n	80049b0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004aba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004abc:	f000 f8a0 	bl	8004c00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ac0:	f000 fbb4 	bl	800522c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ac4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ac6:	f000 f8ed 	bl	8004ca4 <prvIsQueueEmpty>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	f43f af6f 	beq.w	80049b0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004ad2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3730      	adds	r7, #48	; 0x30
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	e000ed04 	.word	0xe000ed04

08004ae0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b086      	sub	sp, #24
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	60b9      	str	r1, [r7, #8]
 8004aea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004aec:	2300      	movs	r3, #0
 8004aee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d10d      	bne.n	8004b1a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d14d      	bne.n	8004ba2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f000 ff78 	bl	8005a00 <xTaskPriorityDisinherit>
 8004b10:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2200      	movs	r2, #0
 8004b16:	605a      	str	r2, [r3, #4]
 8004b18:	e043      	b.n	8004ba2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d119      	bne.n	8004b54 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6898      	ldr	r0, [r3, #8]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b28:	461a      	mov	r2, r3
 8004b2a:	68b9      	ldr	r1, [r7, #8]
 8004b2c:	f001 ff10 	bl	8006950 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	689a      	ldr	r2, [r3, #8]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b38:	441a      	add	r2, r3
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	689a      	ldr	r2, [r3, #8]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d32b      	bcc.n	8004ba2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	609a      	str	r2, [r3, #8]
 8004b52:	e026      	b.n	8004ba2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	68d8      	ldr	r0, [r3, #12]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	68b9      	ldr	r1, [r7, #8]
 8004b60:	f001 fef6 	bl	8006950 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	68da      	ldr	r2, [r3, #12]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6c:	425b      	negs	r3, r3
 8004b6e:	441a      	add	r2, r3
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	68da      	ldr	r2, [r3, #12]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d207      	bcs.n	8004b90 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	685a      	ldr	r2, [r3, #4]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b88:	425b      	negs	r3, r3
 8004b8a:	441a      	add	r2, r3
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d105      	bne.n	8004ba2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d002      	beq.n	8004ba2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	1c5a      	adds	r2, r3, #1
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004baa:	697b      	ldr	r3, [r7, #20]
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3718      	adds	r7, #24
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b082      	sub	sp, #8
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d018      	beq.n	8004bf8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	68da      	ldr	r2, [r3, #12]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bce:	441a      	add	r2, r3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	68da      	ldr	r2, [r3, #12]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d303      	bcc.n	8004be8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	68d9      	ldr	r1, [r3, #12]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	6838      	ldr	r0, [r7, #0]
 8004bf4:	f001 feac 	bl	8006950 <memcpy>
	}
}
 8004bf8:	bf00      	nop
 8004bfa:	3708      	adds	r7, #8
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004c08:	f001 fbae 	bl	8006368 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c12:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c14:	e011      	b.n	8004c3a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d012      	beq.n	8004c44 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	3324      	adds	r3, #36	; 0x24
 8004c22:	4618      	mov	r0, r3
 8004c24:	f000 fd14 	bl	8005650 <xTaskRemoveFromEventList>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d001      	beq.n	8004c32 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004c2e:	f000 fde7 	bl	8005800 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004c32:	7bfb      	ldrb	r3, [r7, #15]
 8004c34:	3b01      	subs	r3, #1
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	dce9      	bgt.n	8004c16 <prvUnlockQueue+0x16>
 8004c42:	e000      	b.n	8004c46 <prvUnlockQueue+0x46>
					break;
 8004c44:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	22ff      	movs	r2, #255	; 0xff
 8004c4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004c4e:	f001 fbb9 	bl	80063c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004c52:	f001 fb89 	bl	8006368 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c5c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004c5e:	e011      	b.n	8004c84 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d012      	beq.n	8004c8e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	3310      	adds	r3, #16
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f000 fcef 	bl	8005650 <xTaskRemoveFromEventList>
 8004c72:	4603      	mov	r3, r0
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d001      	beq.n	8004c7c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004c78:	f000 fdc2 	bl	8005800 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004c7c:	7bbb      	ldrb	r3, [r7, #14]
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004c84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	dce9      	bgt.n	8004c60 <prvUnlockQueue+0x60>
 8004c8c:	e000      	b.n	8004c90 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004c8e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	22ff      	movs	r2, #255	; 0xff
 8004c94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004c98:	f001 fb94 	bl	80063c4 <vPortExitCritical>
}
 8004c9c:	bf00      	nop
 8004c9e:	3710      	adds	r7, #16
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004cac:	f001 fb5c 	bl	8006368 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d102      	bne.n	8004cbe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	60fb      	str	r3, [r7, #12]
 8004cbc:	e001      	b.n	8004cc2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004cc2:	f001 fb7f 	bl	80063c4 <vPortExitCritical>

	return xReturn;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3710      	adds	r7, #16
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004cd8:	f001 fb46 	bl	8006368 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d102      	bne.n	8004cee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	60fb      	str	r3, [r7, #12]
 8004cec:	e001      	b.n	8004cf2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004cf2:	f001 fb67 	bl	80063c4 <vPortExitCritical>

	return xReturn;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3710      	adds	r7, #16
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004d00:	b480      	push	{r7}
 8004d02:	b085      	sub	sp, #20
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	60fb      	str	r3, [r7, #12]
 8004d0e:	e014      	b.n	8004d3a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004d10:	4a0e      	ldr	r2, [pc, #56]	; (8004d4c <vQueueAddToRegistry+0x4c>)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d10b      	bne.n	8004d34 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004d1c:	490b      	ldr	r1, [pc, #44]	; (8004d4c <vQueueAddToRegistry+0x4c>)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	683a      	ldr	r2, [r7, #0]
 8004d22:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004d26:	4a09      	ldr	r2, [pc, #36]	; (8004d4c <vQueueAddToRegistry+0x4c>)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	00db      	lsls	r3, r3, #3
 8004d2c:	4413      	add	r3, r2
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004d32:	e005      	b.n	8004d40 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	3301      	adds	r3, #1
 8004d38:	60fb      	str	r3, [r7, #12]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2b07      	cmp	r3, #7
 8004d3e:	d9e7      	bls.n	8004d10 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004d40:	bf00      	nop
 8004d42:	3714      	adds	r7, #20
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bc80      	pop	{r7}
 8004d48:	4770      	bx	lr
 8004d4a:	bf00      	nop
 8004d4c:	20001d70 	.word	0x20001d70

08004d50 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b086      	sub	sp, #24
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004d60:	f001 fb02 	bl	8006368 <vPortEnterCritical>
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d6a:	b25b      	sxtb	r3, r3
 8004d6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d70:	d103      	bne.n	8004d7a <vQueueWaitForMessageRestricted+0x2a>
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d80:	b25b      	sxtb	r3, r3
 8004d82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d86:	d103      	bne.n	8004d90 <vQueueWaitForMessageRestricted+0x40>
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d90:	f001 fb18 	bl	80063c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d106      	bne.n	8004daa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	3324      	adds	r3, #36	; 0x24
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	68b9      	ldr	r1, [r7, #8]
 8004da4:	4618      	mov	r0, r3
 8004da6:	f000 fc29 	bl	80055fc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004daa:	6978      	ldr	r0, [r7, #20]
 8004dac:	f7ff ff28 	bl	8004c00 <prvUnlockQueue>
	}
 8004db0:	bf00      	nop
 8004db2:	3718      	adds	r7, #24
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b08e      	sub	sp, #56	; 0x38
 8004dbc:	af04      	add	r7, sp, #16
 8004dbe:	60f8      	str	r0, [r7, #12]
 8004dc0:	60b9      	str	r1, [r7, #8]
 8004dc2:	607a      	str	r2, [r7, #4]
 8004dc4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d109      	bne.n	8004de0 <xTaskCreateStatic+0x28>
 8004dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd0:	f383 8811 	msr	BASEPRI, r3
 8004dd4:	f3bf 8f6f 	isb	sy
 8004dd8:	f3bf 8f4f 	dsb	sy
 8004ddc:	623b      	str	r3, [r7, #32]
 8004dde:	e7fe      	b.n	8004dde <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d109      	bne.n	8004dfa <xTaskCreateStatic+0x42>
 8004de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dea:	f383 8811 	msr	BASEPRI, r3
 8004dee:	f3bf 8f6f 	isb	sy
 8004df2:	f3bf 8f4f 	dsb	sy
 8004df6:	61fb      	str	r3, [r7, #28]
 8004df8:	e7fe      	b.n	8004df8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004dfa:	235c      	movs	r3, #92	; 0x5c
 8004dfc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	2b5c      	cmp	r3, #92	; 0x5c
 8004e02:	d009      	beq.n	8004e18 <xTaskCreateStatic+0x60>
 8004e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e08:	f383 8811 	msr	BASEPRI, r3
 8004e0c:	f3bf 8f6f 	isb	sy
 8004e10:	f3bf 8f4f 	dsb	sy
 8004e14:	61bb      	str	r3, [r7, #24]
 8004e16:	e7fe      	b.n	8004e16 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d01e      	beq.n	8004e5c <xTaskCreateStatic+0xa4>
 8004e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d01b      	beq.n	8004e5c <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e26:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e2c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e30:	2202      	movs	r2, #2
 8004e32:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004e36:	2300      	movs	r3, #0
 8004e38:	9303      	str	r3, [sp, #12]
 8004e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3c:	9302      	str	r3, [sp, #8]
 8004e3e:	f107 0314 	add.w	r3, r7, #20
 8004e42:	9301      	str	r3, [sp, #4]
 8004e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e46:	9300      	str	r3, [sp, #0]
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	68b9      	ldr	r1, [r7, #8]
 8004e4e:	68f8      	ldr	r0, [r7, #12]
 8004e50:	f000 f850 	bl	8004ef4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e56:	f000 f8d3 	bl	8005000 <prvAddNewTaskToReadyList>
 8004e5a:	e001      	b.n	8004e60 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004e60:	697b      	ldr	r3, [r7, #20]
	}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3728      	adds	r7, #40	; 0x28
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}

08004e6a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004e6a:	b580      	push	{r7, lr}
 8004e6c:	b08c      	sub	sp, #48	; 0x30
 8004e6e:	af04      	add	r7, sp, #16
 8004e70:	60f8      	str	r0, [r7, #12]
 8004e72:	60b9      	str	r1, [r7, #8]
 8004e74:	603b      	str	r3, [r7, #0]
 8004e76:	4613      	mov	r3, r2
 8004e78:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e7a:	88fb      	ldrh	r3, [r7, #6]
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f001 fb68 	bl	8006554 <pvPortMalloc>
 8004e84:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d00e      	beq.n	8004eaa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004e8c:	205c      	movs	r0, #92	; 0x5c
 8004e8e:	f001 fb61 	bl	8006554 <pvPortMalloc>
 8004e92:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d003      	beq.n	8004ea2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	697a      	ldr	r2, [r7, #20]
 8004e9e:	631a      	str	r2, [r3, #48]	; 0x30
 8004ea0:	e005      	b.n	8004eae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004ea2:	6978      	ldr	r0, [r7, #20]
 8004ea4:	f001 fc18 	bl	80066d8 <vPortFree>
 8004ea8:	e001      	b.n	8004eae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d017      	beq.n	8004ee4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004ebc:	88fa      	ldrh	r2, [r7, #6]
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	9303      	str	r3, [sp, #12]
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	9302      	str	r3, [sp, #8]
 8004ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ec8:	9301      	str	r3, [sp, #4]
 8004eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ecc:	9300      	str	r3, [sp, #0]
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	68b9      	ldr	r1, [r7, #8]
 8004ed2:	68f8      	ldr	r0, [r7, #12]
 8004ed4:	f000 f80e 	bl	8004ef4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ed8:	69f8      	ldr	r0, [r7, #28]
 8004eda:	f000 f891 	bl	8005000 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	61bb      	str	r3, [r7, #24]
 8004ee2:	e002      	b.n	8004eea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004ee4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ee8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004eea:	69bb      	ldr	r3, [r7, #24]
	}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3720      	adds	r7, #32
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b088      	sub	sp, #32
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	607a      	str	r2, [r7, #4]
 8004f00:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f04:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	21a5      	movs	r1, #165	; 0xa5
 8004f0e:	f001 fd2a 	bl	8006966 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004f1c:	3b01      	subs	r3, #1
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	4413      	add	r3, r2
 8004f22:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	f023 0307 	bic.w	r3, r3, #7
 8004f2a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	f003 0307 	and.w	r3, r3, #7
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d009      	beq.n	8004f4a <prvInitialiseNewTask+0x56>
 8004f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f3a:	f383 8811 	msr	BASEPRI, r3
 8004f3e:	f3bf 8f6f 	isb	sy
 8004f42:	f3bf 8f4f 	dsb	sy
 8004f46:	617b      	str	r3, [r7, #20]
 8004f48:	e7fe      	b.n	8004f48 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	61fb      	str	r3, [r7, #28]
 8004f4e:	e012      	b.n	8004f76 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004f50:	68ba      	ldr	r2, [r7, #8]
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	4413      	add	r3, r2
 8004f56:	7819      	ldrb	r1, [r3, #0]
 8004f58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	4413      	add	r3, r2
 8004f5e:	3334      	adds	r3, #52	; 0x34
 8004f60:	460a      	mov	r2, r1
 8004f62:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004f64:	68ba      	ldr	r2, [r7, #8]
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	4413      	add	r3, r2
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d006      	beq.n	8004f7e <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	3301      	adds	r3, #1
 8004f74:	61fb      	str	r3, [r7, #28]
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	2b0f      	cmp	r3, #15
 8004f7a:	d9e9      	bls.n	8004f50 <prvInitialiseNewTask+0x5c>
 8004f7c:	e000      	b.n	8004f80 <prvInitialiseNewTask+0x8c>
		{
			break;
 8004f7e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f8a:	2b37      	cmp	r3, #55	; 0x37
 8004f8c:	d901      	bls.n	8004f92 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004f8e:	2337      	movs	r3, #55	; 0x37
 8004f90:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f96:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f9c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa6:	3304      	adds	r3, #4
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f7ff f9a0 	bl	80042ee <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb0:	3318      	adds	r3, #24
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f7ff f99b 	bl	80042ee <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fbc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fcc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004fdc:	683a      	ldr	r2, [r7, #0]
 8004fde:	68f9      	ldr	r1, [r7, #12]
 8004fe0:	69b8      	ldr	r0, [r7, #24]
 8004fe2:	f001 f8d7 	bl	8006194 <pxPortInitialiseStack>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fea:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d002      	beq.n	8004ff8 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ff6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ff8:	bf00      	nop
 8004ffa:	3720      	adds	r7, #32
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b082      	sub	sp, #8
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005008:	f001 f9ae 	bl	8006368 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800500c:	4b2d      	ldr	r3, [pc, #180]	; (80050c4 <prvAddNewTaskToReadyList+0xc4>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	3301      	adds	r3, #1
 8005012:	4a2c      	ldr	r2, [pc, #176]	; (80050c4 <prvAddNewTaskToReadyList+0xc4>)
 8005014:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005016:	4b2c      	ldr	r3, [pc, #176]	; (80050c8 <prvAddNewTaskToReadyList+0xc8>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d109      	bne.n	8005032 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800501e:	4a2a      	ldr	r2, [pc, #168]	; (80050c8 <prvAddNewTaskToReadyList+0xc8>)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005024:	4b27      	ldr	r3, [pc, #156]	; (80050c4 <prvAddNewTaskToReadyList+0xc4>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2b01      	cmp	r3, #1
 800502a:	d110      	bne.n	800504e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800502c:	f000 fc0c 	bl	8005848 <prvInitialiseTaskLists>
 8005030:	e00d      	b.n	800504e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005032:	4b26      	ldr	r3, [pc, #152]	; (80050cc <prvAddNewTaskToReadyList+0xcc>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d109      	bne.n	800504e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800503a:	4b23      	ldr	r3, [pc, #140]	; (80050c8 <prvAddNewTaskToReadyList+0xc8>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005044:	429a      	cmp	r2, r3
 8005046:	d802      	bhi.n	800504e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005048:	4a1f      	ldr	r2, [pc, #124]	; (80050c8 <prvAddNewTaskToReadyList+0xc8>)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800504e:	4b20      	ldr	r3, [pc, #128]	; (80050d0 <prvAddNewTaskToReadyList+0xd0>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	3301      	adds	r3, #1
 8005054:	4a1e      	ldr	r2, [pc, #120]	; (80050d0 <prvAddNewTaskToReadyList+0xd0>)
 8005056:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005058:	4b1d      	ldr	r3, [pc, #116]	; (80050d0 <prvAddNewTaskToReadyList+0xd0>)
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005064:	4b1b      	ldr	r3, [pc, #108]	; (80050d4 <prvAddNewTaskToReadyList+0xd4>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	429a      	cmp	r2, r3
 800506a:	d903      	bls.n	8005074 <prvAddNewTaskToReadyList+0x74>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005070:	4a18      	ldr	r2, [pc, #96]	; (80050d4 <prvAddNewTaskToReadyList+0xd4>)
 8005072:	6013      	str	r3, [r2, #0]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005078:	4613      	mov	r3, r2
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	4413      	add	r3, r2
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	4a15      	ldr	r2, [pc, #84]	; (80050d8 <prvAddNewTaskToReadyList+0xd8>)
 8005082:	441a      	add	r2, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	3304      	adds	r3, #4
 8005088:	4619      	mov	r1, r3
 800508a:	4610      	mov	r0, r2
 800508c:	f7ff f93b 	bl	8004306 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005090:	f001 f998 	bl	80063c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005094:	4b0d      	ldr	r3, [pc, #52]	; (80050cc <prvAddNewTaskToReadyList+0xcc>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d00e      	beq.n	80050ba <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800509c:	4b0a      	ldr	r3, [pc, #40]	; (80050c8 <prvAddNewTaskToReadyList+0xc8>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d207      	bcs.n	80050ba <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80050aa:	4b0c      	ldr	r3, [pc, #48]	; (80050dc <prvAddNewTaskToReadyList+0xdc>)
 80050ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050b0:	601a      	str	r2, [r3, #0]
 80050b2:	f3bf 8f4f 	dsb	sy
 80050b6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80050ba:	bf00      	nop
 80050bc:	3708      	adds	r7, #8
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
 80050c2:	bf00      	nop
 80050c4:	20000c60 	.word	0x20000c60
 80050c8:	2000078c 	.word	0x2000078c
 80050cc:	20000c6c 	.word	0x20000c6c
 80050d0:	20000c7c 	.word	0x20000c7c
 80050d4:	20000c68 	.word	0x20000c68
 80050d8:	20000790 	.word	0x20000790
 80050dc:	e000ed04 	.word	0xe000ed04

080050e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b084      	sub	sp, #16
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80050e8:	2300      	movs	r3, #0
 80050ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d016      	beq.n	8005120 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80050f2:	4b13      	ldr	r3, [pc, #76]	; (8005140 <vTaskDelay+0x60>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d009      	beq.n	800510e <vTaskDelay+0x2e>
 80050fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050fe:	f383 8811 	msr	BASEPRI, r3
 8005102:	f3bf 8f6f 	isb	sy
 8005106:	f3bf 8f4f 	dsb	sy
 800510a:	60bb      	str	r3, [r7, #8]
 800510c:	e7fe      	b.n	800510c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800510e:	f000 f87f 	bl	8005210 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005112:	2100      	movs	r1, #0
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f000 fcdf 	bl	8005ad8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800511a:	f000 f887 	bl	800522c <xTaskResumeAll>
 800511e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d107      	bne.n	8005136 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8005126:	4b07      	ldr	r3, [pc, #28]	; (8005144 <vTaskDelay+0x64>)
 8005128:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800512c:	601a      	str	r2, [r3, #0]
 800512e:	f3bf 8f4f 	dsb	sy
 8005132:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005136:	bf00      	nop
 8005138:	3710      	adds	r7, #16
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop
 8005140:	20000c88 	.word	0x20000c88
 8005144:	e000ed04 	.word	0xe000ed04

08005148 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b08a      	sub	sp, #40	; 0x28
 800514c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800514e:	2300      	movs	r3, #0
 8005150:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005152:	2300      	movs	r3, #0
 8005154:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005156:	463a      	mov	r2, r7
 8005158:	1d39      	adds	r1, r7, #4
 800515a:	f107 0308 	add.w	r3, r7, #8
 800515e:	4618      	mov	r0, r3
 8005160:	f7ff f874 	bl	800424c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005164:	6839      	ldr	r1, [r7, #0]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	68ba      	ldr	r2, [r7, #8]
 800516a:	9202      	str	r2, [sp, #8]
 800516c:	9301      	str	r3, [sp, #4]
 800516e:	2300      	movs	r3, #0
 8005170:	9300      	str	r3, [sp, #0]
 8005172:	2300      	movs	r3, #0
 8005174:	460a      	mov	r2, r1
 8005176:	4920      	ldr	r1, [pc, #128]	; (80051f8 <vTaskStartScheduler+0xb0>)
 8005178:	4820      	ldr	r0, [pc, #128]	; (80051fc <vTaskStartScheduler+0xb4>)
 800517a:	f7ff fe1d 	bl	8004db8 <xTaskCreateStatic>
 800517e:	4602      	mov	r2, r0
 8005180:	4b1f      	ldr	r3, [pc, #124]	; (8005200 <vTaskStartScheduler+0xb8>)
 8005182:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005184:	4b1e      	ldr	r3, [pc, #120]	; (8005200 <vTaskStartScheduler+0xb8>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d002      	beq.n	8005192 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800518c:	2301      	movs	r3, #1
 800518e:	617b      	str	r3, [r7, #20]
 8005190:	e001      	b.n	8005196 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005192:	2300      	movs	r3, #0
 8005194:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	2b01      	cmp	r3, #1
 800519a:	d102      	bne.n	80051a2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800519c:	f000 fcf0 	bl	8005b80 <xTimerCreateTimerTask>
 80051a0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d115      	bne.n	80051d4 <vTaskStartScheduler+0x8c>
 80051a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ac:	f383 8811 	msr	BASEPRI, r3
 80051b0:	f3bf 8f6f 	isb	sy
 80051b4:	f3bf 8f4f 	dsb	sy
 80051b8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80051ba:	4b12      	ldr	r3, [pc, #72]	; (8005204 <vTaskStartScheduler+0xbc>)
 80051bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80051c0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80051c2:	4b11      	ldr	r3, [pc, #68]	; (8005208 <vTaskStartScheduler+0xc0>)
 80051c4:	2201      	movs	r2, #1
 80051c6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80051c8:	4b10      	ldr	r3, [pc, #64]	; (800520c <vTaskStartScheduler+0xc4>)
 80051ca:	2200      	movs	r2, #0
 80051cc:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80051ce:	f001 f85b 	bl	8006288 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80051d2:	e00d      	b.n	80051f0 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051da:	d109      	bne.n	80051f0 <vTaskStartScheduler+0xa8>
 80051dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e0:	f383 8811 	msr	BASEPRI, r3
 80051e4:	f3bf 8f6f 	isb	sy
 80051e8:	f3bf 8f4f 	dsb	sy
 80051ec:	60fb      	str	r3, [r7, #12]
 80051ee:	e7fe      	b.n	80051ee <vTaskStartScheduler+0xa6>
}
 80051f0:	bf00      	nop
 80051f2:	3718      	adds	r7, #24
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	08007b6c 	.word	0x08007b6c
 80051fc:	08005819 	.word	0x08005819
 8005200:	20000c84 	.word	0x20000c84
 8005204:	20000c80 	.word	0x20000c80
 8005208:	20000c6c 	.word	0x20000c6c
 800520c:	20000c64 	.word	0x20000c64

08005210 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005210:	b480      	push	{r7}
 8005212:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005214:	4b04      	ldr	r3, [pc, #16]	; (8005228 <vTaskSuspendAll+0x18>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	3301      	adds	r3, #1
 800521a:	4a03      	ldr	r2, [pc, #12]	; (8005228 <vTaskSuspendAll+0x18>)
 800521c:	6013      	str	r3, [r2, #0]
}
 800521e:	bf00      	nop
 8005220:	46bd      	mov	sp, r7
 8005222:	bc80      	pop	{r7}
 8005224:	4770      	bx	lr
 8005226:	bf00      	nop
 8005228:	20000c88 	.word	0x20000c88

0800522c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005232:	2300      	movs	r3, #0
 8005234:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005236:	2300      	movs	r3, #0
 8005238:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800523a:	4b41      	ldr	r3, [pc, #260]	; (8005340 <xTaskResumeAll+0x114>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d109      	bne.n	8005256 <xTaskResumeAll+0x2a>
 8005242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005246:	f383 8811 	msr	BASEPRI, r3
 800524a:	f3bf 8f6f 	isb	sy
 800524e:	f3bf 8f4f 	dsb	sy
 8005252:	603b      	str	r3, [r7, #0]
 8005254:	e7fe      	b.n	8005254 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005256:	f001 f887 	bl	8006368 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800525a:	4b39      	ldr	r3, [pc, #228]	; (8005340 <xTaskResumeAll+0x114>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	3b01      	subs	r3, #1
 8005260:	4a37      	ldr	r2, [pc, #220]	; (8005340 <xTaskResumeAll+0x114>)
 8005262:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005264:	4b36      	ldr	r3, [pc, #216]	; (8005340 <xTaskResumeAll+0x114>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d162      	bne.n	8005332 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800526c:	4b35      	ldr	r3, [pc, #212]	; (8005344 <xTaskResumeAll+0x118>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d05e      	beq.n	8005332 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005274:	e02f      	b.n	80052d6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005276:	4b34      	ldr	r3, [pc, #208]	; (8005348 <xTaskResumeAll+0x11c>)
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	3318      	adds	r3, #24
 8005282:	4618      	mov	r0, r3
 8005284:	f7ff f89a 	bl	80043bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	3304      	adds	r3, #4
 800528c:	4618      	mov	r0, r3
 800528e:	f7ff f895 	bl	80043bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005296:	4b2d      	ldr	r3, [pc, #180]	; (800534c <xTaskResumeAll+0x120>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	429a      	cmp	r2, r3
 800529c:	d903      	bls.n	80052a6 <xTaskResumeAll+0x7a>
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a2:	4a2a      	ldr	r2, [pc, #168]	; (800534c <xTaskResumeAll+0x120>)
 80052a4:	6013      	str	r3, [r2, #0]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052aa:	4613      	mov	r3, r2
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	4413      	add	r3, r2
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	4a27      	ldr	r2, [pc, #156]	; (8005350 <xTaskResumeAll+0x124>)
 80052b4:	441a      	add	r2, r3
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	3304      	adds	r3, #4
 80052ba:	4619      	mov	r1, r3
 80052bc:	4610      	mov	r0, r2
 80052be:	f7ff f822 	bl	8004306 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052c6:	4b23      	ldr	r3, [pc, #140]	; (8005354 <xTaskResumeAll+0x128>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d302      	bcc.n	80052d6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80052d0:	4b21      	ldr	r3, [pc, #132]	; (8005358 <xTaskResumeAll+0x12c>)
 80052d2:	2201      	movs	r2, #1
 80052d4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80052d6:	4b1c      	ldr	r3, [pc, #112]	; (8005348 <xTaskResumeAll+0x11c>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d1cb      	bne.n	8005276 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d001      	beq.n	80052e8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80052e4:	f000 fb4a 	bl	800597c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80052e8:	4b1c      	ldr	r3, [pc, #112]	; (800535c <xTaskResumeAll+0x130>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d010      	beq.n	8005316 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80052f4:	f000 f844 	bl	8005380 <xTaskIncrementTick>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d002      	beq.n	8005304 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80052fe:	4b16      	ldr	r3, [pc, #88]	; (8005358 <xTaskResumeAll+0x12c>)
 8005300:	2201      	movs	r2, #1
 8005302:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	3b01      	subs	r3, #1
 8005308:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d1f1      	bne.n	80052f4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005310:	4b12      	ldr	r3, [pc, #72]	; (800535c <xTaskResumeAll+0x130>)
 8005312:	2200      	movs	r2, #0
 8005314:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005316:	4b10      	ldr	r3, [pc, #64]	; (8005358 <xTaskResumeAll+0x12c>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d009      	beq.n	8005332 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800531e:	2301      	movs	r3, #1
 8005320:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005322:	4b0f      	ldr	r3, [pc, #60]	; (8005360 <xTaskResumeAll+0x134>)
 8005324:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005328:	601a      	str	r2, [r3, #0]
 800532a:	f3bf 8f4f 	dsb	sy
 800532e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005332:	f001 f847 	bl	80063c4 <vPortExitCritical>

	return xAlreadyYielded;
 8005336:	68bb      	ldr	r3, [r7, #8]
}
 8005338:	4618      	mov	r0, r3
 800533a:	3710      	adds	r7, #16
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}
 8005340:	20000c88 	.word	0x20000c88
 8005344:	20000c60 	.word	0x20000c60
 8005348:	20000c20 	.word	0x20000c20
 800534c:	20000c68 	.word	0x20000c68
 8005350:	20000790 	.word	0x20000790
 8005354:	2000078c 	.word	0x2000078c
 8005358:	20000c74 	.word	0x20000c74
 800535c:	20000c70 	.word	0x20000c70
 8005360:	e000ed04 	.word	0xe000ed04

08005364 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800536a:	4b04      	ldr	r3, [pc, #16]	; (800537c <xTaskGetTickCount+0x18>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005370:	687b      	ldr	r3, [r7, #4]
}
 8005372:	4618      	mov	r0, r3
 8005374:	370c      	adds	r7, #12
 8005376:	46bd      	mov	sp, r7
 8005378:	bc80      	pop	{r7}
 800537a:	4770      	bx	lr
 800537c:	20000c64 	.word	0x20000c64

08005380 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b086      	sub	sp, #24
 8005384:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005386:	2300      	movs	r3, #0
 8005388:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800538a:	4b51      	ldr	r3, [pc, #324]	; (80054d0 <xTaskIncrementTick+0x150>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	2b00      	cmp	r3, #0
 8005390:	f040 808d 	bne.w	80054ae <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005394:	4b4f      	ldr	r3, [pc, #316]	; (80054d4 <xTaskIncrementTick+0x154>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	3301      	adds	r3, #1
 800539a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800539c:	4a4d      	ldr	r2, [pc, #308]	; (80054d4 <xTaskIncrementTick+0x154>)
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d11f      	bne.n	80053e8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80053a8:	4b4b      	ldr	r3, [pc, #300]	; (80054d8 <xTaskIncrementTick+0x158>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d009      	beq.n	80053c6 <xTaskIncrementTick+0x46>
 80053b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b6:	f383 8811 	msr	BASEPRI, r3
 80053ba:	f3bf 8f6f 	isb	sy
 80053be:	f3bf 8f4f 	dsb	sy
 80053c2:	603b      	str	r3, [r7, #0]
 80053c4:	e7fe      	b.n	80053c4 <xTaskIncrementTick+0x44>
 80053c6:	4b44      	ldr	r3, [pc, #272]	; (80054d8 <xTaskIncrementTick+0x158>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	60fb      	str	r3, [r7, #12]
 80053cc:	4b43      	ldr	r3, [pc, #268]	; (80054dc <xTaskIncrementTick+0x15c>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a41      	ldr	r2, [pc, #260]	; (80054d8 <xTaskIncrementTick+0x158>)
 80053d2:	6013      	str	r3, [r2, #0]
 80053d4:	4a41      	ldr	r2, [pc, #260]	; (80054dc <xTaskIncrementTick+0x15c>)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6013      	str	r3, [r2, #0]
 80053da:	4b41      	ldr	r3, [pc, #260]	; (80054e0 <xTaskIncrementTick+0x160>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	3301      	adds	r3, #1
 80053e0:	4a3f      	ldr	r2, [pc, #252]	; (80054e0 <xTaskIncrementTick+0x160>)
 80053e2:	6013      	str	r3, [r2, #0]
 80053e4:	f000 faca 	bl	800597c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80053e8:	4b3e      	ldr	r3, [pc, #248]	; (80054e4 <xTaskIncrementTick+0x164>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	693a      	ldr	r2, [r7, #16]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d34e      	bcc.n	8005490 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053f2:	4b39      	ldr	r3, [pc, #228]	; (80054d8 <xTaskIncrementTick+0x158>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d101      	bne.n	8005400 <xTaskIncrementTick+0x80>
 80053fc:	2301      	movs	r3, #1
 80053fe:	e000      	b.n	8005402 <xTaskIncrementTick+0x82>
 8005400:	2300      	movs	r3, #0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d004      	beq.n	8005410 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005406:	4b37      	ldr	r3, [pc, #220]	; (80054e4 <xTaskIncrementTick+0x164>)
 8005408:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800540c:	601a      	str	r2, [r3, #0]
					break;
 800540e:	e03f      	b.n	8005490 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005410:	4b31      	ldr	r3, [pc, #196]	; (80054d8 <xTaskIncrementTick+0x158>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005420:	693a      	ldr	r2, [r7, #16]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	429a      	cmp	r2, r3
 8005426:	d203      	bcs.n	8005430 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005428:	4a2e      	ldr	r2, [pc, #184]	; (80054e4 <xTaskIncrementTick+0x164>)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6013      	str	r3, [r2, #0]
						break;
 800542e:	e02f      	b.n	8005490 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	3304      	adds	r3, #4
 8005434:	4618      	mov	r0, r3
 8005436:	f7fe ffc1 	bl	80043bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800543e:	2b00      	cmp	r3, #0
 8005440:	d004      	beq.n	800544c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	3318      	adds	r3, #24
 8005446:	4618      	mov	r0, r3
 8005448:	f7fe ffb8 	bl	80043bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005450:	4b25      	ldr	r3, [pc, #148]	; (80054e8 <xTaskIncrementTick+0x168>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	429a      	cmp	r2, r3
 8005456:	d903      	bls.n	8005460 <xTaskIncrementTick+0xe0>
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800545c:	4a22      	ldr	r2, [pc, #136]	; (80054e8 <xTaskIncrementTick+0x168>)
 800545e:	6013      	str	r3, [r2, #0]
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005464:	4613      	mov	r3, r2
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	4413      	add	r3, r2
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	4a1f      	ldr	r2, [pc, #124]	; (80054ec <xTaskIncrementTick+0x16c>)
 800546e:	441a      	add	r2, r3
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	3304      	adds	r3, #4
 8005474:	4619      	mov	r1, r3
 8005476:	4610      	mov	r0, r2
 8005478:	f7fe ff45 	bl	8004306 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005480:	4b1b      	ldr	r3, [pc, #108]	; (80054f0 <xTaskIncrementTick+0x170>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005486:	429a      	cmp	r2, r3
 8005488:	d3b3      	bcc.n	80053f2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800548a:	2301      	movs	r3, #1
 800548c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800548e:	e7b0      	b.n	80053f2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005490:	4b17      	ldr	r3, [pc, #92]	; (80054f0 <xTaskIncrementTick+0x170>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005496:	4915      	ldr	r1, [pc, #84]	; (80054ec <xTaskIncrementTick+0x16c>)
 8005498:	4613      	mov	r3, r2
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	4413      	add	r3, r2
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	440b      	add	r3, r1
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d907      	bls.n	80054b8 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80054a8:	2301      	movs	r3, #1
 80054aa:	617b      	str	r3, [r7, #20]
 80054ac:	e004      	b.n	80054b8 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80054ae:	4b11      	ldr	r3, [pc, #68]	; (80054f4 <xTaskIncrementTick+0x174>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	3301      	adds	r3, #1
 80054b4:	4a0f      	ldr	r2, [pc, #60]	; (80054f4 <xTaskIncrementTick+0x174>)
 80054b6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80054b8:	4b0f      	ldr	r3, [pc, #60]	; (80054f8 <xTaskIncrementTick+0x178>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d001      	beq.n	80054c4 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80054c0:	2301      	movs	r3, #1
 80054c2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80054c4:	697b      	ldr	r3, [r7, #20]
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3718      	adds	r7, #24
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	20000c88 	.word	0x20000c88
 80054d4:	20000c64 	.word	0x20000c64
 80054d8:	20000c18 	.word	0x20000c18
 80054dc:	20000c1c 	.word	0x20000c1c
 80054e0:	20000c78 	.word	0x20000c78
 80054e4:	20000c80 	.word	0x20000c80
 80054e8:	20000c68 	.word	0x20000c68
 80054ec:	20000790 	.word	0x20000790
 80054f0:	2000078c 	.word	0x2000078c
 80054f4:	20000c70 	.word	0x20000c70
 80054f8:	20000c74 	.word	0x20000c74

080054fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80054fc:	b480      	push	{r7}
 80054fe:	b085      	sub	sp, #20
 8005500:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005502:	4b27      	ldr	r3, [pc, #156]	; (80055a0 <vTaskSwitchContext+0xa4>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d003      	beq.n	8005512 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800550a:	4b26      	ldr	r3, [pc, #152]	; (80055a4 <vTaskSwitchContext+0xa8>)
 800550c:	2201      	movs	r2, #1
 800550e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005510:	e040      	b.n	8005594 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8005512:	4b24      	ldr	r3, [pc, #144]	; (80055a4 <vTaskSwitchContext+0xa8>)
 8005514:	2200      	movs	r2, #0
 8005516:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005518:	4b23      	ldr	r3, [pc, #140]	; (80055a8 <vTaskSwitchContext+0xac>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	60fb      	str	r3, [r7, #12]
 800551e:	e00f      	b.n	8005540 <vTaskSwitchContext+0x44>
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d109      	bne.n	800553a <vTaskSwitchContext+0x3e>
 8005526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800552a:	f383 8811 	msr	BASEPRI, r3
 800552e:	f3bf 8f6f 	isb	sy
 8005532:	f3bf 8f4f 	dsb	sy
 8005536:	607b      	str	r3, [r7, #4]
 8005538:	e7fe      	b.n	8005538 <vTaskSwitchContext+0x3c>
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	3b01      	subs	r3, #1
 800553e:	60fb      	str	r3, [r7, #12]
 8005540:	491a      	ldr	r1, [pc, #104]	; (80055ac <vTaskSwitchContext+0xb0>)
 8005542:	68fa      	ldr	r2, [r7, #12]
 8005544:	4613      	mov	r3, r2
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	4413      	add	r3, r2
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	440b      	add	r3, r1
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d0e5      	beq.n	8005520 <vTaskSwitchContext+0x24>
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	4613      	mov	r3, r2
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	4413      	add	r3, r2
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	4a13      	ldr	r2, [pc, #76]	; (80055ac <vTaskSwitchContext+0xb0>)
 8005560:	4413      	add	r3, r2
 8005562:	60bb      	str	r3, [r7, #8]
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	685a      	ldr	r2, [r3, #4]
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	605a      	str	r2, [r3, #4]
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	685a      	ldr	r2, [r3, #4]
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	3308      	adds	r3, #8
 8005576:	429a      	cmp	r2, r3
 8005578:	d104      	bne.n	8005584 <vTaskSwitchContext+0x88>
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	685a      	ldr	r2, [r3, #4]
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	605a      	str	r2, [r3, #4]
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	4a09      	ldr	r2, [pc, #36]	; (80055b0 <vTaskSwitchContext+0xb4>)
 800558c:	6013      	str	r3, [r2, #0]
 800558e:	4a06      	ldr	r2, [pc, #24]	; (80055a8 <vTaskSwitchContext+0xac>)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6013      	str	r3, [r2, #0]
}
 8005594:	bf00      	nop
 8005596:	3714      	adds	r7, #20
 8005598:	46bd      	mov	sp, r7
 800559a:	bc80      	pop	{r7}
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop
 80055a0:	20000c88 	.word	0x20000c88
 80055a4:	20000c74 	.word	0x20000c74
 80055a8:	20000c68 	.word	0x20000c68
 80055ac:	20000790 	.word	0x20000790
 80055b0:	2000078c 	.word	0x2000078c

080055b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b084      	sub	sp, #16
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d109      	bne.n	80055d8 <vTaskPlaceOnEventList+0x24>
 80055c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c8:	f383 8811 	msr	BASEPRI, r3
 80055cc:	f3bf 8f6f 	isb	sy
 80055d0:	f3bf 8f4f 	dsb	sy
 80055d4:	60fb      	str	r3, [r7, #12]
 80055d6:	e7fe      	b.n	80055d6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80055d8:	4b07      	ldr	r3, [pc, #28]	; (80055f8 <vTaskPlaceOnEventList+0x44>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	3318      	adds	r3, #24
 80055de:	4619      	mov	r1, r3
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f7fe feb3 	bl	800434c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80055e6:	2101      	movs	r1, #1
 80055e8:	6838      	ldr	r0, [r7, #0]
 80055ea:	f000 fa75 	bl	8005ad8 <prvAddCurrentTaskToDelayedList>
}
 80055ee:	bf00      	nop
 80055f0:	3710      	adds	r7, #16
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	2000078c 	.word	0x2000078c

080055fc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b086      	sub	sp, #24
 8005600:	af00      	add	r7, sp, #0
 8005602:	60f8      	str	r0, [r7, #12]
 8005604:	60b9      	str	r1, [r7, #8]
 8005606:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d109      	bne.n	8005622 <vTaskPlaceOnEventListRestricted+0x26>
 800560e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005612:	f383 8811 	msr	BASEPRI, r3
 8005616:	f3bf 8f6f 	isb	sy
 800561a:	f3bf 8f4f 	dsb	sy
 800561e:	617b      	str	r3, [r7, #20]
 8005620:	e7fe      	b.n	8005620 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005622:	4b0a      	ldr	r3, [pc, #40]	; (800564c <vTaskPlaceOnEventListRestricted+0x50>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	3318      	adds	r3, #24
 8005628:	4619      	mov	r1, r3
 800562a:	68f8      	ldr	r0, [r7, #12]
 800562c:	f7fe fe6b 	bl	8004306 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d002      	beq.n	800563c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8005636:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800563a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800563c:	6879      	ldr	r1, [r7, #4]
 800563e:	68b8      	ldr	r0, [r7, #8]
 8005640:	f000 fa4a 	bl	8005ad8 <prvAddCurrentTaskToDelayedList>
	}
 8005644:	bf00      	nop
 8005646:	3718      	adds	r7, #24
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}
 800564c:	2000078c 	.word	0x2000078c

08005650 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b086      	sub	sp, #24
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d109      	bne.n	800567a <xTaskRemoveFromEventList+0x2a>
 8005666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800566a:	f383 8811 	msr	BASEPRI, r3
 800566e:	f3bf 8f6f 	isb	sy
 8005672:	f3bf 8f4f 	dsb	sy
 8005676:	60fb      	str	r3, [r7, #12]
 8005678:	e7fe      	b.n	8005678 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	3318      	adds	r3, #24
 800567e:	4618      	mov	r0, r3
 8005680:	f7fe fe9c 	bl	80043bc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005684:	4b1d      	ldr	r3, [pc, #116]	; (80056fc <xTaskRemoveFromEventList+0xac>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d11d      	bne.n	80056c8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	3304      	adds	r3, #4
 8005690:	4618      	mov	r0, r3
 8005692:	f7fe fe93 	bl	80043bc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800569a:	4b19      	ldr	r3, [pc, #100]	; (8005700 <xTaskRemoveFromEventList+0xb0>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	429a      	cmp	r2, r3
 80056a0:	d903      	bls.n	80056aa <xTaskRemoveFromEventList+0x5a>
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a6:	4a16      	ldr	r2, [pc, #88]	; (8005700 <xTaskRemoveFromEventList+0xb0>)
 80056a8:	6013      	str	r3, [r2, #0]
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056ae:	4613      	mov	r3, r2
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	4413      	add	r3, r2
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	4a13      	ldr	r2, [pc, #76]	; (8005704 <xTaskRemoveFromEventList+0xb4>)
 80056b8:	441a      	add	r2, r3
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	3304      	adds	r3, #4
 80056be:	4619      	mov	r1, r3
 80056c0:	4610      	mov	r0, r2
 80056c2:	f7fe fe20 	bl	8004306 <vListInsertEnd>
 80056c6:	e005      	b.n	80056d4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	3318      	adds	r3, #24
 80056cc:	4619      	mov	r1, r3
 80056ce:	480e      	ldr	r0, [pc, #56]	; (8005708 <xTaskRemoveFromEventList+0xb8>)
 80056d0:	f7fe fe19 	bl	8004306 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056d8:	4b0c      	ldr	r3, [pc, #48]	; (800570c <xTaskRemoveFromEventList+0xbc>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056de:	429a      	cmp	r2, r3
 80056e0:	d905      	bls.n	80056ee <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80056e2:	2301      	movs	r3, #1
 80056e4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80056e6:	4b0a      	ldr	r3, [pc, #40]	; (8005710 <xTaskRemoveFromEventList+0xc0>)
 80056e8:	2201      	movs	r2, #1
 80056ea:	601a      	str	r2, [r3, #0]
 80056ec:	e001      	b.n	80056f2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80056ee:	2300      	movs	r3, #0
 80056f0:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80056f2:	697b      	ldr	r3, [r7, #20]
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3718      	adds	r7, #24
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	20000c88 	.word	0x20000c88
 8005700:	20000c68 	.word	0x20000c68
 8005704:	20000790 	.word	0x20000790
 8005708:	20000c20 	.word	0x20000c20
 800570c:	2000078c 	.word	0x2000078c
 8005710:	20000c74 	.word	0x20000c74

08005714 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005714:	b480      	push	{r7}
 8005716:	b083      	sub	sp, #12
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800571c:	4b06      	ldr	r3, [pc, #24]	; (8005738 <vTaskInternalSetTimeOutState+0x24>)
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005724:	4b05      	ldr	r3, [pc, #20]	; (800573c <vTaskInternalSetTimeOutState+0x28>)
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	605a      	str	r2, [r3, #4]
}
 800572c:	bf00      	nop
 800572e:	370c      	adds	r7, #12
 8005730:	46bd      	mov	sp, r7
 8005732:	bc80      	pop	{r7}
 8005734:	4770      	bx	lr
 8005736:	bf00      	nop
 8005738:	20000c78 	.word	0x20000c78
 800573c:	20000c64 	.word	0x20000c64

08005740 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b088      	sub	sp, #32
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d109      	bne.n	8005764 <xTaskCheckForTimeOut+0x24>
 8005750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005754:	f383 8811 	msr	BASEPRI, r3
 8005758:	f3bf 8f6f 	isb	sy
 800575c:	f3bf 8f4f 	dsb	sy
 8005760:	613b      	str	r3, [r7, #16]
 8005762:	e7fe      	b.n	8005762 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d109      	bne.n	800577e <xTaskCheckForTimeOut+0x3e>
 800576a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800576e:	f383 8811 	msr	BASEPRI, r3
 8005772:	f3bf 8f6f 	isb	sy
 8005776:	f3bf 8f4f 	dsb	sy
 800577a:	60fb      	str	r3, [r7, #12]
 800577c:	e7fe      	b.n	800577c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800577e:	f000 fdf3 	bl	8006368 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005782:	4b1d      	ldr	r3, [pc, #116]	; (80057f8 <xTaskCheckForTimeOut+0xb8>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	69ba      	ldr	r2, [r7, #24]
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800579a:	d102      	bne.n	80057a2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800579c:	2300      	movs	r3, #0
 800579e:	61fb      	str	r3, [r7, #28]
 80057a0:	e023      	b.n	80057ea <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	4b15      	ldr	r3, [pc, #84]	; (80057fc <xTaskCheckForTimeOut+0xbc>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d007      	beq.n	80057be <xTaskCheckForTimeOut+0x7e>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	69ba      	ldr	r2, [r7, #24]
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d302      	bcc.n	80057be <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80057b8:	2301      	movs	r3, #1
 80057ba:	61fb      	str	r3, [r7, #28]
 80057bc:	e015      	b.n	80057ea <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	697a      	ldr	r2, [r7, #20]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d20b      	bcs.n	80057e0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	1ad2      	subs	r2, r2, r3
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f7ff ff9d 	bl	8005714 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80057da:	2300      	movs	r3, #0
 80057dc:	61fb      	str	r3, [r7, #28]
 80057de:	e004      	b.n	80057ea <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	2200      	movs	r2, #0
 80057e4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80057e6:	2301      	movs	r3, #1
 80057e8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80057ea:	f000 fdeb 	bl	80063c4 <vPortExitCritical>

	return xReturn;
 80057ee:	69fb      	ldr	r3, [r7, #28]
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3720      	adds	r7, #32
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	20000c64 	.word	0x20000c64
 80057fc:	20000c78 	.word	0x20000c78

08005800 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005800:	b480      	push	{r7}
 8005802:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005804:	4b03      	ldr	r3, [pc, #12]	; (8005814 <vTaskMissedYield+0x14>)
 8005806:	2201      	movs	r2, #1
 8005808:	601a      	str	r2, [r3, #0]
}
 800580a:	bf00      	nop
 800580c:	46bd      	mov	sp, r7
 800580e:	bc80      	pop	{r7}
 8005810:	4770      	bx	lr
 8005812:	bf00      	nop
 8005814:	20000c74 	.word	0x20000c74

08005818 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b082      	sub	sp, #8
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005820:	f000 f852 	bl	80058c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005824:	4b06      	ldr	r3, [pc, #24]	; (8005840 <prvIdleTask+0x28>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	2b01      	cmp	r3, #1
 800582a:	d9f9      	bls.n	8005820 <prvIdleTask+0x8>
			{
				taskYIELD();
 800582c:	4b05      	ldr	r3, [pc, #20]	; (8005844 <prvIdleTask+0x2c>)
 800582e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005832:	601a      	str	r2, [r3, #0]
 8005834:	f3bf 8f4f 	dsb	sy
 8005838:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800583c:	e7f0      	b.n	8005820 <prvIdleTask+0x8>
 800583e:	bf00      	nop
 8005840:	20000790 	.word	0x20000790
 8005844:	e000ed04 	.word	0xe000ed04

08005848 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800584e:	2300      	movs	r3, #0
 8005850:	607b      	str	r3, [r7, #4]
 8005852:	e00c      	b.n	800586e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005854:	687a      	ldr	r2, [r7, #4]
 8005856:	4613      	mov	r3, r2
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	4413      	add	r3, r2
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	4a12      	ldr	r2, [pc, #72]	; (80058a8 <prvInitialiseTaskLists+0x60>)
 8005860:	4413      	add	r3, r2
 8005862:	4618      	mov	r0, r3
 8005864:	f7fe fd24 	bl	80042b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	3301      	adds	r3, #1
 800586c:	607b      	str	r3, [r7, #4]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2b37      	cmp	r3, #55	; 0x37
 8005872:	d9ef      	bls.n	8005854 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005874:	480d      	ldr	r0, [pc, #52]	; (80058ac <prvInitialiseTaskLists+0x64>)
 8005876:	f7fe fd1b 	bl	80042b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800587a:	480d      	ldr	r0, [pc, #52]	; (80058b0 <prvInitialiseTaskLists+0x68>)
 800587c:	f7fe fd18 	bl	80042b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005880:	480c      	ldr	r0, [pc, #48]	; (80058b4 <prvInitialiseTaskLists+0x6c>)
 8005882:	f7fe fd15 	bl	80042b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005886:	480c      	ldr	r0, [pc, #48]	; (80058b8 <prvInitialiseTaskLists+0x70>)
 8005888:	f7fe fd12 	bl	80042b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800588c:	480b      	ldr	r0, [pc, #44]	; (80058bc <prvInitialiseTaskLists+0x74>)
 800588e:	f7fe fd0f 	bl	80042b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005892:	4b0b      	ldr	r3, [pc, #44]	; (80058c0 <prvInitialiseTaskLists+0x78>)
 8005894:	4a05      	ldr	r2, [pc, #20]	; (80058ac <prvInitialiseTaskLists+0x64>)
 8005896:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005898:	4b0a      	ldr	r3, [pc, #40]	; (80058c4 <prvInitialiseTaskLists+0x7c>)
 800589a:	4a05      	ldr	r2, [pc, #20]	; (80058b0 <prvInitialiseTaskLists+0x68>)
 800589c:	601a      	str	r2, [r3, #0]
}
 800589e:	bf00      	nop
 80058a0:	3708      	adds	r7, #8
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	20000790 	.word	0x20000790
 80058ac:	20000bf0 	.word	0x20000bf0
 80058b0:	20000c04 	.word	0x20000c04
 80058b4:	20000c20 	.word	0x20000c20
 80058b8:	20000c34 	.word	0x20000c34
 80058bc:	20000c4c 	.word	0x20000c4c
 80058c0:	20000c18 	.word	0x20000c18
 80058c4:	20000c1c 	.word	0x20000c1c

080058c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80058ce:	e019      	b.n	8005904 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80058d0:	f000 fd4a 	bl	8006368 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80058d4:	4b0f      	ldr	r3, [pc, #60]	; (8005914 <prvCheckTasksWaitingTermination+0x4c>)
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	3304      	adds	r3, #4
 80058e0:	4618      	mov	r0, r3
 80058e2:	f7fe fd6b 	bl	80043bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80058e6:	4b0c      	ldr	r3, [pc, #48]	; (8005918 <prvCheckTasksWaitingTermination+0x50>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	3b01      	subs	r3, #1
 80058ec:	4a0a      	ldr	r2, [pc, #40]	; (8005918 <prvCheckTasksWaitingTermination+0x50>)
 80058ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80058f0:	4b0a      	ldr	r3, [pc, #40]	; (800591c <prvCheckTasksWaitingTermination+0x54>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	3b01      	subs	r3, #1
 80058f6:	4a09      	ldr	r2, [pc, #36]	; (800591c <prvCheckTasksWaitingTermination+0x54>)
 80058f8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80058fa:	f000 fd63 	bl	80063c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 f80e 	bl	8005920 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005904:	4b05      	ldr	r3, [pc, #20]	; (800591c <prvCheckTasksWaitingTermination+0x54>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d1e1      	bne.n	80058d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800590c:	bf00      	nop
 800590e:	3708      	adds	r7, #8
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}
 8005914:	20000c34 	.word	0x20000c34
 8005918:	20000c60 	.word	0x20000c60
 800591c:	20000c48 	.word	0x20000c48

08005920 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800592e:	2b00      	cmp	r3, #0
 8005930:	d108      	bne.n	8005944 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005936:	4618      	mov	r0, r3
 8005938:	f000 fece 	bl	80066d8 <vPortFree>
				vPortFree( pxTCB );
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f000 fecb 	bl	80066d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005942:	e017      	b.n	8005974 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800594a:	2b01      	cmp	r3, #1
 800594c:	d103      	bne.n	8005956 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 fec2 	bl	80066d8 <vPortFree>
	}
 8005954:	e00e      	b.n	8005974 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800595c:	2b02      	cmp	r3, #2
 800595e:	d009      	beq.n	8005974 <prvDeleteTCB+0x54>
 8005960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005964:	f383 8811 	msr	BASEPRI, r3
 8005968:	f3bf 8f6f 	isb	sy
 800596c:	f3bf 8f4f 	dsb	sy
 8005970:	60fb      	str	r3, [r7, #12]
 8005972:	e7fe      	b.n	8005972 <prvDeleteTCB+0x52>
	}
 8005974:	bf00      	nop
 8005976:	3710      	adds	r7, #16
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005982:	4b0e      	ldr	r3, [pc, #56]	; (80059bc <prvResetNextTaskUnblockTime+0x40>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d101      	bne.n	8005990 <prvResetNextTaskUnblockTime+0x14>
 800598c:	2301      	movs	r3, #1
 800598e:	e000      	b.n	8005992 <prvResetNextTaskUnblockTime+0x16>
 8005990:	2300      	movs	r3, #0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d004      	beq.n	80059a0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005996:	4b0a      	ldr	r3, [pc, #40]	; (80059c0 <prvResetNextTaskUnblockTime+0x44>)
 8005998:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800599c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800599e:	e008      	b.n	80059b2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80059a0:	4b06      	ldr	r3, [pc, #24]	; (80059bc <prvResetNextTaskUnblockTime+0x40>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	4a04      	ldr	r2, [pc, #16]	; (80059c0 <prvResetNextTaskUnblockTime+0x44>)
 80059b0:	6013      	str	r3, [r2, #0]
}
 80059b2:	bf00      	nop
 80059b4:	370c      	adds	r7, #12
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bc80      	pop	{r7}
 80059ba:	4770      	bx	lr
 80059bc:	20000c18 	.word	0x20000c18
 80059c0:	20000c80 	.word	0x20000c80

080059c4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80059ca:	4b0b      	ldr	r3, [pc, #44]	; (80059f8 <xTaskGetSchedulerState+0x34>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d102      	bne.n	80059d8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80059d2:	2301      	movs	r3, #1
 80059d4:	607b      	str	r3, [r7, #4]
 80059d6:	e008      	b.n	80059ea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059d8:	4b08      	ldr	r3, [pc, #32]	; (80059fc <xTaskGetSchedulerState+0x38>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d102      	bne.n	80059e6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80059e0:	2302      	movs	r3, #2
 80059e2:	607b      	str	r3, [r7, #4]
 80059e4:	e001      	b.n	80059ea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80059e6:	2300      	movs	r3, #0
 80059e8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80059ea:	687b      	ldr	r3, [r7, #4]
	}
 80059ec:	4618      	mov	r0, r3
 80059ee:	370c      	adds	r7, #12
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bc80      	pop	{r7}
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop
 80059f8:	20000c6c 	.word	0x20000c6c
 80059fc:	20000c88 	.word	0x20000c88

08005a00 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b086      	sub	sp, #24
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d054      	beq.n	8005ac0 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005a16:	4b2d      	ldr	r3, [pc, #180]	; (8005acc <xTaskPriorityDisinherit+0xcc>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	693a      	ldr	r2, [r7, #16]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d009      	beq.n	8005a34 <xTaskPriorityDisinherit+0x34>
 8005a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a24:	f383 8811 	msr	BASEPRI, r3
 8005a28:	f3bf 8f6f 	isb	sy
 8005a2c:	f3bf 8f4f 	dsb	sy
 8005a30:	60fb      	str	r3, [r7, #12]
 8005a32:	e7fe      	b.n	8005a32 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d109      	bne.n	8005a50 <xTaskPriorityDisinherit+0x50>
 8005a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a40:	f383 8811 	msr	BASEPRI, r3
 8005a44:	f3bf 8f6f 	isb	sy
 8005a48:	f3bf 8f4f 	dsb	sy
 8005a4c:	60bb      	str	r3, [r7, #8]
 8005a4e:	e7fe      	b.n	8005a4e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a54:	1e5a      	subs	r2, r3, #1
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d02c      	beq.n	8005ac0 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d128      	bne.n	8005ac0 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	3304      	adds	r3, #4
 8005a72:	4618      	mov	r0, r3
 8005a74:	f7fe fca2 	bl	80043bc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a84:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a90:	4b0f      	ldr	r3, [pc, #60]	; (8005ad0 <xTaskPriorityDisinherit+0xd0>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d903      	bls.n	8005aa0 <xTaskPriorityDisinherit+0xa0>
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a9c:	4a0c      	ldr	r2, [pc, #48]	; (8005ad0 <xTaskPriorityDisinherit+0xd0>)
 8005a9e:	6013      	str	r3, [r2, #0]
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aa4:	4613      	mov	r3, r2
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	4413      	add	r3, r2
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	4a09      	ldr	r2, [pc, #36]	; (8005ad4 <xTaskPriorityDisinherit+0xd4>)
 8005aae:	441a      	add	r2, r3
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	3304      	adds	r3, #4
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	4610      	mov	r0, r2
 8005ab8:	f7fe fc25 	bl	8004306 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005abc:	2301      	movs	r3, #1
 8005abe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005ac0:	697b      	ldr	r3, [r7, #20]
	}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3718      	adds	r7, #24
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	2000078c 	.word	0x2000078c
 8005ad0:	20000c68 	.word	0x20000c68
 8005ad4:	20000790 	.word	0x20000790

08005ad8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b084      	sub	sp, #16
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005ae2:	4b21      	ldr	r3, [pc, #132]	; (8005b68 <prvAddCurrentTaskToDelayedList+0x90>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ae8:	4b20      	ldr	r3, [pc, #128]	; (8005b6c <prvAddCurrentTaskToDelayedList+0x94>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	3304      	adds	r3, #4
 8005aee:	4618      	mov	r0, r3
 8005af0:	f7fe fc64 	bl	80043bc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005afa:	d10a      	bne.n	8005b12 <prvAddCurrentTaskToDelayedList+0x3a>
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d007      	beq.n	8005b12 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b02:	4b1a      	ldr	r3, [pc, #104]	; (8005b6c <prvAddCurrentTaskToDelayedList+0x94>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	3304      	adds	r3, #4
 8005b08:	4619      	mov	r1, r3
 8005b0a:	4819      	ldr	r0, [pc, #100]	; (8005b70 <prvAddCurrentTaskToDelayedList+0x98>)
 8005b0c:	f7fe fbfb 	bl	8004306 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005b10:	e026      	b.n	8005b60 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005b12:	68fa      	ldr	r2, [r7, #12]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4413      	add	r3, r2
 8005b18:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005b1a:	4b14      	ldr	r3, [pc, #80]	; (8005b6c <prvAddCurrentTaskToDelayedList+0x94>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	68ba      	ldr	r2, [r7, #8]
 8005b20:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005b22:	68ba      	ldr	r2, [r7, #8]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d209      	bcs.n	8005b3e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b2a:	4b12      	ldr	r3, [pc, #72]	; (8005b74 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	4b0f      	ldr	r3, [pc, #60]	; (8005b6c <prvAddCurrentTaskToDelayedList+0x94>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	3304      	adds	r3, #4
 8005b34:	4619      	mov	r1, r3
 8005b36:	4610      	mov	r0, r2
 8005b38:	f7fe fc08 	bl	800434c <vListInsert>
}
 8005b3c:	e010      	b.n	8005b60 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b3e:	4b0e      	ldr	r3, [pc, #56]	; (8005b78 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	4b0a      	ldr	r3, [pc, #40]	; (8005b6c <prvAddCurrentTaskToDelayedList+0x94>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	3304      	adds	r3, #4
 8005b48:	4619      	mov	r1, r3
 8005b4a:	4610      	mov	r0, r2
 8005b4c:	f7fe fbfe 	bl	800434c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005b50:	4b0a      	ldr	r3, [pc, #40]	; (8005b7c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	68ba      	ldr	r2, [r7, #8]
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d202      	bcs.n	8005b60 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005b5a:	4a08      	ldr	r2, [pc, #32]	; (8005b7c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	6013      	str	r3, [r2, #0]
}
 8005b60:	bf00      	nop
 8005b62:	3710      	adds	r7, #16
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	20000c64 	.word	0x20000c64
 8005b6c:	2000078c 	.word	0x2000078c
 8005b70:	20000c4c 	.word	0x20000c4c
 8005b74:	20000c1c 	.word	0x20000c1c
 8005b78:	20000c18 	.word	0x20000c18
 8005b7c:	20000c80 	.word	0x20000c80

08005b80 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b08a      	sub	sp, #40	; 0x28
 8005b84:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005b86:	2300      	movs	r3, #0
 8005b88:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005b8a:	f000 fac3 	bl	8006114 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005b8e:	4b1c      	ldr	r3, [pc, #112]	; (8005c00 <xTimerCreateTimerTask+0x80>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d021      	beq.n	8005bda <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005b96:	2300      	movs	r3, #0
 8005b98:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005b9e:	1d3a      	adds	r2, r7, #4
 8005ba0:	f107 0108 	add.w	r1, r7, #8
 8005ba4:	f107 030c 	add.w	r3, r7, #12
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f7fe fb67 	bl	800427c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005bae:	6879      	ldr	r1, [r7, #4]
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	68fa      	ldr	r2, [r7, #12]
 8005bb4:	9202      	str	r2, [sp, #8]
 8005bb6:	9301      	str	r3, [sp, #4]
 8005bb8:	2302      	movs	r3, #2
 8005bba:	9300      	str	r3, [sp, #0]
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	460a      	mov	r2, r1
 8005bc0:	4910      	ldr	r1, [pc, #64]	; (8005c04 <xTimerCreateTimerTask+0x84>)
 8005bc2:	4811      	ldr	r0, [pc, #68]	; (8005c08 <xTimerCreateTimerTask+0x88>)
 8005bc4:	f7ff f8f8 	bl	8004db8 <xTaskCreateStatic>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	4b10      	ldr	r3, [pc, #64]	; (8005c0c <xTimerCreateTimerTask+0x8c>)
 8005bcc:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005bce:	4b0f      	ldr	r3, [pc, #60]	; (8005c0c <xTimerCreateTimerTask+0x8c>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d001      	beq.n	8005bda <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d109      	bne.n	8005bf4 <xTimerCreateTimerTask+0x74>
 8005be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be4:	f383 8811 	msr	BASEPRI, r3
 8005be8:	f3bf 8f6f 	isb	sy
 8005bec:	f3bf 8f4f 	dsb	sy
 8005bf0:	613b      	str	r3, [r7, #16]
 8005bf2:	e7fe      	b.n	8005bf2 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8005bf4:	697b      	ldr	r3, [r7, #20]
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3718      	adds	r7, #24
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	20000cbc 	.word	0x20000cbc
 8005c04:	08007b74 	.word	0x08007b74
 8005c08:	08005d29 	.word	0x08005d29
 8005c0c:	20000cc0 	.word	0x20000cc0

08005c10 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b08a      	sub	sp, #40	; 0x28
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	607a      	str	r2, [r7, #4]
 8005c1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d109      	bne.n	8005c3c <xTimerGenericCommand+0x2c>
 8005c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c2c:	f383 8811 	msr	BASEPRI, r3
 8005c30:	f3bf 8f6f 	isb	sy
 8005c34:	f3bf 8f4f 	dsb	sy
 8005c38:	623b      	str	r3, [r7, #32]
 8005c3a:	e7fe      	b.n	8005c3a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005c3c:	4b19      	ldr	r3, [pc, #100]	; (8005ca4 <xTimerGenericCommand+0x94>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d02a      	beq.n	8005c9a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	2b05      	cmp	r3, #5
 8005c54:	dc18      	bgt.n	8005c88 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005c56:	f7ff feb5 	bl	80059c4 <xTaskGetSchedulerState>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	2b02      	cmp	r3, #2
 8005c5e:	d109      	bne.n	8005c74 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005c60:	4b10      	ldr	r3, [pc, #64]	; (8005ca4 <xTimerGenericCommand+0x94>)
 8005c62:	6818      	ldr	r0, [r3, #0]
 8005c64:	f107 0110 	add.w	r1, r7, #16
 8005c68:	2300      	movs	r3, #0
 8005c6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c6c:	f7fe fcce 	bl	800460c <xQueueGenericSend>
 8005c70:	6278      	str	r0, [r7, #36]	; 0x24
 8005c72:	e012      	b.n	8005c9a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005c74:	4b0b      	ldr	r3, [pc, #44]	; (8005ca4 <xTimerGenericCommand+0x94>)
 8005c76:	6818      	ldr	r0, [r3, #0]
 8005c78:	f107 0110 	add.w	r1, r7, #16
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f7fe fcc4 	bl	800460c <xQueueGenericSend>
 8005c84:	6278      	str	r0, [r7, #36]	; 0x24
 8005c86:	e008      	b.n	8005c9a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005c88:	4b06      	ldr	r3, [pc, #24]	; (8005ca4 <xTimerGenericCommand+0x94>)
 8005c8a:	6818      	ldr	r0, [r3, #0]
 8005c8c:	f107 0110 	add.w	r1, r7, #16
 8005c90:	2300      	movs	r3, #0
 8005c92:	683a      	ldr	r2, [r7, #0]
 8005c94:	f7fe fdb4 	bl	8004800 <xQueueGenericSendFromISR>
 8005c98:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3728      	adds	r7, #40	; 0x28
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}
 8005ca4:	20000cbc 	.word	0x20000cbc

08005ca8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b088      	sub	sp, #32
 8005cac:	af02      	add	r7, sp, #8
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005cb2:	4b1c      	ldr	r3, [pc, #112]	; (8005d24 <prvProcessExpiredTimer+0x7c>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	3304      	adds	r3, #4
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f7fe fb7b 	bl	80043bc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	69db      	ldr	r3, [r3, #28]
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d121      	bne.n	8005d12 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	699a      	ldr	r2, [r3, #24]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	18d1      	adds	r1, r2, r3
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	683a      	ldr	r2, [r7, #0]
 8005cda:	6978      	ldr	r0, [r7, #20]
 8005cdc:	f000 f8c8 	bl	8005e70 <prvInsertTimerInActiveList>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d015      	beq.n	8005d12 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	9300      	str	r3, [sp, #0]
 8005cea:	2300      	movs	r3, #0
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	2100      	movs	r1, #0
 8005cf0:	6978      	ldr	r0, [r7, #20]
 8005cf2:	f7ff ff8d 	bl	8005c10 <xTimerGenericCommand>
 8005cf6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d109      	bne.n	8005d12 <prvProcessExpiredTimer+0x6a>
 8005cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d02:	f383 8811 	msr	BASEPRI, r3
 8005d06:	f3bf 8f6f 	isb	sy
 8005d0a:	f3bf 8f4f 	dsb	sy
 8005d0e:	60fb      	str	r3, [r7, #12]
 8005d10:	e7fe      	b.n	8005d10 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d16:	6978      	ldr	r0, [r7, #20]
 8005d18:	4798      	blx	r3
}
 8005d1a:	bf00      	nop
 8005d1c:	3718      	adds	r7, #24
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
 8005d22:	bf00      	nop
 8005d24:	20000cb4 	.word	0x20000cb4

08005d28 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b084      	sub	sp, #16
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005d30:	f107 0308 	add.w	r3, r7, #8
 8005d34:	4618      	mov	r0, r3
 8005d36:	f000 f857 	bl	8005de8 <prvGetNextExpireTime>
 8005d3a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	4619      	mov	r1, r3
 8005d40:	68f8      	ldr	r0, [r7, #12]
 8005d42:	f000 f803 	bl	8005d4c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005d46:	f000 f8d5 	bl	8005ef4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005d4a:	e7f1      	b.n	8005d30 <prvTimerTask+0x8>

08005d4c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005d56:	f7ff fa5b 	bl	8005210 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005d5a:	f107 0308 	add.w	r3, r7, #8
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f000 f866 	bl	8005e30 <prvSampleTimeNow>
 8005d64:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d130      	bne.n	8005dce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d10a      	bne.n	8005d88 <prvProcessTimerOrBlockTask+0x3c>
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d806      	bhi.n	8005d88 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005d7a:	f7ff fa57 	bl	800522c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005d7e:	68f9      	ldr	r1, [r7, #12]
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f7ff ff91 	bl	8005ca8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005d86:	e024      	b.n	8005dd2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d008      	beq.n	8005da0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005d8e:	4b13      	ldr	r3, [pc, #76]	; (8005ddc <prvProcessTimerOrBlockTask+0x90>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	bf0c      	ite	eq
 8005d98:	2301      	moveq	r3, #1
 8005d9a:	2300      	movne	r3, #0
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005da0:	4b0f      	ldr	r3, [pc, #60]	; (8005de0 <prvProcessTimerOrBlockTask+0x94>)
 8005da2:	6818      	ldr	r0, [r3, #0]
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	683a      	ldr	r2, [r7, #0]
 8005dac:	4619      	mov	r1, r3
 8005dae:	f7fe ffcf 	bl	8004d50 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005db2:	f7ff fa3b 	bl	800522c <xTaskResumeAll>
 8005db6:	4603      	mov	r3, r0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d10a      	bne.n	8005dd2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005dbc:	4b09      	ldr	r3, [pc, #36]	; (8005de4 <prvProcessTimerOrBlockTask+0x98>)
 8005dbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dc2:	601a      	str	r2, [r3, #0]
 8005dc4:	f3bf 8f4f 	dsb	sy
 8005dc8:	f3bf 8f6f 	isb	sy
}
 8005dcc:	e001      	b.n	8005dd2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005dce:	f7ff fa2d 	bl	800522c <xTaskResumeAll>
}
 8005dd2:	bf00      	nop
 8005dd4:	3710      	adds	r7, #16
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	20000cb8 	.word	0x20000cb8
 8005de0:	20000cbc 	.word	0x20000cbc
 8005de4:	e000ed04 	.word	0xe000ed04

08005de8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005de8:	b480      	push	{r7}
 8005dea:	b085      	sub	sp, #20
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005df0:	4b0e      	ldr	r3, [pc, #56]	; (8005e2c <prvGetNextExpireTime+0x44>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	bf0c      	ite	eq
 8005dfa:	2301      	moveq	r3, #1
 8005dfc:	2300      	movne	r3, #0
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	461a      	mov	r2, r3
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d105      	bne.n	8005e1a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005e0e:	4b07      	ldr	r3, [pc, #28]	; (8005e2c <prvGetNextExpireTime+0x44>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	60fb      	str	r3, [r7, #12]
 8005e18:	e001      	b.n	8005e1e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3714      	adds	r7, #20
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bc80      	pop	{r7}
 8005e28:	4770      	bx	lr
 8005e2a:	bf00      	nop
 8005e2c:	20000cb4 	.word	0x20000cb4

08005e30 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005e38:	f7ff fa94 	bl	8005364 <xTaskGetTickCount>
 8005e3c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005e3e:	4b0b      	ldr	r3, [pc, #44]	; (8005e6c <prvSampleTimeNow+0x3c>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	68fa      	ldr	r2, [r7, #12]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d205      	bcs.n	8005e54 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005e48:	f000 f904 	bl	8006054 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	601a      	str	r2, [r3, #0]
 8005e52:	e002      	b.n	8005e5a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005e5a:	4a04      	ldr	r2, [pc, #16]	; (8005e6c <prvSampleTimeNow+0x3c>)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005e60:	68fb      	ldr	r3, [r7, #12]
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3710      	adds	r7, #16
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	20000cc4 	.word	0x20000cc4

08005e70 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b086      	sub	sp, #24
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	60b9      	str	r1, [r7, #8]
 8005e7a:	607a      	str	r2, [r7, #4]
 8005e7c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	68ba      	ldr	r2, [r7, #8]
 8005e86:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	68fa      	ldr	r2, [r7, #12]
 8005e8c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005e8e:	68ba      	ldr	r2, [r7, #8]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d812      	bhi.n	8005ebc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	1ad2      	subs	r2, r2, r3
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	699b      	ldr	r3, [r3, #24]
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d302      	bcc.n	8005eaa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	617b      	str	r3, [r7, #20]
 8005ea8:	e01b      	b.n	8005ee2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005eaa:	4b10      	ldr	r3, [pc, #64]	; (8005eec <prvInsertTimerInActiveList+0x7c>)
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	3304      	adds	r3, #4
 8005eb2:	4619      	mov	r1, r3
 8005eb4:	4610      	mov	r0, r2
 8005eb6:	f7fe fa49 	bl	800434c <vListInsert>
 8005eba:	e012      	b.n	8005ee2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d206      	bcs.n	8005ed2 <prvInsertTimerInActiveList+0x62>
 8005ec4:	68ba      	ldr	r2, [r7, #8]
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d302      	bcc.n	8005ed2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	617b      	str	r3, [r7, #20]
 8005ed0:	e007      	b.n	8005ee2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005ed2:	4b07      	ldr	r3, [pc, #28]	; (8005ef0 <prvInsertTimerInActiveList+0x80>)
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	3304      	adds	r3, #4
 8005eda:	4619      	mov	r1, r3
 8005edc:	4610      	mov	r0, r2
 8005ede:	f7fe fa35 	bl	800434c <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005ee2:	697b      	ldr	r3, [r7, #20]
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3718      	adds	r7, #24
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	20000cb8 	.word	0x20000cb8
 8005ef0:	20000cb4 	.word	0x20000cb4

08005ef4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b08e      	sub	sp, #56	; 0x38
 8005ef8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005efa:	e099      	b.n	8006030 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	da17      	bge.n	8005f32 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005f02:	1d3b      	adds	r3, r7, #4
 8005f04:	3304      	adds	r3, #4
 8005f06:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d109      	bne.n	8005f22 <prvProcessReceivedCommands+0x2e>
 8005f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f12:	f383 8811 	msr	BASEPRI, r3
 8005f16:	f3bf 8f6f 	isb	sy
 8005f1a:	f3bf 8f4f 	dsb	sy
 8005f1e:	61fb      	str	r3, [r7, #28]
 8005f20:	e7fe      	b.n	8005f20 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f28:	6850      	ldr	r0, [r2, #4]
 8005f2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f2c:	6892      	ldr	r2, [r2, #8]
 8005f2e:	4611      	mov	r1, r2
 8005f30:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	db7a      	blt.n	800602e <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f3e:	695b      	ldr	r3, [r3, #20]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d004      	beq.n	8005f4e <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f46:	3304      	adds	r3, #4
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f7fe fa37 	bl	80043bc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005f4e:	463b      	mov	r3, r7
 8005f50:	4618      	mov	r0, r3
 8005f52:	f7ff ff6d 	bl	8005e30 <prvSampleTimeNow>
 8005f56:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2b09      	cmp	r3, #9
 8005f5c:	d868      	bhi.n	8006030 <prvProcessReceivedCommands+0x13c>
 8005f5e:	a201      	add	r2, pc, #4	; (adr r2, 8005f64 <prvProcessReceivedCommands+0x70>)
 8005f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f64:	08005f8d 	.word	0x08005f8d
 8005f68:	08005f8d 	.word	0x08005f8d
 8005f6c:	08005f8d 	.word	0x08005f8d
 8005f70:	08006031 	.word	0x08006031
 8005f74:	08005fe7 	.word	0x08005fe7
 8005f78:	0800601d 	.word	0x0800601d
 8005f7c:	08005f8d 	.word	0x08005f8d
 8005f80:	08005f8d 	.word	0x08005f8d
 8005f84:	08006031 	.word	0x08006031
 8005f88:	08005fe7 	.word	0x08005fe7
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005f8c:	68ba      	ldr	r2, [r7, #8]
 8005f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f90:	699b      	ldr	r3, [r3, #24]
 8005f92:	18d1      	adds	r1, r2, r3
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f9a:	f7ff ff69 	bl	8005e70 <prvInsertTimerInActiveList>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d045      	beq.n	8006030 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005faa:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fae:	69db      	ldr	r3, [r3, #28]
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d13d      	bne.n	8006030 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005fb4:	68ba      	ldr	r2, [r7, #8]
 8005fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb8:	699b      	ldr	r3, [r3, #24]
 8005fba:	441a      	add	r2, r3
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	9300      	str	r3, [sp, #0]
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	2100      	movs	r1, #0
 8005fc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fc6:	f7ff fe23 	bl	8005c10 <xTimerGenericCommand>
 8005fca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005fcc:	6a3b      	ldr	r3, [r7, #32]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d12e      	bne.n	8006030 <prvProcessReceivedCommands+0x13c>
 8005fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd6:	f383 8811 	msr	BASEPRI, r3
 8005fda:	f3bf 8f6f 	isb	sy
 8005fde:	f3bf 8f4f 	dsb	sy
 8005fe2:	61bb      	str	r3, [r7, #24]
 8005fe4:	e7fe      	b.n	8005fe4 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005fe6:	68ba      	ldr	r2, [r7, #8]
 8005fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fea:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fee:	699b      	ldr	r3, [r3, #24]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d109      	bne.n	8006008 <prvProcessReceivedCommands+0x114>
 8005ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff8:	f383 8811 	msr	BASEPRI, r3
 8005ffc:	f3bf 8f6f 	isb	sy
 8006000:	f3bf 8f4f 	dsb	sy
 8006004:	617b      	str	r3, [r7, #20]
 8006006:	e7fe      	b.n	8006006 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800600a:	699a      	ldr	r2, [r3, #24]
 800600c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600e:	18d1      	adds	r1, r2, r3
 8006010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006014:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006016:	f7ff ff2b 	bl	8005e70 <prvInsertTimerInActiveList>
					break;
 800601a:	e009      	b.n	8006030 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800601c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800601e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006022:	2b00      	cmp	r3, #0
 8006024:	d104      	bne.n	8006030 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8006026:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006028:	f000 fb56 	bl	80066d8 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800602c:	e000      	b.n	8006030 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800602e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006030:	4b07      	ldr	r3, [pc, #28]	; (8006050 <prvProcessReceivedCommands+0x15c>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	1d39      	adds	r1, r7, #4
 8006036:	2200      	movs	r2, #0
 8006038:	4618      	mov	r0, r3
 800603a:	f7fe fc75 	bl	8004928 <xQueueReceive>
 800603e:	4603      	mov	r3, r0
 8006040:	2b00      	cmp	r3, #0
 8006042:	f47f af5b 	bne.w	8005efc <prvProcessReceivedCommands+0x8>
	}
}
 8006046:	bf00      	nop
 8006048:	3730      	adds	r7, #48	; 0x30
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
 800604e:	bf00      	nop
 8006050:	20000cbc 	.word	0x20000cbc

08006054 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b088      	sub	sp, #32
 8006058:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800605a:	e044      	b.n	80060e6 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800605c:	4b2b      	ldr	r3, [pc, #172]	; (800610c <prvSwitchTimerLists+0xb8>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	68db      	ldr	r3, [r3, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006066:	4b29      	ldr	r3, [pc, #164]	; (800610c <prvSwitchTimerLists+0xb8>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	3304      	adds	r3, #4
 8006074:	4618      	mov	r0, r3
 8006076:	f7fe f9a1 	bl	80043bc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607e:	68f8      	ldr	r0, [r7, #12]
 8006080:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	69db      	ldr	r3, [r3, #28]
 8006086:	2b01      	cmp	r3, #1
 8006088:	d12d      	bne.n	80060e6 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	699b      	ldr	r3, [r3, #24]
 800608e:	693a      	ldr	r2, [r7, #16]
 8006090:	4413      	add	r3, r2
 8006092:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006094:	68ba      	ldr	r2, [r7, #8]
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	429a      	cmp	r2, r3
 800609a:	d90e      	bls.n	80060ba <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	68ba      	ldr	r2, [r7, #8]
 80060a0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	68fa      	ldr	r2, [r7, #12]
 80060a6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80060a8:	4b18      	ldr	r3, [pc, #96]	; (800610c <prvSwitchTimerLists+0xb8>)
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	3304      	adds	r3, #4
 80060b0:	4619      	mov	r1, r3
 80060b2:	4610      	mov	r0, r2
 80060b4:	f7fe f94a 	bl	800434c <vListInsert>
 80060b8:	e015      	b.n	80060e6 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80060ba:	2300      	movs	r3, #0
 80060bc:	9300      	str	r3, [sp, #0]
 80060be:	2300      	movs	r3, #0
 80060c0:	693a      	ldr	r2, [r7, #16]
 80060c2:	2100      	movs	r1, #0
 80060c4:	68f8      	ldr	r0, [r7, #12]
 80060c6:	f7ff fda3 	bl	8005c10 <xTimerGenericCommand>
 80060ca:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d109      	bne.n	80060e6 <prvSwitchTimerLists+0x92>
 80060d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d6:	f383 8811 	msr	BASEPRI, r3
 80060da:	f3bf 8f6f 	isb	sy
 80060de:	f3bf 8f4f 	dsb	sy
 80060e2:	603b      	str	r3, [r7, #0]
 80060e4:	e7fe      	b.n	80060e4 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80060e6:	4b09      	ldr	r3, [pc, #36]	; (800610c <prvSwitchTimerLists+0xb8>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d1b5      	bne.n	800605c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80060f0:	4b06      	ldr	r3, [pc, #24]	; (800610c <prvSwitchTimerLists+0xb8>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80060f6:	4b06      	ldr	r3, [pc, #24]	; (8006110 <prvSwitchTimerLists+0xbc>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a04      	ldr	r2, [pc, #16]	; (800610c <prvSwitchTimerLists+0xb8>)
 80060fc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80060fe:	4a04      	ldr	r2, [pc, #16]	; (8006110 <prvSwitchTimerLists+0xbc>)
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	6013      	str	r3, [r2, #0]
}
 8006104:	bf00      	nop
 8006106:	3718      	adds	r7, #24
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}
 800610c:	20000cb4 	.word	0x20000cb4
 8006110:	20000cb8 	.word	0x20000cb8

08006114 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b082      	sub	sp, #8
 8006118:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800611a:	f000 f925 	bl	8006368 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800611e:	4b15      	ldr	r3, [pc, #84]	; (8006174 <prvCheckForValidListAndQueue+0x60>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d120      	bne.n	8006168 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006126:	4814      	ldr	r0, [pc, #80]	; (8006178 <prvCheckForValidListAndQueue+0x64>)
 8006128:	f7fe f8c2 	bl	80042b0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800612c:	4813      	ldr	r0, [pc, #76]	; (800617c <prvCheckForValidListAndQueue+0x68>)
 800612e:	f7fe f8bf 	bl	80042b0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006132:	4b13      	ldr	r3, [pc, #76]	; (8006180 <prvCheckForValidListAndQueue+0x6c>)
 8006134:	4a10      	ldr	r2, [pc, #64]	; (8006178 <prvCheckForValidListAndQueue+0x64>)
 8006136:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006138:	4b12      	ldr	r3, [pc, #72]	; (8006184 <prvCheckForValidListAndQueue+0x70>)
 800613a:	4a10      	ldr	r2, [pc, #64]	; (800617c <prvCheckForValidListAndQueue+0x68>)
 800613c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800613e:	2300      	movs	r3, #0
 8006140:	9300      	str	r3, [sp, #0]
 8006142:	4b11      	ldr	r3, [pc, #68]	; (8006188 <prvCheckForValidListAndQueue+0x74>)
 8006144:	4a11      	ldr	r2, [pc, #68]	; (800618c <prvCheckForValidListAndQueue+0x78>)
 8006146:	2110      	movs	r1, #16
 8006148:	200a      	movs	r0, #10
 800614a:	f7fe f9c9 	bl	80044e0 <xQueueGenericCreateStatic>
 800614e:	4602      	mov	r2, r0
 8006150:	4b08      	ldr	r3, [pc, #32]	; (8006174 <prvCheckForValidListAndQueue+0x60>)
 8006152:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006154:	4b07      	ldr	r3, [pc, #28]	; (8006174 <prvCheckForValidListAndQueue+0x60>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d005      	beq.n	8006168 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800615c:	4b05      	ldr	r3, [pc, #20]	; (8006174 <prvCheckForValidListAndQueue+0x60>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	490b      	ldr	r1, [pc, #44]	; (8006190 <prvCheckForValidListAndQueue+0x7c>)
 8006162:	4618      	mov	r0, r3
 8006164:	f7fe fdcc 	bl	8004d00 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006168:	f000 f92c 	bl	80063c4 <vPortExitCritical>
}
 800616c:	bf00      	nop
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop
 8006174:	20000cbc 	.word	0x20000cbc
 8006178:	20000c8c 	.word	0x20000c8c
 800617c:	20000ca0 	.word	0x20000ca0
 8006180:	20000cb4 	.word	0x20000cb4
 8006184:	20000cb8 	.word	0x20000cb8
 8006188:	20000d68 	.word	0x20000d68
 800618c:	20000cc8 	.word	0x20000cc8
 8006190:	08007b7c 	.word	0x08007b7c

08006194 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006194:	b480      	push	{r7}
 8006196:	b085      	sub	sp, #20
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	3b04      	subs	r3, #4
 80061a4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80061ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	3b04      	subs	r3, #4
 80061b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	f023 0201 	bic.w	r2, r3, #1
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	3b04      	subs	r3, #4
 80061c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80061c4:	4a08      	ldr	r2, [pc, #32]	; (80061e8 <pxPortInitialiseStack+0x54>)
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	3b14      	subs	r3, #20
 80061ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	3b20      	subs	r3, #32
 80061da:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80061dc:	68fb      	ldr	r3, [r7, #12]
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3714      	adds	r7, #20
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bc80      	pop	{r7}
 80061e6:	4770      	bx	lr
 80061e8:	080061ed 	.word	0x080061ed

080061ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80061ec:	b480      	push	{r7}
 80061ee:	b085      	sub	sp, #20
 80061f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80061f2:	2300      	movs	r3, #0
 80061f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80061f6:	4b10      	ldr	r3, [pc, #64]	; (8006238 <prvTaskExitError+0x4c>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061fe:	d009      	beq.n	8006214 <prvTaskExitError+0x28>
 8006200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006204:	f383 8811 	msr	BASEPRI, r3
 8006208:	f3bf 8f6f 	isb	sy
 800620c:	f3bf 8f4f 	dsb	sy
 8006210:	60fb      	str	r3, [r7, #12]
 8006212:	e7fe      	b.n	8006212 <prvTaskExitError+0x26>
 8006214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006218:	f383 8811 	msr	BASEPRI, r3
 800621c:	f3bf 8f6f 	isb	sy
 8006220:	f3bf 8f4f 	dsb	sy
 8006224:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006226:	bf00      	nop
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d0fc      	beq.n	8006228 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800622e:	bf00      	nop
 8006230:	3714      	adds	r7, #20
 8006232:	46bd      	mov	sp, r7
 8006234:	bc80      	pop	{r7}
 8006236:	4770      	bx	lr
 8006238:	20000014 	.word	0x20000014
 800623c:	00000000 	.word	0x00000000

08006240 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006240:	4b07      	ldr	r3, [pc, #28]	; (8006260 <pxCurrentTCBConst2>)
 8006242:	6819      	ldr	r1, [r3, #0]
 8006244:	6808      	ldr	r0, [r1, #0]
 8006246:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800624a:	f380 8809 	msr	PSP, r0
 800624e:	f3bf 8f6f 	isb	sy
 8006252:	f04f 0000 	mov.w	r0, #0
 8006256:	f380 8811 	msr	BASEPRI, r0
 800625a:	f04e 0e0d 	orr.w	lr, lr, #13
 800625e:	4770      	bx	lr

08006260 <pxCurrentTCBConst2>:
 8006260:	2000078c 	.word	0x2000078c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006264:	bf00      	nop
 8006266:	bf00      	nop

08006268 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006268:	4806      	ldr	r0, [pc, #24]	; (8006284 <prvPortStartFirstTask+0x1c>)
 800626a:	6800      	ldr	r0, [r0, #0]
 800626c:	6800      	ldr	r0, [r0, #0]
 800626e:	f380 8808 	msr	MSP, r0
 8006272:	b662      	cpsie	i
 8006274:	b661      	cpsie	f
 8006276:	f3bf 8f4f 	dsb	sy
 800627a:	f3bf 8f6f 	isb	sy
 800627e:	df00      	svc	0
 8006280:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006282:	bf00      	nop
 8006284:	e000ed08 	.word	0xe000ed08

08006288 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b084      	sub	sp, #16
 800628c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800628e:	4b31      	ldr	r3, [pc, #196]	; (8006354 <xPortStartScheduler+0xcc>)
 8006290:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	b2db      	uxtb	r3, r3
 8006298:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	22ff      	movs	r2, #255	; 0xff
 800629e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80062a8:	78fb      	ldrb	r3, [r7, #3]
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80062b0:	b2da      	uxtb	r2, r3
 80062b2:	4b29      	ldr	r3, [pc, #164]	; (8006358 <xPortStartScheduler+0xd0>)
 80062b4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80062b6:	4b29      	ldr	r3, [pc, #164]	; (800635c <xPortStartScheduler+0xd4>)
 80062b8:	2207      	movs	r2, #7
 80062ba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80062bc:	e009      	b.n	80062d2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80062be:	4b27      	ldr	r3, [pc, #156]	; (800635c <xPortStartScheduler+0xd4>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	3b01      	subs	r3, #1
 80062c4:	4a25      	ldr	r2, [pc, #148]	; (800635c <xPortStartScheduler+0xd4>)
 80062c6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80062c8:	78fb      	ldrb	r3, [r7, #3]
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	005b      	lsls	r3, r3, #1
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80062d2:	78fb      	ldrb	r3, [r7, #3]
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062da:	2b80      	cmp	r3, #128	; 0x80
 80062dc:	d0ef      	beq.n	80062be <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80062de:	4b1f      	ldr	r3, [pc, #124]	; (800635c <xPortStartScheduler+0xd4>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f1c3 0307 	rsb	r3, r3, #7
 80062e6:	2b04      	cmp	r3, #4
 80062e8:	d009      	beq.n	80062fe <xPortStartScheduler+0x76>
 80062ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ee:	f383 8811 	msr	BASEPRI, r3
 80062f2:	f3bf 8f6f 	isb	sy
 80062f6:	f3bf 8f4f 	dsb	sy
 80062fa:	60bb      	str	r3, [r7, #8]
 80062fc:	e7fe      	b.n	80062fc <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80062fe:	4b17      	ldr	r3, [pc, #92]	; (800635c <xPortStartScheduler+0xd4>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	021b      	lsls	r3, r3, #8
 8006304:	4a15      	ldr	r2, [pc, #84]	; (800635c <xPortStartScheduler+0xd4>)
 8006306:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006308:	4b14      	ldr	r3, [pc, #80]	; (800635c <xPortStartScheduler+0xd4>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006310:	4a12      	ldr	r2, [pc, #72]	; (800635c <xPortStartScheduler+0xd4>)
 8006312:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	b2da      	uxtb	r2, r3
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800631c:	4b10      	ldr	r3, [pc, #64]	; (8006360 <xPortStartScheduler+0xd8>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a0f      	ldr	r2, [pc, #60]	; (8006360 <xPortStartScheduler+0xd8>)
 8006322:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006326:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006328:	4b0d      	ldr	r3, [pc, #52]	; (8006360 <xPortStartScheduler+0xd8>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a0c      	ldr	r2, [pc, #48]	; (8006360 <xPortStartScheduler+0xd8>)
 800632e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006332:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006334:	f000 f8b0 	bl	8006498 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006338:	4b0a      	ldr	r3, [pc, #40]	; (8006364 <xPortStartScheduler+0xdc>)
 800633a:	2200      	movs	r2, #0
 800633c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800633e:	f7ff ff93 	bl	8006268 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006342:	f7ff f8db 	bl	80054fc <vTaskSwitchContext>
	prvTaskExitError();
 8006346:	f7ff ff51 	bl	80061ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800634a:	2300      	movs	r3, #0
}
 800634c:	4618      	mov	r0, r3
 800634e:	3710      	adds	r7, #16
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}
 8006354:	e000e400 	.word	0xe000e400
 8006358:	20000db8 	.word	0x20000db8
 800635c:	20000dbc 	.word	0x20000dbc
 8006360:	e000ed20 	.word	0xe000ed20
 8006364:	20000014 	.word	0x20000014

08006368 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006372:	f383 8811 	msr	BASEPRI, r3
 8006376:	f3bf 8f6f 	isb	sy
 800637a:	f3bf 8f4f 	dsb	sy
 800637e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006380:	4b0e      	ldr	r3, [pc, #56]	; (80063bc <vPortEnterCritical+0x54>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	3301      	adds	r3, #1
 8006386:	4a0d      	ldr	r2, [pc, #52]	; (80063bc <vPortEnterCritical+0x54>)
 8006388:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800638a:	4b0c      	ldr	r3, [pc, #48]	; (80063bc <vPortEnterCritical+0x54>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	2b01      	cmp	r3, #1
 8006390:	d10e      	bne.n	80063b0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006392:	4b0b      	ldr	r3, [pc, #44]	; (80063c0 <vPortEnterCritical+0x58>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	b2db      	uxtb	r3, r3
 8006398:	2b00      	cmp	r3, #0
 800639a:	d009      	beq.n	80063b0 <vPortEnterCritical+0x48>
 800639c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a0:	f383 8811 	msr	BASEPRI, r3
 80063a4:	f3bf 8f6f 	isb	sy
 80063a8:	f3bf 8f4f 	dsb	sy
 80063ac:	603b      	str	r3, [r7, #0]
 80063ae:	e7fe      	b.n	80063ae <vPortEnterCritical+0x46>
	}
}
 80063b0:	bf00      	nop
 80063b2:	370c      	adds	r7, #12
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bc80      	pop	{r7}
 80063b8:	4770      	bx	lr
 80063ba:	bf00      	nop
 80063bc:	20000014 	.word	0x20000014
 80063c0:	e000ed04 	.word	0xe000ed04

080063c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80063c4:	b480      	push	{r7}
 80063c6:	b083      	sub	sp, #12
 80063c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80063ca:	4b10      	ldr	r3, [pc, #64]	; (800640c <vPortExitCritical+0x48>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d109      	bne.n	80063e6 <vPortExitCritical+0x22>
 80063d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d6:	f383 8811 	msr	BASEPRI, r3
 80063da:	f3bf 8f6f 	isb	sy
 80063de:	f3bf 8f4f 	dsb	sy
 80063e2:	607b      	str	r3, [r7, #4]
 80063e4:	e7fe      	b.n	80063e4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80063e6:	4b09      	ldr	r3, [pc, #36]	; (800640c <vPortExitCritical+0x48>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	3b01      	subs	r3, #1
 80063ec:	4a07      	ldr	r2, [pc, #28]	; (800640c <vPortExitCritical+0x48>)
 80063ee:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80063f0:	4b06      	ldr	r3, [pc, #24]	; (800640c <vPortExitCritical+0x48>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d104      	bne.n	8006402 <vPortExitCritical+0x3e>
 80063f8:	2300      	movs	r3, #0
 80063fa:	603b      	str	r3, [r7, #0]
	__asm volatile
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006402:	bf00      	nop
 8006404:	370c      	adds	r7, #12
 8006406:	46bd      	mov	sp, r7
 8006408:	bc80      	pop	{r7}
 800640a:	4770      	bx	lr
 800640c:	20000014 	.word	0x20000014

08006410 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006410:	f3ef 8009 	mrs	r0, PSP
 8006414:	f3bf 8f6f 	isb	sy
 8006418:	4b0d      	ldr	r3, [pc, #52]	; (8006450 <pxCurrentTCBConst>)
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006420:	6010      	str	r0, [r2, #0]
 8006422:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006426:	f04f 0050 	mov.w	r0, #80	; 0x50
 800642a:	f380 8811 	msr	BASEPRI, r0
 800642e:	f7ff f865 	bl	80054fc <vTaskSwitchContext>
 8006432:	f04f 0000 	mov.w	r0, #0
 8006436:	f380 8811 	msr	BASEPRI, r0
 800643a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800643e:	6819      	ldr	r1, [r3, #0]
 8006440:	6808      	ldr	r0, [r1, #0]
 8006442:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006446:	f380 8809 	msr	PSP, r0
 800644a:	f3bf 8f6f 	isb	sy
 800644e:	4770      	bx	lr

08006450 <pxCurrentTCBConst>:
 8006450:	2000078c 	.word	0x2000078c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006454:	bf00      	nop
 8006456:	bf00      	nop

08006458 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b082      	sub	sp, #8
 800645c:	af00      	add	r7, sp, #0
	__asm volatile
 800645e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006462:	f383 8811 	msr	BASEPRI, r3
 8006466:	f3bf 8f6f 	isb	sy
 800646a:	f3bf 8f4f 	dsb	sy
 800646e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006470:	f7fe ff86 	bl	8005380 <xTaskIncrementTick>
 8006474:	4603      	mov	r3, r0
 8006476:	2b00      	cmp	r3, #0
 8006478:	d003      	beq.n	8006482 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800647a:	4b06      	ldr	r3, [pc, #24]	; (8006494 <xPortSysTickHandler+0x3c>)
 800647c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006480:	601a      	str	r2, [r3, #0]
 8006482:	2300      	movs	r3, #0
 8006484:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800648c:	bf00      	nop
 800648e:	3708      	adds	r7, #8
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}
 8006494:	e000ed04 	.word	0xe000ed04

08006498 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006498:	b480      	push	{r7}
 800649a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800649c:	4b0a      	ldr	r3, [pc, #40]	; (80064c8 <vPortSetupTimerInterrupt+0x30>)
 800649e:	2200      	movs	r2, #0
 80064a0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80064a2:	4b0a      	ldr	r3, [pc, #40]	; (80064cc <vPortSetupTimerInterrupt+0x34>)
 80064a4:	2200      	movs	r2, #0
 80064a6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80064a8:	4b09      	ldr	r3, [pc, #36]	; (80064d0 <vPortSetupTimerInterrupt+0x38>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a09      	ldr	r2, [pc, #36]	; (80064d4 <vPortSetupTimerInterrupt+0x3c>)
 80064ae:	fba2 2303 	umull	r2, r3, r2, r3
 80064b2:	099b      	lsrs	r3, r3, #6
 80064b4:	4a08      	ldr	r2, [pc, #32]	; (80064d8 <vPortSetupTimerInterrupt+0x40>)
 80064b6:	3b01      	subs	r3, #1
 80064b8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80064ba:	4b03      	ldr	r3, [pc, #12]	; (80064c8 <vPortSetupTimerInterrupt+0x30>)
 80064bc:	2207      	movs	r2, #7
 80064be:	601a      	str	r2, [r3, #0]
}
 80064c0:	bf00      	nop
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bc80      	pop	{r7}
 80064c6:	4770      	bx	lr
 80064c8:	e000e010 	.word	0xe000e010
 80064cc:	e000e018 	.word	0xe000e018
 80064d0:	20000008 	.word	0x20000008
 80064d4:	10624dd3 	.word	0x10624dd3
 80064d8:	e000e014 	.word	0xe000e014

080064dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80064dc:	b480      	push	{r7}
 80064de:	b085      	sub	sp, #20
 80064e0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80064e2:	f3ef 8305 	mrs	r3, IPSR
 80064e6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2b0f      	cmp	r3, #15
 80064ec:	d913      	bls.n	8006516 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80064ee:	4a15      	ldr	r2, [pc, #84]	; (8006544 <vPortValidateInterruptPriority+0x68>)
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	4413      	add	r3, r2
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80064f8:	4b13      	ldr	r3, [pc, #76]	; (8006548 <vPortValidateInterruptPriority+0x6c>)
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	7afa      	ldrb	r2, [r7, #11]
 80064fe:	429a      	cmp	r2, r3
 8006500:	d209      	bcs.n	8006516 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8006502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006506:	f383 8811 	msr	BASEPRI, r3
 800650a:	f3bf 8f6f 	isb	sy
 800650e:	f3bf 8f4f 	dsb	sy
 8006512:	607b      	str	r3, [r7, #4]
 8006514:	e7fe      	b.n	8006514 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006516:	4b0d      	ldr	r3, [pc, #52]	; (800654c <vPortValidateInterruptPriority+0x70>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800651e:	4b0c      	ldr	r3, [pc, #48]	; (8006550 <vPortValidateInterruptPriority+0x74>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	429a      	cmp	r2, r3
 8006524:	d909      	bls.n	800653a <vPortValidateInterruptPriority+0x5e>
 8006526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800652a:	f383 8811 	msr	BASEPRI, r3
 800652e:	f3bf 8f6f 	isb	sy
 8006532:	f3bf 8f4f 	dsb	sy
 8006536:	603b      	str	r3, [r7, #0]
 8006538:	e7fe      	b.n	8006538 <vPortValidateInterruptPriority+0x5c>
	}
 800653a:	bf00      	nop
 800653c:	3714      	adds	r7, #20
 800653e:	46bd      	mov	sp, r7
 8006540:	bc80      	pop	{r7}
 8006542:	4770      	bx	lr
 8006544:	e000e3f0 	.word	0xe000e3f0
 8006548:	20000db8 	.word	0x20000db8
 800654c:	e000ed0c 	.word	0xe000ed0c
 8006550:	20000dbc 	.word	0x20000dbc

08006554 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b08a      	sub	sp, #40	; 0x28
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800655c:	2300      	movs	r3, #0
 800655e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006560:	f7fe fe56 	bl	8005210 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006564:	4b57      	ldr	r3, [pc, #348]	; (80066c4 <pvPortMalloc+0x170>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d101      	bne.n	8006570 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800656c:	f000 f90c 	bl	8006788 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006570:	4b55      	ldr	r3, [pc, #340]	; (80066c8 <pvPortMalloc+0x174>)
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	4013      	ands	r3, r2
 8006578:	2b00      	cmp	r3, #0
 800657a:	f040 808c 	bne.w	8006696 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d01c      	beq.n	80065be <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006584:	2208      	movs	r2, #8
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4413      	add	r3, r2
 800658a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f003 0307 	and.w	r3, r3, #7
 8006592:	2b00      	cmp	r3, #0
 8006594:	d013      	beq.n	80065be <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f023 0307 	bic.w	r3, r3, #7
 800659c:	3308      	adds	r3, #8
 800659e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f003 0307 	and.w	r3, r3, #7
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d009      	beq.n	80065be <pvPortMalloc+0x6a>
 80065aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ae:	f383 8811 	msr	BASEPRI, r3
 80065b2:	f3bf 8f6f 	isb	sy
 80065b6:	f3bf 8f4f 	dsb	sy
 80065ba:	617b      	str	r3, [r7, #20]
 80065bc:	e7fe      	b.n	80065bc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d068      	beq.n	8006696 <pvPortMalloc+0x142>
 80065c4:	4b41      	ldr	r3, [pc, #260]	; (80066cc <pvPortMalloc+0x178>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	687a      	ldr	r2, [r7, #4]
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d863      	bhi.n	8006696 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80065ce:	4b40      	ldr	r3, [pc, #256]	; (80066d0 <pvPortMalloc+0x17c>)
 80065d0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80065d2:	4b3f      	ldr	r3, [pc, #252]	; (80066d0 <pvPortMalloc+0x17c>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80065d8:	e004      	b.n	80065e4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80065da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065dc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80065de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80065e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d903      	bls.n	80065f6 <pvPortMalloc+0xa2>
 80065ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d1f1      	bne.n	80065da <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80065f6:	4b33      	ldr	r3, [pc, #204]	; (80066c4 <pvPortMalloc+0x170>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d04a      	beq.n	8006696 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006600:	6a3b      	ldr	r3, [r7, #32]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	2208      	movs	r2, #8
 8006606:	4413      	add	r3, r2
 8006608:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800660a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	6a3b      	ldr	r3, [r7, #32]
 8006610:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006614:	685a      	ldr	r2, [r3, #4]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	1ad2      	subs	r2, r2, r3
 800661a:	2308      	movs	r3, #8
 800661c:	005b      	lsls	r3, r3, #1
 800661e:	429a      	cmp	r2, r3
 8006620:	d91e      	bls.n	8006660 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006622:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	4413      	add	r3, r2
 8006628:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800662a:	69bb      	ldr	r3, [r7, #24]
 800662c:	f003 0307 	and.w	r3, r3, #7
 8006630:	2b00      	cmp	r3, #0
 8006632:	d009      	beq.n	8006648 <pvPortMalloc+0xf4>
 8006634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006638:	f383 8811 	msr	BASEPRI, r3
 800663c:	f3bf 8f6f 	isb	sy
 8006640:	f3bf 8f4f 	dsb	sy
 8006644:	613b      	str	r3, [r7, #16]
 8006646:	e7fe      	b.n	8006646 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664a:	685a      	ldr	r2, [r3, #4]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	1ad2      	subs	r2, r2, r3
 8006650:	69bb      	ldr	r3, [r7, #24]
 8006652:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800665a:	69b8      	ldr	r0, [r7, #24]
 800665c:	f000 f8f6 	bl	800684c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006660:	4b1a      	ldr	r3, [pc, #104]	; (80066cc <pvPortMalloc+0x178>)
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	1ad3      	subs	r3, r2, r3
 800666a:	4a18      	ldr	r2, [pc, #96]	; (80066cc <pvPortMalloc+0x178>)
 800666c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800666e:	4b17      	ldr	r3, [pc, #92]	; (80066cc <pvPortMalloc+0x178>)
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	4b18      	ldr	r3, [pc, #96]	; (80066d4 <pvPortMalloc+0x180>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	429a      	cmp	r2, r3
 8006678:	d203      	bcs.n	8006682 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800667a:	4b14      	ldr	r3, [pc, #80]	; (80066cc <pvPortMalloc+0x178>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a15      	ldr	r2, [pc, #84]	; (80066d4 <pvPortMalloc+0x180>)
 8006680:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006684:	685a      	ldr	r2, [r3, #4]
 8006686:	4b10      	ldr	r3, [pc, #64]	; (80066c8 <pvPortMalloc+0x174>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	431a      	orrs	r2, r3
 800668c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006692:	2200      	movs	r2, #0
 8006694:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006696:	f7fe fdc9 	bl	800522c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800669a:	69fb      	ldr	r3, [r7, #28]
 800669c:	f003 0307 	and.w	r3, r3, #7
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d009      	beq.n	80066b8 <pvPortMalloc+0x164>
 80066a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a8:	f383 8811 	msr	BASEPRI, r3
 80066ac:	f3bf 8f6f 	isb	sy
 80066b0:	f3bf 8f4f 	dsb	sy
 80066b4:	60fb      	str	r3, [r7, #12]
 80066b6:	e7fe      	b.n	80066b6 <pvPortMalloc+0x162>
	return pvReturn;
 80066b8:	69fb      	ldr	r3, [r7, #28]
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3728      	adds	r7, #40	; 0x28
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	200019c8 	.word	0x200019c8
 80066c8:	200019d4 	.word	0x200019d4
 80066cc:	200019cc 	.word	0x200019cc
 80066d0:	200019c0 	.word	0x200019c0
 80066d4:	200019d0 	.word	0x200019d0

080066d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b086      	sub	sp, #24
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d046      	beq.n	8006778 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80066ea:	2308      	movs	r3, #8
 80066ec:	425b      	negs	r3, r3
 80066ee:	697a      	ldr	r2, [r7, #20]
 80066f0:	4413      	add	r3, r2
 80066f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	685a      	ldr	r2, [r3, #4]
 80066fc:	4b20      	ldr	r3, [pc, #128]	; (8006780 <vPortFree+0xa8>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4013      	ands	r3, r2
 8006702:	2b00      	cmp	r3, #0
 8006704:	d109      	bne.n	800671a <vPortFree+0x42>
 8006706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800670a:	f383 8811 	msr	BASEPRI, r3
 800670e:	f3bf 8f6f 	isb	sy
 8006712:	f3bf 8f4f 	dsb	sy
 8006716:	60fb      	str	r3, [r7, #12]
 8006718:	e7fe      	b.n	8006718 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d009      	beq.n	8006736 <vPortFree+0x5e>
 8006722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006726:	f383 8811 	msr	BASEPRI, r3
 800672a:	f3bf 8f6f 	isb	sy
 800672e:	f3bf 8f4f 	dsb	sy
 8006732:	60bb      	str	r3, [r7, #8]
 8006734:	e7fe      	b.n	8006734 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	685a      	ldr	r2, [r3, #4]
 800673a:	4b11      	ldr	r3, [pc, #68]	; (8006780 <vPortFree+0xa8>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4013      	ands	r3, r2
 8006740:	2b00      	cmp	r3, #0
 8006742:	d019      	beq.n	8006778 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d115      	bne.n	8006778 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	685a      	ldr	r2, [r3, #4]
 8006750:	4b0b      	ldr	r3, [pc, #44]	; (8006780 <vPortFree+0xa8>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	43db      	mvns	r3, r3
 8006756:	401a      	ands	r2, r3
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800675c:	f7fe fd58 	bl	8005210 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	685a      	ldr	r2, [r3, #4]
 8006764:	4b07      	ldr	r3, [pc, #28]	; (8006784 <vPortFree+0xac>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4413      	add	r3, r2
 800676a:	4a06      	ldr	r2, [pc, #24]	; (8006784 <vPortFree+0xac>)
 800676c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800676e:	6938      	ldr	r0, [r7, #16]
 8006770:	f000 f86c 	bl	800684c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006774:	f7fe fd5a 	bl	800522c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006778:	bf00      	nop
 800677a:	3718      	adds	r7, #24
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}
 8006780:	200019d4 	.word	0x200019d4
 8006784:	200019cc 	.word	0x200019cc

08006788 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006788:	b480      	push	{r7}
 800678a:	b085      	sub	sp, #20
 800678c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800678e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006792:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006794:	4b27      	ldr	r3, [pc, #156]	; (8006834 <prvHeapInit+0xac>)
 8006796:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f003 0307 	and.w	r3, r3, #7
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00c      	beq.n	80067bc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	3307      	adds	r3, #7
 80067a6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f023 0307 	bic.w	r3, r3, #7
 80067ae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80067b0:	68ba      	ldr	r2, [r7, #8]
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	1ad3      	subs	r3, r2, r3
 80067b6:	4a1f      	ldr	r2, [pc, #124]	; (8006834 <prvHeapInit+0xac>)
 80067b8:	4413      	add	r3, r2
 80067ba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80067c0:	4a1d      	ldr	r2, [pc, #116]	; (8006838 <prvHeapInit+0xb0>)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80067c6:	4b1c      	ldr	r3, [pc, #112]	; (8006838 <prvHeapInit+0xb0>)
 80067c8:	2200      	movs	r2, #0
 80067ca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	68ba      	ldr	r2, [r7, #8]
 80067d0:	4413      	add	r3, r2
 80067d2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80067d4:	2208      	movs	r2, #8
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	1a9b      	subs	r3, r3, r2
 80067da:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f023 0307 	bic.w	r3, r3, #7
 80067e2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	4a15      	ldr	r2, [pc, #84]	; (800683c <prvHeapInit+0xb4>)
 80067e8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80067ea:	4b14      	ldr	r3, [pc, #80]	; (800683c <prvHeapInit+0xb4>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	2200      	movs	r2, #0
 80067f0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80067f2:	4b12      	ldr	r3, [pc, #72]	; (800683c <prvHeapInit+0xb4>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	2200      	movs	r2, #0
 80067f8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	68fa      	ldr	r2, [r7, #12]
 8006802:	1ad2      	subs	r2, r2, r3
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006808:	4b0c      	ldr	r3, [pc, #48]	; (800683c <prvHeapInit+0xb4>)
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	4a0a      	ldr	r2, [pc, #40]	; (8006840 <prvHeapInit+0xb8>)
 8006816:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	4a09      	ldr	r2, [pc, #36]	; (8006844 <prvHeapInit+0xbc>)
 800681e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006820:	4b09      	ldr	r3, [pc, #36]	; (8006848 <prvHeapInit+0xc0>)
 8006822:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006826:	601a      	str	r2, [r3, #0]
}
 8006828:	bf00      	nop
 800682a:	3714      	adds	r7, #20
 800682c:	46bd      	mov	sp, r7
 800682e:	bc80      	pop	{r7}
 8006830:	4770      	bx	lr
 8006832:	bf00      	nop
 8006834:	20000dc0 	.word	0x20000dc0
 8006838:	200019c0 	.word	0x200019c0
 800683c:	200019c8 	.word	0x200019c8
 8006840:	200019d0 	.word	0x200019d0
 8006844:	200019cc 	.word	0x200019cc
 8006848:	200019d4 	.word	0x200019d4

0800684c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800684c:	b480      	push	{r7}
 800684e:	b085      	sub	sp, #20
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006854:	4b27      	ldr	r3, [pc, #156]	; (80068f4 <prvInsertBlockIntoFreeList+0xa8>)
 8006856:	60fb      	str	r3, [r7, #12]
 8006858:	e002      	b.n	8006860 <prvInsertBlockIntoFreeList+0x14>
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	60fb      	str	r3, [r7, #12]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	429a      	cmp	r2, r3
 8006868:	d8f7      	bhi.n	800685a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	68ba      	ldr	r2, [r7, #8]
 8006874:	4413      	add	r3, r2
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	429a      	cmp	r2, r3
 800687a:	d108      	bne.n	800688e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	685a      	ldr	r2, [r3, #4]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	441a      	add	r2, r3
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	68ba      	ldr	r2, [r7, #8]
 8006898:	441a      	add	r2, r3
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	429a      	cmp	r2, r3
 80068a0:	d118      	bne.n	80068d4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	4b14      	ldr	r3, [pc, #80]	; (80068f8 <prvInsertBlockIntoFreeList+0xac>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d00d      	beq.n	80068ca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	685a      	ldr	r2, [r3, #4]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	441a      	add	r2, r3
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	601a      	str	r2, [r3, #0]
 80068c8:	e008      	b.n	80068dc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80068ca:	4b0b      	ldr	r3, [pc, #44]	; (80068f8 <prvInsertBlockIntoFreeList+0xac>)
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	601a      	str	r2, [r3, #0]
 80068d2:	e003      	b.n	80068dc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80068dc:	68fa      	ldr	r2, [r7, #12]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d002      	beq.n	80068ea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80068ea:	bf00      	nop
 80068ec:	3714      	adds	r7, #20
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bc80      	pop	{r7}
 80068f2:	4770      	bx	lr
 80068f4:	200019c0 	.word	0x200019c0
 80068f8:	200019c8 	.word	0x200019c8

080068fc <__errno>:
 80068fc:	4b01      	ldr	r3, [pc, #4]	; (8006904 <__errno+0x8>)
 80068fe:	6818      	ldr	r0, [r3, #0]
 8006900:	4770      	bx	lr
 8006902:	bf00      	nop
 8006904:	20000018 	.word	0x20000018

08006908 <__libc_init_array>:
 8006908:	b570      	push	{r4, r5, r6, lr}
 800690a:	2500      	movs	r5, #0
 800690c:	4e0c      	ldr	r6, [pc, #48]	; (8006940 <__libc_init_array+0x38>)
 800690e:	4c0d      	ldr	r4, [pc, #52]	; (8006944 <__libc_init_array+0x3c>)
 8006910:	1ba4      	subs	r4, r4, r6
 8006912:	10a4      	asrs	r4, r4, #2
 8006914:	42a5      	cmp	r5, r4
 8006916:	d109      	bne.n	800692c <__libc_init_array+0x24>
 8006918:	f000 fffe 	bl	8007918 <_init>
 800691c:	2500      	movs	r5, #0
 800691e:	4e0a      	ldr	r6, [pc, #40]	; (8006948 <__libc_init_array+0x40>)
 8006920:	4c0a      	ldr	r4, [pc, #40]	; (800694c <__libc_init_array+0x44>)
 8006922:	1ba4      	subs	r4, r4, r6
 8006924:	10a4      	asrs	r4, r4, #2
 8006926:	42a5      	cmp	r5, r4
 8006928:	d105      	bne.n	8006936 <__libc_init_array+0x2e>
 800692a:	bd70      	pop	{r4, r5, r6, pc}
 800692c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006930:	4798      	blx	r3
 8006932:	3501      	adds	r5, #1
 8006934:	e7ee      	b.n	8006914 <__libc_init_array+0xc>
 8006936:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800693a:	4798      	blx	r3
 800693c:	3501      	adds	r5, #1
 800693e:	e7f2      	b.n	8006926 <__libc_init_array+0x1e>
 8006940:	08007ca0 	.word	0x08007ca0
 8006944:	08007ca0 	.word	0x08007ca0
 8006948:	08007ca0 	.word	0x08007ca0
 800694c:	08007ca4 	.word	0x08007ca4

08006950 <memcpy>:
 8006950:	b510      	push	{r4, lr}
 8006952:	1e43      	subs	r3, r0, #1
 8006954:	440a      	add	r2, r1
 8006956:	4291      	cmp	r1, r2
 8006958:	d100      	bne.n	800695c <memcpy+0xc>
 800695a:	bd10      	pop	{r4, pc}
 800695c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006960:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006964:	e7f7      	b.n	8006956 <memcpy+0x6>

08006966 <memset>:
 8006966:	4603      	mov	r3, r0
 8006968:	4402      	add	r2, r0
 800696a:	4293      	cmp	r3, r2
 800696c:	d100      	bne.n	8006970 <memset+0xa>
 800696e:	4770      	bx	lr
 8006970:	f803 1b01 	strb.w	r1, [r3], #1
 8006974:	e7f9      	b.n	800696a <memset+0x4>
	...

08006978 <_puts_r>:
 8006978:	b570      	push	{r4, r5, r6, lr}
 800697a:	460e      	mov	r6, r1
 800697c:	4605      	mov	r5, r0
 800697e:	b118      	cbz	r0, 8006988 <_puts_r+0x10>
 8006980:	6983      	ldr	r3, [r0, #24]
 8006982:	b90b      	cbnz	r3, 8006988 <_puts_r+0x10>
 8006984:	f000 fa46 	bl	8006e14 <__sinit>
 8006988:	69ab      	ldr	r3, [r5, #24]
 800698a:	68ac      	ldr	r4, [r5, #8]
 800698c:	b913      	cbnz	r3, 8006994 <_puts_r+0x1c>
 800698e:	4628      	mov	r0, r5
 8006990:	f000 fa40 	bl	8006e14 <__sinit>
 8006994:	4b23      	ldr	r3, [pc, #140]	; (8006a24 <_puts_r+0xac>)
 8006996:	429c      	cmp	r4, r3
 8006998:	d117      	bne.n	80069ca <_puts_r+0x52>
 800699a:	686c      	ldr	r4, [r5, #4]
 800699c:	89a3      	ldrh	r3, [r4, #12]
 800699e:	071b      	lsls	r3, r3, #28
 80069a0:	d51d      	bpl.n	80069de <_puts_r+0x66>
 80069a2:	6923      	ldr	r3, [r4, #16]
 80069a4:	b1db      	cbz	r3, 80069de <_puts_r+0x66>
 80069a6:	3e01      	subs	r6, #1
 80069a8:	68a3      	ldr	r3, [r4, #8]
 80069aa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80069ae:	3b01      	subs	r3, #1
 80069b0:	60a3      	str	r3, [r4, #8]
 80069b2:	b9e9      	cbnz	r1, 80069f0 <_puts_r+0x78>
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	da2e      	bge.n	8006a16 <_puts_r+0x9e>
 80069b8:	4622      	mov	r2, r4
 80069ba:	210a      	movs	r1, #10
 80069bc:	4628      	mov	r0, r5
 80069be:	f000 f879 	bl	8006ab4 <__swbuf_r>
 80069c2:	3001      	adds	r0, #1
 80069c4:	d011      	beq.n	80069ea <_puts_r+0x72>
 80069c6:	200a      	movs	r0, #10
 80069c8:	e011      	b.n	80069ee <_puts_r+0x76>
 80069ca:	4b17      	ldr	r3, [pc, #92]	; (8006a28 <_puts_r+0xb0>)
 80069cc:	429c      	cmp	r4, r3
 80069ce:	d101      	bne.n	80069d4 <_puts_r+0x5c>
 80069d0:	68ac      	ldr	r4, [r5, #8]
 80069d2:	e7e3      	b.n	800699c <_puts_r+0x24>
 80069d4:	4b15      	ldr	r3, [pc, #84]	; (8006a2c <_puts_r+0xb4>)
 80069d6:	429c      	cmp	r4, r3
 80069d8:	bf08      	it	eq
 80069da:	68ec      	ldreq	r4, [r5, #12]
 80069dc:	e7de      	b.n	800699c <_puts_r+0x24>
 80069de:	4621      	mov	r1, r4
 80069e0:	4628      	mov	r0, r5
 80069e2:	f000 f8b9 	bl	8006b58 <__swsetup_r>
 80069e6:	2800      	cmp	r0, #0
 80069e8:	d0dd      	beq.n	80069a6 <_puts_r+0x2e>
 80069ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80069ee:	bd70      	pop	{r4, r5, r6, pc}
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	da04      	bge.n	80069fe <_puts_r+0x86>
 80069f4:	69a2      	ldr	r2, [r4, #24]
 80069f6:	429a      	cmp	r2, r3
 80069f8:	dc06      	bgt.n	8006a08 <_puts_r+0x90>
 80069fa:	290a      	cmp	r1, #10
 80069fc:	d004      	beq.n	8006a08 <_puts_r+0x90>
 80069fe:	6823      	ldr	r3, [r4, #0]
 8006a00:	1c5a      	adds	r2, r3, #1
 8006a02:	6022      	str	r2, [r4, #0]
 8006a04:	7019      	strb	r1, [r3, #0]
 8006a06:	e7cf      	b.n	80069a8 <_puts_r+0x30>
 8006a08:	4622      	mov	r2, r4
 8006a0a:	4628      	mov	r0, r5
 8006a0c:	f000 f852 	bl	8006ab4 <__swbuf_r>
 8006a10:	3001      	adds	r0, #1
 8006a12:	d1c9      	bne.n	80069a8 <_puts_r+0x30>
 8006a14:	e7e9      	b.n	80069ea <_puts_r+0x72>
 8006a16:	200a      	movs	r0, #10
 8006a18:	6823      	ldr	r3, [r4, #0]
 8006a1a:	1c5a      	adds	r2, r3, #1
 8006a1c:	6022      	str	r2, [r4, #0]
 8006a1e:	7018      	strb	r0, [r3, #0]
 8006a20:	e7e5      	b.n	80069ee <_puts_r+0x76>
 8006a22:	bf00      	nop
 8006a24:	08007c2c 	.word	0x08007c2c
 8006a28:	08007c4c 	.word	0x08007c4c
 8006a2c:	08007c0c 	.word	0x08007c0c

08006a30 <puts>:
 8006a30:	4b02      	ldr	r3, [pc, #8]	; (8006a3c <puts+0xc>)
 8006a32:	4601      	mov	r1, r0
 8006a34:	6818      	ldr	r0, [r3, #0]
 8006a36:	f7ff bf9f 	b.w	8006978 <_puts_r>
 8006a3a:	bf00      	nop
 8006a3c:	20000018 	.word	0x20000018

08006a40 <_vsniprintf_r>:
 8006a40:	b530      	push	{r4, r5, lr}
 8006a42:	1e14      	subs	r4, r2, #0
 8006a44:	4605      	mov	r5, r0
 8006a46:	b09b      	sub	sp, #108	; 0x6c
 8006a48:	4618      	mov	r0, r3
 8006a4a:	da05      	bge.n	8006a58 <_vsniprintf_r+0x18>
 8006a4c:	238b      	movs	r3, #139	; 0x8b
 8006a4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a52:	602b      	str	r3, [r5, #0]
 8006a54:	b01b      	add	sp, #108	; 0x6c
 8006a56:	bd30      	pop	{r4, r5, pc}
 8006a58:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006a5c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8006a60:	bf0c      	ite	eq
 8006a62:	4623      	moveq	r3, r4
 8006a64:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8006a68:	9302      	str	r3, [sp, #8]
 8006a6a:	9305      	str	r3, [sp, #20]
 8006a6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006a70:	9100      	str	r1, [sp, #0]
 8006a72:	9104      	str	r1, [sp, #16]
 8006a74:	f8ad 300e 	strh.w	r3, [sp, #14]
 8006a78:	4602      	mov	r2, r0
 8006a7a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006a7c:	4669      	mov	r1, sp
 8006a7e:	4628      	mov	r0, r5
 8006a80:	f000 fbb6 	bl	80071f0 <_svfiprintf_r>
 8006a84:	1c43      	adds	r3, r0, #1
 8006a86:	bfbc      	itt	lt
 8006a88:	238b      	movlt	r3, #139	; 0x8b
 8006a8a:	602b      	strlt	r3, [r5, #0]
 8006a8c:	2c00      	cmp	r4, #0
 8006a8e:	d0e1      	beq.n	8006a54 <_vsniprintf_r+0x14>
 8006a90:	2200      	movs	r2, #0
 8006a92:	9b00      	ldr	r3, [sp, #0]
 8006a94:	701a      	strb	r2, [r3, #0]
 8006a96:	e7dd      	b.n	8006a54 <_vsniprintf_r+0x14>

08006a98 <vsniprintf>:
 8006a98:	b507      	push	{r0, r1, r2, lr}
 8006a9a:	9300      	str	r3, [sp, #0]
 8006a9c:	4613      	mov	r3, r2
 8006a9e:	460a      	mov	r2, r1
 8006aa0:	4601      	mov	r1, r0
 8006aa2:	4803      	ldr	r0, [pc, #12]	; (8006ab0 <vsniprintf+0x18>)
 8006aa4:	6800      	ldr	r0, [r0, #0]
 8006aa6:	f7ff ffcb 	bl	8006a40 <_vsniprintf_r>
 8006aaa:	b003      	add	sp, #12
 8006aac:	f85d fb04 	ldr.w	pc, [sp], #4
 8006ab0:	20000018 	.word	0x20000018

08006ab4 <__swbuf_r>:
 8006ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ab6:	460e      	mov	r6, r1
 8006ab8:	4614      	mov	r4, r2
 8006aba:	4605      	mov	r5, r0
 8006abc:	b118      	cbz	r0, 8006ac6 <__swbuf_r+0x12>
 8006abe:	6983      	ldr	r3, [r0, #24]
 8006ac0:	b90b      	cbnz	r3, 8006ac6 <__swbuf_r+0x12>
 8006ac2:	f000 f9a7 	bl	8006e14 <__sinit>
 8006ac6:	4b21      	ldr	r3, [pc, #132]	; (8006b4c <__swbuf_r+0x98>)
 8006ac8:	429c      	cmp	r4, r3
 8006aca:	d12a      	bne.n	8006b22 <__swbuf_r+0x6e>
 8006acc:	686c      	ldr	r4, [r5, #4]
 8006ace:	69a3      	ldr	r3, [r4, #24]
 8006ad0:	60a3      	str	r3, [r4, #8]
 8006ad2:	89a3      	ldrh	r3, [r4, #12]
 8006ad4:	071a      	lsls	r2, r3, #28
 8006ad6:	d52e      	bpl.n	8006b36 <__swbuf_r+0x82>
 8006ad8:	6923      	ldr	r3, [r4, #16]
 8006ada:	b363      	cbz	r3, 8006b36 <__swbuf_r+0x82>
 8006adc:	6923      	ldr	r3, [r4, #16]
 8006ade:	6820      	ldr	r0, [r4, #0]
 8006ae0:	b2f6      	uxtb	r6, r6
 8006ae2:	1ac0      	subs	r0, r0, r3
 8006ae4:	6963      	ldr	r3, [r4, #20]
 8006ae6:	4637      	mov	r7, r6
 8006ae8:	4283      	cmp	r3, r0
 8006aea:	dc04      	bgt.n	8006af6 <__swbuf_r+0x42>
 8006aec:	4621      	mov	r1, r4
 8006aee:	4628      	mov	r0, r5
 8006af0:	f000 f926 	bl	8006d40 <_fflush_r>
 8006af4:	bb28      	cbnz	r0, 8006b42 <__swbuf_r+0x8e>
 8006af6:	68a3      	ldr	r3, [r4, #8]
 8006af8:	3001      	adds	r0, #1
 8006afa:	3b01      	subs	r3, #1
 8006afc:	60a3      	str	r3, [r4, #8]
 8006afe:	6823      	ldr	r3, [r4, #0]
 8006b00:	1c5a      	adds	r2, r3, #1
 8006b02:	6022      	str	r2, [r4, #0]
 8006b04:	701e      	strb	r6, [r3, #0]
 8006b06:	6963      	ldr	r3, [r4, #20]
 8006b08:	4283      	cmp	r3, r0
 8006b0a:	d004      	beq.n	8006b16 <__swbuf_r+0x62>
 8006b0c:	89a3      	ldrh	r3, [r4, #12]
 8006b0e:	07db      	lsls	r3, r3, #31
 8006b10:	d519      	bpl.n	8006b46 <__swbuf_r+0x92>
 8006b12:	2e0a      	cmp	r6, #10
 8006b14:	d117      	bne.n	8006b46 <__swbuf_r+0x92>
 8006b16:	4621      	mov	r1, r4
 8006b18:	4628      	mov	r0, r5
 8006b1a:	f000 f911 	bl	8006d40 <_fflush_r>
 8006b1e:	b190      	cbz	r0, 8006b46 <__swbuf_r+0x92>
 8006b20:	e00f      	b.n	8006b42 <__swbuf_r+0x8e>
 8006b22:	4b0b      	ldr	r3, [pc, #44]	; (8006b50 <__swbuf_r+0x9c>)
 8006b24:	429c      	cmp	r4, r3
 8006b26:	d101      	bne.n	8006b2c <__swbuf_r+0x78>
 8006b28:	68ac      	ldr	r4, [r5, #8]
 8006b2a:	e7d0      	b.n	8006ace <__swbuf_r+0x1a>
 8006b2c:	4b09      	ldr	r3, [pc, #36]	; (8006b54 <__swbuf_r+0xa0>)
 8006b2e:	429c      	cmp	r4, r3
 8006b30:	bf08      	it	eq
 8006b32:	68ec      	ldreq	r4, [r5, #12]
 8006b34:	e7cb      	b.n	8006ace <__swbuf_r+0x1a>
 8006b36:	4621      	mov	r1, r4
 8006b38:	4628      	mov	r0, r5
 8006b3a:	f000 f80d 	bl	8006b58 <__swsetup_r>
 8006b3e:	2800      	cmp	r0, #0
 8006b40:	d0cc      	beq.n	8006adc <__swbuf_r+0x28>
 8006b42:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006b46:	4638      	mov	r0, r7
 8006b48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b4a:	bf00      	nop
 8006b4c:	08007c2c 	.word	0x08007c2c
 8006b50:	08007c4c 	.word	0x08007c4c
 8006b54:	08007c0c 	.word	0x08007c0c

08006b58 <__swsetup_r>:
 8006b58:	4b32      	ldr	r3, [pc, #200]	; (8006c24 <__swsetup_r+0xcc>)
 8006b5a:	b570      	push	{r4, r5, r6, lr}
 8006b5c:	681d      	ldr	r5, [r3, #0]
 8006b5e:	4606      	mov	r6, r0
 8006b60:	460c      	mov	r4, r1
 8006b62:	b125      	cbz	r5, 8006b6e <__swsetup_r+0x16>
 8006b64:	69ab      	ldr	r3, [r5, #24]
 8006b66:	b913      	cbnz	r3, 8006b6e <__swsetup_r+0x16>
 8006b68:	4628      	mov	r0, r5
 8006b6a:	f000 f953 	bl	8006e14 <__sinit>
 8006b6e:	4b2e      	ldr	r3, [pc, #184]	; (8006c28 <__swsetup_r+0xd0>)
 8006b70:	429c      	cmp	r4, r3
 8006b72:	d10f      	bne.n	8006b94 <__swsetup_r+0x3c>
 8006b74:	686c      	ldr	r4, [r5, #4]
 8006b76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b7a:	b29a      	uxth	r2, r3
 8006b7c:	0715      	lsls	r5, r2, #28
 8006b7e:	d42c      	bmi.n	8006bda <__swsetup_r+0x82>
 8006b80:	06d0      	lsls	r0, r2, #27
 8006b82:	d411      	bmi.n	8006ba8 <__swsetup_r+0x50>
 8006b84:	2209      	movs	r2, #9
 8006b86:	6032      	str	r2, [r6, #0]
 8006b88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b8c:	81a3      	strh	r3, [r4, #12]
 8006b8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b92:	e03e      	b.n	8006c12 <__swsetup_r+0xba>
 8006b94:	4b25      	ldr	r3, [pc, #148]	; (8006c2c <__swsetup_r+0xd4>)
 8006b96:	429c      	cmp	r4, r3
 8006b98:	d101      	bne.n	8006b9e <__swsetup_r+0x46>
 8006b9a:	68ac      	ldr	r4, [r5, #8]
 8006b9c:	e7eb      	b.n	8006b76 <__swsetup_r+0x1e>
 8006b9e:	4b24      	ldr	r3, [pc, #144]	; (8006c30 <__swsetup_r+0xd8>)
 8006ba0:	429c      	cmp	r4, r3
 8006ba2:	bf08      	it	eq
 8006ba4:	68ec      	ldreq	r4, [r5, #12]
 8006ba6:	e7e6      	b.n	8006b76 <__swsetup_r+0x1e>
 8006ba8:	0751      	lsls	r1, r2, #29
 8006baa:	d512      	bpl.n	8006bd2 <__swsetup_r+0x7a>
 8006bac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006bae:	b141      	cbz	r1, 8006bc2 <__swsetup_r+0x6a>
 8006bb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006bb4:	4299      	cmp	r1, r3
 8006bb6:	d002      	beq.n	8006bbe <__swsetup_r+0x66>
 8006bb8:	4630      	mov	r0, r6
 8006bba:	f000 fa19 	bl	8006ff0 <_free_r>
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	6363      	str	r3, [r4, #52]	; 0x34
 8006bc2:	89a3      	ldrh	r3, [r4, #12]
 8006bc4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006bc8:	81a3      	strh	r3, [r4, #12]
 8006bca:	2300      	movs	r3, #0
 8006bcc:	6063      	str	r3, [r4, #4]
 8006bce:	6923      	ldr	r3, [r4, #16]
 8006bd0:	6023      	str	r3, [r4, #0]
 8006bd2:	89a3      	ldrh	r3, [r4, #12]
 8006bd4:	f043 0308 	orr.w	r3, r3, #8
 8006bd8:	81a3      	strh	r3, [r4, #12]
 8006bda:	6923      	ldr	r3, [r4, #16]
 8006bdc:	b94b      	cbnz	r3, 8006bf2 <__swsetup_r+0x9a>
 8006bde:	89a3      	ldrh	r3, [r4, #12]
 8006be0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006be4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006be8:	d003      	beq.n	8006bf2 <__swsetup_r+0x9a>
 8006bea:	4621      	mov	r1, r4
 8006bec:	4630      	mov	r0, r6
 8006bee:	f000 f9bf 	bl	8006f70 <__smakebuf_r>
 8006bf2:	89a2      	ldrh	r2, [r4, #12]
 8006bf4:	f012 0301 	ands.w	r3, r2, #1
 8006bf8:	d00c      	beq.n	8006c14 <__swsetup_r+0xbc>
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	60a3      	str	r3, [r4, #8]
 8006bfe:	6963      	ldr	r3, [r4, #20]
 8006c00:	425b      	negs	r3, r3
 8006c02:	61a3      	str	r3, [r4, #24]
 8006c04:	6923      	ldr	r3, [r4, #16]
 8006c06:	b953      	cbnz	r3, 8006c1e <__swsetup_r+0xc6>
 8006c08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c0c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006c10:	d1ba      	bne.n	8006b88 <__swsetup_r+0x30>
 8006c12:	bd70      	pop	{r4, r5, r6, pc}
 8006c14:	0792      	lsls	r2, r2, #30
 8006c16:	bf58      	it	pl
 8006c18:	6963      	ldrpl	r3, [r4, #20]
 8006c1a:	60a3      	str	r3, [r4, #8]
 8006c1c:	e7f2      	b.n	8006c04 <__swsetup_r+0xac>
 8006c1e:	2000      	movs	r0, #0
 8006c20:	e7f7      	b.n	8006c12 <__swsetup_r+0xba>
 8006c22:	bf00      	nop
 8006c24:	20000018 	.word	0x20000018
 8006c28:	08007c2c 	.word	0x08007c2c
 8006c2c:	08007c4c 	.word	0x08007c4c
 8006c30:	08007c0c 	.word	0x08007c0c

08006c34 <__sflush_r>:
 8006c34:	898a      	ldrh	r2, [r1, #12]
 8006c36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c3a:	4605      	mov	r5, r0
 8006c3c:	0710      	lsls	r0, r2, #28
 8006c3e:	460c      	mov	r4, r1
 8006c40:	d458      	bmi.n	8006cf4 <__sflush_r+0xc0>
 8006c42:	684b      	ldr	r3, [r1, #4]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	dc05      	bgt.n	8006c54 <__sflush_r+0x20>
 8006c48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	dc02      	bgt.n	8006c54 <__sflush_r+0x20>
 8006c4e:	2000      	movs	r0, #0
 8006c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c56:	2e00      	cmp	r6, #0
 8006c58:	d0f9      	beq.n	8006c4e <__sflush_r+0x1a>
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006c60:	682f      	ldr	r7, [r5, #0]
 8006c62:	6a21      	ldr	r1, [r4, #32]
 8006c64:	602b      	str	r3, [r5, #0]
 8006c66:	d032      	beq.n	8006cce <__sflush_r+0x9a>
 8006c68:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006c6a:	89a3      	ldrh	r3, [r4, #12]
 8006c6c:	075a      	lsls	r2, r3, #29
 8006c6e:	d505      	bpl.n	8006c7c <__sflush_r+0x48>
 8006c70:	6863      	ldr	r3, [r4, #4]
 8006c72:	1ac0      	subs	r0, r0, r3
 8006c74:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006c76:	b10b      	cbz	r3, 8006c7c <__sflush_r+0x48>
 8006c78:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006c7a:	1ac0      	subs	r0, r0, r3
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	4602      	mov	r2, r0
 8006c80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c82:	6a21      	ldr	r1, [r4, #32]
 8006c84:	4628      	mov	r0, r5
 8006c86:	47b0      	blx	r6
 8006c88:	1c43      	adds	r3, r0, #1
 8006c8a:	89a3      	ldrh	r3, [r4, #12]
 8006c8c:	d106      	bne.n	8006c9c <__sflush_r+0x68>
 8006c8e:	6829      	ldr	r1, [r5, #0]
 8006c90:	291d      	cmp	r1, #29
 8006c92:	d848      	bhi.n	8006d26 <__sflush_r+0xf2>
 8006c94:	4a29      	ldr	r2, [pc, #164]	; (8006d3c <__sflush_r+0x108>)
 8006c96:	40ca      	lsrs	r2, r1
 8006c98:	07d6      	lsls	r6, r2, #31
 8006c9a:	d544      	bpl.n	8006d26 <__sflush_r+0xf2>
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	6062      	str	r2, [r4, #4]
 8006ca0:	6922      	ldr	r2, [r4, #16]
 8006ca2:	04d9      	lsls	r1, r3, #19
 8006ca4:	6022      	str	r2, [r4, #0]
 8006ca6:	d504      	bpl.n	8006cb2 <__sflush_r+0x7e>
 8006ca8:	1c42      	adds	r2, r0, #1
 8006caa:	d101      	bne.n	8006cb0 <__sflush_r+0x7c>
 8006cac:	682b      	ldr	r3, [r5, #0]
 8006cae:	b903      	cbnz	r3, 8006cb2 <__sflush_r+0x7e>
 8006cb0:	6560      	str	r0, [r4, #84]	; 0x54
 8006cb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006cb4:	602f      	str	r7, [r5, #0]
 8006cb6:	2900      	cmp	r1, #0
 8006cb8:	d0c9      	beq.n	8006c4e <__sflush_r+0x1a>
 8006cba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006cbe:	4299      	cmp	r1, r3
 8006cc0:	d002      	beq.n	8006cc8 <__sflush_r+0x94>
 8006cc2:	4628      	mov	r0, r5
 8006cc4:	f000 f994 	bl	8006ff0 <_free_r>
 8006cc8:	2000      	movs	r0, #0
 8006cca:	6360      	str	r0, [r4, #52]	; 0x34
 8006ccc:	e7c0      	b.n	8006c50 <__sflush_r+0x1c>
 8006cce:	2301      	movs	r3, #1
 8006cd0:	4628      	mov	r0, r5
 8006cd2:	47b0      	blx	r6
 8006cd4:	1c41      	adds	r1, r0, #1
 8006cd6:	d1c8      	bne.n	8006c6a <__sflush_r+0x36>
 8006cd8:	682b      	ldr	r3, [r5, #0]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d0c5      	beq.n	8006c6a <__sflush_r+0x36>
 8006cde:	2b1d      	cmp	r3, #29
 8006ce0:	d001      	beq.n	8006ce6 <__sflush_r+0xb2>
 8006ce2:	2b16      	cmp	r3, #22
 8006ce4:	d101      	bne.n	8006cea <__sflush_r+0xb6>
 8006ce6:	602f      	str	r7, [r5, #0]
 8006ce8:	e7b1      	b.n	8006c4e <__sflush_r+0x1a>
 8006cea:	89a3      	ldrh	r3, [r4, #12]
 8006cec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cf0:	81a3      	strh	r3, [r4, #12]
 8006cf2:	e7ad      	b.n	8006c50 <__sflush_r+0x1c>
 8006cf4:	690f      	ldr	r7, [r1, #16]
 8006cf6:	2f00      	cmp	r7, #0
 8006cf8:	d0a9      	beq.n	8006c4e <__sflush_r+0x1a>
 8006cfa:	0793      	lsls	r3, r2, #30
 8006cfc:	bf18      	it	ne
 8006cfe:	2300      	movne	r3, #0
 8006d00:	680e      	ldr	r6, [r1, #0]
 8006d02:	bf08      	it	eq
 8006d04:	694b      	ldreq	r3, [r1, #20]
 8006d06:	eba6 0807 	sub.w	r8, r6, r7
 8006d0a:	600f      	str	r7, [r1, #0]
 8006d0c:	608b      	str	r3, [r1, #8]
 8006d0e:	f1b8 0f00 	cmp.w	r8, #0
 8006d12:	dd9c      	ble.n	8006c4e <__sflush_r+0x1a>
 8006d14:	4643      	mov	r3, r8
 8006d16:	463a      	mov	r2, r7
 8006d18:	6a21      	ldr	r1, [r4, #32]
 8006d1a:	4628      	mov	r0, r5
 8006d1c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006d1e:	47b0      	blx	r6
 8006d20:	2800      	cmp	r0, #0
 8006d22:	dc06      	bgt.n	8006d32 <__sflush_r+0xfe>
 8006d24:	89a3      	ldrh	r3, [r4, #12]
 8006d26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d2a:	81a3      	strh	r3, [r4, #12]
 8006d2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d30:	e78e      	b.n	8006c50 <__sflush_r+0x1c>
 8006d32:	4407      	add	r7, r0
 8006d34:	eba8 0800 	sub.w	r8, r8, r0
 8006d38:	e7e9      	b.n	8006d0e <__sflush_r+0xda>
 8006d3a:	bf00      	nop
 8006d3c:	20400001 	.word	0x20400001

08006d40 <_fflush_r>:
 8006d40:	b538      	push	{r3, r4, r5, lr}
 8006d42:	690b      	ldr	r3, [r1, #16]
 8006d44:	4605      	mov	r5, r0
 8006d46:	460c      	mov	r4, r1
 8006d48:	b1db      	cbz	r3, 8006d82 <_fflush_r+0x42>
 8006d4a:	b118      	cbz	r0, 8006d54 <_fflush_r+0x14>
 8006d4c:	6983      	ldr	r3, [r0, #24]
 8006d4e:	b90b      	cbnz	r3, 8006d54 <_fflush_r+0x14>
 8006d50:	f000 f860 	bl	8006e14 <__sinit>
 8006d54:	4b0c      	ldr	r3, [pc, #48]	; (8006d88 <_fflush_r+0x48>)
 8006d56:	429c      	cmp	r4, r3
 8006d58:	d109      	bne.n	8006d6e <_fflush_r+0x2e>
 8006d5a:	686c      	ldr	r4, [r5, #4]
 8006d5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d60:	b17b      	cbz	r3, 8006d82 <_fflush_r+0x42>
 8006d62:	4621      	mov	r1, r4
 8006d64:	4628      	mov	r0, r5
 8006d66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d6a:	f7ff bf63 	b.w	8006c34 <__sflush_r>
 8006d6e:	4b07      	ldr	r3, [pc, #28]	; (8006d8c <_fflush_r+0x4c>)
 8006d70:	429c      	cmp	r4, r3
 8006d72:	d101      	bne.n	8006d78 <_fflush_r+0x38>
 8006d74:	68ac      	ldr	r4, [r5, #8]
 8006d76:	e7f1      	b.n	8006d5c <_fflush_r+0x1c>
 8006d78:	4b05      	ldr	r3, [pc, #20]	; (8006d90 <_fflush_r+0x50>)
 8006d7a:	429c      	cmp	r4, r3
 8006d7c:	bf08      	it	eq
 8006d7e:	68ec      	ldreq	r4, [r5, #12]
 8006d80:	e7ec      	b.n	8006d5c <_fflush_r+0x1c>
 8006d82:	2000      	movs	r0, #0
 8006d84:	bd38      	pop	{r3, r4, r5, pc}
 8006d86:	bf00      	nop
 8006d88:	08007c2c 	.word	0x08007c2c
 8006d8c:	08007c4c 	.word	0x08007c4c
 8006d90:	08007c0c 	.word	0x08007c0c

08006d94 <std>:
 8006d94:	2300      	movs	r3, #0
 8006d96:	b510      	push	{r4, lr}
 8006d98:	4604      	mov	r4, r0
 8006d9a:	e9c0 3300 	strd	r3, r3, [r0]
 8006d9e:	6083      	str	r3, [r0, #8]
 8006da0:	8181      	strh	r1, [r0, #12]
 8006da2:	6643      	str	r3, [r0, #100]	; 0x64
 8006da4:	81c2      	strh	r2, [r0, #14]
 8006da6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006daa:	6183      	str	r3, [r0, #24]
 8006dac:	4619      	mov	r1, r3
 8006dae:	2208      	movs	r2, #8
 8006db0:	305c      	adds	r0, #92	; 0x5c
 8006db2:	f7ff fdd8 	bl	8006966 <memset>
 8006db6:	4b05      	ldr	r3, [pc, #20]	; (8006dcc <std+0x38>)
 8006db8:	6224      	str	r4, [r4, #32]
 8006dba:	6263      	str	r3, [r4, #36]	; 0x24
 8006dbc:	4b04      	ldr	r3, [pc, #16]	; (8006dd0 <std+0x3c>)
 8006dbe:	62a3      	str	r3, [r4, #40]	; 0x28
 8006dc0:	4b04      	ldr	r3, [pc, #16]	; (8006dd4 <std+0x40>)
 8006dc2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006dc4:	4b04      	ldr	r3, [pc, #16]	; (8006dd8 <std+0x44>)
 8006dc6:	6323      	str	r3, [r4, #48]	; 0x30
 8006dc8:	bd10      	pop	{r4, pc}
 8006dca:	bf00      	nop
 8006dcc:	08007711 	.word	0x08007711
 8006dd0:	08007733 	.word	0x08007733
 8006dd4:	0800776b 	.word	0x0800776b
 8006dd8:	0800778f 	.word	0x0800778f

08006ddc <_cleanup_r>:
 8006ddc:	4901      	ldr	r1, [pc, #4]	; (8006de4 <_cleanup_r+0x8>)
 8006dde:	f000 b885 	b.w	8006eec <_fwalk_reent>
 8006de2:	bf00      	nop
 8006de4:	08006d41 	.word	0x08006d41

08006de8 <__sfmoreglue>:
 8006de8:	b570      	push	{r4, r5, r6, lr}
 8006dea:	2568      	movs	r5, #104	; 0x68
 8006dec:	1e4a      	subs	r2, r1, #1
 8006dee:	4355      	muls	r5, r2
 8006df0:	460e      	mov	r6, r1
 8006df2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006df6:	f000 f947 	bl	8007088 <_malloc_r>
 8006dfa:	4604      	mov	r4, r0
 8006dfc:	b140      	cbz	r0, 8006e10 <__sfmoreglue+0x28>
 8006dfe:	2100      	movs	r1, #0
 8006e00:	e9c0 1600 	strd	r1, r6, [r0]
 8006e04:	300c      	adds	r0, #12
 8006e06:	60a0      	str	r0, [r4, #8]
 8006e08:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006e0c:	f7ff fdab 	bl	8006966 <memset>
 8006e10:	4620      	mov	r0, r4
 8006e12:	bd70      	pop	{r4, r5, r6, pc}

08006e14 <__sinit>:
 8006e14:	6983      	ldr	r3, [r0, #24]
 8006e16:	b510      	push	{r4, lr}
 8006e18:	4604      	mov	r4, r0
 8006e1a:	bb33      	cbnz	r3, 8006e6a <__sinit+0x56>
 8006e1c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006e20:	6503      	str	r3, [r0, #80]	; 0x50
 8006e22:	4b12      	ldr	r3, [pc, #72]	; (8006e6c <__sinit+0x58>)
 8006e24:	4a12      	ldr	r2, [pc, #72]	; (8006e70 <__sinit+0x5c>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	6282      	str	r2, [r0, #40]	; 0x28
 8006e2a:	4298      	cmp	r0, r3
 8006e2c:	bf04      	itt	eq
 8006e2e:	2301      	moveq	r3, #1
 8006e30:	6183      	streq	r3, [r0, #24]
 8006e32:	f000 f81f 	bl	8006e74 <__sfp>
 8006e36:	6060      	str	r0, [r4, #4]
 8006e38:	4620      	mov	r0, r4
 8006e3a:	f000 f81b 	bl	8006e74 <__sfp>
 8006e3e:	60a0      	str	r0, [r4, #8]
 8006e40:	4620      	mov	r0, r4
 8006e42:	f000 f817 	bl	8006e74 <__sfp>
 8006e46:	2200      	movs	r2, #0
 8006e48:	60e0      	str	r0, [r4, #12]
 8006e4a:	2104      	movs	r1, #4
 8006e4c:	6860      	ldr	r0, [r4, #4]
 8006e4e:	f7ff ffa1 	bl	8006d94 <std>
 8006e52:	2201      	movs	r2, #1
 8006e54:	2109      	movs	r1, #9
 8006e56:	68a0      	ldr	r0, [r4, #8]
 8006e58:	f7ff ff9c 	bl	8006d94 <std>
 8006e5c:	2202      	movs	r2, #2
 8006e5e:	2112      	movs	r1, #18
 8006e60:	68e0      	ldr	r0, [r4, #12]
 8006e62:	f7ff ff97 	bl	8006d94 <std>
 8006e66:	2301      	movs	r3, #1
 8006e68:	61a3      	str	r3, [r4, #24]
 8006e6a:	bd10      	pop	{r4, pc}
 8006e6c:	08007c08 	.word	0x08007c08
 8006e70:	08006ddd 	.word	0x08006ddd

08006e74 <__sfp>:
 8006e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e76:	4b1b      	ldr	r3, [pc, #108]	; (8006ee4 <__sfp+0x70>)
 8006e78:	4607      	mov	r7, r0
 8006e7a:	681e      	ldr	r6, [r3, #0]
 8006e7c:	69b3      	ldr	r3, [r6, #24]
 8006e7e:	b913      	cbnz	r3, 8006e86 <__sfp+0x12>
 8006e80:	4630      	mov	r0, r6
 8006e82:	f7ff ffc7 	bl	8006e14 <__sinit>
 8006e86:	3648      	adds	r6, #72	; 0x48
 8006e88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006e8c:	3b01      	subs	r3, #1
 8006e8e:	d503      	bpl.n	8006e98 <__sfp+0x24>
 8006e90:	6833      	ldr	r3, [r6, #0]
 8006e92:	b133      	cbz	r3, 8006ea2 <__sfp+0x2e>
 8006e94:	6836      	ldr	r6, [r6, #0]
 8006e96:	e7f7      	b.n	8006e88 <__sfp+0x14>
 8006e98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006e9c:	b16d      	cbz	r5, 8006eba <__sfp+0x46>
 8006e9e:	3468      	adds	r4, #104	; 0x68
 8006ea0:	e7f4      	b.n	8006e8c <__sfp+0x18>
 8006ea2:	2104      	movs	r1, #4
 8006ea4:	4638      	mov	r0, r7
 8006ea6:	f7ff ff9f 	bl	8006de8 <__sfmoreglue>
 8006eaa:	6030      	str	r0, [r6, #0]
 8006eac:	2800      	cmp	r0, #0
 8006eae:	d1f1      	bne.n	8006e94 <__sfp+0x20>
 8006eb0:	230c      	movs	r3, #12
 8006eb2:	4604      	mov	r4, r0
 8006eb4:	603b      	str	r3, [r7, #0]
 8006eb6:	4620      	mov	r0, r4
 8006eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006eba:	4b0b      	ldr	r3, [pc, #44]	; (8006ee8 <__sfp+0x74>)
 8006ebc:	6665      	str	r5, [r4, #100]	; 0x64
 8006ebe:	e9c4 5500 	strd	r5, r5, [r4]
 8006ec2:	60a5      	str	r5, [r4, #8]
 8006ec4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006ec8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006ecc:	2208      	movs	r2, #8
 8006ece:	4629      	mov	r1, r5
 8006ed0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006ed4:	f7ff fd47 	bl	8006966 <memset>
 8006ed8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006edc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006ee0:	e7e9      	b.n	8006eb6 <__sfp+0x42>
 8006ee2:	bf00      	nop
 8006ee4:	08007c08 	.word	0x08007c08
 8006ee8:	ffff0001 	.word	0xffff0001

08006eec <_fwalk_reent>:
 8006eec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ef0:	4680      	mov	r8, r0
 8006ef2:	4689      	mov	r9, r1
 8006ef4:	2600      	movs	r6, #0
 8006ef6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006efa:	b914      	cbnz	r4, 8006f02 <_fwalk_reent+0x16>
 8006efc:	4630      	mov	r0, r6
 8006efe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f02:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8006f06:	3f01      	subs	r7, #1
 8006f08:	d501      	bpl.n	8006f0e <_fwalk_reent+0x22>
 8006f0a:	6824      	ldr	r4, [r4, #0]
 8006f0c:	e7f5      	b.n	8006efa <_fwalk_reent+0xe>
 8006f0e:	89ab      	ldrh	r3, [r5, #12]
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d907      	bls.n	8006f24 <_fwalk_reent+0x38>
 8006f14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f18:	3301      	adds	r3, #1
 8006f1a:	d003      	beq.n	8006f24 <_fwalk_reent+0x38>
 8006f1c:	4629      	mov	r1, r5
 8006f1e:	4640      	mov	r0, r8
 8006f20:	47c8      	blx	r9
 8006f22:	4306      	orrs	r6, r0
 8006f24:	3568      	adds	r5, #104	; 0x68
 8006f26:	e7ee      	b.n	8006f06 <_fwalk_reent+0x1a>

08006f28 <__swhatbuf_r>:
 8006f28:	b570      	push	{r4, r5, r6, lr}
 8006f2a:	460e      	mov	r6, r1
 8006f2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f30:	b096      	sub	sp, #88	; 0x58
 8006f32:	2900      	cmp	r1, #0
 8006f34:	4614      	mov	r4, r2
 8006f36:	461d      	mov	r5, r3
 8006f38:	da07      	bge.n	8006f4a <__swhatbuf_r+0x22>
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	602b      	str	r3, [r5, #0]
 8006f3e:	89b3      	ldrh	r3, [r6, #12]
 8006f40:	061a      	lsls	r2, r3, #24
 8006f42:	d410      	bmi.n	8006f66 <__swhatbuf_r+0x3e>
 8006f44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f48:	e00e      	b.n	8006f68 <__swhatbuf_r+0x40>
 8006f4a:	466a      	mov	r2, sp
 8006f4c:	f000 fc46 	bl	80077dc <_fstat_r>
 8006f50:	2800      	cmp	r0, #0
 8006f52:	dbf2      	blt.n	8006f3a <__swhatbuf_r+0x12>
 8006f54:	9a01      	ldr	r2, [sp, #4]
 8006f56:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006f5a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006f5e:	425a      	negs	r2, r3
 8006f60:	415a      	adcs	r2, r3
 8006f62:	602a      	str	r2, [r5, #0]
 8006f64:	e7ee      	b.n	8006f44 <__swhatbuf_r+0x1c>
 8006f66:	2340      	movs	r3, #64	; 0x40
 8006f68:	2000      	movs	r0, #0
 8006f6a:	6023      	str	r3, [r4, #0]
 8006f6c:	b016      	add	sp, #88	; 0x58
 8006f6e:	bd70      	pop	{r4, r5, r6, pc}

08006f70 <__smakebuf_r>:
 8006f70:	898b      	ldrh	r3, [r1, #12]
 8006f72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006f74:	079d      	lsls	r5, r3, #30
 8006f76:	4606      	mov	r6, r0
 8006f78:	460c      	mov	r4, r1
 8006f7a:	d507      	bpl.n	8006f8c <__smakebuf_r+0x1c>
 8006f7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006f80:	6023      	str	r3, [r4, #0]
 8006f82:	6123      	str	r3, [r4, #16]
 8006f84:	2301      	movs	r3, #1
 8006f86:	6163      	str	r3, [r4, #20]
 8006f88:	b002      	add	sp, #8
 8006f8a:	bd70      	pop	{r4, r5, r6, pc}
 8006f8c:	ab01      	add	r3, sp, #4
 8006f8e:	466a      	mov	r2, sp
 8006f90:	f7ff ffca 	bl	8006f28 <__swhatbuf_r>
 8006f94:	9900      	ldr	r1, [sp, #0]
 8006f96:	4605      	mov	r5, r0
 8006f98:	4630      	mov	r0, r6
 8006f9a:	f000 f875 	bl	8007088 <_malloc_r>
 8006f9e:	b948      	cbnz	r0, 8006fb4 <__smakebuf_r+0x44>
 8006fa0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fa4:	059a      	lsls	r2, r3, #22
 8006fa6:	d4ef      	bmi.n	8006f88 <__smakebuf_r+0x18>
 8006fa8:	f023 0303 	bic.w	r3, r3, #3
 8006fac:	f043 0302 	orr.w	r3, r3, #2
 8006fb0:	81a3      	strh	r3, [r4, #12]
 8006fb2:	e7e3      	b.n	8006f7c <__smakebuf_r+0xc>
 8006fb4:	4b0d      	ldr	r3, [pc, #52]	; (8006fec <__smakebuf_r+0x7c>)
 8006fb6:	62b3      	str	r3, [r6, #40]	; 0x28
 8006fb8:	89a3      	ldrh	r3, [r4, #12]
 8006fba:	6020      	str	r0, [r4, #0]
 8006fbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fc0:	81a3      	strh	r3, [r4, #12]
 8006fc2:	9b00      	ldr	r3, [sp, #0]
 8006fc4:	6120      	str	r0, [r4, #16]
 8006fc6:	6163      	str	r3, [r4, #20]
 8006fc8:	9b01      	ldr	r3, [sp, #4]
 8006fca:	b15b      	cbz	r3, 8006fe4 <__smakebuf_r+0x74>
 8006fcc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fd0:	4630      	mov	r0, r6
 8006fd2:	f000 fc15 	bl	8007800 <_isatty_r>
 8006fd6:	b128      	cbz	r0, 8006fe4 <__smakebuf_r+0x74>
 8006fd8:	89a3      	ldrh	r3, [r4, #12]
 8006fda:	f023 0303 	bic.w	r3, r3, #3
 8006fde:	f043 0301 	orr.w	r3, r3, #1
 8006fe2:	81a3      	strh	r3, [r4, #12]
 8006fe4:	89a3      	ldrh	r3, [r4, #12]
 8006fe6:	431d      	orrs	r5, r3
 8006fe8:	81a5      	strh	r5, [r4, #12]
 8006fea:	e7cd      	b.n	8006f88 <__smakebuf_r+0x18>
 8006fec:	08006ddd 	.word	0x08006ddd

08006ff0 <_free_r>:
 8006ff0:	b538      	push	{r3, r4, r5, lr}
 8006ff2:	4605      	mov	r5, r0
 8006ff4:	2900      	cmp	r1, #0
 8006ff6:	d043      	beq.n	8007080 <_free_r+0x90>
 8006ff8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ffc:	1f0c      	subs	r4, r1, #4
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	bfb8      	it	lt
 8007002:	18e4      	addlt	r4, r4, r3
 8007004:	f000 fc45 	bl	8007892 <__malloc_lock>
 8007008:	4a1e      	ldr	r2, [pc, #120]	; (8007084 <_free_r+0x94>)
 800700a:	6813      	ldr	r3, [r2, #0]
 800700c:	4610      	mov	r0, r2
 800700e:	b933      	cbnz	r3, 800701e <_free_r+0x2e>
 8007010:	6063      	str	r3, [r4, #4]
 8007012:	6014      	str	r4, [r2, #0]
 8007014:	4628      	mov	r0, r5
 8007016:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800701a:	f000 bc3b 	b.w	8007894 <__malloc_unlock>
 800701e:	42a3      	cmp	r3, r4
 8007020:	d90b      	bls.n	800703a <_free_r+0x4a>
 8007022:	6821      	ldr	r1, [r4, #0]
 8007024:	1862      	adds	r2, r4, r1
 8007026:	4293      	cmp	r3, r2
 8007028:	bf01      	itttt	eq
 800702a:	681a      	ldreq	r2, [r3, #0]
 800702c:	685b      	ldreq	r3, [r3, #4]
 800702e:	1852      	addeq	r2, r2, r1
 8007030:	6022      	streq	r2, [r4, #0]
 8007032:	6063      	str	r3, [r4, #4]
 8007034:	6004      	str	r4, [r0, #0]
 8007036:	e7ed      	b.n	8007014 <_free_r+0x24>
 8007038:	4613      	mov	r3, r2
 800703a:	685a      	ldr	r2, [r3, #4]
 800703c:	b10a      	cbz	r2, 8007042 <_free_r+0x52>
 800703e:	42a2      	cmp	r2, r4
 8007040:	d9fa      	bls.n	8007038 <_free_r+0x48>
 8007042:	6819      	ldr	r1, [r3, #0]
 8007044:	1858      	adds	r0, r3, r1
 8007046:	42a0      	cmp	r0, r4
 8007048:	d10b      	bne.n	8007062 <_free_r+0x72>
 800704a:	6820      	ldr	r0, [r4, #0]
 800704c:	4401      	add	r1, r0
 800704e:	1858      	adds	r0, r3, r1
 8007050:	4282      	cmp	r2, r0
 8007052:	6019      	str	r1, [r3, #0]
 8007054:	d1de      	bne.n	8007014 <_free_r+0x24>
 8007056:	6810      	ldr	r0, [r2, #0]
 8007058:	6852      	ldr	r2, [r2, #4]
 800705a:	4401      	add	r1, r0
 800705c:	6019      	str	r1, [r3, #0]
 800705e:	605a      	str	r2, [r3, #4]
 8007060:	e7d8      	b.n	8007014 <_free_r+0x24>
 8007062:	d902      	bls.n	800706a <_free_r+0x7a>
 8007064:	230c      	movs	r3, #12
 8007066:	602b      	str	r3, [r5, #0]
 8007068:	e7d4      	b.n	8007014 <_free_r+0x24>
 800706a:	6820      	ldr	r0, [r4, #0]
 800706c:	1821      	adds	r1, r4, r0
 800706e:	428a      	cmp	r2, r1
 8007070:	bf01      	itttt	eq
 8007072:	6811      	ldreq	r1, [r2, #0]
 8007074:	6852      	ldreq	r2, [r2, #4]
 8007076:	1809      	addeq	r1, r1, r0
 8007078:	6021      	streq	r1, [r4, #0]
 800707a:	6062      	str	r2, [r4, #4]
 800707c:	605c      	str	r4, [r3, #4]
 800707e:	e7c9      	b.n	8007014 <_free_r+0x24>
 8007080:	bd38      	pop	{r3, r4, r5, pc}
 8007082:	bf00      	nop
 8007084:	200019d8 	.word	0x200019d8

08007088 <_malloc_r>:
 8007088:	b570      	push	{r4, r5, r6, lr}
 800708a:	1ccd      	adds	r5, r1, #3
 800708c:	f025 0503 	bic.w	r5, r5, #3
 8007090:	3508      	adds	r5, #8
 8007092:	2d0c      	cmp	r5, #12
 8007094:	bf38      	it	cc
 8007096:	250c      	movcc	r5, #12
 8007098:	2d00      	cmp	r5, #0
 800709a:	4606      	mov	r6, r0
 800709c:	db01      	blt.n	80070a2 <_malloc_r+0x1a>
 800709e:	42a9      	cmp	r1, r5
 80070a0:	d903      	bls.n	80070aa <_malloc_r+0x22>
 80070a2:	230c      	movs	r3, #12
 80070a4:	6033      	str	r3, [r6, #0]
 80070a6:	2000      	movs	r0, #0
 80070a8:	bd70      	pop	{r4, r5, r6, pc}
 80070aa:	f000 fbf2 	bl	8007892 <__malloc_lock>
 80070ae:	4a21      	ldr	r2, [pc, #132]	; (8007134 <_malloc_r+0xac>)
 80070b0:	6814      	ldr	r4, [r2, #0]
 80070b2:	4621      	mov	r1, r4
 80070b4:	b991      	cbnz	r1, 80070dc <_malloc_r+0x54>
 80070b6:	4c20      	ldr	r4, [pc, #128]	; (8007138 <_malloc_r+0xb0>)
 80070b8:	6823      	ldr	r3, [r4, #0]
 80070ba:	b91b      	cbnz	r3, 80070c4 <_malloc_r+0x3c>
 80070bc:	4630      	mov	r0, r6
 80070be:	f000 fb17 	bl	80076f0 <_sbrk_r>
 80070c2:	6020      	str	r0, [r4, #0]
 80070c4:	4629      	mov	r1, r5
 80070c6:	4630      	mov	r0, r6
 80070c8:	f000 fb12 	bl	80076f0 <_sbrk_r>
 80070cc:	1c43      	adds	r3, r0, #1
 80070ce:	d124      	bne.n	800711a <_malloc_r+0x92>
 80070d0:	230c      	movs	r3, #12
 80070d2:	4630      	mov	r0, r6
 80070d4:	6033      	str	r3, [r6, #0]
 80070d6:	f000 fbdd 	bl	8007894 <__malloc_unlock>
 80070da:	e7e4      	b.n	80070a6 <_malloc_r+0x1e>
 80070dc:	680b      	ldr	r3, [r1, #0]
 80070de:	1b5b      	subs	r3, r3, r5
 80070e0:	d418      	bmi.n	8007114 <_malloc_r+0x8c>
 80070e2:	2b0b      	cmp	r3, #11
 80070e4:	d90f      	bls.n	8007106 <_malloc_r+0x7e>
 80070e6:	600b      	str	r3, [r1, #0]
 80070e8:	18cc      	adds	r4, r1, r3
 80070ea:	50cd      	str	r5, [r1, r3]
 80070ec:	4630      	mov	r0, r6
 80070ee:	f000 fbd1 	bl	8007894 <__malloc_unlock>
 80070f2:	f104 000b 	add.w	r0, r4, #11
 80070f6:	1d23      	adds	r3, r4, #4
 80070f8:	f020 0007 	bic.w	r0, r0, #7
 80070fc:	1ac3      	subs	r3, r0, r3
 80070fe:	d0d3      	beq.n	80070a8 <_malloc_r+0x20>
 8007100:	425a      	negs	r2, r3
 8007102:	50e2      	str	r2, [r4, r3]
 8007104:	e7d0      	b.n	80070a8 <_malloc_r+0x20>
 8007106:	684b      	ldr	r3, [r1, #4]
 8007108:	428c      	cmp	r4, r1
 800710a:	bf16      	itet	ne
 800710c:	6063      	strne	r3, [r4, #4]
 800710e:	6013      	streq	r3, [r2, #0]
 8007110:	460c      	movne	r4, r1
 8007112:	e7eb      	b.n	80070ec <_malloc_r+0x64>
 8007114:	460c      	mov	r4, r1
 8007116:	6849      	ldr	r1, [r1, #4]
 8007118:	e7cc      	b.n	80070b4 <_malloc_r+0x2c>
 800711a:	1cc4      	adds	r4, r0, #3
 800711c:	f024 0403 	bic.w	r4, r4, #3
 8007120:	42a0      	cmp	r0, r4
 8007122:	d005      	beq.n	8007130 <_malloc_r+0xa8>
 8007124:	1a21      	subs	r1, r4, r0
 8007126:	4630      	mov	r0, r6
 8007128:	f000 fae2 	bl	80076f0 <_sbrk_r>
 800712c:	3001      	adds	r0, #1
 800712e:	d0cf      	beq.n	80070d0 <_malloc_r+0x48>
 8007130:	6025      	str	r5, [r4, #0]
 8007132:	e7db      	b.n	80070ec <_malloc_r+0x64>
 8007134:	200019d8 	.word	0x200019d8
 8007138:	200019dc 	.word	0x200019dc

0800713c <__ssputs_r>:
 800713c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007140:	688e      	ldr	r6, [r1, #8]
 8007142:	4682      	mov	sl, r0
 8007144:	429e      	cmp	r6, r3
 8007146:	460c      	mov	r4, r1
 8007148:	4690      	mov	r8, r2
 800714a:	4699      	mov	r9, r3
 800714c:	d837      	bhi.n	80071be <__ssputs_r+0x82>
 800714e:	898a      	ldrh	r2, [r1, #12]
 8007150:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007154:	d031      	beq.n	80071ba <__ssputs_r+0x7e>
 8007156:	2302      	movs	r3, #2
 8007158:	6825      	ldr	r5, [r4, #0]
 800715a:	6909      	ldr	r1, [r1, #16]
 800715c:	1a6f      	subs	r7, r5, r1
 800715e:	6965      	ldr	r5, [r4, #20]
 8007160:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007164:	fb95 f5f3 	sdiv	r5, r5, r3
 8007168:	f109 0301 	add.w	r3, r9, #1
 800716c:	443b      	add	r3, r7
 800716e:	429d      	cmp	r5, r3
 8007170:	bf38      	it	cc
 8007172:	461d      	movcc	r5, r3
 8007174:	0553      	lsls	r3, r2, #21
 8007176:	d530      	bpl.n	80071da <__ssputs_r+0x9e>
 8007178:	4629      	mov	r1, r5
 800717a:	f7ff ff85 	bl	8007088 <_malloc_r>
 800717e:	4606      	mov	r6, r0
 8007180:	b950      	cbnz	r0, 8007198 <__ssputs_r+0x5c>
 8007182:	230c      	movs	r3, #12
 8007184:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007188:	f8ca 3000 	str.w	r3, [sl]
 800718c:	89a3      	ldrh	r3, [r4, #12]
 800718e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007192:	81a3      	strh	r3, [r4, #12]
 8007194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007198:	463a      	mov	r2, r7
 800719a:	6921      	ldr	r1, [r4, #16]
 800719c:	f7ff fbd8 	bl	8006950 <memcpy>
 80071a0:	89a3      	ldrh	r3, [r4, #12]
 80071a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80071a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071aa:	81a3      	strh	r3, [r4, #12]
 80071ac:	6126      	str	r6, [r4, #16]
 80071ae:	443e      	add	r6, r7
 80071b0:	6026      	str	r6, [r4, #0]
 80071b2:	464e      	mov	r6, r9
 80071b4:	6165      	str	r5, [r4, #20]
 80071b6:	1bed      	subs	r5, r5, r7
 80071b8:	60a5      	str	r5, [r4, #8]
 80071ba:	454e      	cmp	r6, r9
 80071bc:	d900      	bls.n	80071c0 <__ssputs_r+0x84>
 80071be:	464e      	mov	r6, r9
 80071c0:	4632      	mov	r2, r6
 80071c2:	4641      	mov	r1, r8
 80071c4:	6820      	ldr	r0, [r4, #0]
 80071c6:	f000 fb4b 	bl	8007860 <memmove>
 80071ca:	68a3      	ldr	r3, [r4, #8]
 80071cc:	2000      	movs	r0, #0
 80071ce:	1b9b      	subs	r3, r3, r6
 80071d0:	60a3      	str	r3, [r4, #8]
 80071d2:	6823      	ldr	r3, [r4, #0]
 80071d4:	441e      	add	r6, r3
 80071d6:	6026      	str	r6, [r4, #0]
 80071d8:	e7dc      	b.n	8007194 <__ssputs_r+0x58>
 80071da:	462a      	mov	r2, r5
 80071dc:	f000 fb5b 	bl	8007896 <_realloc_r>
 80071e0:	4606      	mov	r6, r0
 80071e2:	2800      	cmp	r0, #0
 80071e4:	d1e2      	bne.n	80071ac <__ssputs_r+0x70>
 80071e6:	6921      	ldr	r1, [r4, #16]
 80071e8:	4650      	mov	r0, sl
 80071ea:	f7ff ff01 	bl	8006ff0 <_free_r>
 80071ee:	e7c8      	b.n	8007182 <__ssputs_r+0x46>

080071f0 <_svfiprintf_r>:
 80071f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071f4:	461d      	mov	r5, r3
 80071f6:	898b      	ldrh	r3, [r1, #12]
 80071f8:	b09d      	sub	sp, #116	; 0x74
 80071fa:	061f      	lsls	r7, r3, #24
 80071fc:	4680      	mov	r8, r0
 80071fe:	460c      	mov	r4, r1
 8007200:	4616      	mov	r6, r2
 8007202:	d50f      	bpl.n	8007224 <_svfiprintf_r+0x34>
 8007204:	690b      	ldr	r3, [r1, #16]
 8007206:	b96b      	cbnz	r3, 8007224 <_svfiprintf_r+0x34>
 8007208:	2140      	movs	r1, #64	; 0x40
 800720a:	f7ff ff3d 	bl	8007088 <_malloc_r>
 800720e:	6020      	str	r0, [r4, #0]
 8007210:	6120      	str	r0, [r4, #16]
 8007212:	b928      	cbnz	r0, 8007220 <_svfiprintf_r+0x30>
 8007214:	230c      	movs	r3, #12
 8007216:	f8c8 3000 	str.w	r3, [r8]
 800721a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800721e:	e0c8      	b.n	80073b2 <_svfiprintf_r+0x1c2>
 8007220:	2340      	movs	r3, #64	; 0x40
 8007222:	6163      	str	r3, [r4, #20]
 8007224:	2300      	movs	r3, #0
 8007226:	9309      	str	r3, [sp, #36]	; 0x24
 8007228:	2320      	movs	r3, #32
 800722a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800722e:	2330      	movs	r3, #48	; 0x30
 8007230:	f04f 0b01 	mov.w	fp, #1
 8007234:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007238:	9503      	str	r5, [sp, #12]
 800723a:	4637      	mov	r7, r6
 800723c:	463d      	mov	r5, r7
 800723e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007242:	b10b      	cbz	r3, 8007248 <_svfiprintf_r+0x58>
 8007244:	2b25      	cmp	r3, #37	; 0x25
 8007246:	d13e      	bne.n	80072c6 <_svfiprintf_r+0xd6>
 8007248:	ebb7 0a06 	subs.w	sl, r7, r6
 800724c:	d00b      	beq.n	8007266 <_svfiprintf_r+0x76>
 800724e:	4653      	mov	r3, sl
 8007250:	4632      	mov	r2, r6
 8007252:	4621      	mov	r1, r4
 8007254:	4640      	mov	r0, r8
 8007256:	f7ff ff71 	bl	800713c <__ssputs_r>
 800725a:	3001      	adds	r0, #1
 800725c:	f000 80a4 	beq.w	80073a8 <_svfiprintf_r+0x1b8>
 8007260:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007262:	4453      	add	r3, sl
 8007264:	9309      	str	r3, [sp, #36]	; 0x24
 8007266:	783b      	ldrb	r3, [r7, #0]
 8007268:	2b00      	cmp	r3, #0
 800726a:	f000 809d 	beq.w	80073a8 <_svfiprintf_r+0x1b8>
 800726e:	2300      	movs	r3, #0
 8007270:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007274:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007278:	9304      	str	r3, [sp, #16]
 800727a:	9307      	str	r3, [sp, #28]
 800727c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007280:	931a      	str	r3, [sp, #104]	; 0x68
 8007282:	462f      	mov	r7, r5
 8007284:	2205      	movs	r2, #5
 8007286:	f817 1b01 	ldrb.w	r1, [r7], #1
 800728a:	4850      	ldr	r0, [pc, #320]	; (80073cc <_svfiprintf_r+0x1dc>)
 800728c:	f000 fada 	bl	8007844 <memchr>
 8007290:	9b04      	ldr	r3, [sp, #16]
 8007292:	b9d0      	cbnz	r0, 80072ca <_svfiprintf_r+0xda>
 8007294:	06d9      	lsls	r1, r3, #27
 8007296:	bf44      	itt	mi
 8007298:	2220      	movmi	r2, #32
 800729a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800729e:	071a      	lsls	r2, r3, #28
 80072a0:	bf44      	itt	mi
 80072a2:	222b      	movmi	r2, #43	; 0x2b
 80072a4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80072a8:	782a      	ldrb	r2, [r5, #0]
 80072aa:	2a2a      	cmp	r2, #42	; 0x2a
 80072ac:	d015      	beq.n	80072da <_svfiprintf_r+0xea>
 80072ae:	462f      	mov	r7, r5
 80072b0:	2000      	movs	r0, #0
 80072b2:	250a      	movs	r5, #10
 80072b4:	9a07      	ldr	r2, [sp, #28]
 80072b6:	4639      	mov	r1, r7
 80072b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072bc:	3b30      	subs	r3, #48	; 0x30
 80072be:	2b09      	cmp	r3, #9
 80072c0:	d94d      	bls.n	800735e <_svfiprintf_r+0x16e>
 80072c2:	b1b8      	cbz	r0, 80072f4 <_svfiprintf_r+0x104>
 80072c4:	e00f      	b.n	80072e6 <_svfiprintf_r+0xf6>
 80072c6:	462f      	mov	r7, r5
 80072c8:	e7b8      	b.n	800723c <_svfiprintf_r+0x4c>
 80072ca:	4a40      	ldr	r2, [pc, #256]	; (80073cc <_svfiprintf_r+0x1dc>)
 80072cc:	463d      	mov	r5, r7
 80072ce:	1a80      	subs	r0, r0, r2
 80072d0:	fa0b f000 	lsl.w	r0, fp, r0
 80072d4:	4318      	orrs	r0, r3
 80072d6:	9004      	str	r0, [sp, #16]
 80072d8:	e7d3      	b.n	8007282 <_svfiprintf_r+0x92>
 80072da:	9a03      	ldr	r2, [sp, #12]
 80072dc:	1d11      	adds	r1, r2, #4
 80072de:	6812      	ldr	r2, [r2, #0]
 80072e0:	9103      	str	r1, [sp, #12]
 80072e2:	2a00      	cmp	r2, #0
 80072e4:	db01      	blt.n	80072ea <_svfiprintf_r+0xfa>
 80072e6:	9207      	str	r2, [sp, #28]
 80072e8:	e004      	b.n	80072f4 <_svfiprintf_r+0x104>
 80072ea:	4252      	negs	r2, r2
 80072ec:	f043 0302 	orr.w	r3, r3, #2
 80072f0:	9207      	str	r2, [sp, #28]
 80072f2:	9304      	str	r3, [sp, #16]
 80072f4:	783b      	ldrb	r3, [r7, #0]
 80072f6:	2b2e      	cmp	r3, #46	; 0x2e
 80072f8:	d10c      	bne.n	8007314 <_svfiprintf_r+0x124>
 80072fa:	787b      	ldrb	r3, [r7, #1]
 80072fc:	2b2a      	cmp	r3, #42	; 0x2a
 80072fe:	d133      	bne.n	8007368 <_svfiprintf_r+0x178>
 8007300:	9b03      	ldr	r3, [sp, #12]
 8007302:	3702      	adds	r7, #2
 8007304:	1d1a      	adds	r2, r3, #4
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	9203      	str	r2, [sp, #12]
 800730a:	2b00      	cmp	r3, #0
 800730c:	bfb8      	it	lt
 800730e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007312:	9305      	str	r3, [sp, #20]
 8007314:	4d2e      	ldr	r5, [pc, #184]	; (80073d0 <_svfiprintf_r+0x1e0>)
 8007316:	2203      	movs	r2, #3
 8007318:	7839      	ldrb	r1, [r7, #0]
 800731a:	4628      	mov	r0, r5
 800731c:	f000 fa92 	bl	8007844 <memchr>
 8007320:	b138      	cbz	r0, 8007332 <_svfiprintf_r+0x142>
 8007322:	2340      	movs	r3, #64	; 0x40
 8007324:	1b40      	subs	r0, r0, r5
 8007326:	fa03 f000 	lsl.w	r0, r3, r0
 800732a:	9b04      	ldr	r3, [sp, #16]
 800732c:	3701      	adds	r7, #1
 800732e:	4303      	orrs	r3, r0
 8007330:	9304      	str	r3, [sp, #16]
 8007332:	7839      	ldrb	r1, [r7, #0]
 8007334:	2206      	movs	r2, #6
 8007336:	4827      	ldr	r0, [pc, #156]	; (80073d4 <_svfiprintf_r+0x1e4>)
 8007338:	1c7e      	adds	r6, r7, #1
 800733a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800733e:	f000 fa81 	bl	8007844 <memchr>
 8007342:	2800      	cmp	r0, #0
 8007344:	d038      	beq.n	80073b8 <_svfiprintf_r+0x1c8>
 8007346:	4b24      	ldr	r3, [pc, #144]	; (80073d8 <_svfiprintf_r+0x1e8>)
 8007348:	bb13      	cbnz	r3, 8007390 <_svfiprintf_r+0x1a0>
 800734a:	9b03      	ldr	r3, [sp, #12]
 800734c:	3307      	adds	r3, #7
 800734e:	f023 0307 	bic.w	r3, r3, #7
 8007352:	3308      	adds	r3, #8
 8007354:	9303      	str	r3, [sp, #12]
 8007356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007358:	444b      	add	r3, r9
 800735a:	9309      	str	r3, [sp, #36]	; 0x24
 800735c:	e76d      	b.n	800723a <_svfiprintf_r+0x4a>
 800735e:	fb05 3202 	mla	r2, r5, r2, r3
 8007362:	2001      	movs	r0, #1
 8007364:	460f      	mov	r7, r1
 8007366:	e7a6      	b.n	80072b6 <_svfiprintf_r+0xc6>
 8007368:	2300      	movs	r3, #0
 800736a:	250a      	movs	r5, #10
 800736c:	4619      	mov	r1, r3
 800736e:	3701      	adds	r7, #1
 8007370:	9305      	str	r3, [sp, #20]
 8007372:	4638      	mov	r0, r7
 8007374:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007378:	3a30      	subs	r2, #48	; 0x30
 800737a:	2a09      	cmp	r2, #9
 800737c:	d903      	bls.n	8007386 <_svfiprintf_r+0x196>
 800737e:	2b00      	cmp	r3, #0
 8007380:	d0c8      	beq.n	8007314 <_svfiprintf_r+0x124>
 8007382:	9105      	str	r1, [sp, #20]
 8007384:	e7c6      	b.n	8007314 <_svfiprintf_r+0x124>
 8007386:	fb05 2101 	mla	r1, r5, r1, r2
 800738a:	2301      	movs	r3, #1
 800738c:	4607      	mov	r7, r0
 800738e:	e7f0      	b.n	8007372 <_svfiprintf_r+0x182>
 8007390:	ab03      	add	r3, sp, #12
 8007392:	9300      	str	r3, [sp, #0]
 8007394:	4622      	mov	r2, r4
 8007396:	4b11      	ldr	r3, [pc, #68]	; (80073dc <_svfiprintf_r+0x1ec>)
 8007398:	a904      	add	r1, sp, #16
 800739a:	4640      	mov	r0, r8
 800739c:	f3af 8000 	nop.w
 80073a0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80073a4:	4681      	mov	r9, r0
 80073a6:	d1d6      	bne.n	8007356 <_svfiprintf_r+0x166>
 80073a8:	89a3      	ldrh	r3, [r4, #12]
 80073aa:	065b      	lsls	r3, r3, #25
 80073ac:	f53f af35 	bmi.w	800721a <_svfiprintf_r+0x2a>
 80073b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073b2:	b01d      	add	sp, #116	; 0x74
 80073b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073b8:	ab03      	add	r3, sp, #12
 80073ba:	9300      	str	r3, [sp, #0]
 80073bc:	4622      	mov	r2, r4
 80073be:	4b07      	ldr	r3, [pc, #28]	; (80073dc <_svfiprintf_r+0x1ec>)
 80073c0:	a904      	add	r1, sp, #16
 80073c2:	4640      	mov	r0, r8
 80073c4:	f000 f882 	bl	80074cc <_printf_i>
 80073c8:	e7ea      	b.n	80073a0 <_svfiprintf_r+0x1b0>
 80073ca:	bf00      	nop
 80073cc:	08007c6c 	.word	0x08007c6c
 80073d0:	08007c72 	.word	0x08007c72
 80073d4:	08007c76 	.word	0x08007c76
 80073d8:	00000000 	.word	0x00000000
 80073dc:	0800713d 	.word	0x0800713d

080073e0 <_printf_common>:
 80073e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073e4:	4691      	mov	r9, r2
 80073e6:	461f      	mov	r7, r3
 80073e8:	688a      	ldr	r2, [r1, #8]
 80073ea:	690b      	ldr	r3, [r1, #16]
 80073ec:	4606      	mov	r6, r0
 80073ee:	4293      	cmp	r3, r2
 80073f0:	bfb8      	it	lt
 80073f2:	4613      	movlt	r3, r2
 80073f4:	f8c9 3000 	str.w	r3, [r9]
 80073f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80073fc:	460c      	mov	r4, r1
 80073fe:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007402:	b112      	cbz	r2, 800740a <_printf_common+0x2a>
 8007404:	3301      	adds	r3, #1
 8007406:	f8c9 3000 	str.w	r3, [r9]
 800740a:	6823      	ldr	r3, [r4, #0]
 800740c:	0699      	lsls	r1, r3, #26
 800740e:	bf42      	ittt	mi
 8007410:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007414:	3302      	addmi	r3, #2
 8007416:	f8c9 3000 	strmi.w	r3, [r9]
 800741a:	6825      	ldr	r5, [r4, #0]
 800741c:	f015 0506 	ands.w	r5, r5, #6
 8007420:	d107      	bne.n	8007432 <_printf_common+0x52>
 8007422:	f104 0a19 	add.w	sl, r4, #25
 8007426:	68e3      	ldr	r3, [r4, #12]
 8007428:	f8d9 2000 	ldr.w	r2, [r9]
 800742c:	1a9b      	subs	r3, r3, r2
 800742e:	42ab      	cmp	r3, r5
 8007430:	dc29      	bgt.n	8007486 <_printf_common+0xa6>
 8007432:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007436:	6822      	ldr	r2, [r4, #0]
 8007438:	3300      	adds	r3, #0
 800743a:	bf18      	it	ne
 800743c:	2301      	movne	r3, #1
 800743e:	0692      	lsls	r2, r2, #26
 8007440:	d42e      	bmi.n	80074a0 <_printf_common+0xc0>
 8007442:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007446:	4639      	mov	r1, r7
 8007448:	4630      	mov	r0, r6
 800744a:	47c0      	blx	r8
 800744c:	3001      	adds	r0, #1
 800744e:	d021      	beq.n	8007494 <_printf_common+0xb4>
 8007450:	6823      	ldr	r3, [r4, #0]
 8007452:	68e5      	ldr	r5, [r4, #12]
 8007454:	f003 0306 	and.w	r3, r3, #6
 8007458:	2b04      	cmp	r3, #4
 800745a:	bf18      	it	ne
 800745c:	2500      	movne	r5, #0
 800745e:	f8d9 2000 	ldr.w	r2, [r9]
 8007462:	f04f 0900 	mov.w	r9, #0
 8007466:	bf08      	it	eq
 8007468:	1aad      	subeq	r5, r5, r2
 800746a:	68a3      	ldr	r3, [r4, #8]
 800746c:	6922      	ldr	r2, [r4, #16]
 800746e:	bf08      	it	eq
 8007470:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007474:	4293      	cmp	r3, r2
 8007476:	bfc4      	itt	gt
 8007478:	1a9b      	subgt	r3, r3, r2
 800747a:	18ed      	addgt	r5, r5, r3
 800747c:	341a      	adds	r4, #26
 800747e:	454d      	cmp	r5, r9
 8007480:	d11a      	bne.n	80074b8 <_printf_common+0xd8>
 8007482:	2000      	movs	r0, #0
 8007484:	e008      	b.n	8007498 <_printf_common+0xb8>
 8007486:	2301      	movs	r3, #1
 8007488:	4652      	mov	r2, sl
 800748a:	4639      	mov	r1, r7
 800748c:	4630      	mov	r0, r6
 800748e:	47c0      	blx	r8
 8007490:	3001      	adds	r0, #1
 8007492:	d103      	bne.n	800749c <_printf_common+0xbc>
 8007494:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800749c:	3501      	adds	r5, #1
 800749e:	e7c2      	b.n	8007426 <_printf_common+0x46>
 80074a0:	2030      	movs	r0, #48	; 0x30
 80074a2:	18e1      	adds	r1, r4, r3
 80074a4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80074a8:	1c5a      	adds	r2, r3, #1
 80074aa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80074ae:	4422      	add	r2, r4
 80074b0:	3302      	adds	r3, #2
 80074b2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80074b6:	e7c4      	b.n	8007442 <_printf_common+0x62>
 80074b8:	2301      	movs	r3, #1
 80074ba:	4622      	mov	r2, r4
 80074bc:	4639      	mov	r1, r7
 80074be:	4630      	mov	r0, r6
 80074c0:	47c0      	blx	r8
 80074c2:	3001      	adds	r0, #1
 80074c4:	d0e6      	beq.n	8007494 <_printf_common+0xb4>
 80074c6:	f109 0901 	add.w	r9, r9, #1
 80074ca:	e7d8      	b.n	800747e <_printf_common+0x9e>

080074cc <_printf_i>:
 80074cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80074d0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80074d4:	460c      	mov	r4, r1
 80074d6:	7e09      	ldrb	r1, [r1, #24]
 80074d8:	b085      	sub	sp, #20
 80074da:	296e      	cmp	r1, #110	; 0x6e
 80074dc:	4617      	mov	r7, r2
 80074de:	4606      	mov	r6, r0
 80074e0:	4698      	mov	r8, r3
 80074e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80074e4:	f000 80b3 	beq.w	800764e <_printf_i+0x182>
 80074e8:	d822      	bhi.n	8007530 <_printf_i+0x64>
 80074ea:	2963      	cmp	r1, #99	; 0x63
 80074ec:	d036      	beq.n	800755c <_printf_i+0x90>
 80074ee:	d80a      	bhi.n	8007506 <_printf_i+0x3a>
 80074f0:	2900      	cmp	r1, #0
 80074f2:	f000 80b9 	beq.w	8007668 <_printf_i+0x19c>
 80074f6:	2958      	cmp	r1, #88	; 0x58
 80074f8:	f000 8083 	beq.w	8007602 <_printf_i+0x136>
 80074fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007500:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007504:	e032      	b.n	800756c <_printf_i+0xa0>
 8007506:	2964      	cmp	r1, #100	; 0x64
 8007508:	d001      	beq.n	800750e <_printf_i+0x42>
 800750a:	2969      	cmp	r1, #105	; 0x69
 800750c:	d1f6      	bne.n	80074fc <_printf_i+0x30>
 800750e:	6820      	ldr	r0, [r4, #0]
 8007510:	6813      	ldr	r3, [r2, #0]
 8007512:	0605      	lsls	r5, r0, #24
 8007514:	f103 0104 	add.w	r1, r3, #4
 8007518:	d52a      	bpl.n	8007570 <_printf_i+0xa4>
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	6011      	str	r1, [r2, #0]
 800751e:	2b00      	cmp	r3, #0
 8007520:	da03      	bge.n	800752a <_printf_i+0x5e>
 8007522:	222d      	movs	r2, #45	; 0x2d
 8007524:	425b      	negs	r3, r3
 8007526:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800752a:	486f      	ldr	r0, [pc, #444]	; (80076e8 <_printf_i+0x21c>)
 800752c:	220a      	movs	r2, #10
 800752e:	e039      	b.n	80075a4 <_printf_i+0xd8>
 8007530:	2973      	cmp	r1, #115	; 0x73
 8007532:	f000 809d 	beq.w	8007670 <_printf_i+0x1a4>
 8007536:	d808      	bhi.n	800754a <_printf_i+0x7e>
 8007538:	296f      	cmp	r1, #111	; 0x6f
 800753a:	d020      	beq.n	800757e <_printf_i+0xb2>
 800753c:	2970      	cmp	r1, #112	; 0x70
 800753e:	d1dd      	bne.n	80074fc <_printf_i+0x30>
 8007540:	6823      	ldr	r3, [r4, #0]
 8007542:	f043 0320 	orr.w	r3, r3, #32
 8007546:	6023      	str	r3, [r4, #0]
 8007548:	e003      	b.n	8007552 <_printf_i+0x86>
 800754a:	2975      	cmp	r1, #117	; 0x75
 800754c:	d017      	beq.n	800757e <_printf_i+0xb2>
 800754e:	2978      	cmp	r1, #120	; 0x78
 8007550:	d1d4      	bne.n	80074fc <_printf_i+0x30>
 8007552:	2378      	movs	r3, #120	; 0x78
 8007554:	4865      	ldr	r0, [pc, #404]	; (80076ec <_printf_i+0x220>)
 8007556:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800755a:	e055      	b.n	8007608 <_printf_i+0x13c>
 800755c:	6813      	ldr	r3, [r2, #0]
 800755e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007562:	1d19      	adds	r1, r3, #4
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	6011      	str	r1, [r2, #0]
 8007568:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800756c:	2301      	movs	r3, #1
 800756e:	e08c      	b.n	800768a <_printf_i+0x1be>
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007576:	6011      	str	r1, [r2, #0]
 8007578:	bf18      	it	ne
 800757a:	b21b      	sxthne	r3, r3
 800757c:	e7cf      	b.n	800751e <_printf_i+0x52>
 800757e:	6813      	ldr	r3, [r2, #0]
 8007580:	6825      	ldr	r5, [r4, #0]
 8007582:	1d18      	adds	r0, r3, #4
 8007584:	6010      	str	r0, [r2, #0]
 8007586:	0628      	lsls	r0, r5, #24
 8007588:	d501      	bpl.n	800758e <_printf_i+0xc2>
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	e002      	b.n	8007594 <_printf_i+0xc8>
 800758e:	0668      	lsls	r0, r5, #25
 8007590:	d5fb      	bpl.n	800758a <_printf_i+0xbe>
 8007592:	881b      	ldrh	r3, [r3, #0]
 8007594:	296f      	cmp	r1, #111	; 0x6f
 8007596:	bf14      	ite	ne
 8007598:	220a      	movne	r2, #10
 800759a:	2208      	moveq	r2, #8
 800759c:	4852      	ldr	r0, [pc, #328]	; (80076e8 <_printf_i+0x21c>)
 800759e:	2100      	movs	r1, #0
 80075a0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80075a4:	6865      	ldr	r5, [r4, #4]
 80075a6:	2d00      	cmp	r5, #0
 80075a8:	60a5      	str	r5, [r4, #8]
 80075aa:	f2c0 8095 	blt.w	80076d8 <_printf_i+0x20c>
 80075ae:	6821      	ldr	r1, [r4, #0]
 80075b0:	f021 0104 	bic.w	r1, r1, #4
 80075b4:	6021      	str	r1, [r4, #0]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d13d      	bne.n	8007636 <_printf_i+0x16a>
 80075ba:	2d00      	cmp	r5, #0
 80075bc:	f040 808e 	bne.w	80076dc <_printf_i+0x210>
 80075c0:	4665      	mov	r5, ip
 80075c2:	2a08      	cmp	r2, #8
 80075c4:	d10b      	bne.n	80075de <_printf_i+0x112>
 80075c6:	6823      	ldr	r3, [r4, #0]
 80075c8:	07db      	lsls	r3, r3, #31
 80075ca:	d508      	bpl.n	80075de <_printf_i+0x112>
 80075cc:	6923      	ldr	r3, [r4, #16]
 80075ce:	6862      	ldr	r2, [r4, #4]
 80075d0:	429a      	cmp	r2, r3
 80075d2:	bfde      	ittt	le
 80075d4:	2330      	movle	r3, #48	; 0x30
 80075d6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80075da:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80075de:	ebac 0305 	sub.w	r3, ip, r5
 80075e2:	6123      	str	r3, [r4, #16]
 80075e4:	f8cd 8000 	str.w	r8, [sp]
 80075e8:	463b      	mov	r3, r7
 80075ea:	aa03      	add	r2, sp, #12
 80075ec:	4621      	mov	r1, r4
 80075ee:	4630      	mov	r0, r6
 80075f0:	f7ff fef6 	bl	80073e0 <_printf_common>
 80075f4:	3001      	adds	r0, #1
 80075f6:	d14d      	bne.n	8007694 <_printf_i+0x1c8>
 80075f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80075fc:	b005      	add	sp, #20
 80075fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007602:	4839      	ldr	r0, [pc, #228]	; (80076e8 <_printf_i+0x21c>)
 8007604:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007608:	6813      	ldr	r3, [r2, #0]
 800760a:	6821      	ldr	r1, [r4, #0]
 800760c:	1d1d      	adds	r5, r3, #4
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	6015      	str	r5, [r2, #0]
 8007612:	060a      	lsls	r2, r1, #24
 8007614:	d50b      	bpl.n	800762e <_printf_i+0x162>
 8007616:	07ca      	lsls	r2, r1, #31
 8007618:	bf44      	itt	mi
 800761a:	f041 0120 	orrmi.w	r1, r1, #32
 800761e:	6021      	strmi	r1, [r4, #0]
 8007620:	b91b      	cbnz	r3, 800762a <_printf_i+0x15e>
 8007622:	6822      	ldr	r2, [r4, #0]
 8007624:	f022 0220 	bic.w	r2, r2, #32
 8007628:	6022      	str	r2, [r4, #0]
 800762a:	2210      	movs	r2, #16
 800762c:	e7b7      	b.n	800759e <_printf_i+0xd2>
 800762e:	064d      	lsls	r5, r1, #25
 8007630:	bf48      	it	mi
 8007632:	b29b      	uxthmi	r3, r3
 8007634:	e7ef      	b.n	8007616 <_printf_i+0x14a>
 8007636:	4665      	mov	r5, ip
 8007638:	fbb3 f1f2 	udiv	r1, r3, r2
 800763c:	fb02 3311 	mls	r3, r2, r1, r3
 8007640:	5cc3      	ldrb	r3, [r0, r3]
 8007642:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007646:	460b      	mov	r3, r1
 8007648:	2900      	cmp	r1, #0
 800764a:	d1f5      	bne.n	8007638 <_printf_i+0x16c>
 800764c:	e7b9      	b.n	80075c2 <_printf_i+0xf6>
 800764e:	6813      	ldr	r3, [r2, #0]
 8007650:	6825      	ldr	r5, [r4, #0]
 8007652:	1d18      	adds	r0, r3, #4
 8007654:	6961      	ldr	r1, [r4, #20]
 8007656:	6010      	str	r0, [r2, #0]
 8007658:	0628      	lsls	r0, r5, #24
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	d501      	bpl.n	8007662 <_printf_i+0x196>
 800765e:	6019      	str	r1, [r3, #0]
 8007660:	e002      	b.n	8007668 <_printf_i+0x19c>
 8007662:	066a      	lsls	r2, r5, #25
 8007664:	d5fb      	bpl.n	800765e <_printf_i+0x192>
 8007666:	8019      	strh	r1, [r3, #0]
 8007668:	2300      	movs	r3, #0
 800766a:	4665      	mov	r5, ip
 800766c:	6123      	str	r3, [r4, #16]
 800766e:	e7b9      	b.n	80075e4 <_printf_i+0x118>
 8007670:	6813      	ldr	r3, [r2, #0]
 8007672:	1d19      	adds	r1, r3, #4
 8007674:	6011      	str	r1, [r2, #0]
 8007676:	681d      	ldr	r5, [r3, #0]
 8007678:	6862      	ldr	r2, [r4, #4]
 800767a:	2100      	movs	r1, #0
 800767c:	4628      	mov	r0, r5
 800767e:	f000 f8e1 	bl	8007844 <memchr>
 8007682:	b108      	cbz	r0, 8007688 <_printf_i+0x1bc>
 8007684:	1b40      	subs	r0, r0, r5
 8007686:	6060      	str	r0, [r4, #4]
 8007688:	6863      	ldr	r3, [r4, #4]
 800768a:	6123      	str	r3, [r4, #16]
 800768c:	2300      	movs	r3, #0
 800768e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007692:	e7a7      	b.n	80075e4 <_printf_i+0x118>
 8007694:	6923      	ldr	r3, [r4, #16]
 8007696:	462a      	mov	r2, r5
 8007698:	4639      	mov	r1, r7
 800769a:	4630      	mov	r0, r6
 800769c:	47c0      	blx	r8
 800769e:	3001      	adds	r0, #1
 80076a0:	d0aa      	beq.n	80075f8 <_printf_i+0x12c>
 80076a2:	6823      	ldr	r3, [r4, #0]
 80076a4:	079b      	lsls	r3, r3, #30
 80076a6:	d413      	bmi.n	80076d0 <_printf_i+0x204>
 80076a8:	68e0      	ldr	r0, [r4, #12]
 80076aa:	9b03      	ldr	r3, [sp, #12]
 80076ac:	4298      	cmp	r0, r3
 80076ae:	bfb8      	it	lt
 80076b0:	4618      	movlt	r0, r3
 80076b2:	e7a3      	b.n	80075fc <_printf_i+0x130>
 80076b4:	2301      	movs	r3, #1
 80076b6:	464a      	mov	r2, r9
 80076b8:	4639      	mov	r1, r7
 80076ba:	4630      	mov	r0, r6
 80076bc:	47c0      	blx	r8
 80076be:	3001      	adds	r0, #1
 80076c0:	d09a      	beq.n	80075f8 <_printf_i+0x12c>
 80076c2:	3501      	adds	r5, #1
 80076c4:	68e3      	ldr	r3, [r4, #12]
 80076c6:	9a03      	ldr	r2, [sp, #12]
 80076c8:	1a9b      	subs	r3, r3, r2
 80076ca:	42ab      	cmp	r3, r5
 80076cc:	dcf2      	bgt.n	80076b4 <_printf_i+0x1e8>
 80076ce:	e7eb      	b.n	80076a8 <_printf_i+0x1dc>
 80076d0:	2500      	movs	r5, #0
 80076d2:	f104 0919 	add.w	r9, r4, #25
 80076d6:	e7f5      	b.n	80076c4 <_printf_i+0x1f8>
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d1ac      	bne.n	8007636 <_printf_i+0x16a>
 80076dc:	7803      	ldrb	r3, [r0, #0]
 80076de:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80076e2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80076e6:	e76c      	b.n	80075c2 <_printf_i+0xf6>
 80076e8:	08007c7d 	.word	0x08007c7d
 80076ec:	08007c8e 	.word	0x08007c8e

080076f0 <_sbrk_r>:
 80076f0:	b538      	push	{r3, r4, r5, lr}
 80076f2:	2300      	movs	r3, #0
 80076f4:	4c05      	ldr	r4, [pc, #20]	; (800770c <_sbrk_r+0x1c>)
 80076f6:	4605      	mov	r5, r0
 80076f8:	4608      	mov	r0, r1
 80076fa:	6023      	str	r3, [r4, #0]
 80076fc:	f7f9 fb54 	bl	8000da8 <_sbrk>
 8007700:	1c43      	adds	r3, r0, #1
 8007702:	d102      	bne.n	800770a <_sbrk_r+0x1a>
 8007704:	6823      	ldr	r3, [r4, #0]
 8007706:	b103      	cbz	r3, 800770a <_sbrk_r+0x1a>
 8007708:	602b      	str	r3, [r5, #0]
 800770a:	bd38      	pop	{r3, r4, r5, pc}
 800770c:	20001db0 	.word	0x20001db0

08007710 <__sread>:
 8007710:	b510      	push	{r4, lr}
 8007712:	460c      	mov	r4, r1
 8007714:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007718:	f000 f8e4 	bl	80078e4 <_read_r>
 800771c:	2800      	cmp	r0, #0
 800771e:	bfab      	itete	ge
 8007720:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007722:	89a3      	ldrhlt	r3, [r4, #12]
 8007724:	181b      	addge	r3, r3, r0
 8007726:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800772a:	bfac      	ite	ge
 800772c:	6563      	strge	r3, [r4, #84]	; 0x54
 800772e:	81a3      	strhlt	r3, [r4, #12]
 8007730:	bd10      	pop	{r4, pc}

08007732 <__swrite>:
 8007732:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007736:	461f      	mov	r7, r3
 8007738:	898b      	ldrh	r3, [r1, #12]
 800773a:	4605      	mov	r5, r0
 800773c:	05db      	lsls	r3, r3, #23
 800773e:	460c      	mov	r4, r1
 8007740:	4616      	mov	r6, r2
 8007742:	d505      	bpl.n	8007750 <__swrite+0x1e>
 8007744:	2302      	movs	r3, #2
 8007746:	2200      	movs	r2, #0
 8007748:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800774c:	f000 f868 	bl	8007820 <_lseek_r>
 8007750:	89a3      	ldrh	r3, [r4, #12]
 8007752:	4632      	mov	r2, r6
 8007754:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007758:	81a3      	strh	r3, [r4, #12]
 800775a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800775e:	463b      	mov	r3, r7
 8007760:	4628      	mov	r0, r5
 8007762:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007766:	f000 b817 	b.w	8007798 <_write_r>

0800776a <__sseek>:
 800776a:	b510      	push	{r4, lr}
 800776c:	460c      	mov	r4, r1
 800776e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007772:	f000 f855 	bl	8007820 <_lseek_r>
 8007776:	1c43      	adds	r3, r0, #1
 8007778:	89a3      	ldrh	r3, [r4, #12]
 800777a:	bf15      	itete	ne
 800777c:	6560      	strne	r0, [r4, #84]	; 0x54
 800777e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007782:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007786:	81a3      	strheq	r3, [r4, #12]
 8007788:	bf18      	it	ne
 800778a:	81a3      	strhne	r3, [r4, #12]
 800778c:	bd10      	pop	{r4, pc}

0800778e <__sclose>:
 800778e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007792:	f000 b813 	b.w	80077bc <_close_r>
	...

08007798 <_write_r>:
 8007798:	b538      	push	{r3, r4, r5, lr}
 800779a:	4605      	mov	r5, r0
 800779c:	4608      	mov	r0, r1
 800779e:	4611      	mov	r1, r2
 80077a0:	2200      	movs	r2, #0
 80077a2:	4c05      	ldr	r4, [pc, #20]	; (80077b8 <_write_r+0x20>)
 80077a4:	6022      	str	r2, [r4, #0]
 80077a6:	461a      	mov	r2, r3
 80077a8:	f7f9 f990 	bl	8000acc <_write>
 80077ac:	1c43      	adds	r3, r0, #1
 80077ae:	d102      	bne.n	80077b6 <_write_r+0x1e>
 80077b0:	6823      	ldr	r3, [r4, #0]
 80077b2:	b103      	cbz	r3, 80077b6 <_write_r+0x1e>
 80077b4:	602b      	str	r3, [r5, #0]
 80077b6:	bd38      	pop	{r3, r4, r5, pc}
 80077b8:	20001db0 	.word	0x20001db0

080077bc <_close_r>:
 80077bc:	b538      	push	{r3, r4, r5, lr}
 80077be:	2300      	movs	r3, #0
 80077c0:	4c05      	ldr	r4, [pc, #20]	; (80077d8 <_close_r+0x1c>)
 80077c2:	4605      	mov	r5, r0
 80077c4:	4608      	mov	r0, r1
 80077c6:	6023      	str	r3, [r4, #0]
 80077c8:	f7f9 fabd 	bl	8000d46 <_close>
 80077cc:	1c43      	adds	r3, r0, #1
 80077ce:	d102      	bne.n	80077d6 <_close_r+0x1a>
 80077d0:	6823      	ldr	r3, [r4, #0]
 80077d2:	b103      	cbz	r3, 80077d6 <_close_r+0x1a>
 80077d4:	602b      	str	r3, [r5, #0]
 80077d6:	bd38      	pop	{r3, r4, r5, pc}
 80077d8:	20001db0 	.word	0x20001db0

080077dc <_fstat_r>:
 80077dc:	b538      	push	{r3, r4, r5, lr}
 80077de:	2300      	movs	r3, #0
 80077e0:	4c06      	ldr	r4, [pc, #24]	; (80077fc <_fstat_r+0x20>)
 80077e2:	4605      	mov	r5, r0
 80077e4:	4608      	mov	r0, r1
 80077e6:	4611      	mov	r1, r2
 80077e8:	6023      	str	r3, [r4, #0]
 80077ea:	f7f9 fab7 	bl	8000d5c <_fstat>
 80077ee:	1c43      	adds	r3, r0, #1
 80077f0:	d102      	bne.n	80077f8 <_fstat_r+0x1c>
 80077f2:	6823      	ldr	r3, [r4, #0]
 80077f4:	b103      	cbz	r3, 80077f8 <_fstat_r+0x1c>
 80077f6:	602b      	str	r3, [r5, #0]
 80077f8:	bd38      	pop	{r3, r4, r5, pc}
 80077fa:	bf00      	nop
 80077fc:	20001db0 	.word	0x20001db0

08007800 <_isatty_r>:
 8007800:	b538      	push	{r3, r4, r5, lr}
 8007802:	2300      	movs	r3, #0
 8007804:	4c05      	ldr	r4, [pc, #20]	; (800781c <_isatty_r+0x1c>)
 8007806:	4605      	mov	r5, r0
 8007808:	4608      	mov	r0, r1
 800780a:	6023      	str	r3, [r4, #0]
 800780c:	f7f9 fab5 	bl	8000d7a <_isatty>
 8007810:	1c43      	adds	r3, r0, #1
 8007812:	d102      	bne.n	800781a <_isatty_r+0x1a>
 8007814:	6823      	ldr	r3, [r4, #0]
 8007816:	b103      	cbz	r3, 800781a <_isatty_r+0x1a>
 8007818:	602b      	str	r3, [r5, #0]
 800781a:	bd38      	pop	{r3, r4, r5, pc}
 800781c:	20001db0 	.word	0x20001db0

08007820 <_lseek_r>:
 8007820:	b538      	push	{r3, r4, r5, lr}
 8007822:	4605      	mov	r5, r0
 8007824:	4608      	mov	r0, r1
 8007826:	4611      	mov	r1, r2
 8007828:	2200      	movs	r2, #0
 800782a:	4c05      	ldr	r4, [pc, #20]	; (8007840 <_lseek_r+0x20>)
 800782c:	6022      	str	r2, [r4, #0]
 800782e:	461a      	mov	r2, r3
 8007830:	f7f9 faad 	bl	8000d8e <_lseek>
 8007834:	1c43      	adds	r3, r0, #1
 8007836:	d102      	bne.n	800783e <_lseek_r+0x1e>
 8007838:	6823      	ldr	r3, [r4, #0]
 800783a:	b103      	cbz	r3, 800783e <_lseek_r+0x1e>
 800783c:	602b      	str	r3, [r5, #0]
 800783e:	bd38      	pop	{r3, r4, r5, pc}
 8007840:	20001db0 	.word	0x20001db0

08007844 <memchr>:
 8007844:	b510      	push	{r4, lr}
 8007846:	b2c9      	uxtb	r1, r1
 8007848:	4402      	add	r2, r0
 800784a:	4290      	cmp	r0, r2
 800784c:	4603      	mov	r3, r0
 800784e:	d101      	bne.n	8007854 <memchr+0x10>
 8007850:	2300      	movs	r3, #0
 8007852:	e003      	b.n	800785c <memchr+0x18>
 8007854:	781c      	ldrb	r4, [r3, #0]
 8007856:	3001      	adds	r0, #1
 8007858:	428c      	cmp	r4, r1
 800785a:	d1f6      	bne.n	800784a <memchr+0x6>
 800785c:	4618      	mov	r0, r3
 800785e:	bd10      	pop	{r4, pc}

08007860 <memmove>:
 8007860:	4288      	cmp	r0, r1
 8007862:	b510      	push	{r4, lr}
 8007864:	eb01 0302 	add.w	r3, r1, r2
 8007868:	d807      	bhi.n	800787a <memmove+0x1a>
 800786a:	1e42      	subs	r2, r0, #1
 800786c:	4299      	cmp	r1, r3
 800786e:	d00a      	beq.n	8007886 <memmove+0x26>
 8007870:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007874:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007878:	e7f8      	b.n	800786c <memmove+0xc>
 800787a:	4283      	cmp	r3, r0
 800787c:	d9f5      	bls.n	800786a <memmove+0xa>
 800787e:	1881      	adds	r1, r0, r2
 8007880:	1ad2      	subs	r2, r2, r3
 8007882:	42d3      	cmn	r3, r2
 8007884:	d100      	bne.n	8007888 <memmove+0x28>
 8007886:	bd10      	pop	{r4, pc}
 8007888:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800788c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007890:	e7f7      	b.n	8007882 <memmove+0x22>

08007892 <__malloc_lock>:
 8007892:	4770      	bx	lr

08007894 <__malloc_unlock>:
 8007894:	4770      	bx	lr

08007896 <_realloc_r>:
 8007896:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007898:	4607      	mov	r7, r0
 800789a:	4614      	mov	r4, r2
 800789c:	460e      	mov	r6, r1
 800789e:	b921      	cbnz	r1, 80078aa <_realloc_r+0x14>
 80078a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80078a4:	4611      	mov	r1, r2
 80078a6:	f7ff bbef 	b.w	8007088 <_malloc_r>
 80078aa:	b922      	cbnz	r2, 80078b6 <_realloc_r+0x20>
 80078ac:	f7ff fba0 	bl	8006ff0 <_free_r>
 80078b0:	4625      	mov	r5, r4
 80078b2:	4628      	mov	r0, r5
 80078b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078b6:	f000 f827 	bl	8007908 <_malloc_usable_size_r>
 80078ba:	42a0      	cmp	r0, r4
 80078bc:	d20f      	bcs.n	80078de <_realloc_r+0x48>
 80078be:	4621      	mov	r1, r4
 80078c0:	4638      	mov	r0, r7
 80078c2:	f7ff fbe1 	bl	8007088 <_malloc_r>
 80078c6:	4605      	mov	r5, r0
 80078c8:	2800      	cmp	r0, #0
 80078ca:	d0f2      	beq.n	80078b2 <_realloc_r+0x1c>
 80078cc:	4631      	mov	r1, r6
 80078ce:	4622      	mov	r2, r4
 80078d0:	f7ff f83e 	bl	8006950 <memcpy>
 80078d4:	4631      	mov	r1, r6
 80078d6:	4638      	mov	r0, r7
 80078d8:	f7ff fb8a 	bl	8006ff0 <_free_r>
 80078dc:	e7e9      	b.n	80078b2 <_realloc_r+0x1c>
 80078de:	4635      	mov	r5, r6
 80078e0:	e7e7      	b.n	80078b2 <_realloc_r+0x1c>
	...

080078e4 <_read_r>:
 80078e4:	b538      	push	{r3, r4, r5, lr}
 80078e6:	4605      	mov	r5, r0
 80078e8:	4608      	mov	r0, r1
 80078ea:	4611      	mov	r1, r2
 80078ec:	2200      	movs	r2, #0
 80078ee:	4c05      	ldr	r4, [pc, #20]	; (8007904 <_read_r+0x20>)
 80078f0:	6022      	str	r2, [r4, #0]
 80078f2:	461a      	mov	r2, r3
 80078f4:	f7f9 fa0a 	bl	8000d0c <_read>
 80078f8:	1c43      	adds	r3, r0, #1
 80078fa:	d102      	bne.n	8007902 <_read_r+0x1e>
 80078fc:	6823      	ldr	r3, [r4, #0]
 80078fe:	b103      	cbz	r3, 8007902 <_read_r+0x1e>
 8007900:	602b      	str	r3, [r5, #0]
 8007902:	bd38      	pop	{r3, r4, r5, pc}
 8007904:	20001db0 	.word	0x20001db0

08007908 <_malloc_usable_size_r>:
 8007908:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800790c:	1f18      	subs	r0, r3, #4
 800790e:	2b00      	cmp	r3, #0
 8007910:	bfbc      	itt	lt
 8007912:	580b      	ldrlt	r3, [r1, r0]
 8007914:	18c0      	addlt	r0, r0, r3
 8007916:	4770      	bx	lr

08007918 <_init>:
 8007918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800791a:	bf00      	nop
 800791c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800791e:	bc08      	pop	{r3}
 8007920:	469e      	mov	lr, r3
 8007922:	4770      	bx	lr

08007924 <_fini>:
 8007924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007926:	bf00      	nop
 8007928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800792a:	bc08      	pop	{r3}
 800792c:	469e      	mov	lr, r3
 800792e:	4770      	bx	lr
